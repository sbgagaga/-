
# 1 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\Display_lcd.c"

# 24 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\TypeDef.h"
typedef struct
{
unsigned char Radix;
unsigned char Integer;
}VolFloat;

typedef union
{
unsigned int Vol;
VolFloat Volf;
}VolType;

typedef union
{
unsigned int bytes;
struct
{
unsigned char bytel;
unsigned char byteh;
}byte;
}twobyte;

# 18 "D:\SCMCU_IDE_V1.11.01_20180525\data\include\SC8P1713C.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FLAGS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;


volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;


volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

volatile unsigned char COMPCON @ 0x018;
volatile unsigned char COMPCON1 @ 0x019;


volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;


volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;

volatile unsigned char PR2 @ 0x092;


volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 78
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;



volatile unsigned char WDTCON @ 0x105;

# 95
volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;
volatile unsigned char KEYCON0 @ 0x113;
volatile unsigned char KEYCON1 @ 0x114;
volatile unsigned char KEYDATAL @ 0x115;
volatile unsigned char KEYDATAH @ 0x116;




volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;



volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

# 124
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;

# 131
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;



volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 396
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;




volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


# 28 "D:\SCMCU_IDE_V1.11.01_20180525\data\include\sc.h"
#pragma inline(_nop)
extern void _nop(void);

# 55
extern unsigned int flash_read(unsigned short addr);


# 128
#pragma inline(_delay)
extern void _delay(unsigned long);

# 30 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\global_variable.h"
unsigned char Display[4];


bit Flag_onoff,
Flag_temprok,
Flag_first,
Flag_hot,
Flag_keyf,
Flag_en,
Flag_mainloop,
Flag_step,
Flag_err,
Flag_bit,
Flag_ntc_onead,
Flag_rt_open,
Flag_rt_short,
Flag_ach,
Flag_zero,
Flag_HV,
Flag_vtemp,
Flag_temprdir;



unsigned char


Keyflash,
Keyc,
Keyold,
Dcount,
Adtimes,
Ntcnormaldely,
Ntcshortdely,
Ntcopendely,
Kkg_dly,
Maintime;


unsigned int Tempr_setdata,
Keyc1,
count1,
Admax,
Admin,
Adsum,
Adresult,
Pid_count,
Tempr_tdata,
Tempr_rank,
Tmper_temp;

# 85
typedef struct PID_Value
{
unsigned int liEkVal[3];
unsigned char uEkFlag[3];
unsigned char uKP_Coe;
unsigned char uKI_Coe;
unsigned char uKD_Coe;
unsigned int iPriVal;
unsigned int iSetVal;
unsigned int iCurVal;
}PID_ValueStr;


PID_ValueStr PID;

# 105
const unsigned char LCDCode[]=
{
0x3F,
0x06,
0x5B,
0x4F,
0x66,
0x6D,
0x7D,
0x07,
0x7F,
0x6F,
0x77,
0x7C,
0x39,
0x5E,
0x79,
0x71
};

# 129
const unsigned int Temptab[]={
29 ,
30 ,
32 ,
34 ,
35 ,
37 ,
39 ,
41 ,
43 ,
45 ,
47 ,
49 ,
52 ,
54 ,
57 ,
59 ,
62 ,
65 ,
68 ,
71 ,
74 ,
77 ,
81 ,
84 ,
88 ,
91 ,
95 ,
99 ,
103 ,
107 ,
111 ,
115 ,
120 ,
124 ,
129 ,
133 ,
138 ,
143 ,
148 ,
154 ,
159 ,
164 ,
170 ,
176 ,
181 ,
187 ,
193 ,
200 ,
206 ,
212 ,
219 ,
225 ,
232 ,
239 ,
246 ,
253 ,
260 ,
267 ,
274 ,
282 ,
289 ,
296 ,
304 ,
312 ,
319 ,
327 ,
335 ,
343 ,
351 ,
359 ,
367 ,
375 ,
383 ,
391 ,
399 ,
408 ,
416 ,
424 ,
432 ,
440 ,
449 ,
457 ,
465 ,
473 ,
481 ,
490 ,
498 ,
506 ,
514 ,
522 ,
530 ,
538 ,
546 ,
553 ,
561 ,
569 ,
576 ,
584 ,
592 ,
599 ,
606 ,
614 ,
621 ,
628 ,
635 ,
642 ,
649 ,
656 ,
662 ,
669 ,
676 ,
682 ,
688 ,
695 ,
701 ,
707 ,
713 ,
719 ,
725 ,
731 ,
736 ,
742 ,
747 ,
753 ,
758 ,
763 ,
768 ,
773 ,
778 ,
783 ,
788 ,
792 ,
797 ,
802 ,
806 ,
810 ,
815 ,
819 ,
823 ,
827 ,
831 ,
835 ,
838 ,
842 ,
846 ,
849 ,
853 ,
856 ,
860 ,
863 ,
866 ,
869 ,
872 ,
875 ,
878 ,
881 ,
884 ,
887 ,
889 ,
892 ,
895 ,
897 ,
900 ,
902 ,
905 ,
907 ,
909 ,
912 ,
914 ,
916 ,
918 ,
920 ,
922 ,
924 ,
926 ,
928 ,
930 ,
932 ,
933 ,
935 ,
937 ,
938 ,
940 ,
942 ,
943 ,
945 ,
946 ,
948 ,
949 ,
950 ,
952 ,
953 ,
955 ,
956 ,
957 ,
958 ,
960 ,
961 ,
962 ,
963 ,
964 ,
965 ,
966 ,
967 ,
968 ,
969 ,
970 ,
971 ,
972 ,
973 ,
974 ,
975 ,
976 ,
977 ,
977 ,
978 ,
979 ,
980 ,
981 ,
981 ,
982 ,
983 ,
983 ,
984 ,
985 ,
985 ,
986 ,
987 ,
987 ,
988 ,
989 ,
989 ,
990 ,
990 ,
991 ,
991 ,
992


};

# 7 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\AD.h"
unsigned char Ad_sample(unsigned char adch);
void Ad_testing(unsigned char i);
void Check_Ntc();
void source_v(unsigned char i);

# 11 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\Kscan.h"
void Kscan();
void Kdeal();
void Delay(unsigned char k);

# 13 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\main.h"
void PID_operation(void);
void PID_control(void);
void Tmper_pro();
void Temp_setdeal();

# 50 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\Display_lcd.h"
void Set_disp();
void Disp_Lcd();
void disf(unsigned char a);

# 6 "E:\Elec DataSheet\单片机\中微单片机\SC8P171X_开发工具软件及Demo 程序 -- 电压表\ZFQ-Demo-Code -20180105_V1.0-1713s\XLD-DLZFQ-20180105_V1.0源程序\Display_lcd.c"
void Set_disp()
{

unsigned char smg_data1, smg_data2, smg_data3;

Display[0]=0;
Display[1]=0;
Display[2]=0;
Display[3]=0;

smg_data1 = LCDCode[Tempr_rank/100];
smg_data2 = LCDCode[Tempr_rank%100/10];
smg_data3 = LCDCode[Tempr_rank%10];


if(Flag_onoff)
{
if(smg_data1 & 0x01)
Display[3]|=(1<<1);
if(smg_data1 & 0x02)
Display[2]|=(1<<1);
if(smg_data1 & 0x04)
Display[1]|=(1<<1);
if(smg_data1 & 0x08)
Display[0]|=(1<<1);
if(smg_data1 & 0x10)
Display[0]|=(1<<0);
if(smg_data1 & 0x20)
Display[2]|=(1<<0);
if(smg_data1 & 0x40)
Display[1]|=(1<<0);


if(smg_data2 & 0x01)
Display[3]|=(1<<3);
if(smg_data2 & 0x02)
Display[2]|=(1<<3);
if(smg_data2 & 0x04)
Display[1]|=(1<<3);
if(smg_data2 & 0x08)
Display[0]|=(1<<3);
if(smg_data2 & 0x10)
Display[0]|=(1<<2);
if(smg_data2 & 0x20)
Display[2]|=(1<<2);
if(smg_data2 & 0x40)
Display[1]|=(1<<2);


if(smg_data3 & 0x01)
Display[3]|=(1<<5);
if(smg_data3 & 0x02)
Display[2]|=(1<<5);
if(smg_data3 & 0x04)
Display[1]|=(1<<5);
if(smg_data3 & 0x08)
Display[0]|=(1<<5);
if(smg_data3 & 0x10)
Display[0]|=(1<<4);
if(smg_data3 & 0x20)
Display[2]|=(1<<4);
if(smg_data3 & 0x40)
Display[1]|=(1<<4);

Display[3]|=(1<<4);
Display[3]|=(1<<2);

if(smg_data1==0x3f)
{
Display[0]&=0xfc;
Display[1]&=0xfc;
Display[2]&=0xfc;
Display[3]&=0xfd;
}


}
else
{
Display[0]=0X17;
Display[1]=0X16;
Display[2]=0X17;
Display[3]=0X2A;

# 93
}


}

# 108
void Disp_Lcd()
{


LCDCON0=0B10000000;
COMEN=0B00001111;


WPUA=0X00;
TRISA&=0XF1;

TRISC=0XFF;

if(Flag_onoff)
{
RE0=1;
}
else
{
RE0=0;
}

if(Dcount & 0x01)
{
RB7 = 1;
RA1 = 1;
RA2 = 1;
RA3 = 1;
RA4 = 1;
RB6 = 1;

}
else
{
RB7 = 0;
RA1 = 0;
RA2 = 0;
RA3 = 0;
RA4 = 0;
RB6 = 0;
}

switch(Dcount)
{
case 0:

disf(0);


COMEN =0B00001110;
TRISC =0B10011110;
RC0 = 0;
break;
case 1:

disf(0);


COMEN=0B10001110;
TRISC=0B10011110;
RC0 = 1;
break;

case 2:

disf(1);


COMEN=0B00001101;
TRISC=0B10011101;
RC1 = 0;
break;
case 3:

disf(1);

COMEN=0B00001101;
TRISC=0B10011101;
RC1 = 1;
break;

case 4:

disf(2);

COMEN=0B00001011;
TRISC=0B10011011;
RC2 = 0;
break;
case 5:

disf(2);

COMEN=0B00001011;
TRISC=0B10011011;
RC2 = 1;
break;

case 6:

disf(3);

COMEN=0B00000111;
TRISC=0B10010111;
RC3 = 0;
break;
default:

disf(3);

COMEN=0B00000111;
TRISC=0B10010111;
RC3 = 1;
break;


}
Dcount++; if(8 <= Dcount) {Dcount = 0;}
if(Dcount&0x01)
Flag_bit=0;
else
Flag_bit=1;
}



void disf(unsigned char a)
{


if(Display[a] & 0x01) {RB6 = Flag_bit;}
if(Display[a] & 0x02) {RB7 = Flag_bit;}
if(Display[a] & 0x04) {RA1 = Flag_bit;}
if(Display[a] & 0x08) {RA2 = Flag_bit;}
if(Display[a] & 0x010) {RA3 = Flag_bit;}
if(Display[a] & 0x020) {RA4 = Flag_bit;}



}
