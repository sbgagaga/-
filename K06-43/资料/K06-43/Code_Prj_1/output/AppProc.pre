
# 1 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\AppProc.C"

# 58 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\source_h\global_var.h"
bit Flag_boot,
Flag_on,
Flag_off,
Flag_on_boot,
Flag_lk,
Flag_lk_set,
Flag_lk_alarm,
Flag_iov,

Flag_xi,
Flag_xi_alarm,
Flag_low,
Flag_low_alarm,
Flag_stop,
Flag_beep,
Flag_beep_boot,
Flag_chr,
Flag_chr_boot,
Flag_usb;


unsigned char actual_percent,
bat_percent,
alarm_beep_cnt,
speed_beep,
time_chr_add,
time_dec_cnt,
time_second,
time_minute,
timer_1s,
timer_boot_cnt;

extern void Init_System();

# 26 "C:\Users\Administrator\Desktop\project\K06-43\资料\SC8P171X_开发工具软件及Demo 程序 -- 电压表\SCMCU_IDE_V2.00.08_Beta9\SCMCU_IDE_V2.00.08_Beta9\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "C:\Users\Administrator\Desktop\project\K06-43\资料\SC8P171X_开发工具软件及Demo 程序 -- 电压表\SCMCU_IDE_V2.00.08_Beta9\SCMCU_IDE_V2.00.08_Beta9\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 11 "C:\Users\Administrator\Desktop\project\K06-43\资料\SC8P171X_开发工具软件及Demo 程序 -- 电压表\SCMCU_IDE_V2.00.08_Beta9\SCMCU_IDE_V2.00.08_Beta9\data\include\SC8P1713C.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FLAGS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;


volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;


volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

volatile unsigned char COMPCON @ 0x018;
volatile unsigned char COMPCON1 @ 0x019;


volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;


volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;

volatile unsigned char PR2 @ 0x092;


volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 71
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;



volatile unsigned char WDTCON @ 0x105;

# 88
volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;
volatile unsigned char KEYCON0 @ 0x113;
volatile unsigned char KEYCON1 @ 0x114;
volatile unsigned char KEYDATAL @ 0x115;
volatile unsigned char KEYDATAH @ 0x116;




volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;



volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

# 117
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;

# 124
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;



volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 389
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;




volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


# 27 "C:\Users\Administrator\Desktop\project\K06-43\资料\SC8P171X_开发工具软件及Demo 程序 -- 电压表\SCMCU_IDE_V2.00.08_Beta9\SCMCU_IDE_V2.00.08_Beta9\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 49 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\source_h\sc8p1711c.h"
bit Flag_mainloop,
Flag_RtSleep;


unsigned char Rt2ms_cnt,
Rt10ms_cnt;


bit Flag_ad_done;



unsigned int admax,
admin,
adsum,
ad_bg,
ad_val,
current_val,
current_scp,
bat_val;

# 75
extern void GPIO_Init(void);
extern unsigned char ADSample(unsigned char adch);
extern void AdRead(unsigned char ad_ch);
extern void AdProc(void);
extern void BatProc(void);
extern void IscpTest(void);
extern void SysSleep(void);
extern void SysSleepSet(void);

# 38 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\source_h\display.h"
unsigned char LED_RAM[4];
const unsigned char LEDCode[]=
{
0x3F,
0x06,
0x5B,
0x4F,
0x66,
0x6D,
0x7D,
0x07,
0x7F,
0x6F,
0x71,
0x35,
0x38,
0x37,
0x79,
0x40,
0x00
};
extern void LedScan(void);
void DisPlayNum(unsigned char dis_num,unsigned char dig_sel);
extern void DisPlayIcon(unsigned char icon_seg,unsigned char icon_sel,unsigned char icon_sta);
extern void LedRamUpdate(void);

# 7 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\source_h\kscan.h"
bit Flag_Btn_Release;
bit Flag_key_long;
bit Flag_key_usb;
bit Flag_key_set;

extern void Btn_Init(void);

unsigned char ReadKey,

ReadKeyTmp,
ReadKeyOld;
extern void BtnScan(void);

# 7 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\source_h\app_proc.h"
extern void AppMotor(void);
extern void AppChr(void);
extern unsigned char lock_count_down;
extern void LockSet(void);


extern void BeepProc();

extern void TimeAddDec(unsigned int bat_value);

# 10 "C:\Users\Administrator\Desktop\project\K06-43\资料\K06-43\Code_Prj_1\source\AppProc.C"
unsigned char sta_m,
timer_motor,
debance_low_cnt,
debance_hiov_cnt,
debance_iov_cnt,
debance_scp_cnt;
unsigned int time_motor_cnt;
unsigned int ad_scp;
void AppMotor(void)
{
switch(sta_m)
{
case 0:
Flag_on =0;
Flag_low =0;
Flag_xi =0;
Flag_iov =0;
RA3=0; RB7=1;
if((ReadKey&0x02)&&Flag_Btn_Release&&(!Flag_lk))
{
Flag_Btn_Release = 0;
debance_hiov_cnt = 0;
debance_iov_cnt = 0;
debance_scp_cnt = 0;
debance_low_cnt = 0;
if(Flag_stop) Flag_low_alarm=1; else { sta_m = 1; RA3=1; RB7=0; }
time_second=0;
time_minute=0;
Flag_off=0;
current_val=0;
}
break;
case 1:
RA3=1; RB7=0;
timer_motor++;
if(timer_motor>=100)
{
timer_motor=0;
time_motor_cnt++;
if(time_motor_cnt>=time_dec_cnt)
{
time_motor_cnt=0; if(bat_percent) bat_percent--;
}
time_second++; if(time_second>=60) { time_second=0; if(time_minute<60) time_minute++; }
}

if(bat_percent) { Flag_low=0; Flag_on=1; }
else {
if(!Flag_low) { alarm_beep_cnt=3,speed_beep=50; Flag_low=1; }
Flag_on=0; Flag_low_alarm=1;
}


if(bat_val<250) debance_low_cnt++; else debance_low_cnt=0;
if(debance_low_cnt>200) { Flag_stop=1; bat_percent=0; }


if(current_val>38) debance_hiov_cnt++; else debance_hiov_cnt=0;
if(debance_hiov_cnt>250) { Flag_xi_alarm=1; Flag_xi=1; alarm_beep_cnt=3,speed_beep=50; }


if(current_scp>58) debance_iov_cnt++; else debance_iov_cnt=0;
if(debance_iov_cnt>200) Flag_iov=1;


if(ADSample(0b00000010))
{
ad_scp=(ADRESH<<4)+(ADRESL>>4);
ad_scp=ad_scp<<1;
if(ad_scp>ad_bg) debance_scp_cnt++; else debance_scp_cnt=0;
}
if(debance_scp_cnt) { sta_m = 0; alarm_beep_cnt=1,speed_beep=10; }

if(((ReadKey&0x02)&&Flag_Btn_Release)||Flag_iov||Flag_stop||Flag_lk)
{
Flag_Btn_Release = 0;
sta_m = 0;
Flag_low_alarm=0;
if(Flag_lk) alarm_beep_cnt=3,speed_beep=25; else { Flag_off= 1; alarm_beep_cnt=0,speed_beep=25; }
}
break;
default:
sta_m = 0;
break;
}
}

# 103
unsigned char sta_chr,
timer_chr,
debance_usb_cnt;
unsigned int time_chr_cnt;
void AppChr(void)
{
switch(sta_chr)
{
case 0:
Flag_usb =0;
if(ReadKey&0x01)
{
debance_usb_cnt++;
if(debance_usb_cnt>20)
{
sta_chr =1;

time_chr_cnt=0;

alarm_beep_cnt=2,speed_beep=10;
Flag_low_alarm=0;

}
}
break;
case 1:
Flag_usb=1;
Flag_lk=0;
Flag_stop=0;
timer_chr++;
if(timer_chr>=100)
{
timer_chr=0;
time_chr_cnt++;
if(time_chr_cnt>=time_chr_add)
{
time_chr_cnt=0;
if(bat_percent<99) bat_percent++;
}
if(bat_val<=250) RA4=0; else RA4=1;
}
if(bat_percent<99) Flag_chr=1; else Flag_chr=0;

if(ReadKey&0x01) debance_usb_cnt=0; else debance_usb_cnt++;
if(debance_usb_cnt>=10) { sta_chr=0; RA4=1; time_motor_cnt=0; alarm_beep_cnt=0,speed_beep=10; }
break;
default:
sta_chr=0;
break;
}
}

# 161
unsigned char sta_lock,
lock_count_down,
timer_lock;
void LockSet(void)
{
switch(sta_lock)
{
case 0:
Flag_lk_set =0;
timer_lock =0;

if(ReadKey&0x02)
{
if(Flag_lk){ Flag_lk_alarm=1; Flag_lk_set=1; lock_count_down=3;}else lock_count_down=4;
Flag_key_long = 1;
sta_lock=1;
}
case 1:
if(ReadKey&0x02)
{
timer_lock++;
if(timer_lock>=100)
{
timer_lock = 0;
if(lock_count_down)
{
Flag_lk_set=1;
lock_count_down--;
if(lock_count_down==0)
{
Flag_lk=~Flag_lk;
if(Flag_lk) Flag_lk_alarm=1; else Flag_lk_alarm=0;
Flag_lk_set=0;
timer_lock=0;
alarm_beep_cnt=3,speed_beep=25;
}
}
}
}
else sta_lock=0;
break;
default:
sta_lock=0;
break;
}
}

# 214
unsigned char timer_beep;
void BeepProc()
{
if(alarm_beep_cnt)
{
if(Flag_beep_boot) { Flag_beep_boot=0; Flag_beep=1; }

timer_beep++;
if(timer_beep>speed_beep) { timer_beep=0; Flag_beep=~Flag_beep; if(!Flag_beep) alarm_beep_cnt--; }
}
else
{
timer_beep=0;
Flag_beep=0;
Flag_xi =0;
Flag_beep_boot=1;
}

}

# 240
void TimeAddDec(unsigned int bat_value)
{
unsigned char percent_err;
unsigned int tmp_percent;

if(Flag_usb)
{
if(bat_value<275) tmp_percent=0;
else if(bat_value>350) tmp_percent=96;
else
{
tmp_percent=bat_value-275;



tmp_percent=tmp_percent*4/3;

}

if(actual_percent>tmp_percent) { if(actual_percent) actual_percent--; }
if(actual_percent<tmp_percent) { if(actual_percent<99) actual_percent++; }

if(actual_percent>bat_percent)
{
percent_err=actual_percent-bat_percent;
if(percent_err<5) time_chr_add=90-15*percent_err; else time_chr_add=15;
}
else time_chr_add=240;
}

if(sta_m)
{
if(bat_value<267) tmp_percent=0;
else if(bat_value>333) tmp_percent=99;
else
{
tmp_percent=bat_value-267;




if(tmp_percent<33) tmp_percent=tmp_percent;
else tmp_percent=33+(bat_value-300)*2;

}

if(actual_percent>tmp_percent) { if(actual_percent) actual_percent--; }
if(actual_percent<tmp_percent) { if(actual_percent<99) actual_percent++; }

if(actual_percent<bat_percent)
{
percent_err=bat_percent-actual_percent;
if(actual_percent&&(percent_err<5)) time_dec_cnt=75-15*percent_err; else time_dec_cnt=8;
}
else time_dec_cnt=210;
}
else time_dec_cnt=210;

}

