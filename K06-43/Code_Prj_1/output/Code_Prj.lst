

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 30 14:00:50 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1713S
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	bitnvCOMMON,global,bit,class=COMMON,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	swtext2,local,class=CONST,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext3,local,class=CONST,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	intentry,global,class=CODE,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	swtext4,local,class=CONST,delta=2
    47                           	psect	pa_nodes0,global,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	strings
    86  000A                     __pstrings:	
    87  000A                     stringtab:	
    88  000A                     __stringtab:	
    89  000A                     stringcode:	
    90                           ;	String table - string pointers are 1 byte each
    91                           
    92  000A                     stringdir:	
    93  000A  3000               	movlw	high stringdir
    94  000B  008A               	movwf	10
    95  000C  0804               	movf	4,w
    96  000D  0A84               	incf	4,f
    97  000E  0782               	addwf	2,f
    98  000F                     __stringbase:	
    99  000F  3400               	retlw	0
   100  0010                     __end_of__stringtab:	
   101  0010                     _LEDCode:	
   102  0010  343F               	retlw	63
   103  0011  3406               	retlw	6
   104  0012  345B               	retlw	91
   105  0013  344F               	retlw	79
   106  0014  3466               	retlw	102
   107  0015  346D               	retlw	109
   108  0016  347D               	retlw	125
   109  0017  3407               	retlw	7
   110  0018  347F               	retlw	127
   111  0019  346F               	retlw	111
   112  001A  3471               	retlw	113
   113  001B  3435               	retlw	53
   114  001C  3438               	retlw	56
   115  001D  3437               	retlw	55
   116  001E  3479               	retlw	121
   117  001F  3440               	retlw	64
   118  0020  3400               	retlw	0
   119  0021                     __end_of_LEDCode:	
   120                           
   121                           	psect	bitnvCOMMON
   122  03C8                     __pbitnvCOMMON:	
   123  03C8                     _Flag_boot:	
   124  03C8                     	ds	1
   125  001F                     _ADCON0	set	31
   126  001E                     _ADRESH	set	30
   127  001D                     _CCP2CON	set	29
   128  0017                     _CCP1CON	set	23
   129  0012                     _T2CON	set	18
   130  000C                     _PIR1	set	12
   131  000B                     _INTCON	set	11
   132  0009                     _PORTE	set	9
   133  0007                     _PORTC	set	7
   134  0006                     _PORTB	set	6
   135  0005                     _PORTA	set	5
   136  00F9                     _GODONE	set	249
   137  0092                     _TMR2ON	set	146
   138  0061                     _TMR2IF	set	97
   139  005F                     _GIE	set	95
   140  005B                     _RBIE	set	91
   141  0058                     _RBIF	set	88
   142  0048                     _RE0	set	72
   143  003B                     _RC3	set	59
   144  003A                     _RC2	set	58
   145  0039                     _RC1	set	57
   146  0038                     _RC0	set	56
   147  0037                     _RB7	set	55
   148  0036                     _RB6	set	54
   149  0035                     _RB5	set	53
   150  0034                     _RB4	set	52
   151  0033                     _RB3	set	51
   152  0032                     _RB2	set	50
   153  0031                     _RB1	set	49
   154  002D                     _RA5	set	45
   155  002C                     _RA4	set	44
   156  002B                     _RA3	set	43
   157  002A                     _RA2	set	42
   158  0029                     _RA1	set	41
   159  0028                     _RA0	set	40
   160  009F                     _ADCON1	set	159
   161  009E                     _ADRESL	set	158
   162  0096                     _IOCB	set	150
   163  0095                     _WPUB	set	149
   164  0092                     _PR2	set	146
   165  008F                     _OSCCON	set	143
   166  008D                     _PIE2	set	141
   167  008C                     _PIE1	set	140
   168  0089                     _TRISE	set	137
   169  0087                     _TRISC	set	135
   170  0086                     _TRISB	set	134
   171  0085                     _TRISA	set	133
   172  04AD                     _WPUB5	set	1197
   173  04AC                     _WPUB4	set	1196
   174  0435                     _TRISB5	set	1077
   175  0434                     _TRISB4	set	1076
   176  042A                     _TRISA2	set	1066
   177  0429                     _TRISA1	set	1065
   178  040F                     _RBPU	set	1039
   179  011A                     _WPUE	set	282
   180  0113                     _KEYCON0	set	275
   181  0105                     _WDTCON	set	261
   182  018F                     _WPUC	set	399
   183  018E                     _WPUA	set	398
   184  0C42                     _ANS2	set	3138
   185  0C41                     _ANS1	set	3137
   186  0C72                     _WPUA2	set	3186
   187  0C71                     _WPUA1	set	3185
   188                           
   189                           	psect	cinit
   190  07EF                     start_initialization:	
   191                           ; #config settings
   192                           
   193  07EF                     __initialization:	
   194  07EF  3020               	movlw	low __pbssBANK0
   195                           
   196                           ; Clear objects allocated to BITCOMMON
   197  07F0  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   198  07F1  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   199  07F2  01F2               	clrf	((__pbitbssCOMMON/(0+8)+2))& (0+127)
   200                           
   201                           ; Clear objects allocated to BITBANK0
   202  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   203  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   204  07F5  01EF               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   205                           
   206                           ; Clear objects allocated to BANK0
   207  07F6  1383               	bcf	3,7	;select IRP bank0
   208  07F7  0084               	movwf	4
   209  07F8  3056               	movlw	low (__pbssBANK0+54)
   210  07F9  2038               	fcall	clear_ram0
   211                           
   212                           ; Clear objects allocated to BANK1
   213  07FA  30A0               	movlw	low __pbssBANK1
   214  07FB  0084               	movwf	4
   215  07FC  30B6               	movlw	low (__pbssBANK1+22)
   216  07FD  2038               	fcall	clear_ram0
   217  07FE                     end_of_initialization:	
   218                           ;End of C runtime variable initialization code
   219                           
   220  07FE                     __end_of__initialization:	
   221  07FE  0183               	clrf	3
   222  07FF  2AA8               	ljmp	_main	;jump to C main() function
   223                           
   224                           	psect	bitbssCOMMON
   225  0380                     __pbitbssCOMMON:	
   226  0380                     _Flag_key_set:	
   227  0380                     	ds	1
   228  0381                     _Flag_key_usb:	
   229  0381                     	ds	1
   230  0382                     _Flag_key_long:	
   231  0382                     	ds	1
   232  0383                     _Flag_Btn_Release:	
   233  0383                     	ds	1
   234  0384                     _Flag_ad_done:	
   235  0384                     	ds	1
   236  0385                     _Flag_RtSleep:	
   237  0385                     	ds	1
   238  0386                     _Flag_mainloop:	
   239  0386                     	ds	1
   240  0387                     _Flag_usb:	
   241  0387                     	ds	1
   242  0388                     _Flag_chr_boot:	
   243  0388                     	ds	1
   244  0389                     _Flag_chr:	
   245  0389                     	ds	1
   246  038A                     _Flag_beep_boot:	
   247  038A                     	ds	1
   248  038B                     _Flag_beep:	
   249  038B                     	ds	1
   250  038C                     _Flag_stop:	
   251  038C                     	ds	1
   252  038D                     _Flag_low_alarm:	
   253  038D                     	ds	1
   254  038E                     _Flag_low:	
   255  038E                     	ds	1
   256  038F                     _Flag_xi_alarm:	
   257  038F                     	ds	1
   258  0390                     _Flag_xi:	
   259  0390                     	ds	1
   260  0391                     _Flag_iov:	
   261  0391                     	ds	1
   262  0392                     _Flag_lk_alarm:	
   263  0392                     	ds	1
   264  0393                     _Flag_lk_set:	
   265  0393                     	ds	1
   266  0394                     _Flag_lk:	
   267  0394                     	ds	1
   268  0395                     _Flag_on_boot:	
   269  0395                     	ds	1
   270  0396                     _Flag_off:	
   271  0396                     	ds	1
   272  0397                     _Flag_on:	
   273  0397                     	ds	1
   274                           
   275                           	psect	bitbssBANK0
   276  0378                     __pbitbssBANK0:	
   277  0378                     _Flag_ledcp_dir:	
   278  0378                     	ds	1
   279  0379                     _Flag_scan_dir:	
   280  0379                     	ds	1
   281  037A                     _Flag_dig2:	
   282  037A                     	ds	1
   283  037B                     _Flag_dig1:	
   284  037B                     	ds	1
   285                           
   286                           	psect	bssBANK0
   287  0020                     __pbssBANK0:	
   288  0020                     _LED_RAM:	
   289  0020                     	ds	4
   290  0024                     _bat_val:	
   291  0024                     	ds	2
   292  0026                     _ad_val:	
   293  0026                     	ds	2
   294  0028                     _ad_bg:	
   295  0028                     	ds	2
   296  002A                     _timer_beep:	
   297  002A                     	ds	1
   298  002B                     _timer_lock:	
   299  002B                     	ds	1
   300  002C                     _sta_lock:	
   301  002C                     	ds	1
   302  002D                     _debance_usb_cnt:	
   303  002D                     	ds	1
   304  002E                     _timer_chr:	
   305  002E                     	ds	1
   306  002F                     _sta_chr:	
   307  002F                     	ds	1
   308  0030                     _debance_scp_cnt:	
   309  0030                     	ds	1
   310  0031                     _debance_iov_cnt:	
   311  0031                     	ds	1
   312  0032                     _debance_hiov_cnt:	
   313  0032                     	ds	1
   314  0033                     _debance_low_cnt:	
   315  0033                     	ds	1
   316  0034                     _timer_motor:	
   317  0034                     	ds	1
   318  0035                     _sta_m:	
   319  0035                     	ds	1
   320  0036                     LedRamUpdate@timer_xi:	
   321  0036                     	ds	1
   322  0037                     LedRamUpdate@timer_lk:	
   323  0037                     	ds	1
   324  0038                     LedRamUpdate@timer_add:	
   325  0038                     	ds	1
   326  0039                     LedRamUpdate@timer_off:	
   327  0039                     	ds	1
   328  003A                     LedRamUpdate@chr_boot_cnt:	
   329  003A                     	ds	1
   330  003B                     LedRamUpdate@timer_chr_boot:	
   331  003B                     	ds	1
   332  003C                     LedRamUpdate@alarm_low_cnt:	
   333  003C                     	ds	1
   334  003D                     LedRamUpdate@alarm_xi_cnt:	
   335  003D                     	ds	1
   336  003E                     LedRamUpdate@alarm_lk_cnt:	
   337  003E                     	ds	1
   338  003F                     LedRamUpdate@led_boot_cnt:	
   339  003F                     	ds	1
   340  0040                     LedRamUpdate@led_cp:	
   341  0040                     	ds	1
   342  0041                     LedRamUpdate@led_cp_cnt:	
   343  0041                     	ds	1
   344  0042                     LedScan@led_scan_index:	
   345  0042                     	ds	1
   346  0043                     _lock_count_down:	
   347  0043                     	ds	1
   348  0044                     _RSleepCnt:	
   349  0044                     	ds	1
   350  0045                     _sta_ad:	
   351  0045                     	ds	1
   352  0046                     AdRead@adtimes:	
   353  0046                     	ds	1
   354  0047                     _ReadKeyOld:	
   355  0047                     	ds	1
   356  0048                     _ReadKeyTmp:	
   357  0048                     	ds	1
   358  0049                     _ReadKey:	
   359  0049                     	ds	1
   360  004A                     _Rt10ms_cnt:	
   361  004A                     	ds	1
   362  004B                     _Rt2ms_cnt:	
   363  004B                     	ds	1
   364  004C                     _timer_boot_cnt:	
   365  004C                     	ds	1
   366  004D                     _timer_1s:	
   367  004D                     	ds	1
   368  004E                     _time_minute:	
   369  004E                     	ds	1
   370  004F                     _time_second:	
   371  004F                     	ds	1
   372  0050                     _time_dec_cnt:	
   373  0050                     	ds	1
   374  0051                     _time_chr_add:	
   375  0051                     	ds	1
   376  0052                     _speed_beep:	
   377  0052                     	ds	1
   378  0053                     _alarm_beep_cnt:	
   379  0053                     	ds	1
   380  0054                     _bat_percent:	
   381  0054                     	ds	1
   382  0055                     _actual_percent:	
   383  0055                     	ds	1
   384                           
   385                           	psect	bssBANK1
   386  00A0                     __pbssBANK1:	
   387  00A0                     _LED_RAM_R:	
   388  00A0                     	ds	4
   389  00A4                     _time_chr_cnt:	
   390  00A4                     	ds	2
   391  00A6                     _ad_scp:	
   392  00A6                     	ds	2
   393  00A8                     _time_motor_cnt:	
   394  00A8                     	ds	2
   395  00AA                     _ad_current:	
   396  00AA                     	ds	2
   397  00AC                     _current_scp:	
   398  00AC                     	ds	2
   399  00AE                     _current_val:	
   400  00AE                     	ds	2
   401  00B0                     _adsum:	
   402  00B0                     	ds	2
   403  00B2                     _admin:	
   404  00B2                     	ds	2
   405  00B4                     _admax:	
   406  00B4                     	ds	2
   407                           
   408                           	psect	clrtext
   409  0038                     clear_ram0:	
   410                           ;	Called with FSR containing the base address, and
   411                           ;	W with the last address+1
   412                           
   413  0038  0064               	clrwdt	;clear the watchdog before getting into this loop
   414  0039                     clrloop0:	
   415  0039  0180               	clrf	0	;clear RAM location pointed to by FSR
   416  003A  0A84               	incf	4,f	;increment pointer
   417  003B  0604               	xorwf	4,w	;XOR with final address
   418  003C  1903               	btfsc	3,2	;have we reached the end yet?
   419  003D  3400               	retlw	0	;all done for this memory range, return
   420  003E  0604               	xorwf	4,w	;XOR again to restore value
   421  003F  2839               	goto	clrloop0	;do the next byte
   422                           
   423                           	psect	cstackBANK1
   424  00B6                     __pcstackBANK1:	
   425  00B6                     AdProc@dat_tmp:	
   426                           
   427                           ; 4 bytes @ 0x0
   428  00B6                     	ds	4
   429                           
   430                           	psect	cstackCOMMON
   431  0073                     __pcstackCOMMON:	
   432  0073                     ?_Btn_Init:	
   433  0073                     ?_GPIO_Init:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0073                     ?_LedScan:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0073                     ?_AdProc:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0073                     ?_BeepProc:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0073                     ?_BtnScan:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0073                     ?_AppMotor:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0073                     ?_AppChr:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0073                     ?_LockSet:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0073                     ?_LedRamUpdate:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0073                     ?_SysSleep:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0073                     ?_SysSleepSet:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0073                     ?_Init_System:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0073                     ?_Isr_Timer:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0073                     ?_main:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0073                     ?_ADSample:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0073                     ?_AdRead:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0073                     ?_LedIndex:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0073                     ??_LedIndex:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0073                     LedIndex@led_index:	
   488                           ; 1 bytes @ 0x0
   489                           
   490                           
   491                           ; 1 bytes @ 0x0
   492  0073                     	ds	1
   493  0074                     ??_LedScan:	
   494  0074                     ??_Isr_Timer:	
   495                           ; 1 bytes @ 0x1
   496                           
   497                           
   498                           ; 1 bytes @ 0x1
   499  0074                     	ds	3
   500  0077                     ??_Btn_Init:	
   501  0077                     ??_GPIO_Init:	
   502                           ; 1 bytes @ 0x4
   503                           
   504  0077                     ??_BeepProc:	
   505                           ; 1 bytes @ 0x4
   506                           
   507  0077                     ??_BtnScan:	
   508                           ; 1 bytes @ 0x4
   509                           
   510  0077                     ??_AppChr:	
   511                           ; 1 bytes @ 0x4
   512                           
   513  0077                     ??_LockSet:	
   514                           ; 1 bytes @ 0x4
   515                           
   516  0077                     ??_SysSleep:	
   517                           ; 1 bytes @ 0x4
   518                           
   519  0077                     ??_SysSleepSet:	
   520                           ; 1 bytes @ 0x4
   521                           
   522  0077                     ??_Init_System:	
   523                           ; 1 bytes @ 0x4
   524                           
   525  0077                     ??_ADSample:	
   526                           ; 1 bytes @ 0x4
   527                           
   528  0077                     ?_DisPlayIcon:	
   529                           ; 1 bytes @ 0x4
   530                           
   531  0077                     ??___lmul:	
   532                           ; 1 bytes @ 0x4
   533                           
   534  0077                     ?___bmul:	
   535                           ; 1 bytes @ 0x4
   536                           
   537  0077                     ?___lbdiv:	
   538                           ; 1 bytes @ 0x4
   539                           
   540  0077                     ?___lbmod:	
   541                           ; 1 bytes @ 0x4
   542                           
   543  0077                     ??___lldiv:	
   544                           ; 1 bytes @ 0x4
   545                           
   546  0077                     ??___lwdiv:	
   547                           ; 1 bytes @ 0x4
   548                           
   549  0077                     DisPlayIcon@icon_sel:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0077                     ___bmul@multiplicand:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0077                     ___lbdiv@divisor:	
   556                           ; 1 bytes @ 0x4
   557                           
   558  0077                     ___lbmod@divisor:	
   559                           ; 1 bytes @ 0x4
   560                           
   561                           
   562                           ; 1 bytes @ 0x4
   563  0077                     	ds	1
   564  0078                     ??_AdProc:	
   565  0078                     ??___bmul:	
   566                           ; 1 bytes @ 0x5
   567                           
   568  0078                     ??___lbdiv:	
   569                           ; 1 bytes @ 0x5
   570                           
   571  0078                     ??___lbmod:	
   572                           ; 1 bytes @ 0x5
   573                           
   574  0078                     DisPlayIcon@icon_sta:	
   575                           ; 1 bytes @ 0x5
   576                           
   577                           
   578                           ; 1 bytes @ 0x5
   579  0078                     	ds	1
   580  0079                     ??_LedRamUpdate:	
   581  0079                     ??_main:	
   582                           ; 1 bytes @ 0x6
   583                           
   584  0079                     ??_DisPlayNum:	
   585                           ; 1 bytes @ 0x6
   586                           
   587  0079                     ??_DisPlayIcon:	
   588                           ; 1 bytes @ 0x6
   589                           
   590                           
   591                           	psect	cstackBANK0
   592  0056                     __pcstackBANK0:	
   593                           ; 1 bytes @ 0x6
   594                           
   595  0056                     ?___lwdiv:	
   596  0056                     ?___lmul:	
   597                           ; 2 bytes @ 0x0
   598                           
   599  0056                     ADSample@adch:	
   600                           ; 4 bytes @ 0x0
   601                           
   602  0056                     DisPlayIcon@icon_seg:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0056                     ___bmul@product:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0056                     ___lbdiv@dividend:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0056                     ___lbmod@dividend:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0056                     ___lwdiv@divisor:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0056                     ___lmul@multiplier:	
   618                           ; 2 bytes @ 0x0
   619                           
   620                           
   621                           ; 4 bytes @ 0x0
   622  0056                     	ds	1
   623  0057                     ADSample@i:	
   624  0057                     ___bmul@multiplier:	
   625                           ; 1 bytes @ 0x1
   626                           
   627  0057                     ___lbdiv@counter:	
   628                           ; 1 bytes @ 0x1
   629                           
   630  0057                     ___lbmod@counter:	
   631                           ; 1 bytes @ 0x1
   632                           
   633                           
   634                           ; 1 bytes @ 0x1
   635  0057                     	ds	1
   636  0058                     ??_AppMotor:	
   637  0058                     ??_AdRead:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0058                     ___lbdiv@quotient:	
   641                           ; 1 bytes @ 0x2
   642                           
   643  0058                     ___lbmod@rem:	
   644                           ; 1 bytes @ 0x2
   645                           
   646  0058                     ___lwdiv@dividend:	
   647                           ; 1 bytes @ 0x2
   648                           
   649                           
   650                           ; 2 bytes @ 0x2
   651  0058                     	ds	1
   652  0059                     ?_DisPlayNum:	
   653  0059                     DisPlayNum@dig_sel:	
   654                           ; 1 bytes @ 0x3
   655                           
   656                           
   657                           ; 1 bytes @ 0x3
   658  0059                     	ds	1
   659  005A                     AdRead@ad_ch:	
   660  005A                     DisPlayNum@dis_num:	
   661                           ; 1 bytes @ 0x4
   662                           
   663  005A                     ___lwdiv@counter:	
   664                           ; 1 bytes @ 0x4
   665                           
   666  005A                     ___lmul@multiplicand:	
   667                           ; 1 bytes @ 0x4
   668                           
   669                           
   670                           ; 4 bytes @ 0x4
   671  005A                     	ds	1
   672  005B                     AdRead@ad_temp:	
   673  005B                     ___lwdiv@quotient:	
   674                           ; 2 bytes @ 0x5
   675                           
   676                           
   677                           ; 2 bytes @ 0x5
   678  005B                     	ds	2
   679  005D                     ?_TimeAddDec:	
   680  005D                     TimeAddDec@bat_value:	
   681                           ; 1 bytes @ 0x7
   682                           
   683                           
   684                           ; 2 bytes @ 0x7
   685  005D                     	ds	1
   686  005E                     ___lmul@product:	
   687                           
   688                           ; 4 bytes @ 0x8
   689  005E                     	ds	1
   690  005F                     ??_TimeAddDec:	
   691                           
   692                           ; 1 bytes @ 0x9
   693  005F                     	ds	2
   694  0061                     TimeAddDec@percent_err:	
   695                           
   696                           ; 1 bytes @ 0xB
   697  0061                     	ds	1
   698  0062                     ?___lldiv:	
   699  0062                     TimeAddDec@tmp_percent:	
   700                           ; 4 bytes @ 0xC
   701                           
   702  0062                     ___lldiv@divisor:	
   703                           ; 2 bytes @ 0xC
   704                           
   705                           
   706                           ; 4 bytes @ 0xC
   707  0062                     	ds	4
   708  0066                     ___lldiv@dividend:	
   709                           
   710                           ; 4 bytes @ 0x10
   711  0066                     	ds	4
   712  006A                     ___lldiv@quotient:	
   713                           
   714                           ; 4 bytes @ 0x14
   715  006A                     	ds	4
   716  006E                     ___lldiv@counter:	
   717                           
   718                           ; 1 bytes @ 0x18
   719  006E                     	ds	1
   720                           
   721                           	psect	maintext
   722  02A8                     __pmaintext:	
   723 ;;
   724 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   725 ;;
   726 ;; *************** function _main *****************
   727 ;; Defined at:
   728 ;;		line 64 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\main.C"
   729 ;; Parameters:    Size  Location     Type
   730 ;;		None
   731 ;; Auto vars:     Size  Location     Type
   732 ;;		None
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : B00/0
   739 ;;		On exit  : 200/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMMON   BANK0   BANK1
   742 ;;      Params:         0       0       0
   743 ;;      Locals:         0       0       0
   744 ;;      Temps:          0       0       0
   745 ;;      Totals:         0       0       0
   746 ;;Total ram usage:        0 bytes
   747 ;; Hardware stack levels required when called:    6
   748 ;; This function calls:
   749 ;;		_AdProc
   750 ;;		_AppChr
   751 ;;		_AppMotor
   752 ;;		_BeepProc
   753 ;;		_BtnScan
   754 ;;		_Init_System
   755 ;;		_LedRamUpdate
   756 ;;		_LockSet
   757 ;;		_SysSleep
   758 ;;		_TimeAddDec
   759 ;; This function is called by:
   760 ;;		Startup code after reset
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           
   765                           ;psect for function _main
   766  02A8                     _main:	
   767                           
   768                           ;main.C: 66: Init_System();
   769                           
   770                           ;incstack = 0
   771                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   772  02A8  2079               	fcall	_Init_System
   773                           
   774                           ;main.C: 67: Flag_boot =1;
   775  02A9  1479               	bsf	_Flag_boot/(0+8),_Flag_boot& (0+7)
   776                           
   777                           ;main.C: 68: timer_boot_cnt =0;
   778  02AA  1283               	bcf	3,5	;RP0=0, select bank0
   779  02AB  01CC               	clrf	_timer_boot_cnt
   780  02AC                     l7176:	
   781                           
   782                           ;main.C: 70: {
   783                           ;main.C: 71: if(Flag_mainloop&&Flag_boot)
   784  02AC  1B70               	btfsc	_Flag_mainloop/(0+8),_Flag_mainloop& (0+7)
   785  02AD  1C79               	btfss	_Flag_boot/(0+8),_Flag_boot& (0+7)
   786  02AE  2AD8               	goto	l7208
   787                           
   788                           ;main.C: 72: {
   789                           ;main.C: 73: Flag_mainloop = 0;
   790  02AF  1370               	bcf	_Flag_mainloop/(0+8),_Flag_mainloop& (0+7)
   791  02B0  0064               	clrwdt	;# 
   792                           
   793                           ;main.C: 76: LED_RAM[0]=0XFF;
   794  02B1  30FF               	movlw	255
   795  02B2  1283               	bcf	3,5	;RP0=0, select bank0
   796  02B3  1303               	bcf	3,6	;RP1=0, select bank0
   797  02B4  00A0               	movwf	_LED_RAM
   798                           
   799                           ;main.C: 77: LED_RAM[1]=0XFF;
   800  02B5  00A1               	movwf	_LED_RAM+1
   801                           
   802                           ;main.C: 78: LED_RAM[2]=0XFF;
   803  02B6  00A2               	movwf	_LED_RAM+2
   804                           
   805                           ;main.C: 79: LED_RAM[3]=0XFF;
   806  02B7  00A3               	movwf	_LED_RAM+3
   807                           
   808                           ;main.C: 80: AdProc();
   809  02B8  2457               	fcall	_AdProc
   810  02B9  3032               	movlw	50
   811                           
   812                           ;main.C: 81: alarm_beep_cnt=1,speed_beep=50;
   813  02BA  01D3               	clrf	_alarm_beep_cnt
   814  02BB  0AD3               	incf	_alarm_beep_cnt,f
   815  02BC  00D2               	movwf	_speed_beep
   816                           
   817                           ;main.C: 82: BeepProc();
   818  02BD  2062               	fcall	_BeepProc
   819  02BE  3065               	movlw	101
   820                           
   821                           ;main.C: 83: timer_boot_cnt++; if(timer_boot_cnt>100) Flag_boot=0;
   822  02BF  0ACC               	incf	_timer_boot_cnt,f
   823  02C0  024C               	subwf	_timer_boot_cnt,w
   824  02C1  1803               	btfsc	3,0
   825  02C2  1079               	bcf	_Flag_boot/(0+8),_Flag_boot& (0+7)
   826                           
   827                           ;main.C: 85: if(bat_val<267) bat_percent=0;
   828  02C3  3001               	movlw	1
   829  02C4  0225               	subwf	_bat_val+1,w
   830  02C5  300B               	movlw	11
   831  02C6  1903               	skipnz
   832  02C7  0224               	subwf	_bat_val,w
   833  02C8  1803               	skipnc
   834  02C9  2ACC               	goto	l7202
   835  02CA  01D4               	clrf	_bat_percent
   836  02CB  2AD8               	goto	l7208
   837  02CC                     l7202:	
   838                           
   839                           ;main.C: 86: else if(bat_val>350) bat_percent=99;
   840  02CC  3001               	movlw	1
   841  02CD  0225               	subwf	_bat_val+1,w
   842  02CE  305F               	movlw	95
   843  02CF  1903               	skipnz
   844  02D0  0224               	subwf	_bat_val,w
   845  02D1  1C03               	skipc
   846  02D2  2AD5               	goto	l7206
   847  02D3  3063               	movlw	99
   848  02D4  2AD7               	goto	L1
   849  02D5                     l7206:	
   850                           
   851                           ;main.C: 87: else bat_percent=bat_val-267;
   852  02D5  0824               	movf	_bat_val,w
   853  02D6  3EF5               	addlw	245
   854  02D7                     L1:	
   855  02D7  00D4               	movwf	_bat_percent
   856  02D8                     l7208:	
   857                           
   858                           ;main.C: 90: }
   859                           ;main.C: 91: if(Flag_mainloop&&(!Flag_boot))
   860  02D8  1B70               	btfsc	_Flag_mainloop/(0+8),_Flag_mainloop& (0+7)
   861  02D9  1879               	btfsc	_Flag_boot/(0+8),_Flag_boot& (0+7)
   862  02DA  2AAC               	goto	l7176
   863                           
   864                           ;main.C: 92: {
   865                           ;main.C: 93: Flag_mainloop = 0;
   866  02DB  1370               	bcf	_Flag_mainloop/(0+8),_Flag_mainloop& (0+7)
   867  02DC  0064               	clrwdt	;# 
   868                           
   869                           ;main.C: 96: BtnScan();
   870  02DD  2091               	fcall	_BtnScan
   871                           
   872                           ;main.C: 97: AppMotor();
   873  02DE  25A1               	fcall	_AppMotor
   874                           
   875                           ;main.C: 98: AppChr();
   876  02DF  22F3               	fcall	_AppChr
   877                           
   878                           ;main.C: 99: if(!Flag_usb) LockSet();
   879  02E0  1BF0               	btfsc	_Flag_usb/(0+8),_Flag_usb& (0+7)
   880  02E1  2AE3               	goto	l7224
   881  02E2  21F4               	fcall	_LockSet
   882  02E3                     l7224:	
   883                           
   884                           ;main.C: 100: BeepProc();
   885  02E3  2062               	fcall	_BeepProc
   886  02E4  3065               	movlw	101
   887                           
   888                           ;main.C: 101: timer_1s++; if(timer_1s>100) { timer_1s=0; TimeAddDec(bat_val); }
   889  02E5  0ACD               	incf	_timer_1s,f
   890  02E6  024D               	subwf	_timer_1s,w
   891  02E7  1C03               	skipc
   892  02E8  2AEF               	goto	l7234
   893  02E9  01CD               	clrf	_timer_1s
   894  02EA  0825               	movf	_bat_val+1,w
   895  02EB  00DE               	movwf	TimeAddDec@bat_value+1
   896  02EC  0824               	movf	_bat_val,w
   897  02ED  00DD               	movwf	TimeAddDec@bat_value
   898  02EE  24E1               	fcall	_TimeAddDec
   899  02EF                     l7234:	
   900                           
   901                           ;main.C: 102: LedRamUpdate();
   902  02EF  2686               	fcall	_LedRamUpdate
   903                           
   904                           ;main.C: 103: AdProc();
   905  02F0  2457               	fcall	_AdProc
   906                           
   907                           ;main.C: 104: SysSleep();
   908  02F1  222A               	fcall	_SysSleep
   909  02F2  2AAC               	goto	l7176
   910  02F3                     __end_of_main:	
   911                           
   912                           	psect	text1
   913  04E1                     __ptext1:	
   914 ;; *************** function _TimeAddDec *****************
   915 ;; Defined at:
   916 ;;		line 240 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\AppProc.C"
   917 ;; Parameters:    Size  Location     Type
   918 ;;  bat_value       2    7[BANK0 ] unsigned int 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  tmp_percent     2   12[BANK0 ] unsigned int 
   921 ;;  percent_err     1   11[BANK0 ] unsigned char 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, status,2, status,0, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 300/0
   928 ;;		On exit  : 300/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1
   931 ;;      Params:         0       2       0
   932 ;;      Locals:         0       3       0
   933 ;;      Temps:          0       2       0
   934 ;;      Totals:         0       7       0
   935 ;;Total ram usage:        7 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    4
   938 ;; This function calls:
   939 ;;		___bmul
   940 ;;		___lwdiv
   941 ;; This function is called by:
   942 ;;		_main
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           
   947                           ;psect for function _TimeAddDec
   948  04E1                     _TimeAddDec:	
   949                           
   950                           ;AppProc.C: 242: unsigned char percent_err;
   951                           ;AppProc.C: 243: unsigned int tmp_percent;
   952                           ;AppProc.C: 245: if(Flag_usb)
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _TimeAddDec: [wreg+status,2+status,0+pclath+cstack]
   956  04E1  1FF0               	btfss	_Flag_usb/(0+8),_Flag_usb& (0+7)
   957  04E2  2D2D               	goto	l6904
   958                           
   959                           ;AppProc.C: 246: {
   960                           ;AppProc.C: 247: if(bat_value<275) tmp_percent=0;
   961  04E3  3001               	movlw	1
   962  04E4  025E               	subwf	TimeAddDec@bat_value+1,w
   963  04E5  3013               	movlw	19
   964  04E6  1903               	skipnz
   965  04E7  025D               	subwf	TimeAddDec@bat_value,w
   966  04E8  1803               	skipnc
   967  04E9  2CEC               	goto	l6872
   968  04EA  01E2               	clrf	TimeAddDec@tmp_percent
   969  04EB  2CF5               	goto	L2
   970  04EC                     l6872:	
   971                           
   972                           ;AppProc.C: 248: else if(bat_value>350) tmp_percent=96;
   973  04EC  3001               	movlw	1
   974  04ED  025E               	subwf	TimeAddDec@bat_value+1,w
   975  04EE  305F               	movlw	95
   976  04EF  1903               	skipnz
   977  04F0  025D               	subwf	TimeAddDec@bat_value,w
   978  04F1  1C03               	skipc
   979  04F2  2CF7               	goto	l6876
   980  04F3  3060               	movlw	96
   981  04F4  00E2               	movwf	TimeAddDec@tmp_percent
   982  04F5                     L2:	
   983  04F5  01E3               	clrf	TimeAddDec@tmp_percent+1
   984  04F6  2D10               	goto	l6880
   985  04F7                     l6876:	
   986                           
   987                           ;AppProc.C: 249: else
   988                           ;AppProc.C: 250: {
   989                           ;AppProc.C: 251: tmp_percent=bat_value-275;
   990  04F7  085D               	movf	TimeAddDec@bat_value,w
   991  04F8  3EED               	addlw	237
   992  04F9  259A               	fcall	PL14	;call to abstracted procedure
   993                           
   994                           ;AppProc.C: 255: tmp_percent=tmp_percent*4/3;
   995  04FA  3003               	movlw	3
   996  04FB  00D6               	movwf	___lwdiv@divisor
   997  04FC  01D7               	clrf	___lwdiv@divisor+1
   998  04FD  0863               	movf	TimeAddDec@tmp_percent+1,w
   999  04FE  00E0               	movwf	??_TimeAddDec+1
  1000  04FF  0862               	movf	TimeAddDec@tmp_percent,w
  1001  0500  00DF               	movwf	??_TimeAddDec
  1002  0501  1003               	clrc
  1003  0502  0DDF               	rlf	??_TimeAddDec,f
  1004  0503  0DE0               	rlf	??_TimeAddDec+1,f
  1005  0504  1003               	clrc
  1006  0505  0DDF               	rlf	??_TimeAddDec,f
  1007  0506  0DE0               	rlf	??_TimeAddDec+1,f
  1008  0507  085F               	movf	??_TimeAddDec,w
  1009  0508  00D8               	movwf	___lwdiv@dividend
  1010  0509  0860               	movf	??_TimeAddDec+1,w
  1011  050A  00D9               	movwf	___lwdiv@dividend+1
  1012  050B  2169               	fcall	___lwdiv
  1013  050C  0857               	movf	?___lwdiv+1,w
  1014  050D  00E3               	movwf	TimeAddDec@tmp_percent+1
  1015  050E  0856               	movf	?___lwdiv,w
  1016  050F  00E2               	movwf	TimeAddDec@tmp_percent
  1017  0510                     l6880:	
  1018                           
  1019                           ;AppProc.C: 257: }
  1020                           ;AppProc.C: 259: if(actual_percent>tmp_percent) { if(actual_percent) actual_percent--; }
  1021                           
  1022                           ;AppProc.C: 260: if(actual_percent<tmp_percent) { if(actual_percent<99) actual_percent++
      +                          ; }
  1023  0510  2582               	fcall	PL4	;call to abstracted procedure
  1024  0511  1803               	skipnc
  1025  0512  2D18               	goto	l6892
  1026  0513  3063               	movlw	99
  1027  0514  0255               	subwf	_actual_percent,w
  1028  0515  1803               	skipnc
  1029  0516  2D18               	goto	l6892
  1030  0517  0AD5               	incf	_actual_percent,f
  1031  0518                     l6892:	
  1032                           
  1033                           ;AppProc.C: 262: if(actual_percent>bat_percent)
  1034  0518  0855               	movf	_actual_percent,w
  1035  0519  0254               	subwf	_bat_percent,w
  1036  051A  1803               	skipnc
  1037  051B  2D2B               	goto	l6902
  1038                           
  1039                           ;AppProc.C: 263: {
  1040                           ;AppProc.C: 264: percent_err=actual_percent-bat_percent;
  1041  051C  0854               	movf	_bat_percent,w
  1042  051D  0255               	subwf	_actual_percent,w
  1043  051E  00E1               	movwf	TimeAddDec@percent_err
  1044                           
  1045                           ;AppProc.C: 265: if(percent_err<5) time_chr_add=90-15*percent_err; else time_chr_add=15;
  1046  051F  3005               	movlw	5
  1047  0520  0261               	subwf	TimeAddDec@percent_err,w
  1048  0521  1803               	skipnc
  1049  0522  2D29               	goto	l6900
  1050  0523  30F1               	movlw	241
  1051  0524  00F7               	movwf	___bmul@multiplicand
  1052  0525  0861               	movf	TimeAddDec@percent_err,w
  1053  0526  2040               	fcall	___bmul
  1054  0527  3E5A               	addlw	90
  1055  0528  2D2C               	goto	L3
  1056  0529                     l6900:	
  1057  0529  300F               	movlw	15
  1058  052A  2D2C               	goto	L3
  1059  052B                     l6902:	
  1060                           
  1061                           ;AppProc.C: 267: else time_chr_add=240;
  1062  052B  30F0               	movlw	240
  1063  052C                     L3:	
  1064  052C  00D1               	movwf	_time_chr_add
  1065  052D                     l6904:	
  1066                           
  1067                           ;AppProc.C: 268: }
  1068                           ;AppProc.C: 270: if(sta_m)
  1069  052D  0835               	movf	_sta_m,w
  1070  052E  1903               	btfsc	3,2
  1071  052F  2D7F               	goto	l6950
  1072                           
  1073                           ;AppProc.C: 271: {
  1074                           ;AppProc.C: 272: if(bat_value<267) tmp_percent=0;
  1075  0530  3001               	movlw	1
  1076  0531  025E               	subwf	TimeAddDec@bat_value+1,w
  1077  0532  300B               	movlw	11
  1078  0533  1903               	skipnz
  1079  0534  025D               	subwf	TimeAddDec@bat_value,w
  1080  0535  1803               	skipnc
  1081  0536  2D39               	goto	l6910
  1082  0537  01E2               	clrf	TimeAddDec@tmp_percent
  1083  0538  2D42               	goto	L4
  1084  0539                     l6910:	
  1085                           
  1086                           ;AppProc.C: 273: else if(bat_value>333) tmp_percent=99;
  1087  0539  3001               	movlw	1
  1088  053A  025E               	subwf	TimeAddDec@bat_value+1,w
  1089  053B  304E               	movlw	78
  1090  053C  1903               	skipnz
  1091  053D  025D               	subwf	TimeAddDec@bat_value,w
  1092  053E  1C03               	skipc
  1093  053F  2D44               	goto	l6914
  1094  0540  3063               	movlw	99
  1095  0541  00E2               	movwf	TimeAddDec@tmp_percent
  1096  0542                     L4:	
  1097  0542  01E3               	clrf	TimeAddDec@tmp_percent+1
  1098  0543  2D5F               	goto	l6928
  1099  0544                     l6914:	
  1100                           
  1101                           ;AppProc.C: 274: else
  1102                           ;AppProc.C: 275: {
  1103                           ;AppProc.C: 276: tmp_percent=bat_value-267;
  1104  0544  085D               	movf	TimeAddDec@bat_value,w
  1105  0545  3EF5               	addlw	245
  1106  0546  259A               	fcall	PL14	;call to abstracted procedure
  1107                           
  1108                           ;AppProc.C: 281: if(tmp_percent<33) tmp_percent=tmp_percent;
  1109  0547  3000               	movlw	0
  1110  0548  0263               	subwf	TimeAddDec@tmp_percent+1,w
  1111  0549  3021               	movlw	33
  1112  054A  1903               	skipnz
  1113  054B  0262               	subwf	TimeAddDec@tmp_percent,w
  1114  054C  1C03               	btfss	3,0
  1115  054D  2D5F               	goto	l6928
  1116                           
  1117                           ;AppProc.C: 282: else tmp_percent=33+(bat_value-300)*2;
  1118  054E  085E               	movf	TimeAddDec@bat_value+1,w
  1119  054F  00E3               	movwf	TimeAddDec@tmp_percent+1
  1120  0550  085D               	movf	TimeAddDec@bat_value,w
  1121  0551  00E2               	movwf	TimeAddDec@tmp_percent
  1122  0552  30A8               	movlw	168
  1123  0553  1003               	clrc
  1124  0554  0DE2               	rlf	TimeAddDec@tmp_percent,f
  1125  0555  0DE3               	rlf	TimeAddDec@tmp_percent+1,f
  1126  0556  07E2               	addwf	TimeAddDec@tmp_percent,f
  1127  0557  1803               	skipnc
  1128  0558  0AE3               	incf	TimeAddDec@tmp_percent+1,f
  1129  0559  30FD               	movlw	253
  1130  055A  07E3               	addwf	TimeAddDec@tmp_percent+1,f
  1131  055B  3021               	movlw	33
  1132  055C  07E2               	addwf	TimeAddDec@tmp_percent,f
  1133  055D  1803               	skipnc
  1134  055E  0AE3               	incf	TimeAddDec@tmp_percent+1,f
  1135  055F                     l6928:	
  1136                           
  1137                           ;AppProc.C: 284: }
  1138                           ;AppProc.C: 286: if(actual_percent>tmp_percent) { if(actual_percent) actual_percent--; }
  1139                           
  1140                           ;AppProc.C: 287: if(actual_percent<tmp_percent) { if(actual_percent<99) actual_percent++
      +                          ; }
  1141  055F  2582               	fcall	PL4	;call to abstracted procedure
  1142  0560  1803               	skipnc
  1143  0561  2D67               	goto	l6940
  1144  0562  3063               	movlw	99
  1145  0563  0255               	subwf	_actual_percent,w
  1146  0564  1803               	skipnc
  1147  0565  2D67               	goto	l6940
  1148  0566  0AD5               	incf	_actual_percent,f
  1149  0567                     l6940:	
  1150                           
  1151                           ;AppProc.C: 289: if(actual_percent<bat_percent)
  1152  0567  0854               	movf	_bat_percent,w
  1153  0568  0255               	subwf	_actual_percent,w
  1154  0569  1803               	skipnc
  1155  056A  2D7F               	goto	l6950
  1156                           
  1157                           ;AppProc.C: 290: {
  1158                           ;AppProc.C: 291: percent_err=bat_percent-actual_percent;
  1159  056B  0855               	movf	_actual_percent,w
  1160  056C  0254               	subwf	_bat_percent,w
  1161  056D  00E1               	movwf	TimeAddDec@percent_err
  1162                           
  1163                           ;AppProc.C: 292: if(actual_percent&&(percent_err<5)) time_dec_cnt=75-15*percent_err; els
      +                          e time_dec_cnt=8;
  1164  056E  0855               	movf	_actual_percent,w
  1165  056F  1903               	btfsc	3,2
  1166  0570  2D7C               	goto	l6948
  1167  0571  3005               	movlw	5
  1168  0572  0261               	subwf	TimeAddDec@percent_err,w
  1169  0573  1803               	skipnc
  1170  0574  2D7C               	goto	l6948
  1171  0575  30F1               	movlw	241
  1172  0576  00F7               	movwf	___bmul@multiplicand
  1173  0577  0861               	movf	TimeAddDec@percent_err,w
  1174  0578  2040               	fcall	___bmul
  1175  0579  3E4B               	addlw	75
  1176  057A  00D0               	movwf	_time_dec_cnt
  1177  057B  0008               	return
  1178  057C                     l6948:	
  1179  057C  3008               	movlw	8
  1180  057D  00D0               	movwf	_time_dec_cnt
  1181  057E  0008               	return
  1182  057F                     l6950:	
  1183                           
  1184                           ;AppProc.C: 294: else time_dec_cnt=210;
  1185  057F  30D2               	movlw	210
  1186  0580  00D0               	movwf	_time_dec_cnt
  1187  0581  0008               	return
  1188  0582                     __end_of_TimeAddDec:	
  1189  0582                     PL4:	
  1190  0582  0855               	movf	_actual_percent,w
  1191  0583  00DF               	movwf	??_TimeAddDec
  1192  0584  01E0               	clrf	??_TimeAddDec+1
  1193  0585  0860               	movf	??_TimeAddDec+1,w
  1194  0586  0263               	subwf	TimeAddDec@tmp_percent+1,w
  1195  0587  1D03               	skipz
  1196  0588  2D8B               	goto	u4865
  1197  0589  085F               	movf	??_TimeAddDec,w
  1198  058A  0262               	subwf	TimeAddDec@tmp_percent,w
  1199  058B                     u4865:	
  1200  058B  0855               	movf	_actual_percent,w
  1201  058C  1803               	skipnc
  1202  058D  2D91               	goto	L5
  1203  058E  1D03               	btfss	3,2
  1204  058F  03D5               	decf	_actual_percent,f
  1205  0590  0855               	movf	_actual_percent,w
  1206  0591                     L5:	
  1207  0591  00DF               	movwf	??_TimeAddDec
  1208  0592  01E0               	clrf	??_TimeAddDec+1
  1209  0593  0863               	movf	TimeAddDec@tmp_percent+1,w
  1210  0594  0260               	subwf	??_TimeAddDec+1,w
  1211  0595  1D03               	skipz
  1212  0596  0008               	return
  1213  0597  0862               	movf	TimeAddDec@tmp_percent,w
  1214  0598  025F               	subwf	??_TimeAddDec,w
  1215  0599  0008               	return
  1216  059A                     __end_ofPL4:	
  1217  059A                     PL14:	
  1218  059A  00E2               	movwf	TimeAddDec@tmp_percent
  1219  059B  085E               	movf	TimeAddDec@bat_value+1,w
  1220  059C  1803               	skipnc
  1221  059D  3E01               	addlw	1
  1222  059E  3EFE               	addlw	254
  1223  059F  00E3               	movwf	TimeAddDec@tmp_percent+1
  1224  05A0  0008               	return
  1225  05A1                     __end_ofPL14:	
  1226                           
  1227                           	psect	text2
  1228  0169                     __ptext2:	
  1229 ;; *************** function ___lwdiv *****************
  1230 ;; Defined at:
  1231 ;;		line 6 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  divisor         2    0[BANK0 ] unsigned int 
  1234 ;;  dividend        2    2[BANK0 ] unsigned int 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  quotient        2    5[BANK0 ] unsigned int 
  1237 ;;  counter         1    4[BANK0 ] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    0[BANK0 ] unsigned int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0
  1242 ;; Tracked objects:
  1243 ;;		On entry : 300/0
  1244 ;;		On exit  : 300/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1
  1247 ;;      Params:         0       4       0
  1248 ;;      Locals:         0       3       0
  1249 ;;      Temps:          0       0       0
  1250 ;;      Totals:         0       7       0
  1251 ;;Total ram usage:        7 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; Hardware stack levels required when called:    3
  1254 ;; This function calls:
  1255 ;;		Nothing
  1256 ;; This function is called by:
  1257 ;;		_TimeAddDec
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           
  1262                           ;psect for function ___lwdiv
  1263  0169                     ___lwdiv:	
  1264                           
  1265                           ;incstack = 0
  1266                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1267  0169  01DB               	clrf	___lwdiv@quotient
  1268  016A  01DC               	clrf	___lwdiv@quotient+1
  1269  016B  0856               	movf	___lwdiv@divisor,w
  1270  016C  0457               	iorwf	___lwdiv@divisor+1,w
  1271  016D  1903               	btfsc	3,2
  1272  016E  298E               	goto	l6678
  1273  016F  01DA               	clrf	___lwdiv@counter
  1274  0170                     L7:	
  1275  0170  0ADA               	incf	___lwdiv@counter,f
  1276  0171  1BD7               	btfsc	___lwdiv@divisor+1,7
  1277  0172  2977               	goto	l6666
  1278  0173  1003               	clrc
  1279  0174  0DD6               	rlf	___lwdiv@divisor,f
  1280  0175  0DD7               	rlf	___lwdiv@divisor+1,f
  1281  0176  2970               	goto	L7
  1282  0177                     l6666:	
  1283  0177  1003               	clrc
  1284  0178  0DDB               	rlf	___lwdiv@quotient,f
  1285  0179  0DDC               	rlf	___lwdiv@quotient+1,f
  1286  017A  0857               	movf	___lwdiv@divisor+1,w
  1287  017B  0259               	subwf	___lwdiv@dividend+1,w
  1288  017C  1D03               	skipz
  1289  017D  2980               	goto	u4505
  1290  017E  0856               	movf	___lwdiv@divisor,w
  1291  017F  0258               	subwf	___lwdiv@dividend,w
  1292  0180                     u4505:	
  1293  0180  1C03               	skipc
  1294  0181  298A               	goto	L8
  1295  0182  0856               	movf	___lwdiv@divisor,w
  1296  0183  02D8               	subwf	___lwdiv@dividend,f
  1297  0184  0857               	movf	___lwdiv@divisor+1,w
  1298  0185  1C03               	skipc
  1299  0186  03D9               	decf	___lwdiv@dividend+1,f
  1300  0187  02D9               	subwf	___lwdiv@dividend+1,f
  1301  0188  145B               	bsf	___lwdiv@quotient,0
  1302  0189  1003               	clrc
  1303  018A                     L8:	
  1304  018A  0CD7               	rrf	___lwdiv@divisor+1,f
  1305  018B  0CD6               	rrf	___lwdiv@divisor,f
  1306  018C  0BDA               	decfsz	___lwdiv@counter,f
  1307  018D  2977               	goto	l6666
  1308  018E                     l6678:	
  1309  018E  085C               	movf	___lwdiv@quotient+1,w
  1310  018F  00D7               	movwf	?___lwdiv+1
  1311  0190  085B               	movf	___lwdiv@quotient,w
  1312  0191  00D6               	movwf	?___lwdiv
  1313  0192  0008               	return
  1314  0193                     __end_of___lwdiv:	
  1315                           
  1316                           	psect	text3
  1317  0040                     __ptext3:	
  1318 ;; *************** function ___bmul *****************
  1319 ;; Defined at:
  1320 ;;		line 4 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  multiplier      1    wreg     unsigned char 
  1323 ;;  multiplicand    1    4[COMMON] unsigned char 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  multiplier      1    1[BANK0 ] unsigned char 
  1326 ;;  product         1    0[BANK0 ] unsigned char 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      unsigned char 
  1329 ;; Registers used:
  1330 ;;		wreg, status,2, status,0
  1331 ;; Tracked objects:
  1332 ;;		On entry : 300/0
  1333 ;;		On exit  : 300/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1
  1336 ;;      Params:         1       0       0
  1337 ;;      Locals:         0       2       0
  1338 ;;      Temps:          0       0       0
  1339 ;;      Totals:         1       2       0
  1340 ;;Total ram usage:        3 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    3
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_TimeAddDec
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function ___bmul
  1352  0040                     ___bmul:	
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1356                           ;___bmul@multiplier stored from wreg
  1357  0040  00D7               	movwf	___bmul@multiplier
  1358  0041  01D6               	clrf	___bmul@product
  1359  0042                     l6618:	
  1360  0042  0877               	movf	___bmul@multiplicand,w
  1361  0043  1857               	btfsc	___bmul@multiplier,0
  1362  0044  07D6               	addwf	___bmul@product,f
  1363  0045  1003               	clrc
  1364  0046  0DF7               	rlf	___bmul@multiplicand,f
  1365  0047  1003               	clrc
  1366  0048  0CD7               	rrf	___bmul@multiplier,f
  1367  0049  0857               	movf	___bmul@multiplier,w
  1368  004A  1D03               	btfss	3,2
  1369  004B  2842               	goto	l6618
  1370  004C  0856               	movf	___bmul@product,w
  1371  004D  0008               	return
  1372  004E                     __end_of___bmul:	
  1373                           
  1374                           	psect	text4
  1375  022A                     __ptext4:	
  1376 ;; *************** function _SysSleep *****************
  1377 ;; Defined at:
  1378 ;;		line 169 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;		None
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;		None
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  1    wreg      void 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2, status,0, pclath, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 300/0
  1389 ;;		On exit  : 200/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMMON   BANK0   BANK1
  1392 ;;      Params:         0       0       0
  1393 ;;      Locals:         0       0       0
  1394 ;;      Temps:          0       0       0
  1395 ;;      Totals:         0       0       0
  1396 ;;Total ram usage:        0 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    5
  1399 ;; This function calls:
  1400 ;;		_Init_System
  1401 ;;		_SysSleepSet
  1402 ;; This function is called by:
  1403 ;;		_main
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function _SysSleep
  1409  022A                     _SysSleep:	
  1410                           
  1411                           ;sc8p1711c.c: 171: if(Flag_on||Flag_usb||Flag_off||Flag_low_alarm||Flag_lk_alarm||Flag_x
      +                          i_alarm||ReadKey) RSleepCnt=0;
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _SysSleep: [wreg+status,2+status,0+pclath+cstack]
  1415  022A  1FF2               	btfss	_Flag_on/(0+8),_Flag_on& (0+7)
  1416  022B  1BF0               	btfsc	_Flag_usb/(0+8),_Flag_usb& (0+7)
  1417  022C  2A36               	goto	l6258
  1418  022D  1F72               	btfss	_Flag_off/(0+8),_Flag_off& (0+7)
  1419  022E  1AF1               	btfsc	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  1420  022F  2A36               	goto	l6258
  1421  0230  1D72               	btfss	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  1422  0231  1BF1               	btfsc	_Flag_xi_alarm/(0+8),_Flag_xi_alarm& (0+7)
  1423  0232  2A36               	goto	l6258
  1424  0233  0849               	movf	_ReadKey,w
  1425  0234  1903               	btfsc	3,2
  1426  0235  2A37               	goto	l6260
  1427  0236                     l6258:	
  1428  0236  01C4               	clrf	_RSleepCnt
  1429  0237                     l6260:	
  1430                           
  1431                           ;sc8p1711c.c: 172: if(Flag_RtSleep) { Flag_RtSleep=0; RSleepCnt++; }
  1432  0237  1EF0               	btfss	_Flag_RtSleep/(0+8),_Flag_RtSleep& (0+7)
  1433  0238  2A3B               	goto	l6266
  1434  0239  12F0               	bcf	_Flag_RtSleep/(0+8),_Flag_RtSleep& (0+7)
  1435  023A  0AC4               	incf	_RSleepCnt,f
  1436  023B                     l6266:	
  1437                           
  1438                           ;sc8p1711c.c: 173: if(RSleepCnt>=200)
  1439  023B  30C8               	movlw	200
  1440  023C  0244               	subwf	_RSleepCnt,w
  1441  023D  1C03               	skipc
  1442  023E  0008               	return
  1443                           
  1444                           ;sc8p1711c.c: 174: {
  1445                           ;sc8p1711c.c: 175: RSleepCnt=0;
  1446  023F  01C4               	clrf	_RSleepCnt
  1447  0240  0064               	clrwdt	;# 
  1448                           
  1449                           ;sc8p1711c.c: 178: INTCON=0;
  1450  0241  018B               	clrf	11	;volatile
  1451                           
  1452                           ;sc8p1711c.c: 179: PIE1 = 0;
  1453  0242  1683               	bsf	3,5	;RP0=1, select bank1
  1454  0243  1303               	bcf	3,6	;RP1=0, select bank1
  1455  0244  018C               	clrf	12	;volatile
  1456                           
  1457                           ;sc8p1711c.c: 180: PIE2 = 0;
  1458  0245  018D               	clrf	13	;volatile
  1459                           
  1460                           ;sc8p1711c.c: 181: PIR1 = 0;
  1461  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0247  018C               	clrf	12	;volatile
  1463                           
  1464                           ;sc8p1711c.c: 183: ADCON0 = 0;
  1465  0248  019F               	clrf	31	;volatile
  1466                           
  1467                           ;sc8p1711c.c: 184: KEYCON0 = 0;
  1468  0249  1703               	bsf	3,6	;RP1=1, select bank2
  1469  024A  0193               	clrf	19	;volatile
  1470                           
  1471                           ;sc8p1711c.c: 185: CCP1CON = 0;
  1472  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1473  024C  0197               	clrf	23	;volatile
  1474                           
  1475                           ;sc8p1711c.c: 186: CCP2CON = 0;
  1476  024D  019D               	clrf	29	;volatile
  1477                           
  1478                           ;sc8p1711c.c: 188: SysSleepSet();
  1479  024E  20FD               	fcall	_SysSleepSet
  1480                           
  1481                           ;sc8p1711c.c: 190: WDTCON=0x00;
  1482  024F  1283               	bcf	3,5	;RP0=0, select bank2
  1483  0250  1703               	bsf	3,6	;RP1=1, select bank2
  1484  0251  0185               	clrf	5	;volatile
  1485                           
  1486                           ;sc8p1711c.c: 191: RBIE=1;
  1487  0252  158B               	bsf	11,3	;volatile
  1488                           
  1489                           ;sc8p1711c.c: 192: GIE =0;
  1490  0253  138B               	bcf	11,7	;volatile
  1491                           
  1492                           ;sc8p1711c.c: 193: IOCB = 0B00110000;
  1493  0254  3030               	movlw	48
  1494  0255  1683               	bsf	3,5	;RP0=1, select bank1
  1495  0256  1303               	bcf	3,6	;RP1=0, select bank1
  1496  0257  0096               	movwf	22	;volatile
  1497                           
  1498                           ;sc8p1711c.c: 194: OSCCON=0X01;
  1499  0258  3001               	movlw	1
  1500  0259  008F               	movwf	15	;volatile
  1501                           
  1502                           ;sc8p1711c.c: 195: RBIF = 0;
  1503  025A  100B               	bcf	11,0	;volatile
  1504                           
  1505                           ;sc8p1711c.c: 196: PORTB;
  1506  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1507  025C  0806               	movf	6,w	;volatile
  1508  025D  0063               	sleep	;# 
  1509  025E  0000               	nop	;# 
  1510                           
  1511                           ;sc8p1711c.c: 199: Init_System();
  1512  025F  2879               	ljmp	l5322
  1513  0260                     __end_of_SysSleep:	
  1514                           
  1515                           	psect	text5
  1516  00FD                     __ptext5:	
  1517 ;; *************** function _SysSleepSet *****************
  1518 ;; Defined at:
  1519 ;;		line 209 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      void 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2
  1528 ;; Tracked objects:
  1529 ;;		On entry : 300/0
  1530 ;;		On exit  : 300/100
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMMON   BANK0   BANK1
  1533 ;;      Params:         0       0       0
  1534 ;;      Locals:         0       0       0
  1535 ;;      Temps:          0       0       0
  1536 ;;      Totals:         0       0       0
  1537 ;;Total ram usage:        0 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    3
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_SysSleep
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           
  1548                           ;psect for function _SysSleepSet
  1549  00FD                     _SysSleepSet:	
  1550                           
  1551                           ;sc8p1711c.c: 211: RBPU=0;
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _SysSleepSet: [wreg+status,2]
  1555  00FD  1683               	bsf	3,5	;RP0=1, select bank1
  1556  00FE  1381               	bcf	1,7	;volatile
  1557                           
  1558                           ;sc8p1711c.c: 213: TRISC =0X00;
  1559  00FF  0187               	clrf	7	;volatile
  1560                           
  1561                           ;sc8p1711c.c: 214: TRISB =0X00;
  1562  0100  0186               	clrf	6	;volatile
  1563                           
  1564                           ;sc8p1711c.c: 215: TRISA =0X00;
  1565  0101  0185               	clrf	5	;volatile
  1566                           
  1567                           ;sc8p1711c.c: 216: TRISE =0X00;
  1568                           
  1569                           ;sc8p1711c.c: 218: WPUA = 0xFF;
  1570                           
  1571                           ;sc8p1711c.c: 219: WPUB = 0xFF;
  1572                           
  1573                           ;sc8p1711c.c: 220: WPUC = 0xFF;
  1574                           
  1575                           ;sc8p1711c.c: 221: WPUE = 0xFF;
  1576                           
  1577                           ;sc8p1711c.c: 223: PORTA = 0X80;
  1578                           
  1579                           ;sc8p1711c.c: 224: PORTB = 0X80;
  1580                           
  1581                           ;sc8p1711c.c: 225: PORTC = 0;
  1582                           
  1583                           ;sc8p1711c.c: 226: PORTE = 0;
  1584  0102  210D               	fcall	PL6	;call to abstracted procedure
  1585                           
  1586                           ;sc8p1711c.c: 228: RA1=1;
  1587  0103  1485               	bsf	5,1	;volatile
  1588                           
  1589                           ;sc8p1711c.c: 229: RA2=1;
  1590  0104  1505               	bsf	5,2	;volatile
  1591                           
  1592                           ;sc8p1711c.c: 230: RA0=1;
  1593  0105  1405               	bsf	5,0	;volatile
  1594                           
  1595                           ;sc8p1711c.c: 231: RA4 =0;
  1596  0106  1205               	bcf	5,4	;volatile
  1597                           
  1598                           ;sc8p1711c.c: 233: TRISB4=1,WPUB4=1;
  1599  0107  1683               	bsf	3,5	;RP0=1, select bank1
  1600  0108  1606               	bsf	6,4	;volatile
  1601  0109  1615               	bsf	21,4	;volatile
  1602                           
  1603                           ;sc8p1711c.c: 234: TRISB5=1,WPUB5=1;
  1604  010A  1686               	bsf	6,5	;volatile
  1605  010B  1695               	bsf	21,5	;volatile
  1606  010C  0008               	return
  1607  010D                     __end_of_SysSleepSet:	
  1608  010D                     PL6:	
  1609  010D  0189               	clrf	9	;volatile
  1610  010E  30FF               	movlw	255
  1611  010F  1703               	bsf	3,6	;RP1=1, select bank3
  1612  0110  008E               	movwf	14	;volatile
  1613  0111  1303               	bcf	3,6	;RP1=0, select bank1
  1614  0112  0095               	movwf	21	;volatile
  1615  0113  1703               	bsf	3,6	;RP1=1, select bank3
  1616  0114  008F               	movwf	15	;volatile
  1617  0115  1283               	bcf	3,5	;RP0=0, select bank2
  1618  0116  009A               	movwf	26	;volatile
  1619  0117  3080               	movlw	128
  1620  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1621  0119  0085               	movwf	5	;volatile
  1622  011A  0086               	movwf	6	;volatile
  1623  011B  0187               	clrf	7	;volatile
  1624  011C  0189               	clrf	9	;volatile
  1625  011D  0008               	return
  1626  011E                     __end_ofPL6:	
  1627                           
  1628                           	psect	text6
  1629  0079                     __ptext6:	
  1630 ;; *************** function _Init_System *****************
  1631 ;; Defined at:
  1632 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\main.C"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, status,0, pclath, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 300/100
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMMON   BANK0   BANK1
  1646 ;;      Params:         0       0       0
  1647 ;;      Locals:         0       0       0
  1648 ;;      Temps:          0       0       0
  1649 ;;      Totals:         0       0       0
  1650 ;;Total ram usage:        0 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    4
  1653 ;; This function calls:
  1654 ;;		_Btn_Init
  1655 ;;		_GPIO_Init
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;;		_SysSleep
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           
  1663                           ;psect for function _Init_System
  1664  0079                     _Init_System:	
  1665  0079                     l5322:	
  1666                           ;incstack = 0
  1667                           ; Regs used in _Init_System: [wreg+status,2+status,0+pclath+cstack]
  1668                           
  1669  0079  0000               	nop	;# 
  1670  007A  0064               	clrwdt	;# 
  1671                           
  1672                           ;main.C: 8: Btn_Init();
  1673  007B  2000               	fcall	_Btn_Init
  1674                           
  1675                           ;main.C: 9: GPIO_Init();
  1676  007C  204E               	fcall	_GPIO_Init
  1677                           
  1678                           ;main.C: 10: WDTCON=0x01;
  1679  007D  3001               	movlw	1
  1680  007E  1283               	bcf	3,5	;RP0=0, select bank2
  1681  007F  0085               	movwf	5	;volatile
  1682                           
  1683                           ;main.C: 11: TRISB =0X00;
  1684  0080  1683               	bsf	3,5	;RP0=1, select bank1
  1685  0081  1303               	bcf	3,6	;RP1=0, select bank1
  1686  0082  0186               	clrf	6	;volatile
  1687                           
  1688                           ;main.C: 12: TRISC =0X00;
  1689  0083  0187               	clrf	7	;volatile
  1690                           
  1691                           ;main.C: 14: OSCCON=0X61;
  1692  0084  3061               	movlw	97
  1693  0085  008F               	movwf	15	;volatile
  1694                           
  1695                           ;main.C: 15: INTCON=0B11000000;
  1696  0086  30C0               	movlw	192
  1697  0087  008B               	movwf	11	;volatile
  1698                           
  1699                           ;main.C: 16: PIE1=0B00000010;
  1700  0088  3002               	movlw	2
  1701  0089  008C               	movwf	12	;volatile
  1702                           
  1703                           ;main.C: 17: T2CON=0B00000100;
  1704  008A  3004               	movlw	4
  1705  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1706  008C  0092               	movwf	18	;volatile
  1707                           
  1708                           ;main.C: 18: PR2 = 200;
  1709  008D  30C8               	movlw	200
  1710  008E  1683               	bsf	3,5	;RP0=1, select bank1
  1711  008F  0092               	movwf	18	;volatile
  1712  0090  0008               	return
  1713  0091                     __end_of_Init_System:	
  1714                           
  1715                           	psect	text7
  1716  004E                     __ptext7:	
  1717 ;; *************** function _GPIO_Init *****************
  1718 ;; Defined at:
  1719 ;;		line 10 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 300/300
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1
  1733 ;;      Params:         0       0       0
  1734 ;;      Locals:         0       0       0
  1735 ;;      Temps:          0       0       0
  1736 ;;      Totals:         0       0       0
  1737 ;;Total ram usage:        0 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    3
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_Init_System
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           
  1748                           ;psect for function _GPIO_Init
  1749  004E                     _GPIO_Init:	
  1750                           
  1751                           ;sc8p1711c.c: 12: RBPU=0;
  1752                           
  1753                           ;incstack = 0
  1754                           ; Regs used in _GPIO_Init: [wreg+status,2]
  1755  004E  1683               	bsf	3,5	;RP0=1, select bank1
  1756  004F  1303               	bcf	3,6	;RP1=0, select bank1
  1757  0050  1381               	bcf	1,7	;volatile
  1758                           
  1759                           ;sc8p1711c.c: 15: TRISA =0X00;
  1760  0051  0185               	clrf	5	;volatile
  1761                           
  1762                           ;sc8p1711c.c: 16: TRISB =0X00;
  1763  0052  0186               	clrf	6	;volatile
  1764                           
  1765                           ;sc8p1711c.c: 17: TRISC =0X00;
  1766  0053  0187               	clrf	7	;volatile
  1767                           
  1768                           ;sc8p1711c.c: 18: TRISE =0X00;
  1769                           
  1770                           ;sc8p1711c.c: 19: WPUA =0XFF;
  1771                           
  1772                           ;sc8p1711c.c: 20: WPUB =0XFF;
  1773                           
  1774                           ;sc8p1711c.c: 21: WPUC =0XFF;
  1775                           
  1776                           ;sc8p1711c.c: 22: WPUE =0XFF;
  1777                           
  1778                           ;sc8p1711c.c: 23: PORTA = 0X80;
  1779                           
  1780                           ;sc8p1711c.c: 24: PORTB = 0X80;
  1781                           
  1782                           ;sc8p1711c.c: 25: PORTC = 0;
  1783                           
  1784                           ;sc8p1711c.c: 26: PORTE = 0;
  1785  0054  210D               	fcall	PL6	;call to abstracted procedure
  1786                           
  1787                           ;sc8p1711c.c: 28: RA0=0;
  1788  0055  1005               	bcf	5,0	;volatile
  1789                           
  1790                           ;sc8p1711c.c: 29: RA4 =1;
  1791  0056  1605               	bsf	5,4	;volatile
  1792                           
  1793                           ;sc8p1711c.c: 33: TRISA2=1,WPUA2=0; ANS2=1;
  1794  0057  1683               	bsf	3,5	;RP0=1, select bank1
  1795  0058  1505               	bsf	5,2	;volatile
  1796  0059  1703               	bsf	3,6	;RP1=1, select bank3
  1797  005A  110E               	bcf	14,2	;volatile
  1798  005B  1508               	bsf	8,2	;volatile
  1799                           
  1800                           ;sc8p1711c.c: 34: TRISA1=1,WPUA1=0; ANS1=1;
  1801  005C  1303               	bcf	3,6	;RP1=0, select bank1
  1802  005D  1485               	bsf	5,1	;volatile
  1803  005E  1703               	bsf	3,6	;RP1=1, select bank3
  1804  005F  108E               	bcf	14,1	;volatile
  1805  0060  1488               	bsf	8,1	;volatile
  1806  0061  0008               	return
  1807  0062                     __end_of_GPIO_Init:	
  1808                           
  1809                           	psect	text8
  1810  0000                     __ptext8:	
  1811 ;; *************** function _Btn_Init *****************
  1812 ;; Defined at:
  1813 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\Kscan.C"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		None
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1
  1827 ;;      Params:         0       0       0
  1828 ;;      Locals:         0       0       0
  1829 ;;      Temps:          0       0       0
  1830 ;;      Totals:         0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    3
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_Init_System
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _Btn_Init
  1843  0000                     _Btn_Init:	
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _Btn_Init: []
  1847  0000  0008               	return
  1848  0001                     __end_of_Btn_Init:	
  1849                           
  1850                           	psect	text9
  1851  01F4                     __ptext9:	
  1852 ;; *************** function _LockSet *****************
  1853 ;; Defined at:
  1854 ;;		line 164 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\AppProc.C"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1863 ;; Tracked objects:
  1864 ;;		On entry : 300/0
  1865 ;;		On exit  : 300/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1
  1868 ;;      Params:         0       0       0
  1869 ;;      Locals:         0       0       0
  1870 ;;      Temps:          0       0       0
  1871 ;;      Totals:         0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    3
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _LockSet
  1884  01F4                     _LockSet:	
  1885                           
  1886                           ;AppProc.C: 166: switch(sta_lock)
  1887                           
  1888                           ;incstack = 0
  1889                           ; Regs used in _LockSet: [wreg-fsr0h+status,2+status,0]
  1890  01F4  2A21               	goto	l5936
  1891  01F5                     l3572:	
  1892                           ;AppProc.C: 167: {
  1893                           ;AppProc.C: 168: case 0:
  1894                           
  1895                           
  1896                           ;AppProc.C: 169: Flag_lk_set =0;
  1897  01F5  11F2               	bcf	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  1898                           
  1899                           ;AppProc.C: 170: timer_lock =0;
  1900  01F6  01AB               	clrf	_timer_lock
  1901                           
  1902                           ;AppProc.C: 172: if(ReadKey&0x02)
  1903  01F7  1CC9               	btfss	_ReadKey,1
  1904  01F8  2A04               	goto	l5902
  1905                           
  1906                           ;AppProc.C: 173: {
  1907                           ;AppProc.C: 174: if(Flag_lk){ Flag_lk_alarm=1; Flag_lk_set=1; lock_count_down=3;}else lo
      +                          ck_count_down=4;
  1908  01F9  1E72               	btfss	_Flag_lk/(0+8),_Flag_lk& (0+7)
  1909  01FA  29FF               	goto	l5896
  1910  01FB  3003               	movlw	3
  1911  01FC  1572               	bsf	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  1912  01FD  15F2               	bsf	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  1913  01FE  2A00               	goto	L9
  1914  01FF                     l5896:	
  1915  01FF  3004               	movlw	4
  1916  0200                     L9:	
  1917  0200  00C3               	movwf	_lock_count_down
  1918                           
  1919                           ;AppProc.C: 175: Flag_key_long = 1;
  1920  0201  1570               	bsf	_Flag_key_long/(0+8),_Flag_key_long& (0+7)
  1921                           
  1922                           ;AppProc.C: 176: sta_lock=1;
  1923  0202  01AC               	clrf	_sta_lock
  1924  0203  0AAC               	incf	_sta_lock,f
  1925  0204                     l5902:	
  1926                           
  1927                           ;AppProc.C: 179: if(ReadKey&0x02)
  1928  0204  1CC9               	btfss	_ReadKey,1
  1929  0205  2A1F               	goto	l5930
  1930  0206  3064               	movlw	100
  1931                           
  1932                           ;AppProc.C: 180: {
  1933                           ;AppProc.C: 181: timer_lock++;
  1934  0207  0AAB               	incf	_timer_lock,f
  1935                           
  1936                           ;AppProc.C: 182: if(timer_lock>=100)
  1937  0208  022B               	subwf	_timer_lock,w
  1938  0209  1C03               	skipc
  1939  020A  0008               	return
  1940                           
  1941                           ;AppProc.C: 183: {
  1942                           ;AppProc.C: 184: timer_lock = 0;
  1943  020B  01AB               	clrf	_timer_lock
  1944                           
  1945                           ;AppProc.C: 185: if(lock_count_down)
  1946  020C  0843               	movf	_lock_count_down,w
  1947  020D  1903               	btfsc	3,2
  1948  020E  0008               	return
  1949                           
  1950                           ;AppProc.C: 186: {
  1951                           ;AppProc.C: 187: Flag_lk_set=1;
  1952  020F  15F2               	bsf	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  1953                           
  1954                           ;AppProc.C: 188: lock_count_down--;
  1955  0210  03C3               	decf	_lock_count_down,f
  1956                           
  1957                           ;AppProc.C: 189: if(lock_count_down==0)
  1958  0211  0843               	movf	_lock_count_down,w
  1959  0212  1D03               	btfss	3,2
  1960  0213  0008               	return
  1961                           
  1962                           ;AppProc.C: 190: {
  1963                           ;AppProc.C: 191: Flag_lk=~Flag_lk;
  1964  0214  3010               	movlw	(0+1) shl (_Flag_lk& (0+7))
  1965  0215  06F2               	xorwf	_Flag_lk/(0+8),f
  1966                           
  1967                           ;AppProc.C: 192: if(Flag_lk) Flag_lk_alarm=1; else Flag_lk_alarm=0;
  1968  0216  1E72               	btfss	_Flag_lk/(0+8),_Flag_lk& (0+7)
  1969  0217  2A1A               	goto	l3581
  1970  0218  1572               	bsf	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  1971  0219  2A1B               	goto	l3582
  1972  021A                     l3581:	
  1973  021A  1172               	bcf	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  1974  021B                     l3582:	
  1975  021B  3003               	movlw	3
  1976                           
  1977                           ;AppProc.C: 193: Flag_lk_set=0;
  1978  021C  11F2               	bcf	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  1979                           
  1980                           ;AppProc.C: 194: timer_lock=0;
  1981  021D  01AB               	clrf	_timer_lock
  1982                           
  1983                           ;AppProc.C: 195: alarm_beep_cnt=3,speed_beep=25;
  1984  021E  2E82               	ljmp	PL26	;call to abstracted procedure
  1985  021F                     l5930:	
  1986                           
  1987                           ;AppProc.C: 200: else sta_lock=0;
  1988  021F  01AC               	clrf	_sta_lock
  1989                           
  1990                           ;AppProc.C: 201: break;
  1991  0220  0008               	return
  1992  0221                     l5936:	
  1993  0221  082C               	movf	_sta_lock,w
  1994                           
  1995                           ; Switch size 1, requested type "space"
  1996                           ; Number of cases is 2, Range of values is 0 to 1
  1997                           ; switch strategies available:
  1998                           ; Name         Instructions Cycles
  1999                           ; simple_byte            7     4 (average)
  2000                           ; direct_byte            8     6 (fixed)
  2001                           ; jumptable            260     6 (fixed)
  2002                           ;	Chosen strategy is simple_byte
  2003  0222  3A00               	xorlw	0	; case 0
  2004  0223  1903               	skipnz
  2005  0224  29F5               	goto	l3572
  2006  0225  3A01               	xorlw	1	; case 1
  2007  0226  1903               	skipnz
  2008  0227  2A04               	goto	l5902
  2009  0228  2A1F               	goto	l5930
  2010  0229  0008               	return
  2011  022A                     __end_of_LockSet:	
  2012                           
  2013                           	psect	text10
  2014  0686                     __ptext10:	
  2015 ;; *************** function _LedRamUpdate *****************
  2016 ;; Defined at:
  2017 ;;		line 139 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\display.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;		None
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 300/0
  2028 ;;		On exit  : 300/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMMON   BANK0   BANK1
  2031 ;;      Params:         0       0       0
  2032 ;;      Locals:         0       0       0
  2033 ;;      Temps:          0       0       0
  2034 ;;      Totals:         0       0       0
  2035 ;;Total ram usage:        0 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    5
  2038 ;; This function calls:
  2039 ;;		_DisPlayIcon
  2040 ;;		_DisPlayNum
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _LedRamUpdate
  2048  0686                     _LedRamUpdate:	
  2049                           
  2050                           ;display.c: 141: static unsigned char led_cp_cnt,
  2051                           ;display.c: 142: led_cp,
  2052                           ;display.c: 143: led_boot_cnt,
  2053                           ;display.c: 144: alarm_lk_cnt,
  2054                           ;display.c: 145: alarm_xi_cnt,
  2055                           ;display.c: 146: alarm_low_cnt,
  2056                           ;display.c: 147: timer_chr_boot,
  2057                           ;display.c: 148: chr_boot_cnt;
  2058                           ;display.c: 149: static unsigned char timer_off,
  2059                           ;display.c: 150: timer_add,
  2060                           ;display.c: 151: timer_chr,
  2061                           ;display.c: 152: timer_lk,
  2062                           ;display.c: 153: timer_xi;
  2063                           ;display.c: 155: LED_RAM_R[0]=0; LED_RAM_R[1]=0; LED_RAM_R[2]=0; LED_RAM_R[3]=0;
  2064                           
  2065                           ;incstack = 0
  2066                           ; Regs used in _LedRamUpdate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2067  0686  1683               	bsf	3,5	;RP0=1, select bank1
  2068  0687  01A0               	clrf	_LED_RAM_R^(0+128)
  2069  0688  01A1               	clrf	(_LED_RAM_R^(0+128)+1)
  2070  0689  01A2               	clrf	(_LED_RAM_R^(0+128)+2)
  2071  068A  01A3               	clrf	(_LED_RAM_R^(0+128)+3)
  2072                           
  2073                           ;display.c: 157: if(Flag_usb) { Flag_off=0; Flag_lk_set=0; Flag_lk_alarm=0; }
  2074  068B  1FF0               	btfss	_Flag_usb/(0+8),_Flag_usb& (0+7)
  2075  068C  2E90               	goto	l2131
  2076  068D  1372               	bcf	_Flag_off/(0+8),_Flag_off& (0+7)
  2077  068E  11F2               	bcf	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  2078  068F  1172               	bcf	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  2079  0690                     l2131:	
  2080                           
  2081                           ;display.c: 158: if(Flag_lk_set) { Flag_on=0; Flag_off=0; Flag_low_alarm=0; }
  2082  0690  1DF2               	btfss	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  2083  0691  2E95               	goto	l2132
  2084  0692  13F2               	bcf	_Flag_on/(0+8),_Flag_on& (0+7)
  2085  0693  1372               	bcf	_Flag_off/(0+8),_Flag_off& (0+7)
  2086  0694  12F1               	bcf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  2087  0695                     l2132:	
  2088                           
  2089                           ;display.c: 159: if(Flag_on||Flag_low_alarm) Flag_usb=0;
  2090  0695  1FF2               	btfss	_Flag_on/(0+8),_Flag_on& (0+7)
  2091  0696  1AF1               	btfsc	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  2092  0697  13F0               	bcf	_Flag_usb/(0+8),_Flag_usb& (0+7)
  2093                           
  2094                           ;display.c: 162: if(Flag_usb)
  2095  0698  1FF0               	btfss	_Flag_usb/(0+8),_Flag_usb& (0+7)
  2096  0699  2EED               	goto	l2136
  2097                           
  2098                           ;display.c: 163: {
  2099                           ;display.c: 164: if(Flag_chr_boot)
  2100  069A  1C71               	btfss	_Flag_chr_boot/(0+8),_Flag_chr_boot& (0+7)
  2101  069B  2EDB               	goto	l7000
  2102  069C  301E               	movlw	30
  2103                           
  2104                           ;display.c: 165: {
  2105                           ;display.c: 166: timer_chr_boot++;
  2106  069D  1283               	bcf	3,5	;RP0=0, select bank0
  2107  069E  0ABB               	incf	LedRamUpdate@timer_chr_boot,f
  2108                           
  2109                           ;display.c: 167: if(timer_chr_boot>=30)
  2110  069F  023B               	subwf	LedRamUpdate@timer_chr_boot,w
  2111  06A0  1C03               	skipc
  2112  06A1  2ECD               	goto	l6998
  2113                           
  2114                           ;display.c: 168: {
  2115                           ;display.c: 169: timer_chr_boot=0;
  2116  06A2  01BB               	clrf	LedRamUpdate@timer_chr_boot
  2117                           
  2118                           ;display.c: 170: if(Flag_scan_dir)
  2119  06A3  1CEF               	btfss	_Flag_scan_dir/(0+8),_Flag_scan_dir& (0+7)
  2120  06A4  2EAC               	goto	l6980
  2121  06A5  3006               	movlw	6
  2122                           
  2123                           ;display.c: 171: { chr_boot_cnt++; if(chr_boot_cnt>5) Flag_scan_dir=0; }
  2124  06A6  0ABA               	incf	LedRamUpdate@chr_boot_cnt,f
  2125  06A7  023A               	subwf	LedRamUpdate@chr_boot_cnt,w
  2126  06A8  1C03               	skipc
  2127  06A9  2ECD               	goto	l6998
  2128  06AA  10EF               	bcf	_Flag_scan_dir/(0+8),_Flag_scan_dir& (0+7)
  2129  06AB  2ECD               	goto	l6998
  2130  06AC                     l6980:	
  2131                           
  2132                           ;display.c: 172: else
  2133                           ;display.c: 173: { chr_boot_cnt--; if(chr_boot_cnt==0) Flag_chr_boot=0; }
  2134  06AC  0BBA               	decfsz	LedRamUpdate@chr_boot_cnt,f
  2135  06AD  2ECD               	goto	l6998
  2136  06AE  1071               	bcf	_Flag_chr_boot/(0+8),_Flag_chr_boot& (0+7)
  2137                           
  2138                           ;display.c: 174: }
  2139                           ;display.c: 175: switch(chr_boot_cnt)
  2140  06AF  2ECD               	goto	l6998
  2141  06B0                     l6986:	
  2142  06B0  3002               	movlw	2
  2143  06B1  00F7               	movwf	DisPlayIcon@icon_sel
  2144  06B2  303C               	movlw	60
  2145  06B3  01F8               	clrf	DisPlayIcon@icon_sta
  2146  06B4  0AF8               	incf	DisPlayIcon@icon_sta,f
  2147  06B5  211E               	fcall	_DisPlayIcon
  2148  06B6  2EF2               	goto	l7010
  2149  06B7                     l6988:	
  2150  06B7  3070               	movlw	112
  2151  06B8  27D4               	fcall	PL12	;call to abstracted procedure
  2152  06B9  211E               	fcall	_DisPlayIcon
  2153  06BA  2EF2               	goto	l7010
  2154  06BB                     l6990:	
  2155  06BB  27CE               	fcall	PL8	;call to abstracted procedure
  2156  06BC  211E               	fcall	_DisPlayIcon
  2157  06BD  3002               	movlw	2
  2158  06BE  00F7               	movwf	DisPlayIcon@icon_sel
  2159  06BF  3003               	movlw	3
  2160  06C0  01F8               	clrf	DisPlayIcon@icon_sta
  2161  06C1  0AF8               	incf	DisPlayIcon@icon_sta,f
  2162  06C2  211E               	fcall	_DisPlayIcon
  2163  06C3  2EF2               	goto	l7010
  2164  06C4                     l6992:	
  2165  06C4  3003               	movlw	3
  2166  06C5  00D9               	movwf	DisPlayNum@dig_sel
  2167  06C6  3058               	movlw	88
  2168  06C7  2193               	fcall	_DisPlayNum
  2169  06C8  2EF2               	goto	l7010
  2170  06C9                     l6994:	
  2171  06C9  3007               	movlw	7
  2172  06CA  27D4               	fcall	PL12	;call to abstracted procedure
  2173  06CB  211E               	fcall	_DisPlayIcon
  2174  06CC  2EF2               	goto	l7010
  2175  06CD                     l6998:	
  2176  06CD  083A               	movf	LedRamUpdate@chr_boot_cnt,w
  2177                           
  2178                           ; Switch size 1, requested type "space"
  2179                           ; Number of cases is 5, Range of values is 1 to 5
  2180                           ; switch strategies available:
  2181                           ; Name         Instructions Cycles
  2182                           ; direct_byte           14     9 (fixed)
  2183                           ; simple_byte           16     9 (average)
  2184                           ; jumptable            263     9 (fixed)
  2185                           ;	Chosen strategy is direct_byte
  2186  06CE  3EFF               	addlw	-1
  2187  06CF  1C03               	skipc
  2188  06D0  2EF2               	goto	l7010
  2189  06D1  0084               	movwf	4
  2190  06D2  3005               	movlw	5
  2191  06D3  0204               	subwf	4,w
  2192  06D4  1803               	skipnc
  2193  06D5  2EF2               	goto	l7010
  2194  06D6  3000               	movlw	high S7340
  2195  06D7  008A               	movwf	10
  2196  06D8  3021               	movlw	low S7340
  2197  06D9  0704               	addwf	4,w
  2198  06DA  0082               	movwf	2
  2199  06DB                     l7000:	
  2200                           
  2201                           ;display.c: 185: else
  2202                           ;display.c: 186: {
  2203                           ;display.c: 187: DisPlayNum(bat_percent,0X03);
  2204  06DB  27EA               	fcall	PL24	;call to abstracted procedure
  2205  06DC  2193               	fcall	_DisPlayNum
  2206                           
  2207                           ;display.c: 188: DisPlayIcon(0X08,1,1);
  2208  06DD  27CE               	fcall	PL8	;call to abstracted procedure
  2209  06DE  211E               	fcall	_DisPlayIcon
  2210                           
  2211                           ;display.c: 189: DisPlayIcon(0X02,2,1);
  2212  06DF  27D9               	fcall	PL16	;call to abstracted procedure
  2213  06E0  211E               	fcall	_DisPlayIcon
  2214                           
  2215                           ;display.c: 190: if(Flag_chr)
  2216  06E1  1CF1               	btfss	_Flag_chr/(0+8),_Flag_chr& (0+7)
  2217  06E2  2EE6               	goto	l7006
  2218                           
  2219                           ;display.c: 191: { DisPlayIcon(0X08,2,1); }
  2220  06E3  27E4               	fcall	PL22	;call to abstracted procedure
  2221  06E4  211E               	fcall	_DisPlayIcon
  2222  06E5  2EF2               	goto	l7010
  2223  06E6                     l7006:	
  2224                           
  2225                           ;display.c: 192: else
  2226                           ;display.c: 193: { DisPlayIcon(0X04,2,1); }
  2227  06E6  3002               	movlw	2
  2228  06E7  00F7               	movwf	DisPlayIcon@icon_sel
  2229  06E8  3004               	movlw	4
  2230  06E9  01F8               	clrf	DisPlayIcon@icon_sta
  2231  06EA  0AF8               	incf	DisPlayIcon@icon_sta,f
  2232  06EB  211E               	fcall	_DisPlayIcon
  2233                           
  2234                           ;display.c: 194: }
  2235                           ;display.c: 195: }
  2236  06EC  2EF2               	goto	l7010
  2237  06ED                     l2136:	
  2238                           
  2239                           ;display.c: 196: else
  2240                           ;display.c: 197: {
  2241                           ;display.c: 198: Flag_chr_boot=1;
  2242  06ED  1471               	bsf	_Flag_chr_boot/(0+8),_Flag_chr_boot& (0+7)
  2243                           
  2244                           ;display.c: 199: Flag_scan_dir=1; timer_chr_boot=0; chr_boot_cnt=0;
  2245  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  2246  06EF  14EF               	bsf	_Flag_scan_dir/(0+8),_Flag_scan_dir& (0+7)
  2247  06F0  01BB               	clrf	LedRamUpdate@timer_chr_boot
  2248  06F1  01BA               	clrf	LedRamUpdate@chr_boot_cnt
  2249  06F2                     l7010:	
  2250                           
  2251                           ;display.c: 200: }
  2252                           ;display.c: 202: if(Flag_xi_alarm)
  2253  06F2  1FF1               	btfss	_Flag_xi_alarm/(0+8),_Flag_xi_alarm& (0+7)
  2254  06F3  2F0F               	goto	l7032
  2255                           
  2256                           ;display.c: 203: {
  2257                           ;display.c: 204: if(timer_xi<50) { DisPlayIcon(0X20,2,1); }
  2258  06F4  3032               	movlw	50
  2259  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  2260  06F6  0236               	subwf	LedRamUpdate@timer_xi,w
  2261  06F7  1803               	skipnc
  2262  06F8  2EFF               	goto	l7016
  2263  06F9  3002               	movlw	2
  2264  06FA  00F7               	movwf	DisPlayIcon@icon_sel
  2265  06FB  3020               	movlw	32
  2266  06FC  01F8               	clrf	DisPlayIcon@icon_sta
  2267  06FD  0AF8               	incf	DisPlayIcon@icon_sta,f
  2268  06FE  211E               	fcall	_DisPlayIcon
  2269  06FF                     l7016:	
  2270  06FF  3065               	movlw	101
  2271                           
  2272                           ;display.c: 205: timer_xi++; if(timer_xi>100) { timer_xi=0; alarm_xi_cnt++; }
  2273  0700  1283               	bcf	3,5	;RP0=0, select bank0
  2274  0701  0AB6               	incf	LedRamUpdate@timer_xi,f
  2275  0702  0236               	subwf	LedRamUpdate@timer_xi,w
  2276  0703  1C03               	skipc
  2277  0704  2F07               	goto	l7024
  2278  0705  01B6               	clrf	LedRamUpdate@timer_xi
  2279  0706  0ABD               	incf	LedRamUpdate@alarm_xi_cnt,f
  2280  0707                     l7024:	
  2281                           
  2282                           ;display.c: 206: if(Flag_xi) alarm_xi_cnt=0;
  2283  0707  1872               	btfsc	_Flag_xi/(0+8),_Flag_xi& (0+7)
  2284  0708  01BD               	clrf	LedRamUpdate@alarm_xi_cnt
  2285                           
  2286                           ;display.c: 207: if(alarm_xi_cnt>=5) Flag_xi_alarm=0;
  2287  0709  3005               	movlw	5
  2288  070A  023D               	subwf	LedRamUpdate@alarm_xi_cnt,w
  2289  070B  1C03               	skipc
  2290  070C  2F12               	goto	l7034
  2291  070D  13F1               	bcf	_Flag_xi_alarm/(0+8),_Flag_xi_alarm& (0+7)
  2292  070E  2F12               	goto	l7034
  2293  070F                     l7032:	
  2294                           
  2295                           ;display.c: 209: else{ alarm_xi_cnt=0; timer_xi=0; }
  2296  070F  1283               	bcf	3,5	;RP0=0, select bank0
  2297  0710  01BD               	clrf	LedRamUpdate@alarm_xi_cnt
  2298  0711  01B6               	clrf	LedRamUpdate@timer_xi
  2299  0712                     l7034:	
  2300                           
  2301                           ;display.c: 211: if(Flag_lk_alarm)
  2302  0712  1D72               	btfss	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  2303  0713  2F30               	goto	l7058
  2304  0714  3032               	movlw	50
  2305                           
  2306                           ;display.c: 212: {
  2307                           ;display.c: 213: Flag_low_alarm=0;
  2308  0715  12F1               	bcf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  2309                           
  2310                           ;display.c: 214: Flag_on=0;
  2311  0716  13F2               	bcf	_Flag_on/(0+8),_Flag_on& (0+7)
  2312                           
  2313                           ;display.c: 215: if(timer_lk<50) { DisPlayIcon(0X10,2,1); }
  2314  0717  0237               	subwf	LedRamUpdate@timer_lk,w
  2315  0718  1803               	skipnc
  2316  0719  2F20               	goto	l7042
  2317  071A  3002               	movlw	2
  2318  071B  00F7               	movwf	DisPlayIcon@icon_sel
  2319  071C  3010               	movlw	16
  2320  071D  01F8               	clrf	DisPlayIcon@icon_sta
  2321  071E  0AF8               	incf	DisPlayIcon@icon_sta,f
  2322  071F  211E               	fcall	_DisPlayIcon
  2323  0720                     l7042:	
  2324  0720  3065               	movlw	101
  2325                           
  2326                           ;display.c: 216: timer_lk++; if(timer_lk>100) { timer_lk=0; alarm_lk_cnt++; }
  2327  0721  1283               	bcf	3,5	;RP0=0, select bank0
  2328  0722  0AB7               	incf	LedRamUpdate@timer_lk,f
  2329  0723  0237               	subwf	LedRamUpdate@timer_lk,w
  2330  0724  1C03               	skipc
  2331  0725  2F28               	goto	l7050
  2332  0726  01B7               	clrf	LedRamUpdate@timer_lk
  2333  0727  0ABE               	incf	LedRamUpdate@alarm_lk_cnt,f
  2334  0728                     l7050:	
  2335                           
  2336                           ;display.c: 217: if(Flag_key_long) alarm_lk_cnt=0;
  2337  0728  1970               	btfsc	_Flag_key_long/(0+8),_Flag_key_long& (0+7)
  2338  0729  01BE               	clrf	LedRamUpdate@alarm_lk_cnt
  2339                           
  2340                           ;display.c: 218: if(alarm_lk_cnt>=5) Flag_lk_alarm=0;
  2341  072A  3005               	movlw	5
  2342  072B  023E               	subwf	LedRamUpdate@alarm_lk_cnt,w
  2343  072C  1C03               	skipc
  2344  072D  2F32               	goto	l7060
  2345  072E  1172               	bcf	_Flag_lk_alarm/(0+8),_Flag_lk_alarm& (0+7)
  2346  072F  2F32               	goto	l7060
  2347  0730                     l7058:	
  2348                           
  2349                           ;display.c: 220: else
  2350                           ;display.c: 221: { alarm_lk_cnt=0; timer_lk=0; }
  2351  0730  01BE               	clrf	LedRamUpdate@alarm_lk_cnt
  2352  0731  01B7               	clrf	LedRamUpdate@timer_lk
  2353  0732                     l7060:	
  2354                           
  2355                           ;display.c: 223: if(Flag_lk_set){
  2356  0732  1DF2               	btfss	_Flag_lk_set/(0+8),_Flag_lk_set& (0+7)
  2357  0733  2F40               	goto	l7066
  2358                           
  2359                           ;display.c: 224: if(Flag_lk) DisPlayIcon(0X70,1,1);
  2360  0734  1E72               	btfss	_Flag_lk/(0+8),_Flag_lk& (0+7)
  2361  0735  2F39               	goto	l2168
  2362  0736  3070               	movlw	112
  2363  0737  27D4               	fcall	PL12	;call to abstracted procedure
  2364  0738  211E               	fcall	_DisPlayIcon
  2365  0739                     l2168:	
  2366                           
  2367                           ;display.c: 225: DisPlayIcon(0X01,2,1);
  2368  0739  27DE               	fcall	PL20	;call to abstracted procedure
  2369  073A  211E               	fcall	_DisPlayIcon
  2370                           
  2371                           ;display.c: 226: DisPlayNum(lock_count_down,0X02);
  2372  073B  3002               	movlw	2
  2373  073C  1283               	bcf	3,5	;RP0=0, select bank0
  2374  073D  00D9               	movwf	DisPlayNum@dig_sel
  2375  073E  0843               	movf	_lock_count_down,w
  2376  073F  2193               	fcall	_DisPlayNum
  2377  0740                     l7066:	
  2378                           
  2379                           ;display.c: 227: }
  2380                           ;display.c: 229: if(Flag_on)
  2381  0740  1FF2               	btfss	_Flag_on/(0+8),_Flag_on& (0+7)
  2382  0741  2F78               	goto	l2169
  2383                           
  2384                           ;display.c: 230: {
  2385                           ;display.c: 231: DisPlayIcon(0X08,1,1);
  2386  0742  27CE               	fcall	PL8	;call to abstracted procedure
  2387  0743  211E               	fcall	_DisPlayIcon
  2388                           
  2389                           ;display.c: 232: DisPlayIcon(0X02,2,1);
  2390  0744  27D9               	fcall	PL16	;call to abstracted procedure
  2391  0745  211E               	fcall	_DisPlayIcon
  2392                           
  2393                           ;display.c: 233: if(Flag_on_boot)
  2394  0746  1EF2               	btfss	_Flag_on_boot/(0+8),_Flag_on_boot& (0+7)
  2395  0747  2F75               	goto	l7116
  2396  0748  3014               	movlw	20
  2397                           
  2398                           ;display.c: 234: {
  2399                           ;display.c: 235: timer_add++;
  2400  0749  1283               	bcf	3,5	;RP0=0, select bank0
  2401  074A  0AB8               	incf	LedRamUpdate@timer_add,f
  2402                           
  2403                           ;display.c: 236: if(timer_add>=20)
  2404  074B  0238               	subwf	LedRamUpdate@timer_add,w
  2405  074C  1C03               	skipc
  2406  074D  2F70               	goto	l7114
  2407                           
  2408                           ;display.c: 237: {
  2409                           ;display.c: 238: timer_add=0;
  2410  074E  01B8               	clrf	LedRamUpdate@timer_add
  2411                           
  2412                           ;display.c: 239: if(Flag_ledcp_dir)
  2413  074F  1C6F               	btfss	_Flag_ledcp_dir/(0+8),_Flag_ledcp_dir& (0+7)
  2414  0750  2F5B               	goto	l7090
  2415  0751  3003               	movlw	3
  2416                           
  2417                           ;display.c: 240: { led_cp_cnt++;if(led_cp_cnt>2){led_cp_cnt=2;Flag_ledcp_dir=0;led_boot_
      +                          cnt++;} }
  2418  0752  0AC1               	incf	LedRamUpdate@led_cp_cnt,f
  2419  0753  0241               	subwf	LedRamUpdate@led_cp_cnt,w
  2420  0754  1C03               	skipc
  2421  0755  2F5F               	goto	l7098
  2422  0756  3002               	movlw	2
  2423  0757  00C1               	movwf	LedRamUpdate@led_cp_cnt
  2424  0758  106F               	bcf	_Flag_ledcp_dir/(0+8),_Flag_ledcp_dir& (0+7)
  2425  0759  0ABF               	incf	LedRamUpdate@led_boot_cnt,f
  2426  075A  2F5F               	goto	l7098
  2427  075B                     l7090:	
  2428                           
  2429                           ;display.c: 241: else
  2430                           ;display.c: 242: { led_cp_cnt--;if(led_cp_cnt==0){ led_cp_cnt=0; Flag_ledcp_dir=1;} }
  2431  075B  0BC1               	decfsz	LedRamUpdate@led_cp_cnt,f
  2432  075C  2F5F               	goto	l7098
  2433  075D  01C1               	clrf	LedRamUpdate@led_cp_cnt
  2434  075E  146F               	bsf	_Flag_ledcp_dir/(0+8),_Flag_ledcp_dir& (0+7)
  2435  075F                     l7098:	
  2436                           
  2437                           ;display.c: 243: if(led_boot_cnt>=3) Flag_on_boot=0;
  2438  075F  3003               	movlw	3
  2439  0760  023F               	subwf	LedRamUpdate@led_boot_cnt,w
  2440  0761  1803               	btfsc	3,0
  2441  0762  12F2               	bcf	_Flag_on_boot/(0+8),_Flag_on_boot& (0+7)
  2442                           
  2443                           ;display.c: 245: if(led_cp_cnt==0) led_cp=0X00;
  2444  0763  0841               	movf	LedRamUpdate@led_cp_cnt,w
  2445  0764  1903               	btfsc	3,2
  2446  0765  01C0               	clrf	LedRamUpdate@led_cp
  2447                           
  2448                           ;display.c: 246: if(led_cp_cnt==1) led_cp=0X02;
  2449  0766  0B41               	decfsz	LedRamUpdate@led_cp_cnt,w
  2450  0767  2F6A               	goto	l7110
  2451  0768  3002               	movlw	2
  2452  0769  00C0               	movwf	LedRamUpdate@led_cp
  2453  076A                     l7110:	
  2454                           
  2455                           ;display.c: 247: if(led_cp_cnt==2) led_cp=0X02|0X01;
  2456  076A  3002               	movlw	2
  2457  076B  0641               	xorwf	LedRamUpdate@led_cp_cnt,w
  2458  076C  1D03               	btfss	3,2
  2459  076D  2F70               	goto	l7114
  2460  076E  3003               	movlw	3
  2461  076F  00C0               	movwf	LedRamUpdate@led_cp
  2462  0770                     l7114:	
  2463                           
  2464                           ;display.c: 248: }
  2465                           ;display.c: 249: DisPlayNum(bat_percent,led_cp);
  2466  0770  0840               	movf	LedRamUpdate@led_cp,w
  2467  0771  00D9               	movwf	DisPlayNum@dig_sel
  2468  0772  0854               	movf	_bat_percent,w
  2469  0773  2193               	fcall	_DisPlayNum
  2470                           
  2471                           ;display.c: 250: }
  2472  0774  2FA0               	goto	l7140
  2473  0775                     l7116:	
  2474                           
  2475                           ;display.c: 251: else { DisPlayNum(bat_percent,0X03); }
  2476  0775  27EA               	fcall	PL24	;call to abstracted procedure
  2477  0776  2193               	fcall	_DisPlayNum
  2478  0777  2FA0               	goto	l7140
  2479  0778                     l2169:	
  2480                           
  2481                           ;display.c: 255: else if(Flag_low_alarm)
  2482  0778  1EF1               	btfss	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  2483  0779  2F98               	goto	l2182
  2484                           
  2485                           ;display.c: 256: {
  2486                           ;display.c: 257: DisPlayIcon(0X08,1,1);
  2487  077A  27CE               	fcall	PL8	;call to abstracted procedure
  2488  077B  211E               	fcall	_DisPlayIcon
  2489                           
  2490                           ;display.c: 258: DisPlayIcon(0X02,2,1);
  2491  077C  27D9               	fcall	PL16	;call to abstracted procedure
  2492  077D  211E               	fcall	_DisPlayIcon
  2493                           
  2494                           ;display.c: 259: if(timer_add<100) { DisPlayNum(bat_percent,0X03); DisPlayIcon(0X08,2,1)
      +                          ; }
  2495  077E  3064               	movlw	100
  2496  077F  1283               	bcf	3,5	;RP0=0, select bank0
  2497  0780  0238               	subwf	LedRamUpdate@timer_add,w
  2498  0781  1803               	skipnc
  2499  0782  2F89               	goto	l7124
  2500  0783  3003               	movlw	3
  2501  0784  00D9               	movwf	DisPlayNum@dig_sel
  2502  0785  0854               	movf	_bat_percent,w
  2503  0786  2193               	fcall	_DisPlayNum
  2504  0787  27E4               	fcall	PL22	;call to abstracted procedure
  2505  0788  211E               	fcall	_DisPlayIcon
  2506  0789                     l7124:	
  2507  0789  30C9               	movlw	201
  2508                           
  2509                           ;display.c: 260: timer_add++; if(timer_add>200) { timer_add=0; alarm_low_cnt++; }
  2510  078A  1283               	bcf	3,5	;RP0=0, select bank0
  2511  078B  0AB8               	incf	LedRamUpdate@timer_add,f
  2512  078C  0238               	subwf	LedRamUpdate@timer_add,w
  2513  078D  1C03               	skipc
  2514  078E  2F91               	goto	l7132
  2515  078F  01B8               	clrf	LedRamUpdate@timer_add
  2516  0790  0ABC               	incf	LedRamUpdate@alarm_low_cnt,f
  2517  0791                     l7132:	
  2518                           
  2519                           ;display.c: 261: if(alarm_low_cnt>4) Flag_low_alarm=0;
  2520  0791  3005               	movlw	5
  2521  0792  023C               	subwf	LedRamUpdate@alarm_low_cnt,w
  2522  0793  1803               	btfsc	3,0
  2523  0794  12F1               	bcf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  2524                           
  2525                           ;display.c: 262: if(Flag_low) alarm_low_cnt=0;
  2526  0795  1F71               	btfss	_Flag_low/(0+8),_Flag_low& (0+7)
  2527  0796  2FA0               	goto	l7140
  2528  0797  2F9F               	goto	L10
  2529  0798                     l2182:	
  2530                           
  2531                           ;display.c: 264: else
  2532                           ;display.c: 265: {
  2533                           ;display.c: 266: Flag_on_boot=1; Flag_ledcp_dir=1; led_cp=0; led_cp_cnt=0; led_boot_cnt=
      +                          0;
  2534  0798  16F2               	bsf	_Flag_on_boot/(0+8),_Flag_on_boot& (0+7)
  2535  0799  1283               	bcf	3,5	;RP0=0, select bank0
  2536  079A  146F               	bsf	_Flag_ledcp_dir/(0+8),_Flag_ledcp_dir& (0+7)
  2537  079B  01C0               	clrf	LedRamUpdate@led_cp
  2538  079C  01C1               	clrf	LedRamUpdate@led_cp_cnt
  2539  079D  01BF               	clrf	LedRamUpdate@led_boot_cnt
  2540                           
  2541                           ;display.c: 267: timer_add=0; alarm_low_cnt=0;
  2542  079E  01B8               	clrf	LedRamUpdate@timer_add
  2543  079F                     L10:	
  2544  079F  01BC               	clrf	LedRamUpdate@alarm_low_cnt
  2545  07A0                     l7140:	
  2546                           
  2547                           ;display.c: 268: }
  2548                           ;display.c: 270: if(Flag_off)
  2549  07A0  1F72               	btfss	_Flag_off/(0+8),_Flag_off& (0+7)
  2550  07A1  2FBB               	goto	l7156
  2551  07A2  30FA               	movlw	250
  2552                           
  2553                           ;display.c: 271: {
  2554                           ;display.c: 272: timer_off++; if(timer_off>=250) Flag_off=0;
  2555  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2556  07A4  0AB9               	incf	LedRamUpdate@timer_off,f
  2557  07A5  0239               	subwf	LedRamUpdate@timer_off,w
  2558  07A6  1803               	btfsc	3,0
  2559  07A7  1372               	bcf	_Flag_off/(0+8),_Flag_off& (0+7)
  2560  07A8  3007               	movlw	7
  2561                           
  2562                           ;display.c: 273: DisPlayIcon(0X07,1,1);
  2563  07A9  27D4               	fcall	PL12	;call to abstracted procedure
  2564  07AA  211E               	fcall	_DisPlayIcon
  2565                           
  2566                           ;display.c: 274: if(time_minute)
  2567  07AB  1283               	bcf	3,5	;RP0=0, select bank0
  2568  07AC  084E               	movf	_time_minute,w
  2569                           
  2570                           ;display.c: 275: {
  2571                           ;display.c: 276: DisPlayNum(time_minute,0X03);
  2572  07AD  3003               	movlw	3
  2573  07AE  00D9               	movwf	DisPlayNum@dig_sel
  2574  07AF  1903               	btfsc	3,2
  2575  07B0  2FB6               	goto	L11
  2576  07B1  084E               	movf	_time_minute,w
  2577  07B2  2193               	fcall	_DisPlayNum
  2578                           
  2579                           ;display.c: 277: DisPlayIcon(0X02,2,1);
  2580  07B3  27D9               	fcall	PL16	;call to abstracted procedure
  2581  07B4  211E               	fcall	_DisPlayIcon
  2582                           
  2583                           ;display.c: 278: }
  2584  07B5  2FBD               	goto	l7158
  2585  07B6                     L11:	
  2586                           ;display.c: 279: else
  2587                           ;display.c: 280: {
  2588                           ;display.c: 281: DisPlayNum(time_second,0X03);
  2589                           
  2590  07B6  084F               	movf	_time_second,w
  2591  07B7  2193               	fcall	_DisPlayNum
  2592                           
  2593                           ;display.c: 282: DisPlayIcon(0X01,2,1);
  2594  07B8  27DE               	fcall	PL20	;call to abstracted procedure
  2595  07B9  211E               	fcall	_DisPlayIcon
  2596  07BA  2FBD               	goto	l7158
  2597  07BB                     l7156:	
  2598                           
  2599                           ;display.c: 285: else timer_off=0;
  2600  07BB  1283               	bcf	3,5	;RP0=0, select bank0
  2601  07BC  01B9               	clrf	LedRamUpdate@timer_off
  2602  07BD                     l7158:	
  2603                           
  2604                           ;display.c: 287: LED_RAM[0]=LED_RAM_R[0];
  2605  07BD  1683               	bsf	3,5	;RP0=1, select bank1
  2606  07BE  0820               	movf	_LED_RAM_R^(0+128),w
  2607  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  2608  07C0  00A0               	movwf	_LED_RAM
  2609                           
  2610                           ;display.c: 288: LED_RAM[1]=LED_RAM_R[1];
  2611  07C1  1683               	bsf	3,5	;RP0=1, select bank1
  2612  07C2  0821               	movf	(_LED_RAM_R^(0+128)+1),w
  2613  07C3  1283               	bcf	3,5	;RP0=0, select bank0
  2614  07C4  00A1               	movwf	_LED_RAM+1
  2615                           
  2616                           ;display.c: 289: LED_RAM[2]=LED_RAM_R[2];
  2617  07C5  1683               	bsf	3,5	;RP0=1, select bank1
  2618  07C6  0822               	movf	(_LED_RAM_R^(0+128)+2),w
  2619  07C7  1283               	bcf	3,5	;RP0=0, select bank0
  2620  07C8  00A2               	movwf	_LED_RAM+2
  2621                           
  2622                           ;display.c: 290: LED_RAM[3]=LED_RAM_R[3];
  2623  07C9  1683               	bsf	3,5	;RP0=1, select bank1
  2624  07CA  0823               	movf	(_LED_RAM_R^(0+128)+3),w
  2625  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  2626  07CC  00A3               	movwf	_LED_RAM+3
  2627  07CD  0008               	return
  2628  07CE                     __end_of_LedRamUpdate:	
  2629  07CE                     PL8:	
  2630  07CE  3008               	movlw	8
  2631  07CF  01F7               	clrf	DisPlayIcon@icon_sel
  2632  07D0  0AF7               	incf	DisPlayIcon@icon_sel,f
  2633  07D1  01F8               	clrf	DisPlayIcon@icon_sta
  2634  07D2  0AF8               	incf	DisPlayIcon@icon_sta,f
  2635  07D3  0008               	return
  2636  07D4                     __end_ofPL8:	
  2637  07D4                     PL12:	
  2638  07D4  01F7               	clrf	DisPlayIcon@icon_sel
  2639  07D5  0AF7               	incf	DisPlayIcon@icon_sel,f
  2640  07D6  01F8               	clrf	DisPlayIcon@icon_sta
  2641  07D7  0AF8               	incf	DisPlayIcon@icon_sta,f
  2642  07D8  0008               	return
  2643  07D9                     __end_ofPL12:	
  2644  07D9                     PL16:	
  2645  07D9  3002               	movlw	2
  2646  07DA  00F7               	movwf	DisPlayIcon@icon_sel
  2647  07DB  01F8               	clrf	DisPlayIcon@icon_sta
  2648  07DC  0AF8               	incf	DisPlayIcon@icon_sta,f
  2649  07DD  0008               	return
  2650  07DE                     __end_ofPL16:	
  2651  07DE                     PL20:	
  2652  07DE  3002               	movlw	2
  2653  07DF  00F7               	movwf	DisPlayIcon@icon_sel
  2654  07E0  3001               	movlw	1
  2655  07E1  01F8               	clrf	DisPlayIcon@icon_sta
  2656  07E2  0AF8               	incf	DisPlayIcon@icon_sta,f
  2657  07E3  0008               	return
  2658  07E4                     __end_ofPL20:	
  2659  07E4                     PL22:	
  2660  07E4  3002               	movlw	2
  2661  07E5  00F7               	movwf	DisPlayIcon@icon_sel
  2662  07E6  3008               	movlw	8
  2663  07E7  01F8               	clrf	DisPlayIcon@icon_sta
  2664  07E8  0AF8               	incf	DisPlayIcon@icon_sta,f
  2665  07E9  0008               	return
  2666  07EA                     __end_ofPL22:	
  2667  07EA                     PL24:	
  2668  07EA  3003               	movlw	3
  2669  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  2670  07EC  00D9               	movwf	DisPlayNum@dig_sel
  2671  07ED  0854               	movf	_bat_percent,w
  2672  07EE  0008               	return
  2673  07EF                     __end_ofPL24:	
  2674                           
  2675                           	psect	swtext1
  2676  0021                     __pswtext1:	
  2677  0021                     S7340:	
  2678  0021  2EB0               	ljmp	l6986
  2679  0022  2EB7               	ljmp	l6988
  2680  0023  2EBB               	ljmp	l6990
  2681  0024  2EC4               	ljmp	l6992
  2682  0025  2EC9               	ljmp	l6994
  2683                           
  2684                           	psect	text11
  2685  0193                     __ptext11:	
  2686 ;; *************** function _DisPlayNum *****************
  2687 ;; Defined at:
  2688 ;;		line 98 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\display.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  dis_num         1    wreg     unsigned char 
  2691 ;;  dig_sel         1    3[BANK0 ] unsigned char 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  dis_num         1    4[BANK0 ] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 300/0
  2700 ;;		On exit  : 300/100
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1
  2703 ;;      Params:         0       1       0
  2704 ;;      Locals:         0       1       0
  2705 ;;      Temps:          0       0       0
  2706 ;;      Totals:         0       2       0
  2707 ;;Total ram usage:        2 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    4
  2710 ;; This function calls:
  2711 ;;		___lbdiv
  2712 ;;		___lbmod
  2713 ;; This function is called by:
  2714 ;;		_LedRamUpdate
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           
  2719                           ;psect for function _DisPlayNum
  2720  0193                     _DisPlayNum:	
  2721                           
  2722                           ;incstack = 0
  2723                           ; Regs used in _DisPlayNum: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2724                           ;DisPlayNum@dis_num stored from wreg
  2725  0193  00DA               	movwf	DisPlayNum@dis_num
  2726                           
  2727                           ;display.c: 101: if(dis_num>99) dis_num=99;
  2728  0194  3064               	movlw	100
  2729  0195  025A               	subwf	DisPlayNum@dis_num,w
  2730  0196  1C03               	skipc
  2731  0197  299A               	goto	l6556
  2732  0198  3063               	movlw	99
  2733  0199  00DA               	movwf	DisPlayNum@dis_num
  2734  019A                     l6556:	
  2735                           
  2736                           ;display.c: 103: Flag_dig1=1;
  2737  019A  15EF               	bsf	_Flag_dig1/(0+8),_Flag_dig1& (0+7)
  2738                           
  2739                           ;display.c: 104: Flag_dig2=1;
  2740  019B  156F               	bsf	_Flag_dig2/(0+8),_Flag_dig2& (0+7)
  2741                           
  2742                           ;display.c: 107: if(dig_sel==0) { Flag_dig1=0; Flag_dig2=0; }
  2743  019C  0859               	movf	DisPlayNum@dig_sel,w
  2744  019D  1D03               	btfss	3,2
  2745  019E  29A1               	goto	l2081
  2746  019F  11EF               	bcf	_Flag_dig1/(0+8),_Flag_dig1& (0+7)
  2747  01A0  116F               	bcf	_Flag_dig2/(0+8),_Flag_dig2& (0+7)
  2748  01A1                     l2081:	
  2749                           
  2750                           ;display.c: 108: if(Flag_dig1&&(dig_sel&0x01)) LED_RAM_R[0]=LEDCode[dis_num/10]; else LE
      +                          D_RAM_R[0]=0;
  2751  01A1  19EF               	btfsc	_Flag_dig1/(0+8),_Flag_dig1& (0+7)
  2752  01A2  1C59               	btfss	DisPlayNum@dig_sel,0
  2753  01A3  29AE               	goto	l6568
  2754  01A4  300A               	movlw	10
  2755  01A5  00F7               	movwf	___lbdiv@divisor
  2756  01A6  085A               	movf	DisPlayNum@dis_num,w
  2757  01A7  20C6               	fcall	___lbdiv
  2758  01A8  3E01               	addlw	low ((_LEDCode-__stringbase)| (0+32768))
  2759  01A9  0084               	movwf	4
  2760  01AA  200A               	fcall	stringdir
  2761  01AB  1683               	bsf	3,5	;RP0=1, select bank1
  2762  01AC  00A0               	movwf	_LED_RAM_R^(0+128)
  2763  01AD  29B0               	goto	l6570
  2764  01AE                     l6568:	
  2765  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2766  01AF  01A0               	clrf	_LED_RAM_R^(0+128)
  2767  01B0                     l6570:	
  2768                           
  2769                           ;display.c: 109: if(Flag_dig2&&(dig_sel&0x02)) LED_RAM_R[1]=LEDCode[dis_num%10]; else LE
      +                          D_RAM_R[1]=0;
  2770  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  2771  01B1  196F               	btfsc	_Flag_dig2/(0+8),_Flag_dig2& (0+7)
  2772  01B2  1CD9               	btfss	DisPlayNum@dig_sel,1
  2773  01B3  29BE               	goto	l6576
  2774  01B4  300A               	movlw	10
  2775  01B5  00F7               	movwf	___lbmod@divisor
  2776  01B6  085A               	movf	DisPlayNum@dis_num,w
  2777  01B7  20E1               	fcall	___lbmod
  2778  01B8  3E01               	addlw	low ((_LEDCode-__stringbase)| (0+32768))
  2779  01B9  0084               	movwf	4
  2780  01BA  200A               	fcall	stringdir
  2781  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  2782  01BC  00A1               	movwf	(_LED_RAM_R^(0+128)+1)
  2783  01BD  0008               	return
  2784  01BE                     l6576:	
  2785  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  2786  01BF  01A1               	clrf	(_LED_RAM_R^(0+128)+1)
  2787  01C0  0008               	return
  2788  01C1                     __end_of_DisPlayNum:	
  2789                           
  2790                           	psect	text12
  2791  00E1                     __ptext12:	
  2792 ;; *************** function ___lbmod *****************
  2793 ;; Defined at:
  2794 ;;		line 4 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  dividend        1    wreg     unsigned char 
  2797 ;;  divisor         1    4[COMMON] unsigned char 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  dividend        1    0[BANK0 ] unsigned char 
  2800 ;;  rem             1    2[BANK0 ] unsigned char 
  2801 ;;  counter         1    1[BANK0 ] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      unsigned char 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 300/0
  2808 ;;		On exit  : 300/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1
  2811 ;;      Params:         1       0       0
  2812 ;;      Locals:         0       3       0
  2813 ;;      Temps:          1       0       0
  2814 ;;      Totals:         2       3       0
  2815 ;;Total ram usage:        5 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    3
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_DisPlayNum
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function ___lbmod
  2827  00E1                     ___lbmod:	
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  2831                           ;___lbmod@dividend stored from wreg
  2832  00E1  00D6               	movwf	___lbmod@dividend
  2833  00E2  3008               	movlw	8
  2834  00E3  00D7               	movwf	___lbmod@counter
  2835  00E4  01D8               	clrf	___lbmod@rem
  2836  00E5                     l6510:	
  2837  00E5  0856               	movf	___lbmod@dividend,w
  2838  00E6  00F8               	movwf	??___lbmod
  2839  00E7  3007               	movlw	7
  2840  00E8  1003               	clrc
  2841  00E9                     L12:	
  2842  00E9  0CF8               	rrf	??___lbmod,f
  2843  00EA  3EFF               	addlw	-1
  2844  00EB  1003               	clrc
  2845  00EC  1D03               	skipz
  2846  00ED  28E9               	goto	L12
  2847  00EE  0D58               	rlf	___lbmod@rem,w
  2848  00EF  0478               	iorwf	??___lbmod,w
  2849  00F0  00D8               	movwf	___lbmod@rem
  2850  00F1  1003               	clrc
  2851  00F2  0DD6               	rlf	___lbmod@dividend,f
  2852  00F3  0877               	movf	___lbmod@divisor,w
  2853  00F4  0258               	subwf	___lbmod@rem,w
  2854  00F5  1C03               	skipc
  2855  00F6  28F9               	goto	l6518
  2856  00F7  0877               	movf	___lbmod@divisor,w
  2857  00F8  02D8               	subwf	___lbmod@rem,f
  2858  00F9                     l6518:	
  2859  00F9  0BD7               	decfsz	___lbmod@counter,f
  2860  00FA  28E5               	goto	l6510
  2861  00FB  0858               	movf	___lbmod@rem,w
  2862  00FC  0008               	return
  2863  00FD                     __end_of___lbmod:	
  2864                           
  2865                           	psect	text13
  2866  00C6                     __ptext13:	
  2867 ;; *************** function ___lbdiv *****************
  2868 ;; Defined at:
  2869 ;;		line 4 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  dividend        1    wreg     unsigned char 
  2872 ;;  divisor         1    4[COMMON] unsigned char 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  dividend        1    0[BANK0 ] unsigned char 
  2875 ;;  quotient        1    2[BANK0 ] unsigned char 
  2876 ;;  counter         1    1[BANK0 ] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      unsigned char 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 300/0
  2883 ;;		On exit  : 300/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1
  2886 ;;      Params:         1       0       0
  2887 ;;      Locals:         0       3       0
  2888 ;;      Temps:          0       0       0
  2889 ;;      Totals:         1       3       0
  2890 ;;Total ram usage:        4 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    3
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_DisPlayNum
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function ___lbdiv
  2902  00C6                     ___lbdiv:	
  2903                           
  2904                           ;incstack = 0
  2905                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2906                           ;___lbdiv@dividend stored from wreg
  2907  00C6  00D6               	movwf	___lbdiv@dividend
  2908  00C7  01D8               	clrf	___lbdiv@quotient
  2909  00C8  0877               	movf	___lbdiv@divisor,w
  2910  00C9  1903               	btfsc	3,2
  2911  00CA  28DF               	goto	l6502
  2912  00CB  01D7               	clrf	___lbdiv@counter
  2913  00CC                     l6488:	
  2914  00CC  0AD7               	incf	___lbdiv@counter,f
  2915  00CD  1BF7               	btfsc	___lbdiv@divisor,7
  2916  00CE  28D2               	goto	l3894
  2917  00CF  1003               	clrc
  2918  00D0  0DF7               	rlf	___lbdiv@divisor,f
  2919  00D1  28CC               	goto	l6488
  2920  00D2                     l3894:	
  2921  00D2  1003               	clrc
  2922  00D3  0DD8               	rlf	___lbdiv@quotient,f
  2923  00D4  0877               	movf	___lbdiv@divisor,w
  2924  00D5  0256               	subwf	___lbdiv@dividend,w
  2925  00D6  1C03               	skipc
  2926  00D7  28DC               	goto	L13
  2927  00D8  0877               	movf	___lbdiv@divisor,w
  2928  00D9  02D6               	subwf	___lbdiv@dividend,f
  2929  00DA  1458               	bsf	___lbdiv@quotient,0
  2930  00DB  1003               	clrc
  2931  00DC                     L13:	
  2932  00DC  0CF7               	rrf	___lbdiv@divisor,f
  2933  00DD  0BD7               	decfsz	___lbdiv@counter,f
  2934  00DE  28D2               	goto	l3894
  2935  00DF                     l6502:	
  2936  00DF  0858               	movf	___lbdiv@quotient,w
  2937  00E0  0008               	return
  2938  00E1                     __end_of___lbdiv:	
  2939                           
  2940                           	psect	text14
  2941  011E                     __ptext14:	
  2942 ;; *************** function _DisPlayIcon *****************
  2943 ;; Defined at:
  2944 ;;		line 120 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\display.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  icon_seg        1    wreg     unsigned char 
  2947 ;;  icon_sel        1    4[COMMON] unsigned char 
  2948 ;;  icon_sta        1    5[COMMON] unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  icon_seg        1    0[BANK0 ] unsigned char 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 200/0
  2957 ;;		On exit  : 200/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1
  2960 ;;      Params:         2       0       0
  2961 ;;      Locals:         0       1       0
  2962 ;;      Temps:          0       0       0
  2963 ;;      Totals:         2       1       0
  2964 ;;Total ram usage:        3 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    3
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_LedRamUpdate
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _DisPlayIcon
  2976  011E                     _DisPlayIcon:	
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _DisPlayIcon: [wreg-fsr0h+status,2+status,0]
  2980                           ;DisPlayIcon@icon_seg stored from wreg
  2981  011E  1283               	bcf	3,5	;RP0=0, select bank0
  2982  011F  00D6               	movwf	DisPlayIcon@icon_seg
  2983                           
  2984                           ;display.c: 122: switch(icon_sel)
  2985  0120  0877               	movf	DisPlayIcon@icon_sel,w
  2986                           
  2987                           ; Switch size 1, requested type "space"
  2988                           ; Number of cases is 3, Range of values is 0 to 2
  2989                           ; switch strategies available:
  2990                           ; Name         Instructions Cycles
  2991                           ; direct_byte            9     6 (fixed)
  2992                           ; simple_byte           10     6 (average)
  2993                           ; jumptable            260     6 (fixed)
  2994                           ;	Chosen strategy is direct_byte
  2995  0121  0084               	movwf	4
  2996  0122  3003               	movlw	3
  2997  0123  0204               	subwf	4,w
  2998  0124  1803               	skipnc
  2999  0125  0008               	return
  3000  0126  3000               	movlw	high S7342
  3001  0127  008A               	movwf	10
  3002  0128  302B               	movlw	low S7342
  3003  0129  0704               	addwf	4,w
  3004  012A  0082               	movwf	2
  3005  012B  0008               	return
  3006  012C                     l6580:	
  3007  012C  0878               	movf	DisPlayIcon@icon_sta,w
  3008  012D  1903               	btfsc	3,2
  3009  012E  0008               	return
  3010  012F  0856               	movf	DisPlayIcon@icon_seg,w
  3011  0130  1683               	bsf	3,5	;RP0=1, select bank1
  3012  0131  04A2               	iorwf	(_LED_RAM_R^(0+128)+2),f
  3013  0132  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0133  293F               	ljmp	PL28	;call to abstracted procedure
  3015  0134                     l6584:	
  3016  0134  0878               	movf	DisPlayIcon@icon_sta,w
  3017  0135  1903               	btfsc	3,2
  3018  0136  0008               	return
  3019  0137  0856               	movf	DisPlayIcon@icon_seg,w
  3020  0138  1683               	bsf	3,5	;RP0=1, select bank1
  3021  0139  04A2               	iorwf	(_LED_RAM_R^(0+128)+2),f
  3022  013A  0008               	return
  3023  013B                     l6588:	
  3024  013B  0878               	movf	DisPlayIcon@icon_sta,w
  3025  013C  1903               	btfsc	3,2
  3026  013D  0008               	return
  3027  013E  293F               	ljmp	PL28	;call to abstracted procedure
  3028  013F                     __end_of_DisPlayIcon:	
  3029  013F                     PL28:	
  3030  013F  0856               	movf	DisPlayIcon@icon_seg,w
  3031  0140  1683               	bsf	3,5	;RP0=1, select bank1
  3032  0141  04A3               	iorwf	(_LED_RAM_R^(0+128)+3),f
  3033  0142  0008               	return
  3034  0143                     __end_ofPL28:	
  3035                           
  3036                           	psect	swtext2
  3037  002B                     __pswtext2:	
  3038  002B                     S7342:	
  3039  002B  292C               	ljmp	l6580
  3040  002C  2934               	ljmp	l6584
  3041  002D  293B               	ljmp	l6588
  3042                           
  3043                           	psect	text15
  3044  0091                     __ptext15:	
  3045 ;; *************** function _BtnScan *****************
  3046 ;; Defined at:
  3047 ;;		line 16 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\Kscan.C"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;		None
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, status,2
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 300/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMMON   BANK0   BANK1
  3061 ;;      Params:         0       0       0
  3062 ;;      Locals:         0       0       0
  3063 ;;      Temps:          0       0       0
  3064 ;;      Totals:         0       0       0
  3065 ;;Total ram usage:        0 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    3
  3068 ;; This function calls:
  3069 ;;		Nothing
  3070 ;; This function is called by:
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function _BtnScan
  3077  0091                     _BtnScan:	
  3078                           
  3079                           ;Kscan.C: 18: ReadKeyTmp=0;
  3080                           
  3081                           ;incstack = 0
  3082                           ; Regs used in _BtnScan: [wreg+status,2]
  3083  0091  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0092  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0093  01C8               	clrf	_ReadKeyTmp
  3086                           
  3087                           ;Kscan.C: 20: if(Flag_key_usb) ReadKeyTmp&=~(1<<0); else ReadKeyTmp|=(1<<0);
  3088  0094  1CF0               	btfss	_Flag_key_usb/(0+8),_Flag_key_usb& (0+7)
  3089  0095  2898               	goto	l2835
  3090  0096  1048               	bcf	_ReadKeyTmp,0
  3091  0097  2899               	goto	l2836
  3092  0098                     l2835:	
  3093  0098  1448               	bsf	_ReadKeyTmp,0
  3094  0099                     l2836:	
  3095                           
  3096                           ;Kscan.C: 21: if(Flag_key_set) ReadKeyTmp&=~(1<<1); else ReadKeyTmp|=(1<<1);
  3097  0099  1C70               	btfss	_Flag_key_set/(0+8),_Flag_key_set& (0+7)
  3098  009A  289D               	goto	l2837
  3099  009B  10C8               	bcf	_ReadKeyTmp,1
  3100  009C  289E               	goto	l5686
  3101  009D                     l2837:	
  3102  009D  14C8               	bsf	_ReadKeyTmp,1
  3103  009E                     l5686:	
  3104                           
  3105                           ;Kscan.C: 24: if(ReadKeyOld==ReadKeyTmp)
  3106  009E  0847               	movf	_ReadKeyOld,w
  3107  009F  0648               	xorwf	_ReadKeyTmp,w
  3108  00A0  1D03               	skipz
  3109  00A1  28A8               	goto	l5694
  3110                           
  3111                           ;Kscan.C: 25: {
  3112                           ;Kscan.C: 27: ReadKey=ReadKeyTmp;
  3113  00A2  0848               	movf	_ReadKeyTmp,w
  3114  00A3  00C9               	movwf	_ReadKey
  3115                           
  3116                           ;Kscan.C: 28: if((ReadKey&0x02)!=0x02) { Flag_Btn_Release=1; Flag_key_long=0;}
  3117  00A4  18C9               	btfsc	_ReadKey,1
  3118  00A5  28A8               	goto	l5694
  3119  00A6  15F0               	bsf	_Flag_Btn_Release/(0+8),_Flag_Btn_Release& (0+7)
  3120  00A7  1170               	bcf	_Flag_key_long/(0+8),_Flag_key_long& (0+7)
  3121  00A8                     l5694:	
  3122                           
  3123                           ;Kscan.C: 29: }
  3124                           ;Kscan.C: 30: ReadKeyOld=ReadKeyTmp;
  3125  00A8  0848               	movf	_ReadKeyTmp,w
  3126  00A9  00C7               	movwf	_ReadKeyOld
  3127  00AA  0008               	return
  3128  00AB                     __end_of_BtnScan:	
  3129                           
  3130                           	psect	text16
  3131  0062                     __ptext16:	
  3132 ;; *************** function _BeepProc *****************
  3133 ;; Defined at:
  3134 ;;		line 215 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\AppProc.C"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 300/0
  3145 ;;		On exit  : 300/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1
  3148 ;;      Params:         0       0       0
  3149 ;;      Locals:         0       0       0
  3150 ;;      Temps:          0       0       0
  3151 ;;      Totals:         0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    3
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_main
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _BeepProc
  3164  0062                     _BeepProc:	
  3165                           
  3166                           ;AppProc.C: 217: if(alarm_beep_cnt)
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _BeepProc: [wreg+status,2+status,0]
  3170  0062  0853               	movf	_alarm_beep_cnt,w
  3171  0063  1903               	btfsc	3,2
  3172  0064  2874               	goto	l5670
  3173                           
  3174                           ;AppProc.C: 218: {
  3175                           ;AppProc.C: 219: if(Flag_beep_boot) { Flag_beep_boot=0; Flag_beep=1; }
  3176  0065  1D71               	btfss	_Flag_beep_boot/(0+8),_Flag_beep_boot& (0+7)
  3177  0066  2869               	goto	l5658
  3178  0067  1171               	bcf	_Flag_beep_boot/(0+8),_Flag_beep_boot& (0+7)
  3179  0068  15F1               	bsf	_Flag_beep/(0+8),_Flag_beep& (0+7)
  3180  0069                     l5658:	
  3181                           
  3182                           ;AppProc.C: 221: timer_beep++;
  3183  0069  0AAA               	incf	_timer_beep,f
  3184                           
  3185                           ;AppProc.C: 222: if(timer_beep>speed_beep) { timer_beep=0; Flag_beep=~Flag_beep; if(!Fla
      +                          g_beep) alarm_beep_cnt--; }
  3186  006A  082A               	movf	_timer_beep,w
  3187  006B  0252               	subwf	_speed_beep,w
  3188  006C  1803               	skipnc
  3189  006D  0008               	return
  3190  006E  3008               	movlw	(0+1) shl (_Flag_beep& (0+7))
  3191  006F  01AA               	clrf	_timer_beep
  3192  0070  06F1               	xorwf	_Flag_beep/(0+8),f
  3193  0071  1DF1               	btfss	_Flag_beep/(0+8),_Flag_beep& (0+7)
  3194  0072  03D3               	decf	_alarm_beep_cnt,f
  3195  0073  0008               	return
  3196  0074                     l5670:	
  3197                           
  3198                           ;AppProc.C: 224: else
  3199                           ;AppProc.C: 225: {
  3200                           ;AppProc.C: 226: timer_beep=0;
  3201  0074  01AA               	clrf	_timer_beep
  3202                           
  3203                           ;AppProc.C: 227: Flag_beep=0;
  3204  0075  11F1               	bcf	_Flag_beep/(0+8),_Flag_beep& (0+7)
  3205                           
  3206                           ;AppProc.C: 228: Flag_xi =0;
  3207  0076  1072               	bcf	_Flag_xi/(0+8),_Flag_xi& (0+7)
  3208                           
  3209                           ;AppProc.C: 229: Flag_beep_boot=1;
  3210  0077  1571               	bsf	_Flag_beep_boot/(0+8),_Flag_beep_boot& (0+7)
  3211  0078  0008               	return
  3212  0079                     __end_of_BeepProc:	
  3213                           
  3214                           	psect	text17
  3215  05A1                     __ptext17:	
  3216 ;; *************** function _AppMotor *****************
  3217 ;; Defined at:
  3218 ;;		line 18 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\AppProc.C"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;		None
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;		None
  3223 ;; Return value:  Size  Location     Type
  3224 ;;                  1    wreg      void 
  3225 ;; Registers used:
  3226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3227 ;; Tracked objects:
  3228 ;;		On entry : 300/0
  3229 ;;		On exit  : 200/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMMON   BANK0   BANK1
  3232 ;;      Params:         0       0       0
  3233 ;;      Locals:         0       0       0
  3234 ;;      Temps:          0       2       0
  3235 ;;      Totals:         0       2       0
  3236 ;;Total ram usage:        2 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; Hardware stack levels required when called:    4
  3239 ;; This function calls:
  3240 ;;		_ADSample
  3241 ;; This function is called by:
  3242 ;;		_main
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function _AppMotor
  3248  05A1                     _AppMotor:	
  3249                           
  3250                           ;AppProc.C: 20: switch(sta_m)
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in _AppMotor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3254  05A1  2E79               	goto	l6864
  3255  05A2                     l3499:	
  3256                           ;AppProc.C: 21: {
  3257                           ;AppProc.C: 22: case 0:
  3258                           
  3259                           
  3260                           ;AppProc.C: 23: Flag_on =0;
  3261  05A2  13F2               	bcf	_Flag_on/(0+8),_Flag_on& (0+7)
  3262                           
  3263                           ;AppProc.C: 24: Flag_low =0;
  3264  05A3  1371               	bcf	_Flag_low/(0+8),_Flag_low& (0+7)
  3265                           
  3266                           ;AppProc.C: 25: Flag_xi =0;
  3267  05A4  1072               	bcf	_Flag_xi/(0+8),_Flag_xi& (0+7)
  3268                           
  3269                           ;AppProc.C: 26: Flag_iov =0;
  3270  05A5  10F2               	bcf	_Flag_iov/(0+8),_Flag_iov& (0+7)
  3271                           
  3272                           ;AppProc.C: 27: RA3=0; RB7=1;
  3273  05A6  1185               	bcf	5,3	;volatile
  3274  05A7  1786               	bsf	6,7	;volatile
  3275                           
  3276                           ;AppProc.C: 28: if((ReadKey&0x02)&&Flag_Btn_Release&&(!Flag_lk))
  3277  05A8  18C9               	btfsc	_ReadKey,1
  3278  05A9  1DF0               	btfss	_Flag_Btn_Release/(0+8),_Flag_Btn_Release& (0+7)
  3279  05AA  0008               	return
  3280  05AB  1A72               	btfsc	_Flag_lk/(0+8),_Flag_lk& (0+7)
  3281  05AC  0008               	return
  3282                           
  3283                           ;AppProc.C: 29: {
  3284                           ;AppProc.C: 30: Flag_Btn_Release = 0;
  3285  05AD  11F0               	bcf	_Flag_Btn_Release/(0+8),_Flag_Btn_Release& (0+7)
  3286                           
  3287                           ;AppProc.C: 31: debance_hiov_cnt = 0;
  3288  05AE  01B2               	clrf	_debance_hiov_cnt
  3289                           
  3290                           ;AppProc.C: 32: debance_iov_cnt = 0;
  3291  05AF  01B1               	clrf	_debance_iov_cnt
  3292                           
  3293                           ;AppProc.C: 33: debance_scp_cnt = 0;
  3294  05B0  01B0               	clrf	_debance_scp_cnt
  3295                           
  3296                           ;AppProc.C: 34: debance_low_cnt = 0;
  3297  05B1  01B3               	clrf	_debance_low_cnt
  3298                           
  3299                           ;AppProc.C: 35: if(Flag_stop) Flag_low_alarm=1; else { sta_m = 1; RA3=1; RB7=0; }
  3300  05B2  1E71               	btfss	_Flag_stop/(0+8),_Flag_stop& (0+7)
  3301  05B3  2DB6               	goto	l3501
  3302  05B4  16F1               	bsf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  3303  05B5  2DBA               	goto	l6750
  3304  05B6                     l3501:	
  3305  05B6  01B5               	clrf	_sta_m
  3306  05B7  0AB5               	incf	_sta_m,f
  3307  05B8  1585               	bsf	5,3	;volatile
  3308  05B9  1386               	bcf	6,7	;volatile
  3309  05BA                     l6750:	
  3310                           
  3311                           ;AppProc.C: 36: time_second=0;
  3312  05BA  01CF               	clrf	_time_second
  3313                           
  3314                           ;AppProc.C: 37: time_minute=0;
  3315  05BB  01CE               	clrf	_time_minute
  3316                           
  3317                           ;AppProc.C: 38: Flag_off=0;
  3318  05BC  1372               	bcf	_Flag_off/(0+8),_Flag_off& (0+7)
  3319                           
  3320                           ;AppProc.C: 39: current_val=0;
  3321  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  3322  05BE  01AE               	clrf	_current_val^(0+128)
  3323  05BF  01AF               	clrf	(_current_val+1)^(0+128)
  3324  05C0  0008               	return
  3325  05C1                     l3504:	
  3326                           ;AppProc.C: 42: case 1:
  3327                           
  3328                           
  3329                           ;AppProc.C: 43: RA3=1; RB7=0;
  3330  05C1  1585               	bsf	5,3	;volatile
  3331  05C2  1386               	bcf	6,7	;volatile
  3332  05C3  3064               	movlw	100
  3333                           
  3334                           ;AppProc.C: 44: timer_motor++;
  3335  05C4  0AB4               	incf	_timer_motor,f
  3336                           
  3337                           ;AppProc.C: 45: if(timer_motor>=100)
  3338  05C5  0234               	subwf	_timer_motor,w
  3339  05C6  1C03               	skipc
  3340  05C7  2DED               	goto	l6778
  3341                           
  3342                           ;AppProc.C: 46: {
  3343                           ;AppProc.C: 47: timer_motor=0;
  3344  05C8  01B4               	clrf	_timer_motor
  3345                           
  3346                           ;AppProc.C: 48: time_motor_cnt++;
  3347  05C9  1683               	bsf	3,5	;RP0=1, select bank1
  3348  05CA  0AA8               	incf	_time_motor_cnt^(0+128),f
  3349  05CB  1903               	skipnz
  3350  05CC  0AA9               	incf	(_time_motor_cnt+1)^(0+128),f
  3351                           
  3352                           ;AppProc.C: 49: if(time_motor_cnt>=time_dec_cnt)
  3353  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  3354  05CE  0850               	movf	_time_dec_cnt,w
  3355  05CF  00D8               	movwf	??_AppMotor
  3356  05D0  01D9               	clrf	??_AppMotor+1
  3357  05D1  0859               	movf	??_AppMotor+1,w
  3358  05D2  1683               	bsf	3,5	;RP0=1, select bank1
  3359  05D3  0229               	subwf	(_time_motor_cnt+1)^(0+128),w
  3360  05D4  1D03               	skipz
  3361  05D5  2DDA               	goto	u4625
  3362  05D6  1283               	bcf	3,5	;RP0=0, select bank0
  3363  05D7  0858               	movf	??_AppMotor,w
  3364  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  3365  05D9  0228               	subwf	_time_motor_cnt^(0+128),w
  3366  05DA                     u4625:	
  3367  05DA  1C03               	skipc
  3368  05DB  2DE2               	goto	l3506
  3369                           
  3370                           ;AppProc.C: 50: {
  3371                           ;AppProc.C: 51: time_motor_cnt=0; if(bat_percent) bat_percent--;
  3372  05DC  01A8               	clrf	_time_motor_cnt^(0+128)
  3373  05DD  01A9               	clrf	(_time_motor_cnt+1)^(0+128)
  3374  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3375  05DF  0854               	movf	_bat_percent,w
  3376  05E0  1D03               	btfss	3,2
  3377  05E1  03D4               	decf	_bat_percent,f
  3378  05E2                     l3506:	
  3379  05E2  303C               	movlw	60
  3380                           
  3381                           ;AppProc.C: 52: }
  3382                           ;AppProc.C: 53: time_second++; if(time_second>=60) { time_second=0; if(time_minute<60) t
      +                          ime_minute++; }
  3383  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3384  05E4  0ACF               	incf	_time_second,f
  3385  05E5  024F               	subwf	_time_second,w
  3386  05E6  1C03               	skipc
  3387  05E7  2DED               	goto	l6778
  3388  05E8  303C               	movlw	60
  3389  05E9  01CF               	clrf	_time_second
  3390  05EA  024E               	subwf	_time_minute,w
  3391  05EB  1C03               	btfss	3,0
  3392  05EC  0ACE               	incf	_time_minute,f
  3393  05ED                     l6778:	
  3394                           
  3395                           ;AppProc.C: 54: }
  3396                           ;AppProc.C: 56: if(bat_percent) { Flag_low=0; Flag_on=1; }
  3397  05ED  0854               	movf	_bat_percent,w
  3398  05EE  1903               	btfsc	3,2
  3399  05EF  2DF3               	goto	l3510
  3400  05F0  1371               	bcf	_Flag_low/(0+8),_Flag_low& (0+7)
  3401  05F1  17F2               	bsf	_Flag_on/(0+8),_Flag_on& (0+7)
  3402  05F2  2DFC               	goto	l3511
  3403  05F3                     l3510:	
  3404                           
  3405                           ;AppProc.C: 57: else {
  3406                           ;AppProc.C: 58: if(!Flag_low) { alarm_beep_cnt=3,speed_beep=50; Flag_low=1; }
  3407  05F3  1B71               	btfsc	_Flag_low/(0+8),_Flag_low& (0+7)
  3408  05F4  2DFA               	goto	l6786
  3409  05F5  3003               	movlw	3
  3410  05F6  00D3               	movwf	_alarm_beep_cnt
  3411  05F7  3032               	movlw	50
  3412  05F8  00D2               	movwf	_speed_beep
  3413  05F9  1771               	bsf	_Flag_low/(0+8),_Flag_low& (0+7)
  3414  05FA                     l6786:	
  3415                           
  3416                           ;AppProc.C: 59: Flag_on=0; Flag_low_alarm=1;
  3417  05FA  13F2               	bcf	_Flag_on/(0+8),_Flag_on& (0+7)
  3418  05FB  16F1               	bsf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  3419  05FC                     l3511:	
  3420                           
  3421                           ;AppProc.C: 60: }
  3422                           ;AppProc.C: 63: if(bat_val<250) debance_low_cnt++; else debance_low_cnt=0;
  3423  05FC  3000               	movlw	0
  3424  05FD  0225               	subwf	_bat_val+1,w
  3425  05FE  30FA               	movlw	250
  3426  05FF  1903               	skipnz
  3427  0600  0224               	subwf	_bat_val,w
  3428  0601  1803               	skipnc
  3429  0602  2E05               	goto	l6792
  3430  0603  0AB3               	incf	_debance_low_cnt,f
  3431  0604  2E06               	goto	l6794
  3432  0605                     l6792:	
  3433  0605  01B3               	clrf	_debance_low_cnt
  3434  0606                     l6794:	
  3435                           
  3436                           ;AppProc.C: 64: if(debance_low_cnt>200) { Flag_stop=1; bat_percent=0; }
  3437  0606  30C9               	movlw	201
  3438  0607  0233               	subwf	_debance_low_cnt,w
  3439  0608  1C03               	skipc
  3440  0609  2E0C               	goto	l6800
  3441  060A  1671               	bsf	_Flag_stop/(0+8),_Flag_stop& (0+7)
  3442  060B  01D4               	clrf	_bat_percent
  3443  060C                     l6800:	
  3444                           
  3445                           ;AppProc.C: 67: if(current_val>38) debance_hiov_cnt++; else debance_hiov_cnt=0;
  3446  060C  3000               	movlw	0
  3447  060D  1683               	bsf	3,5	;RP0=1, select bank1
  3448  060E  022F               	subwf	(_current_val+1)^(0+128),w
  3449  060F  3027               	movlw	39
  3450  0610  1903               	skipnz
  3451  0611  022E               	subwf	_current_val^(0+128),w
  3452  0612  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0613  1C03               	skipc
  3454  0614  2E17               	goto	L14
  3455  0615  0AB2               	incf	_debance_hiov_cnt,f
  3456  0616  2E18               	goto	l6806
  3457  0617                     L14:	
  3458  0617  01B2               	clrf	_debance_hiov_cnt
  3459  0618                     l6806:	
  3460                           
  3461                           ;AppProc.C: 68: if(debance_hiov_cnt>250) { Flag_xi_alarm=1; Flag_xi=1; alarm_beep_cnt=3,
      +                          speed_beep=50; }
  3462  0618  30FB               	movlw	251
  3463  0619  0232               	subwf	_debance_hiov_cnt,w
  3464  061A  1C03               	skipc
  3465  061B  2E22               	goto	l3518
  3466  061C  3003               	movlw	3
  3467  061D  17F1               	bsf	_Flag_xi_alarm/(0+8),_Flag_xi_alarm& (0+7)
  3468  061E  1472               	bsf	_Flag_xi/(0+8),_Flag_xi& (0+7)
  3469  061F  00D3               	movwf	_alarm_beep_cnt
  3470  0620  3032               	movlw	50
  3471  0621  00D2               	movwf	_speed_beep
  3472  0622                     l3518:	
  3473                           
  3474                           ;AppProc.C: 71: if(current_scp>58) debance_iov_cnt++; else debance_iov_cnt=0;
  3475  0622  3000               	movlw	0
  3476  0623  1683               	bsf	3,5	;RP0=1, select bank1
  3477  0624  022D               	subwf	(_current_scp+1)^(0+128),w
  3478  0625  303B               	movlw	59
  3479  0626  1903               	skipnz
  3480  0627  022C               	subwf	_current_scp^(0+128),w
  3481  0628  1283               	bcf	3,5	;RP0=0, select bank0
  3482  0629  1C03               	skipc
  3483  062A  2E2D               	goto	L15
  3484  062B  0AB1               	incf	_debance_iov_cnt,f
  3485  062C  2E2E               	goto	l6816
  3486  062D                     L15:	
  3487  062D  01B1               	clrf	_debance_iov_cnt
  3488  062E                     l6816:	
  3489                           
  3490                           ;AppProc.C: 72: if(debance_iov_cnt>200) Flag_iov=1;
  3491  062E  30C9               	movlw	201
  3492  062F  0231               	subwf	_debance_iov_cnt,w
  3493  0630  1803               	btfsc	3,0
  3494  0631  14F2               	bsf	_Flag_iov/(0+8),_Flag_iov& (0+7)
  3495                           
  3496                           ;AppProc.C: 75: if(ADSample(0b00000010))
  3497  0632  3002               	movlw	2
  3498  0633  20AB               	fcall	_ADSample
  3499  0634  3A00               	xorlw	0
  3500  0635  1903               	skipnz
  3501  0636  2E5A               	goto	l6832
  3502                           
  3503                           ;AppProc.C: 76: {
  3504                           ;AppProc.C: 77: ad_scp=(ADRESH<<4)+(ADRESL>>4);
  3505  0637  081E               	movf	30,w	;volatile
  3506  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0639  00A6               	movwf	_ad_scp^(0+128)
  3508  063A  30F0               	movlw	240
  3509  063B  01A7               	clrf	(_ad_scp+1)^(0+128)
  3510  063C  0EA6               	swapf	_ad_scp^(0+128),f
  3511  063D  0EA7               	swapf	(_ad_scp+1)^(0+128),f
  3512  063E  05A7               	andwf	(_ad_scp+1)^(0+128),f
  3513  063F  0826               	movf	_ad_scp^(0+128),w
  3514  0640  390F               	andlw	15
  3515  0641  04A7               	iorwf	(_ad_scp+1)^(0+128),f
  3516  0642  30F0               	movlw	240
  3517  0643  05A6               	andwf	_ad_scp^(0+128),f
  3518  0644  0E1E               	swapf	30,w	;volatile
  3519  0645  390F               	andlw	15
  3520  0646  07A6               	addwf	_ad_scp^(0+128),f
  3521  0647  1803               	skipnc
  3522  0648  0AA7               	incf	(_ad_scp+1)^(0+128),f
  3523                           
  3524                           ;AppProc.C: 78: ad_scp=ad_scp<<1;
  3525  0649  1003               	clrc
  3526  064A  0DA6               	rlf	_ad_scp^(0+128),f
  3527  064B  0DA7               	rlf	(_ad_scp+1)^(0+128),f
  3528                           
  3529                           ;AppProc.C: 79: if(ad_scp>ad_bg) debance_scp_cnt++; else debance_scp_cnt=0;
  3530  064C  0827               	movf	(_ad_scp+1)^(0+128),w
  3531  064D  1283               	bcf	3,5	;RP0=0, select bank0
  3532  064E  0229               	subwf	_ad_bg+1,w
  3533  064F  1D03               	skipz
  3534  0650  2E55               	goto	u4755
  3535  0651  1683               	bsf	3,5	;RP0=1, select bank1
  3536  0652  0826               	movf	_ad_scp^(0+128),w
  3537  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3538  0654  0228               	subwf	_ad_bg,w
  3539  0655                     u4755:	
  3540  0655  1803               	skipnc
  3541  0656  2E59               	goto	l6830
  3542  0657  0AB0               	incf	_debance_scp_cnt,f
  3543  0658  2E5A               	goto	l6832
  3544  0659                     l6830:	
  3545  0659  01B0               	clrf	_debance_scp_cnt
  3546  065A                     l6832:	
  3547                           
  3548                           ;AppProc.C: 80: }
  3549                           ;AppProc.C: 81: if(debance_scp_cnt) { sta_m = 0; alarm_beep_cnt=1,speed_beep=10; }
  3550  065A  0830               	movf	_debance_scp_cnt,w
  3551  065B  1903               	btfsc	3,2
  3552  065C  2E62               	goto	l6840
  3553  065D  300A               	movlw	10
  3554  065E  01B5               	clrf	_sta_m
  3555  065F  01D3               	clrf	_alarm_beep_cnt
  3556  0660  0AD3               	incf	_alarm_beep_cnt,f
  3557  0661  00D2               	movwf	_speed_beep
  3558  0662                     l6840:	
  3559                           
  3560                           ;AppProc.C: 83: if(((ReadKey&0x02)&&Flag_Btn_Release)||Flag_iov||Flag_stop||Flag_lk)
  3561  0662  1CC9               	btfss	_ReadKey,1
  3562  0663  2E66               	goto	l3530
  3563  0664  19F0               	btfsc	_Flag_Btn_Release/(0+8),_Flag_Btn_Release& (0+7)
  3564  0665  2E6B               	goto	l3528
  3565  0666                     l3530:	
  3566  0666  1CF2               	btfss	_Flag_iov/(0+8),_Flag_iov& (0+7)
  3567  0667  1A71               	btfsc	_Flag_stop/(0+8),_Flag_stop& (0+7)
  3568  0668  2E6B               	goto	l3528
  3569  0669  1E72               	btfss	_Flag_lk/(0+8),_Flag_lk& (0+7)
  3570  066A  0008               	return
  3571  066B                     l3528:	
  3572                           
  3573                           ;AppProc.C: 84: {
  3574                           ;AppProc.C: 85: Flag_Btn_Release = 0;
  3575  066B  11F0               	bcf	_Flag_Btn_Release/(0+8),_Flag_Btn_Release& (0+7)
  3576                           
  3577                           ;AppProc.C: 86: sta_m = 0;
  3578  066C  01B5               	clrf	_sta_m
  3579                           
  3580                           ;AppProc.C: 87: Flag_low_alarm=0;
  3581  066D  12F1               	bcf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  3582                           
  3583                           ;AppProc.C: 88: if(Flag_lk) alarm_beep_cnt=3,speed_beep=25; else { Flag_off= 1; alarm_be
      +                          ep_cnt=0,speed_beep=25; }
  3584  066E  1E72               	btfss	_Flag_lk/(0+8),_Flag_lk& (0+7)
  3585  066F  2E72               	goto	l3531
  3586  0670  3003               	movlw	3
  3587  0671  2E82               	ljmp	PL26	;call to abstracted procedure
  3588  0672                     l3531:	
  3589  0672  3019               	movlw	25
  3590  0673  1772               	bsf	_Flag_off/(0+8),_Flag_off& (0+7)
  3591  0674  01D3               	clrf	_alarm_beep_cnt
  3592  0675  00D2               	movwf	_speed_beep
  3593  0676  0008               	return
  3594  0677                     l6860:	
  3595                           
  3596                           ;AppProc.C: 92: sta_m = 0;
  3597  0677  01B5               	clrf	_sta_m
  3598                           
  3599                           ;AppProc.C: 93: break;
  3600  0678  0008               	return
  3601  0679                     l6864:	
  3602  0679  0835               	movf	_sta_m,w
  3603                           
  3604                           ; Switch size 1, requested type "space"
  3605                           ; Number of cases is 2, Range of values is 0 to 1
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte            7     4 (average)
  3609                           ; direct_byte            8     6 (fixed)
  3610                           ; jumptable            260     6 (fixed)
  3611                           ;	Chosen strategy is simple_byte
  3612  067A  3A00               	xorlw	0	; case 0
  3613  067B  1903               	skipnz
  3614  067C  2DA2               	goto	l3499
  3615  067D  3A01               	xorlw	1	; case 1
  3616  067E  1903               	skipnz
  3617  067F  2DC1               	goto	l3504
  3618  0680  2E77               	goto	l6860
  3619  0681  0008               	return
  3620  0682                     __end_of_AppMotor:	
  3621  0682                     PL26:	
  3622  0682  00D3               	movwf	_alarm_beep_cnt
  3623  0683  3019               	movlw	25
  3624  0684  00D2               	movwf	_speed_beep
  3625  0685  0008               	return
  3626  0686                     __end_ofPL26:	
  3627                           
  3628                           	psect	text18
  3629  02F3                     __ptext18:	
  3630 ;; *************** function _AppChr *****************
  3631 ;; Defined at:
  3632 ;;		line 107 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\AppProc.C"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3641 ;; Tracked objects:
  3642 ;;		On entry : 200/0
  3643 ;;		On exit  : 300/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1
  3646 ;;      Params:         0       0       0
  3647 ;;      Locals:         0       0       0
  3648 ;;      Temps:          2       0       0
  3649 ;;      Totals:         2       0       0
  3650 ;;Total ram usage:        2 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    3
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _AppChr
  3662  02F3                     _AppChr:	
  3663                           
  3664                           ;AppProc.C: 109: switch(sta_chr)
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _AppChr: [wreg-fsr0h+status,2+status,0]
  3668  02F3  2B50               	goto	l5882
  3669  02F4                     l3546:	
  3670                           ;AppProc.C: 110: {
  3671                           ;AppProc.C: 111: case 0:
  3672                           
  3673                           
  3674                           ;AppProc.C: 112: Flag_usb =0;
  3675  02F4  13F0               	bcf	_Flag_usb/(0+8),_Flag_usb& (0+7)
  3676                           
  3677                           ;AppProc.C: 113: if(ReadKey&0x01)
  3678  02F5  1C49               	btfss	_ReadKey,0
  3679  02F6  0008               	return
  3680  02F7  3015               	movlw	21
  3681                           
  3682                           ;AppProc.C: 114: {
  3683                           ;AppProc.C: 115: debance_usb_cnt++;
  3684  02F8  0AAD               	incf	_debance_usb_cnt,f
  3685                           
  3686                           ;AppProc.C: 116: if(debance_usb_cnt>20)
  3687  02F9  022D               	subwf	_debance_usb_cnt,w
  3688  02FA  1C03               	skipc
  3689  02FB  0008               	return
  3690  02FC  3002               	movlw	2
  3691                           
  3692                           ;AppProc.C: 117: {
  3693                           ;AppProc.C: 118: sta_chr =1;
  3694  02FD  01AF               	clrf	_sta_chr
  3695  02FE  0AAF               	incf	_sta_chr,f
  3696                           
  3697                           ;AppProc.C: 120: time_chr_cnt=0;
  3698  02FF  1683               	bsf	3,5	;RP0=1, select bank1
  3699  0300  01A4               	clrf	_time_chr_cnt^(0+128)
  3700  0301  01A5               	clrf	(_time_chr_cnt+1)^(0+128)
  3701                           
  3702                           ;AppProc.C: 122: alarm_beep_cnt=2,speed_beep=10;
  3703  0302  1283               	bcf	3,5	;RP0=0, select bank0
  3704  0303  00D3               	movwf	_alarm_beep_cnt
  3705  0304  300A               	movlw	10
  3706  0305  00D2               	movwf	_speed_beep
  3707                           
  3708                           ;AppProc.C: 123: Flag_low_alarm=0;
  3709  0306  12F1               	bcf	_Flag_low_alarm/(0+8),_Flag_low_alarm& (0+7)
  3710  0307  0008               	return
  3711  0308                     l3550:	
  3712                           ;AppProc.C: 128: case 1:
  3713                           
  3714  0308  3064               	movlw	100
  3715                           
  3716                           ;AppProc.C: 129: Flag_usb=1;
  3717  0309  17F0               	bsf	_Flag_usb/(0+8),_Flag_usb& (0+7)
  3718                           
  3719                           ;AppProc.C: 130: Flag_lk=0;
  3720  030A  1272               	bcf	_Flag_lk/(0+8),_Flag_lk& (0+7)
  3721                           
  3722                           ;AppProc.C: 131: Flag_stop=0;
  3723  030B  1271               	bcf	_Flag_stop/(0+8),_Flag_stop& (0+7)
  3724                           
  3725                           ;AppProc.C: 132: timer_chr++;
  3726  030C  0AAE               	incf	_timer_chr,f
  3727                           
  3728                           ;AppProc.C: 133: if(timer_chr>=100)
  3729  030D  022E               	subwf	_timer_chr,w
  3730  030E  1C03               	skipc
  3731  030F  2B34               	goto	l5862
  3732                           
  3733                           ;AppProc.C: 134: {
  3734                           ;AppProc.C: 135: timer_chr=0;
  3735  0310  01AE               	clrf	_timer_chr
  3736                           
  3737                           ;AppProc.C: 136: time_chr_cnt++;
  3738  0311  1683               	bsf	3,5	;RP0=1, select bank1
  3739  0312  0AA4               	incf	_time_chr_cnt^(0+128),f
  3740  0313  1903               	skipnz
  3741  0314  0AA5               	incf	(_time_chr_cnt+1)^(0+128),f
  3742                           
  3743                           ;AppProc.C: 137: if(time_chr_cnt>=time_chr_add)
  3744  0315  1283               	bcf	3,5	;RP0=0, select bank0
  3745  0316  0851               	movf	_time_chr_add,w
  3746  0317  00F7               	movwf	??_AppChr
  3747  0318  01F8               	clrf	??_AppChr+1
  3748  0319  0878               	movf	??_AppChr+1,w
  3749  031A  1683               	bsf	3,5	;RP0=1, select bank1
  3750  031B  0225               	subwf	(_time_chr_cnt+1)^(0+128),w
  3751  031C  1D03               	skipz
  3752  031D  2B20               	goto	u3175
  3753  031E  0877               	movf	??_AppChr,w
  3754  031F  0224               	subwf	_time_chr_cnt^(0+128),w
  3755  0320                     u3175:	
  3756  0320  1C03               	skipc
  3757  0321  2B29               	goto	l5858
  3758  0322  3063               	movlw	99
  3759                           
  3760                           ;AppProc.C: 138: {
  3761                           ;AppProc.C: 139: time_chr_cnt=0;
  3762  0323  01A4               	clrf	_time_chr_cnt^(0+128)
  3763  0324  01A5               	clrf	(_time_chr_cnt+1)^(0+128)
  3764                           
  3765                           ;AppProc.C: 140: if(bat_percent<99) bat_percent++;
  3766  0325  1283               	bcf	3,5	;RP0=0, select bank0
  3767  0326  0254               	subwf	_bat_percent,w
  3768  0327  1C03               	btfss	3,0
  3769  0328  0AD4               	incf	_bat_percent,f
  3770  0329                     l5858:	
  3771                           
  3772                           ;AppProc.C: 141: }
  3773                           ;AppProc.C: 142: if(bat_val<=250) RA4=0; else RA4=1;
  3774  0329  3000               	movlw	0
  3775  032A  1283               	bcf	3,5	;RP0=0, select bank0
  3776  032B  0225               	subwf	_bat_val+1,w
  3777  032C  30FB               	movlw	251
  3778  032D  1903               	skipnz
  3779  032E  0224               	subwf	_bat_val,w
  3780  032F  1803               	skipnc
  3781  0330  2B33               	goto	l3554
  3782  0331  1205               	bcf	5,4	;volatile
  3783  0332  2B34               	goto	l5862
  3784  0333                     l3554:	
  3785  0333  1605               	bsf	5,4	;volatile
  3786  0334                     l5862:	
  3787                           
  3788                           ;AppProc.C: 143: }
  3789                           ;AppProc.C: 144: if(bat_percent<99) Flag_chr=1; else Flag_chr=0;
  3790  0334  3063               	movlw	99
  3791  0335  0254               	subwf	_bat_percent,w
  3792  0336  1803               	skipnc
  3793  0337  2B3A               	goto	l3556
  3794  0338  14F1               	bsf	_Flag_chr/(0+8),_Flag_chr& (0+7)
  3795  0339  2B3B               	goto	l3557
  3796  033A                     l3556:	
  3797  033A  10F1               	bcf	_Flag_chr/(0+8),_Flag_chr& (0+7)
  3798  033B                     l3557:	
  3799                           
  3800                           ;AppProc.C: 146: if(ReadKey&0x01) debance_usb_cnt=0; else debance_usb_cnt++;
  3801  033B  1C49               	btfss	_ReadKey,0
  3802  033C  2B3F               	goto	l5868
  3803  033D  01AD               	clrf	_debance_usb_cnt
  3804  033E  2B40               	goto	l5870
  3805  033F                     l5868:	
  3806  033F  0AAD               	incf	_debance_usb_cnt,f
  3807  0340                     l5870:	
  3808                           
  3809                           ;AppProc.C: 147: if(debance_usb_cnt>=10) { sta_chr=0; RA4=1; time_motor_cnt=0; alarm_bee
      +                          p_cnt=0,speed_beep=10; }
  3810  0340  300A               	movlw	10
  3811  0341  022D               	subwf	_debance_usb_cnt,w
  3812  0342  1C03               	skipc
  3813  0343  0008               	return
  3814  0344  01AF               	clrf	_sta_chr
  3815  0345  1605               	bsf	5,4	;volatile
  3816  0346  300A               	movlw	10
  3817  0347  1683               	bsf	3,5	;RP0=1, select bank1
  3818  0348  01A8               	clrf	_time_motor_cnt^(0+128)
  3819  0349  01A9               	clrf	(_time_motor_cnt+1)^(0+128)
  3820  034A  1283               	bcf	3,5	;RP0=0, select bank0
  3821  034B  01D3               	clrf	_alarm_beep_cnt
  3822  034C  00D2               	movwf	_speed_beep
  3823  034D  0008               	return
  3824  034E                     l5878:	
  3825                           
  3826                           ;AppProc.C: 150: sta_chr=0;
  3827  034E  01AF               	clrf	_sta_chr
  3828                           
  3829                           ;AppProc.C: 151: break;
  3830  034F  0008               	return
  3831  0350                     l5882:	
  3832  0350  1283               	bcf	3,5	;RP0=0, select bank0
  3833  0351  082F               	movf	_sta_chr,w
  3834                           
  3835                           ; Switch size 1, requested type "space"
  3836                           ; Number of cases is 2, Range of values is 0 to 1
  3837                           ; switch strategies available:
  3838                           ; Name         Instructions Cycles
  3839                           ; simple_byte            7     4 (average)
  3840                           ; direct_byte            8     6 (fixed)
  3841                           ; jumptable            260     6 (fixed)
  3842                           ;	Chosen strategy is simple_byte
  3843  0352  3A00               	xorlw	0	; case 0
  3844  0353  1903               	skipnz
  3845  0354  2AF4               	goto	l3546
  3846  0355  3A01               	xorlw	1	; case 1
  3847  0356  1903               	skipnz
  3848  0357  2B08               	goto	l3550
  3849  0358  2B4E               	goto	l5878
  3850  0359  0008               	return
  3851  035A                     __end_of_AppChr:	
  3852                           
  3853                           	psect	text19
  3854  0457                     __ptext19:	
  3855 ;; *************** function _AdProc *****************
  3856 ;; Defined at:
  3857 ;;		line 105 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  dat_tmp         4    0[BANK1 ] unsigned long 
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : 300/0
  3868 ;;		On exit  : 300/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1
  3871 ;;      Params:         0       0       0
  3872 ;;      Locals:         0       0       4
  3873 ;;      Temps:          0       0       0
  3874 ;;      Totals:         0       0       4
  3875 ;;Total ram usage:        4 bytes
  3876 ;; Hardware stack levels used:    1
  3877 ;; Hardware stack levels required when called:    5
  3878 ;; This function calls:
  3879 ;;		_AdRead
  3880 ;;		___lldiv
  3881 ;;		___lmul
  3882 ;; This function is called by:
  3883 ;;		_main
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function _AdProc
  3889  0457                     _AdProc:	
  3890                           
  3891                           ;sc8p1711c.c: 107: unsigned long dat_tmp;
  3892                           ;sc8p1711c.c: 109: switch(sta_ad)
  3893                           
  3894                           ;incstack = 0
  3895                           ; Regs used in _AdProc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3896  0457  2CAA               	goto	l6730
  3897  0458                     l6684:	
  3898                           
  3899                           ;sc8p1711c.c: 112: AdRead(0b00001111);
  3900  0458  300F               	movlw	15
  3901  0459  23CF               	fcall	_AdRead
  3902                           
  3903                           ;sc8p1711c.c: 113: if(Flag_ad_done){ Flag_ad_done=0; ad_bg=ad_val; sta_ad=1; }
  3904  045A  1E70               	btfss	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  3905  045B  0008               	return
  3906  045C  1270               	bcf	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  3907  045D  0827               	movf	_ad_val+1,w
  3908  045E  00A9               	movwf	_ad_bg+1
  3909  045F  0826               	movf	_ad_val,w
  3910  0460  00A8               	movwf	_ad_bg
  3911  0461  01C5               	clrf	_sta_ad
  3912  0462  0AC5               	incf	_sta_ad,f
  3913  0463  0008               	return
  3914  0464                     l6694:	
  3915                           
  3916                           ;sc8p1711c.c: 116: AdRead(0b00000010);
  3917  0464  3002               	movlw	2
  3918  0465  23CF               	fcall	_AdRead
  3919                           
  3920                           ;sc8p1711c.c: 117: if(Flag_ad_done)
  3921  0466  1E70               	btfss	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  3922  0467  0008               	return
  3923                           
  3924                           ;sc8p1711c.c: 118: {
  3925                           ;sc8p1711c.c: 119: Flag_ad_done=0;
  3926                           
  3927                           ;sc8p1711c.c: 120: dat_tmp=ad_val;
  3928                           
  3929                           ;sc8p1711c.c: 121: ad_current=dat_tmp*1000/ad_bg;
  3930  0468  24B6               	fcall	PL2	;call to abstracted procedure
  3931  0469  3003               	movlw	3
  3932  046A  01DD               	clrf	___lmul@multiplicand+3
  3933  046B  01DC               	clrf	___lmul@multiplicand+2
  3934  046C  00DB               	movwf	___lmul@multiplicand+1
  3935  046D  30E8               	movlw	232
  3936  046E  00DA               	movwf	___lmul@multiplicand
  3937  046F  21C1               	fcall	___lmul
  3938  0470  24D8               	fcall	PL10	;call to abstracted procedure
  3939  0471  2260               	fcall	___lldiv
  3940  0472  0863               	movf	?___lldiv+1,w
  3941  0473  1683               	bsf	3,5	;RP0=1, select bank1
  3942  0474  00AB               	movwf	(_ad_current+1)^(0+128)
  3943  0475  1283               	bcf	3,5	;RP0=0, select bank0
  3944  0476  0862               	movf	?___lldiv,w
  3945  0477  1683               	bsf	3,5	;RP0=1, select bank1
  3946  0478  00AA               	movwf	_ad_current^(0+128)
  3947                           
  3948                           ;sc8p1711c.c: 122: current_scp=ad_current;
  3949  0479  082B               	movf	(_ad_current+1)^(0+128),w
  3950  047A  00AD               	movwf	(_current_scp+1)^(0+128)
  3951  047B  082A               	movf	_ad_current^(0+128),w
  3952  047C  00AC               	movwf	_current_scp^(0+128)
  3953                           
  3954                           ;sc8p1711c.c: 123: if(ad_current>current_val) current_val++; else { if(current_val) curr
      +                          ent_val--; }
  3955  047D  082B               	movf	(_ad_current+1)^(0+128),w
  3956  047E  022F               	subwf	(_current_val+1)^(0+128),w
  3957  047F  1D03               	skipz
  3958  0480  2C83               	goto	u4545
  3959  0481  082A               	movf	_ad_current^(0+128),w
  3960  0482  022E               	subwf	_current_val^(0+128),w
  3961  0483                     u4545:	
  3962  0483  1803               	skipnc
  3963  0484  2C89               	goto	l6710
  3964  0485  0AAE               	incf	_current_val^(0+128),f
  3965  0486  1903               	skipnz
  3966  0487  0AAF               	incf	(_current_val+1)^(0+128),f
  3967  0488  2C93               	goto	l1366
  3968  0489                     l6710:	
  3969  0489  082E               	movf	_current_val^(0+128),w
  3970  048A  042F               	iorwf	(_current_val+1)^(0+128),w
  3971  048B  1903               	btfsc	3,2
  3972  048C  2C93               	goto	l1366
  3973  048D  3001               	movlw	1
  3974  048E  02AE               	subwf	_current_val^(0+128),f
  3975  048F  3000               	movlw	0
  3976  0490  1C03               	skipc
  3977  0491  03AF               	decf	(_current_val+1)^(0+128),f
  3978  0492  02AF               	subwf	(_current_val+1)^(0+128),f
  3979  0493                     l1366:	
  3980                           
  3981                           ;sc8p1711c.c: 124: sta_ad=2;
  3982  0493  3002               	movlw	2
  3983  0494  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0495  00C5               	movwf	_sta_ad
  3985  0496  0008               	return
  3986  0497                     l6714:	
  3987                           
  3988                           ;sc8p1711c.c: 128: AdRead(0b00000001);
  3989  0497  3001               	movlw	1
  3990  0498  23CF               	fcall	_AdRead
  3991                           
  3992                           ;sc8p1711c.c: 129: if(Flag_ad_done)
  3993  0499  1E70               	btfss	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  3994  049A  0008               	return
  3995                           
  3996                           ;sc8p1711c.c: 130: {
  3997                           ;sc8p1711c.c: 131: Flag_ad_done=0;
  3998                           
  3999                           ;sc8p1711c.c: 133: dat_tmp=ad_val;
  4000                           
  4001                           ;sc8p1711c.c: 134: bat_val=dat_tmp*100/ad_bg;
  4002  049B  24B6               	fcall	PL2	;call to abstracted procedure
  4003  049C  3064               	movlw	100
  4004  049D  00DA               	movwf	___lmul@multiplicand
  4005  049E  01DB               	clrf	___lmul@multiplicand+1
  4006  049F  01DC               	clrf	___lmul@multiplicand+2
  4007  04A0  01DD               	clrf	___lmul@multiplicand+3
  4008  04A1  21C1               	fcall	___lmul
  4009  04A2  24D8               	fcall	PL10	;call to abstracted procedure
  4010  04A3  2260               	fcall	___lldiv
  4011  04A4  0863               	movf	?___lldiv+1,w
  4012  04A5  00A5               	movwf	_bat_val+1
  4013  04A6  0862               	movf	?___lldiv,w
  4014  04A7  00A4               	movwf	_bat_val
  4015  04A8                     l6724:	
  4016                           
  4017                           ;sc8p1711c.c: 135: sta_ad=0;
  4018  04A8  01C5               	clrf	_sta_ad
  4019  04A9  0008               	return
  4020  04AA                     l6730:	
  4021  04AA  0845               	movf	_sta_ad,w
  4022                           
  4023                           ; Switch size 1, requested type "space"
  4024                           ; Number of cases is 3, Range of values is 0 to 2
  4025                           ; switch strategies available:
  4026                           ; Name         Instructions Cycles
  4027                           ; direct_byte            9     6 (fixed)
  4028                           ; simple_byte           10     6 (average)
  4029                           ; jumptable            260     6 (fixed)
  4030                           ;	Chosen strategy is direct_byte
  4031  04AB  0084               	movwf	4
  4032  04AC  3003               	movlw	3
  4033  04AD  0204               	subwf	4,w
  4034  04AE  1803               	skipnc
  4035  04AF  2CA8               	goto	l6724
  4036  04B0  3000               	movlw	high S7344
  4037  04B1  008A               	movwf	10
  4038  04B2  302E               	movlw	low S7344
  4039  04B3  0704               	addwf	4,w
  4040  04B4  0082               	movwf	2
  4041  04B5  0008               	return
  4042  04B6                     __end_of_AdProc:	
  4043  04B6                     PL2:	
  4044  04B6  1270               	bcf	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  4045  04B7  0826               	movf	_ad_val,w
  4046  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  4047  04B9  00B6               	movwf	AdProc@dat_tmp^(0+128)
  4048  04BA  1283               	bcf	3,5	;RP0=0, select bank0
  4049  04BB  0827               	movf	_ad_val+1,w
  4050  04BC  1683               	bsf	3,5	;RP0=1, select bank1
  4051  04BD  00B7               	movwf	(AdProc@dat_tmp^(0+128)+1)
  4052  04BE  01B8               	clrf	(AdProc@dat_tmp^(0+128)+2)
  4053  04BF  01B9               	clrf	(AdProc@dat_tmp^(0+128)+3)
  4054  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  4055  04C1  0828               	movf	_ad_bg,w
  4056  04C2  00E2               	movwf	___lldiv@divisor
  4057  04C3  0829               	movf	_ad_bg+1,w
  4058  04C4  00E3               	movwf	___lldiv@divisor+1
  4059  04C5  01E4               	clrf	___lldiv@divisor+2
  4060  04C6  01E5               	clrf	___lldiv@divisor+3
  4061  04C7  1683               	bsf	3,5	;RP0=1, select bank1
  4062  04C8  0839               	movf	(AdProc@dat_tmp+3)^(0+128),w
  4063  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  4064  04CA  00D9               	movwf	___lmul@multiplier+3
  4065  04CB  1683               	bsf	3,5	;RP0=1, select bank1
  4066  04CC  0838               	movf	(AdProc@dat_tmp+2)^(0+128),w
  4067  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  4068  04CE  00D8               	movwf	___lmul@multiplier+2
  4069  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  4070  04D0  0837               	movf	(AdProc@dat_tmp+1)^(0+128),w
  4071  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  4072  04D2  00D7               	movwf	___lmul@multiplier+1
  4073  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  4074  04D4  0836               	movf	AdProc@dat_tmp^(0+128),w
  4075  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  4076  04D6  00D6               	movwf	___lmul@multiplier
  4077  04D7  0008               	return
  4078  04D8                     __end_ofPL2:	
  4079  04D8                     PL10:	
  4080  04D8  0859               	movf	?___lmul+3,w
  4081  04D9  00E9               	movwf	___lldiv@dividend+3
  4082  04DA  0858               	movf	?___lmul+2,w
  4083  04DB  00E8               	movwf	___lldiv@dividend+2
  4084  04DC  0857               	movf	?___lmul+1,w
  4085  04DD  00E7               	movwf	___lldiv@dividend+1
  4086  04DE  0856               	movf	?___lmul,w
  4087  04DF  00E6               	movwf	___lldiv@dividend
  4088  04E0  0008               	return
  4089  04E1                     __end_ofPL10:	
  4090                           
  4091                           	psect	swtext3
  4092  002E                     __pswtext3:	
  4093  002E                     S7344:	
  4094  002E  2C58               	ljmp	l6684
  4095  002F  2C64               	ljmp	l6694
  4096  0030  2C97               	ljmp	l6714
  4097                           
  4098                           	psect	text20
  4099  01C1                     __ptext20:	
  4100 ;; *************** function ___lmul *****************
  4101 ;; Defined at:
  4102 ;;		line 15 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c
      +"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4105 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  product         4    8[BANK0 ] unsigned long 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  4    0[BANK0 ] unsigned long 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 300/0
  4114 ;;		On exit  : 300/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMMON   BANK0   BANK1
  4117 ;;      Params:         0       8       0
  4118 ;;      Locals:         0       4       0
  4119 ;;      Temps:          0       0       0
  4120 ;;      Totals:         0      12       0
  4121 ;;Total ram usage:       12 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    3
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_AdProc
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function ___lmul
  4133  01C1                     ___lmul:	
  4134                           
  4135                           ;incstack = 0
  4136                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4137  01C1  01DE               	clrf	___lmul@product
  4138  01C2  01DF               	clrf	___lmul@product+1
  4139  01C3  01E0               	clrf	___lmul@product+2
  4140  01C4  01E1               	clrf	___lmul@product+3
  4141  01C5                     l3643:	
  4142  01C5  1C56               	btfss	___lmul@multiplier,0
  4143  01C6  29DB               	goto	l6608
  4144  01C7  085A               	movf	___lmul@multiplicand,w
  4145  01C8  07DE               	addwf	___lmul@product,f
  4146  01C9  085B               	movf	___lmul@multiplicand+1,w
  4147  01CA  1103               	clrz
  4148  01CB  1803               	skipnc
  4149  01CC  3E01               	addlw	1
  4150  01CD  1D03               	btfss	3,2
  4151  01CE  07DF               	addwf	___lmul@product+1,f
  4152  01CF  085C               	movf	___lmul@multiplicand+2,w
  4153  01D0  1103               	clrz
  4154  01D1  1803               	skipnc
  4155  01D2  3E01               	addlw	1
  4156  01D3  1D03               	btfss	3,2
  4157  01D4  07E0               	addwf	___lmul@product+2,f
  4158  01D5  085D               	movf	___lmul@multiplicand+3,w
  4159  01D6  1103               	clrz
  4160  01D7  1803               	skipnc
  4161  01D8  3E01               	addlw	1
  4162  01D9  1D03               	btfss	3,2
  4163  01DA  07E1               	addwf	___lmul@product+3,f
  4164  01DB                     l6608:	
  4165  01DB  1003               	clrc
  4166  01DC  0DDA               	rlf	___lmul@multiplicand,f
  4167  01DD  0DDB               	rlf	___lmul@multiplicand+1,f
  4168  01DE  0DDC               	rlf	___lmul@multiplicand+2,f
  4169  01DF  0DDD               	rlf	___lmul@multiplicand+3,f
  4170  01E0  1003               	clrc
  4171  01E1  0CD9               	rrf	___lmul@multiplier+3,f
  4172  01E2  0CD8               	rrf	___lmul@multiplier+2,f
  4173  01E3  0CD7               	rrf	___lmul@multiplier+1,f
  4174  01E4  0CD6               	rrf	___lmul@multiplier,f
  4175  01E5  0859               	movf	___lmul@multiplier+3,w
  4176  01E6  0458               	iorwf	___lmul@multiplier+2,w
  4177  01E7  0457               	iorwf	___lmul@multiplier+1,w
  4178  01E8  0456               	iorwf	___lmul@multiplier,w
  4179  01E9  1D03               	skipz
  4180  01EA  29C5               	goto	l3643
  4181  01EB  0861               	movf	___lmul@product+3,w
  4182  01EC  00D9               	movwf	?___lmul+3
  4183  01ED  0860               	movf	___lmul@product+2,w
  4184  01EE  00D8               	movwf	?___lmul+2
  4185  01EF  085F               	movf	___lmul@product+1,w
  4186  01F0  00D7               	movwf	?___lmul+1
  4187  01F1  085E               	movf	___lmul@product,w
  4188  01F2  00D6               	movwf	?___lmul
  4189  01F3  0008               	return
  4190  01F4                     __end_of___lmul:	
  4191                           
  4192                           	psect	text21
  4193  0260                     __ptext21:	
  4194 ;; *************** function ___lldiv *****************
  4195 ;; Defined at:
  4196 ;;		line 6 in file "C:\Users\Administrator\Desktop\ÐÂ½¨ÎÄ¼þ¼Ð (2)\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  divisor         4   12[BANK0 ] unsigned long 
  4199 ;;  dividend        4   16[BANK0 ] unsigned long 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  quotient        4   20[BANK0 ] unsigned long 
  4202 ;;  counter         1   24[BANK0 ] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  4   12[BANK0 ] unsigned long 
  4205 ;; Registers used:
  4206 ;;		wreg, status,2, status,0
  4207 ;; Tracked objects:
  4208 ;;		On entry : 300/0
  4209 ;;		On exit  : 300/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1
  4212 ;;      Params:         0       8       0
  4213 ;;      Locals:         0       5       0
  4214 ;;      Temps:          0       0       0
  4215 ;;      Totals:         0      13       0
  4216 ;;Total ram usage:       13 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    3
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_AdProc
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           
  4227                           ;psect for function ___lldiv
  4228  0260                     ___lldiv:	
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4232  0260  01EA               	clrf	___lldiv@quotient
  4233  0261  01EB               	clrf	___lldiv@quotient+1
  4234  0262  01EC               	clrf	___lldiv@quotient+2
  4235  0263  01ED               	clrf	___lldiv@quotient+3
  4236  0264  0865               	movf	___lldiv@divisor+3,w
  4237  0265  0464               	iorwf	___lldiv@divisor+2,w
  4238  0266  0463               	iorwf	___lldiv@divisor+1,w
  4239  0267  0462               	iorwf	___lldiv@divisor,w
  4240  0268  1903               	skipnz
  4241  0269  2A9F               	goto	l6652
  4242  026A  01EE               	clrf	___lldiv@counter
  4243  026B                     L16:	
  4244  026B  0AEE               	incf	___lldiv@counter,f
  4245  026C  1BE5               	btfsc	___lldiv@divisor+3,7
  4246  026D  2A74               	goto	l6640
  4247  026E  1003               	clrc
  4248  026F  0DE2               	rlf	___lldiv@divisor,f
  4249  0270  0DE3               	rlf	___lldiv@divisor+1,f
  4250  0271  0DE4               	rlf	___lldiv@divisor+2,f
  4251  0272  0DE5               	rlf	___lldiv@divisor+3,f
  4252  0273  2A6B               	goto	L16
  4253  0274                     l6640:	
  4254  0274  1003               	clrc
  4255  0275  0DEA               	rlf	___lldiv@quotient,f
  4256  0276  0DEB               	rlf	___lldiv@quotient+1,f
  4257  0277  0DEC               	rlf	___lldiv@quotient+2,f
  4258  0278  0DED               	rlf	___lldiv@quotient+3,f
  4259  0279  0865               	movf	___lldiv@divisor+3,w
  4260  027A  0269               	subwf	___lldiv@dividend+3,w
  4261  027B  1D03               	skipz
  4262  027C  2A87               	goto	u4465
  4263  027D  0864               	movf	___lldiv@divisor+2,w
  4264  027E  0268               	subwf	___lldiv@dividend+2,w
  4265  027F  1D03               	skipz
  4266  0280  2A87               	goto	u4465
  4267  0281  0863               	movf	___lldiv@divisor+1,w
  4268  0282  0267               	subwf	___lldiv@dividend+1,w
  4269  0283  1D03               	skipz
  4270  0284  2A87               	goto	u4465
  4271  0285  0862               	movf	___lldiv@divisor,w
  4272  0286  0266               	subwf	___lldiv@dividend,w
  4273  0287                     u4465:	
  4274  0287  1C03               	skipc
  4275  0288  2A99               	goto	L17
  4276  0289  0862               	movf	___lldiv@divisor,w
  4277  028A  02E6               	subwf	___lldiv@dividend,f
  4278  028B  0863               	movf	___lldiv@divisor+1,w
  4279  028C  1C03               	skipc
  4280  028D  0F63               	incfsz	___lldiv@divisor+1,w
  4281  028E  02E7               	subwf	___lldiv@dividend+1,f
  4282  028F  0864               	movf	___lldiv@divisor+2,w
  4283  0290  1C03               	skipc
  4284  0291  0F64               	incfsz	___lldiv@divisor+2,w
  4285  0292  02E8               	subwf	___lldiv@dividend+2,f
  4286  0293  0865               	movf	___lldiv@divisor+3,w
  4287  0294  1C03               	skipc
  4288  0295  0F65               	incfsz	___lldiv@divisor+3,w
  4289  0296  02E9               	subwf	___lldiv@dividend+3,f
  4290  0297  146A               	bsf	___lldiv@quotient,0
  4291  0298  1003               	clrc
  4292  0299                     L17:	
  4293  0299  0CE5               	rrf	___lldiv@divisor+3,f
  4294  029A  0CE4               	rrf	___lldiv@divisor+2,f
  4295  029B  0CE3               	rrf	___lldiv@divisor+1,f
  4296  029C  0CE2               	rrf	___lldiv@divisor,f
  4297  029D  0BEE               	decfsz	___lldiv@counter,f
  4298  029E  2A74               	goto	l6640
  4299  029F                     l6652:	
  4300  029F  086D               	movf	___lldiv@quotient+3,w
  4301  02A0  00E5               	movwf	?___lldiv+3
  4302  02A1  086C               	movf	___lldiv@quotient+2,w
  4303  02A2  00E4               	movwf	?___lldiv+2
  4304  02A3  086B               	movf	___lldiv@quotient+1,w
  4305  02A4  00E3               	movwf	?___lldiv+1
  4306  02A5  086A               	movf	___lldiv@quotient,w
  4307  02A6  00E2               	movwf	?___lldiv
  4308  02A7  0008               	return
  4309  02A8                     __end_of___lldiv:	
  4310                           
  4311                           	psect	text22
  4312  03CF                     __ptext22:	
  4313 ;; *************** function _AdRead *****************
  4314 ;; Defined at:
  4315 ;;		line 67 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  ad_ch           1    wreg     unsigned char 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  ad_ch           1    4[BANK0 ] unsigned char 
  4320 ;;  ad_temp         2    5[BANK0 ] unsigned int 
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0, pclath, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 300/0
  4327 ;;		On exit  : 300/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMMON   BANK0   BANK1
  4330 ;;      Params:         0       0       0
  4331 ;;      Locals:         0       3       0
  4332 ;;      Temps:          0       2       0
  4333 ;;      Totals:         0       5       0
  4334 ;;Total ram usage:        5 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    4
  4337 ;; This function calls:
  4338 ;;		_ADSample
  4339 ;; This function is called by:
  4340 ;;		_AdProc
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _AdRead
  4346  03CF                     _AdRead:	
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _AdRead: [wreg+status,2+status,0+pclath+cstack]
  4350                           ;AdRead@ad_ch stored from wreg
  4351  03CF  00DA               	movwf	AdRead@ad_ch
  4352                           
  4353                           ;sc8p1711c.c: 69: static unsigned char adtimes;
  4354                           ;sc8p1711c.c: 70: unsigned int ad_temp;
  4355                           ;sc8p1711c.c: 72: if(ADSample(ad_ch))
  4356  03D0  20AB               	fcall	_ADSample
  4357  03D1  3A00               	xorlw	0
  4358  03D2  1903               	skipnz
  4359  03D3  0008               	return
  4360                           
  4361                           ;sc8p1711c.c: 73: {
  4362                           ;sc8p1711c.c: 74: ad_temp=(ADRESH<<4)+(ADRESL>>4);
  4363  03D4  081E               	movf	30,w	;volatile
  4364  03D5  00DB               	movwf	AdRead@ad_temp
  4365  03D6  30F0               	movlw	240
  4366  03D7  01DC               	clrf	AdRead@ad_temp+1
  4367  03D8  0EDB               	swapf	AdRead@ad_temp,f
  4368  03D9  0EDC               	swapf	AdRead@ad_temp+1,f
  4369  03DA  05DC               	andwf	AdRead@ad_temp+1,f
  4370  03DB  085B               	movf	AdRead@ad_temp,w
  4371  03DC  390F               	andlw	15
  4372  03DD  04DC               	iorwf	AdRead@ad_temp+1,f
  4373  03DE  30F0               	movlw	240
  4374  03DF  05DB               	andwf	AdRead@ad_temp,f
  4375  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  4376  03E1  0E1E               	swapf	30,w	;volatile
  4377  03E2  390F               	andlw	15
  4378  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  4379  03E4  07DB               	addwf	AdRead@ad_temp,f
  4380  03E5  1803               	skipnc
  4381  03E6  0ADC               	incf	AdRead@ad_temp+1,f
  4382                           
  4383                           ;sc8p1711c.c: 76: if(adtimes==0)
  4384  03E7  0846               	movf	AdRead@adtimes,w
  4385  03E8  1D03               	btfss	3,2
  4386  03E9  2BF2               	goto	l1348
  4387  03EA  30FF               	movlw	255
  4388                           
  4389                           ;sc8p1711c.c: 77: {
  4390                           ;sc8p1711c.c: 78: admax = 0x0000;
  4391  03EB  1683               	bsf	3,5	;RP0=1, select bank1
  4392  03EC  01B4               	clrf	_admax^(0+128)
  4393  03ED  01B5               	clrf	(_admax+1)^(0+128)
  4394                           
  4395                           ;sc8p1711c.c: 79: admin = 0xffff;
  4396  03EE  00B2               	movwf	_admin^(0+128)
  4397  03EF  00B3               	movwf	(_admin^(0+128)+1)
  4398                           
  4399                           ;sc8p1711c.c: 80: adsum = 0;
  4400  03F0  01B0               	clrf	_adsum^(0+128)
  4401  03F1  01B1               	clrf	(_adsum+1)^(0+128)
  4402  03F2                     l1348:	
  4403                           
  4404                           ;sc8p1711c.c: 81: }
  4405                           ;sc8p1711c.c: 82: if(ad_temp > admax) admax = ad_temp;
  4406  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  4407  03F3  085C               	movf	AdRead@ad_temp+1,w
  4408  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  4409  03F5  0235               	subwf	(_admax+1)^(0+128),w
  4410  03F6  1D03               	skipz
  4411  03F7  2BFC               	goto	u4275
  4412  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  4413  03F9  085B               	movf	AdRead@ad_temp,w
  4414  03FA  1683               	bsf	3,5	;RP0=1, select bank1
  4415  03FB  0234               	subwf	_admax^(0+128),w
  4416  03FC                     u4275:	
  4417  03FC  1803               	skipnc
  4418  03FD  2C06               	goto	l1349
  4419  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  4420  03FF  085C               	movf	AdRead@ad_temp+1,w
  4421  0400  1683               	bsf	3,5	;RP0=1, select bank1
  4422  0401  00B5               	movwf	(_admax+1)^(0+128)
  4423  0402  1283               	bcf	3,5	;RP0=0, select bank0
  4424  0403  085B               	movf	AdRead@ad_temp,w
  4425  0404  1683               	bsf	3,5	;RP0=1, select bank1
  4426  0405  00B4               	movwf	_admax^(0+128)
  4427  0406                     l1349:	
  4428                           
  4429                           ;sc8p1711c.c: 83: if(ad_temp < admin) admin = ad_temp;
  4430  0406  0833               	movf	(_admin+1)^(0+128),w
  4431  0407  1283               	bcf	3,5	;RP0=0, select bank0
  4432  0408  025C               	subwf	AdRead@ad_temp+1,w
  4433  0409  1D03               	skipz
  4434  040A  2C0F               	goto	u4285
  4435  040B  1683               	bsf	3,5	;RP0=1, select bank1
  4436  040C  0832               	movf	_admin^(0+128),w
  4437  040D  1283               	bcf	3,5	;RP0=0, select bank0
  4438  040E  025B               	subwf	AdRead@ad_temp,w
  4439  040F                     u4285:	
  4440  040F  1803               	skipnc
  4441  0410  2C18               	goto	l1350
  4442  0411  085C               	movf	AdRead@ad_temp+1,w
  4443  0412  1683               	bsf	3,5	;RP0=1, select bank1
  4444  0413  00B3               	movwf	(_admin+1)^(0+128)
  4445  0414  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0415  085B               	movf	AdRead@ad_temp,w
  4447  0416  1683               	bsf	3,5	;RP0=1, select bank1
  4448  0417  00B2               	movwf	_admin^(0+128)
  4449  0418                     l1350:	
  4450                           
  4451                           ;sc8p1711c.c: 85: adsum += ad_temp;
  4452  0418  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0419  085B               	movf	AdRead@ad_temp,w
  4454  041A  2451               	fcall	PL18	;call to abstracted procedure
  4455  041B  085C               	movf	AdRead@ad_temp+1,w
  4456  041C  1683               	bsf	3,5	;RP0=1, select bank1
  4457  041D  07B1               	addwf	(_adsum+1)^(0+128),f
  4458  041E  300A               	movlw	10
  4459                           
  4460                           ;sc8p1711c.c: 86: adtimes++;
  4461  041F  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0420  0AC6               	incf	AdRead@adtimes,f
  4463                           
  4464                           ;sc8p1711c.c: 87: if(adtimes >= 10)
  4465  0421  0246               	subwf	AdRead@adtimes,w
  4466  0422  1C03               	skipc
  4467  0423  0008               	return
  4468                           
  4469                           ;sc8p1711c.c: 88: {
  4470                           ;sc8p1711c.c: 89: adsum = adsum - admax - admin;
  4471  0424  1683               	bsf	3,5	;RP0=1, select bank1
  4472  0425  0832               	movf	_admin^(0+128),w
  4473  0426  0734               	addwf	_admax^(0+128),w
  4474  0427  1283               	bcf	3,5	;RP0=0, select bank0
  4475  0428  00D8               	movwf	??_AdRead
  4476  0429  1683               	bsf	3,5	;RP0=1, select bank1
  4477  042A  0833               	movf	(_admin+1)^(0+128),w
  4478  042B  1803               	skipnc
  4479  042C  0A33               	incf	(_admin+1)^(0+128),w
  4480  042D  0735               	addwf	(_admax+1)^(0+128),w
  4481  042E  1283               	bcf	3,5	;RP0=0, select bank0
  4482  042F  00D9               	movwf	??_AdRead+1
  4483  0430  09D8               	comf	??_AdRead,f
  4484  0431  09D9               	comf	??_AdRead+1,f
  4485  0432  0AD8               	incf	??_AdRead,f
  4486  0433  1903               	skipnz
  4487  0434  0AD9               	incf	??_AdRead+1,f
  4488  0435  0858               	movf	??_AdRead,w
  4489  0436  2451               	fcall	PL18	;call to abstracted procedure
  4490  0437  0859               	movf	??_AdRead+1,w
  4491  0438  1683               	bsf	3,5	;RP0=1, select bank1
  4492  0439  07B1               	addwf	(_adsum+1)^(0+128),f
  4493                           
  4494                           ;sc8p1711c.c: 90: ad_val = adsum >> 3;
  4495  043A  0831               	movf	(_adsum+1)^(0+128),w
  4496  043B  1283               	bcf	3,5	;RP0=0, select bank0
  4497  043C  00D9               	movwf	??_AdRead+1
  4498  043D  1683               	bsf	3,5	;RP0=1, select bank1
  4499  043E  0830               	movf	_adsum^(0+128),w
  4500  043F  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0440  00D8               	movwf	??_AdRead
  4502  0441  1003               	clrc
  4503  0442  0CD9               	rrf	??_AdRead+1,f
  4504  0443  0CD8               	rrf	??_AdRead,f
  4505  0444  1003               	clrc
  4506  0445  0CD9               	rrf	??_AdRead+1,f
  4507  0446  0CD8               	rrf	??_AdRead,f
  4508  0447  1003               	clrc
  4509  0448  0CD9               	rrf	??_AdRead+1,f
  4510  0449  0CD8               	rrf	??_AdRead,f
  4511  044A  0858               	movf	??_AdRead,w
  4512  044B  00A6               	movwf	_ad_val
  4513  044C  0859               	movf	??_AdRead+1,w
  4514  044D  00A7               	movwf	_ad_val+1
  4515                           
  4516                           ;sc8p1711c.c: 91: adtimes = 0;
  4517  044E  01C6               	clrf	AdRead@adtimes
  4518                           
  4519                           ;sc8p1711c.c: 92: Flag_ad_done=1;
  4520  044F  1670               	bsf	_Flag_ad_done/(0+8),_Flag_ad_done& (0+7)
  4521  0450  0008               	return
  4522  0451                     __end_of_AdRead:	
  4523  0451                     PL18:	
  4524  0451  1683               	bsf	3,5	;RP0=1, select bank1
  4525  0452  07B0               	addwf	_adsum^(0+128),f
  4526  0453  1803               	skipnc
  4527  0454  0AB1               	incf	(_adsum+1)^(0+128),f
  4528  0455  1283               	bcf	3,5	;RP0=0, select bank0
  4529  0456  0008               	return
  4530  0457                     __end_ofPL18:	
  4531                           
  4532                           	psect	text23
  4533  00AB                     __ptext23:	
  4534 ;; *************** function _ADSample *****************
  4535 ;; Defined at:
  4536 ;;		line 44 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\sc8p1711c.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;  adch            1    wreg     unsigned char 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  adch            1    0[BANK0 ] unsigned char 
  4541 ;;  i               1    1[BANK0 ] volatile unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      unsigned char 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 300/0
  4548 ;;		On exit  : 300/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1
  4551 ;;      Params:         0       0       0
  4552 ;;      Locals:         0       2       0
  4553 ;;      Temps:          1       0       0
  4554 ;;      Totals:         1       2       0
  4555 ;;Total ram usage:        3 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    3
  4558 ;; This function calls:
  4559 ;;		Nothing
  4560 ;; This function is called by:
  4561 ;;		_AdRead
  4562 ;;		_AppMotor
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _ADSample
  4568  00AB                     _ADSample:	
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4572                           ;ADSample@adch stored from wreg
  4573  00AB  00D6               	movwf	ADSample@adch
  4574                           
  4575                           ;sc8p1711c.c: 46: ADCON1 = 0x00;
  4576  00AC  1683               	bsf	3,5	;RP0=1, select bank1
  4577  00AD  019F               	clrf	31	;volatile
  4578                           
  4579                           ;sc8p1711c.c: 47: ADCON0 = 0X41 | ( adch << 2);
  4580  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  4581  00AF  0856               	movf	ADSample@adch,w
  4582  00B0  00F7               	movwf	??_ADSample
  4583  00B1  3001               	movlw	1
  4584  00B2  1003               	clrc
  4585  00B3                     L18:	
  4586  00B3  0DF7               	rlf	??_ADSample,f
  4587  00B4  3EFF               	addlw	-1
  4588  00B5  1003               	clrc
  4589  00B6  1D03               	skipz
  4590  00B7  28B3               	goto	L18
  4591  00B8  0D77               	rlf	??_ADSample,w
  4592  00B9  3841               	iorlw	65
  4593  00BA  009F               	movwf	31	;volatile
  4594  00BB  0000               	nop	;# 
  4595  00BC  0000               	nop	;# 
  4596                           
  4597                           ;sc8p1711c.c: 50: GODONE = 1;
  4598  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  4599  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  4600  00BF  149F               	bsf	31,1	;volatile
  4601                           
  4602                           ;sc8p1711c.c: 51: volatile unsigned char i = 0;
  4603  00C0  01D7               	clrf	ADSample@i	;volatile
  4604  00C1                     l1338:	
  4605                           ;sc8p1711c.c: 52: while(GODONE)
  4606                           
  4607  00C1  1C9F               	btfss	31,1	;volatile
  4608  00C2  3401               	retlw	1
  4609                           
  4610                           ;sc8p1711c.c: 53: {
  4611                           ;sc8p1711c.c: 54: if(0 == (--i))
  4612  00C3  0BD7               	decfsz	ADSample@i,f	;volatile
  4613  00C4  28C1               	goto	l1338
  4614                           
  4615                           ;sc8p1711c.c: 55: return 0;
  4616  00C5  3400               	retlw	0
  4617  00C6                     __end_of_ADSample:	
  4618                           ;sc8p1711c.c: 56: }
  4619                           ;sc8p1711c.c: 57: return 1;
  4620                           
  4621                           
  4622                           	psect	text24
  4623  0143                     __ptext24:	
  4624 ;; *************** function _Isr_Timer *****************
  4625 ;; Defined at:
  4626 ;;		line 29 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\main.C"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 300/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMMON   BANK0   BANK1
  4640 ;;      Params:         0       0       0
  4641 ;;      Locals:         0       0       0
  4642 ;;      Temps:          3       0       0
  4643 ;;      Totals:         3       0       0
  4644 ;;Total ram usage:        3 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    2
  4647 ;; This function calls:
  4648 ;;		_LedScan
  4649 ;; This function is called by:
  4650 ;;		Interrupt level 1
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           
  4655                           ;psect for function _Isr_Timer
  4656  0143                     _Isr_Timer:	
  4657                           
  4658                           ;main.C: 31: if(TMR2IF&&TMR2ON)
  4659  0143  1283               	bcf	3,5	;RP0=0, select bank0
  4660  0144  1303               	bcf	3,6	;RP1=0, select bank0
  4661  0145  188C               	btfsc	12,1	;volatile
  4662  0146  1D12               	btfss	18,2	;volatile
  4663  0147  2960               	goto	i1l675
  4664                           
  4665                           ;main.C: 32: {
  4666                           ;main.C: 33: TMR2IF = 0;
  4667  0148  108C               	bcf	12,1	;volatile
  4668                           
  4669                           ;main.C: 35: if(Flag_beep){
  4670  0149  1DF1               	btfss	_Flag_beep/(0+8),_Flag_beep& (0+7)
  4671  014A  294D               	goto	i1l6296
  4672                           
  4673                           ;main.C: 36: if(RB6) RB6=0; else RB6=1;
  4674  014B  1F06               	btfss	6,6	;volatile
  4675  014C  294F               	goto	i1l670
  4676  014D                     i1l6296:	
  4677  014D  1306               	bcf	6,6	;volatile
  4678  014E  2950               	goto	i1l6298
  4679  014F                     i1l670:	
  4680  014F  1706               	bsf	6,6	;volatile
  4681  0150                     i1l6298:	
  4682  0150  300A               	movlw	10
  4683                           
  4684                           ;main.C: 40: Rt2ms_cnt++;
  4685  0151  0ACB               	incf	_Rt2ms_cnt,f
  4686                           
  4687                           ;main.C: 41: if(Rt2ms_cnt>=10)
  4688  0152  024B               	subwf	_Rt2ms_cnt,w
  4689  0153  1C03               	skipc
  4690  0154  2957               	goto	i1l6306
  4691                           
  4692                           ;main.C: 42: {
  4693                           ;main.C: 43: Rt2ms_cnt=0;
  4694  0155  01CB               	clrf	_Rt2ms_cnt
  4695                           
  4696                           ;main.C: 44: LedScan();
  4697  0156  2031               	fcall	_LedScan
  4698  0157                     i1l6306:	
  4699  0157  3032               	movlw	50
  4700                           
  4701                           ;main.C: 45: }
  4702                           ;main.C: 46: Rt10ms_cnt++;
  4703  0158  1283               	bcf	3,5	;RP0=0, select bank0
  4704  0159  0ACA               	incf	_Rt10ms_cnt,f
  4705                           
  4706                           ;main.C: 47: if(Rt10ms_cnt>=50)
  4707  015A  024A               	subwf	_Rt10ms_cnt,w
  4708  015B  1C03               	skipc
  4709  015C  2960               	goto	i1l675
  4710                           
  4711                           ;main.C: 48: {
  4712                           ;main.C: 49: Rt10ms_cnt=0;
  4713  015D  01CA               	clrf	_Rt10ms_cnt
  4714                           
  4715                           ;main.C: 50: Flag_mainloop=1;
  4716  015E  1770               	bsf	_Flag_mainloop/(0+8),_Flag_mainloop& (0+7)
  4717                           
  4718                           ;main.C: 51: Flag_RtSleep=1;
  4719  015F  16F0               	bsf	_Flag_RtSleep/(0+8),_Flag_RtSleep& (0+7)
  4720  0160                     i1l675:	
  4721  0160  0876               	movf	??_Isr_Timer+2,w
  4722  0161  008A               	movwf	10
  4723  0162  0875               	movf	??_Isr_Timer+1,w
  4724  0163  0084               	movwf	4
  4725  0164  0E74               	swapf	??_Isr_Timer^(0+-128),w
  4726  0165  0083               	movwf	3
  4727  0166  0EFE               	swapf	126,f
  4728  0167  0E7E               	swapf	126,w
  4729  0168  0009               	retfie
  4730  0169                     __end_of_Isr_Timer:	
  4731                           
  4732                           	psect	intentry
  4733  0000                     __pintentry:	
  4734                           ;incstack = 0
  4735                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4736                           
  4737  0000                     interrupt_function:	
  4738  007E                     saved_w	set	btemp
  4739  0000  00FE               	movwf	btemp
  4740  0001  0E03               	swapf	3,w
  4741  0002  00F4               	movwf	??_Isr_Timer
  4742  0003  0804               	movf	4,w
  4743  0004  00F5               	movwf	??_Isr_Timer+1
  4744  0005  080A               	movf	10,w
  4745  0006  00F6               	movwf	??_Isr_Timer+2
  4746  0007  2943               	ljmp	_Isr_Timer
  4747                           
  4748                           	psect	text25
  4749  0031                     __ptext25:	
  4750 ;; *************** function _LedScan *****************
  4751 ;; Defined at:
  4752 ;;		line 78 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\display.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 300/0
  4763 ;;		On exit  : 200/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1
  4766 ;;      Params:         0       0       0
  4767 ;;      Locals:         0       0       0
  4768 ;;      Temps:          0       0       0
  4769 ;;      Totals:         0       0       0
  4770 ;;Total ram usage:        0 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    1
  4773 ;; This function calls:
  4774 ;;		_LedIndex
  4775 ;; This function is called by:
  4776 ;;		_Isr_Timer
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _LedScan
  4782  0031                     _LedScan:	
  4783  0031  3005               	movlw	5
  4784                           
  4785                           ;display.c: 80: static unsigned char led_scan_index;
  4786                           ;display.c: 83: led_scan_index++; if(led_scan_index>4) led_scan_index=0;
  4787                           
  4788                           ;incstack = 0
  4789                           ; Regs used in _LedScan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4790  0032  0AC2               	incf	LedScan@led_scan_index,f
  4791  0033  0242               	subwf	LedScan@led_scan_index,w
  4792  0034  1803               	btfsc	3,0
  4793  0035  01C2               	clrf	LedScan@led_scan_index
  4794                           
  4795                           ;display.c: 85: LedIndex(led_scan_index);
  4796  0036  0842               	movf	LedScan@led_scan_index,w
  4797  0037  2B5A               	ljmp	_LedIndex
  4798  0038                     __end_of_LedScan:	
  4799                           
  4800                           	psect	text26
  4801  035A                     __ptext26:	
  4802 ;; *************** function _LedIndex *****************
  4803 ;; Defined at:
  4804 ;;		line 10 in file "C:\Users\Administrator\Desktop\project\K06-43\Code_Prj_1\source\display.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  led_index       1    wreg     unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  led_index       1    0[COMMON] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4813 ;; Tracked objects:
  4814 ;;		On entry : 300/0
  4815 ;;		On exit  : 200/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1
  4818 ;;      Params:         0       0       0
  4819 ;;      Locals:         1       0       0
  4820 ;;      Temps:          0       0       0
  4821 ;;      Totals:         1       0       0
  4822 ;;Total ram usage:        1 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; This function calls:
  4825 ;;		Nothing
  4826 ;; This function is called by:
  4827 ;;		_LedScan
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _LedIndex
  4833  035A                     _LedIndex:	
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _LedIndex: [wreg-fsr0h+status,2+status,0]
  4837                           ;LedIndex@led_index stored from wreg
  4838  035A  00F3               	movwf	LedIndex@led_index
  4839                           
  4840                           ;display.c: 12: RB1=0; RC3=0; RC2=0; RC1=0; RC0=0; RE0=0; RA5=0;
  4841  035B  1086               	bcf	6,1	;volatile
  4842  035C  1187               	bcf	7,3	;volatile
  4843  035D  1107               	bcf	7,2	;volatile
  4844  035E  1087               	bcf	7,1	;volatile
  4845  035F  1007               	bcf	7,0	;volatile
  4846  0360  1009               	bcf	9,0	;volatile
  4847  0361  1285               	bcf	5,5	;volatile
  4848                           
  4849                           ;display.c: 13: RB5=1; RB4=1; RB3=1; RB2=1;
  4850  0362  1686               	bsf	6,5	;volatile
  4851  0363  1606               	bsf	6,4	;volatile
  4852  0364  1586               	bsf	6,3	;volatile
  4853  0365  1506               	bsf	6,2	;volatile
  4854                           
  4855                           ;display.c: 14: switch(led_index)
  4856  0366  2BC3               	goto	i1l5458
  4857  0367                     i1l2026:	
  4858                           ;display.c: 15: {
  4859                           ;display.c: 16: case 0:
  4860                           
  4861                           
  4862                           ;display.c: 17: TRISB5=1,WPUB5=1;
  4863  0367  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0368  1686               	bsf	6,5	;volatile
  4865  0369  1695               	bsf	21,5	;volatile
  4866                           
  4867                           ;display.c: 18: TRISB4=1,WPUB4=1;
  4868  036A  1606               	bsf	6,4	;volatile
  4869  036B  1615               	bsf	21,4	;volatile
  4870  036C  0000               	nop	;# 
  4871  036D  0000               	nop	;# 
  4872                           
  4873                           ;display.c: 20: if(RB4) Flag_key_usb=1; else Flag_key_usb=0;
  4874  036E  1283               	bcf	3,5	;RP0=0, select bank0
  4875  036F  1303               	bcf	3,6	;RP1=0, select bank0
  4876  0370  1E06               	btfss	6,4	;volatile
  4877  0371  2B74               	goto	i1l2027
  4878  0372  14F0               	bsf	_Flag_key_usb/(0+8),_Flag_key_usb& (0+7)
  4879  0373  2B75               	goto	i1l2028
  4880  0374                     i1l2027:	
  4881  0374  10F0               	bcf	_Flag_key_usb/(0+8),_Flag_key_usb& (0+7)
  4882  0375                     i1l2028:	
  4883                           
  4884                           ;display.c: 21: if(RB5) Flag_key_set=1; else Flag_key_set=0;
  4885  0375  1E86               	btfss	6,5	;volatile
  4886  0376  2B79               	goto	i1l2029
  4887  0377  1470               	bsf	_Flag_key_set/(0+8),_Flag_key_set& (0+7)
  4888  0378  2B7A               	goto	i1l2030
  4889  0379                     i1l2029:	
  4890  0379  1070               	bcf	_Flag_key_set/(0+8),_Flag_key_set& (0+7)
  4891  037A                     i1l2030:	
  4892  037A  0000               	nop	;# 
  4893  037B  0000               	nop	;# 
  4894                           
  4895                           ;display.c: 23: TRISB5=0,WPUB5=1;
  4896  037C  1683               	bsf	3,5	;RP0=1, select bank1
  4897  037D  1303               	bcf	3,6	;RP1=0, select bank1
  4898  037E  1286               	bcf	6,5	;volatile
  4899  037F  1695               	bsf	21,5	;volatile
  4900                           
  4901                           ;display.c: 24: TRISB4=0,WPUB4=1;
  4902  0380  1206               	bcf	6,4	;volatile
  4903  0381  1615               	bsf	21,4	;volatile
  4904                           
  4905                           ;display.c: 25: break;
  4906  0382  0008               	return
  4907  0383                     i1l2032:	
  4908                           ;display.c: 26: case 1:
  4909                           
  4910                           
  4911                           ;display.c: 27: if(LED_RAM[0]&0x01) RB1=1;
  4912  0383  1820               	btfsc	_LED_RAM,0
  4913  0384  1486               	bsf	6,1	;volatile
  4914                           
  4915                           ;display.c: 28: if(LED_RAM[0]&0x02) RC3=1;
  4916  0385  18A0               	btfsc	_LED_RAM,1
  4917  0386  1587               	bsf	7,3	;volatile
  4918                           
  4919                           ;display.c: 29: if(LED_RAM[0]&0x04) RC2=1;
  4920  0387  1920               	btfsc	_LED_RAM,2
  4921  0388  1507               	bsf	7,2	;volatile
  4922                           
  4923                           ;display.c: 30: if(LED_RAM[0]&0x08) RC1=1;
  4924  0389  19A0               	btfsc	_LED_RAM,3
  4925  038A  1487               	bsf	7,1	;volatile
  4926                           
  4927                           ;display.c: 31: if(LED_RAM[0]&0x10) RC0=1;
  4928  038B  1A20               	btfsc	_LED_RAM,4
  4929  038C  1407               	bsf	7,0	;volatile
  4930                           
  4931                           ;display.c: 32: if(LED_RAM[0]&0x20) RE0=1;
  4932  038D  1AA0               	btfsc	_LED_RAM,5
  4933  038E  1409               	bsf	9,0	;volatile
  4934                           
  4935                           ;display.c: 33: if(LED_RAM[0]&0x40) RA5=1;
  4936  038F  1B20               	btfsc	_LED_RAM,6
  4937  0390  1685               	bsf	5,5	;volatile
  4938                           
  4939                           ;display.c: 34: RB5=0;
  4940  0391  1286               	bcf	6,5	;volatile
  4941                           
  4942                           ;display.c: 35: break;
  4943  0392  0008               	return
  4944  0393                     i1l2040:	
  4945                           ;display.c: 36: case 2:
  4946                           
  4947                           
  4948                           ;display.c: 37: if(LED_RAM[1]&0x01) RB1=1;
  4949  0393  1821               	btfsc	_LED_RAM+1,0
  4950  0394  1486               	bsf	6,1	;volatile
  4951                           
  4952                           ;display.c: 38: if(LED_RAM[1]&0x02) RC3=1;
  4953  0395  18A1               	btfsc	_LED_RAM+1,1
  4954  0396  1587               	bsf	7,3	;volatile
  4955                           
  4956                           ;display.c: 39: if(LED_RAM[1]&0x04) RC2=1;
  4957  0397  1921               	btfsc	_LED_RAM+1,2
  4958  0398  1507               	bsf	7,2	;volatile
  4959                           
  4960                           ;display.c: 40: if(LED_RAM[1]&0x08) RC1=1;
  4961  0399  19A1               	btfsc	_LED_RAM+1,3
  4962  039A  1487               	bsf	7,1	;volatile
  4963                           
  4964                           ;display.c: 41: if(LED_RAM[1]&0x10) RC0=1;
  4965  039B  1A21               	btfsc	_LED_RAM+1,4
  4966  039C  1407               	bsf	7,0	;volatile
  4967                           
  4968                           ;display.c: 42: if(LED_RAM[1]&0x20) RE0=1;
  4969  039D  1AA1               	btfsc	_LED_RAM+1,5
  4970  039E  1409               	bsf	9,0	;volatile
  4971                           
  4972                           ;display.c: 43: if(LED_RAM[1]&0x40) RA5=1;
  4973  039F  1B21               	btfsc	_LED_RAM+1,6
  4974  03A0  1685               	bsf	5,5	;volatile
  4975                           
  4976                           ;display.c: 44: RB4=0;
  4977  03A1  1206               	bcf	6,4	;volatile
  4978                           
  4979                           ;display.c: 45: break;
  4980  03A2  0008               	return
  4981  03A3                     i1l2048:	
  4982                           ;display.c: 46: case 3:
  4983                           
  4984                           
  4985                           ;display.c: 47: if(LED_RAM[2]&0x01) RB1=1;
  4986  03A3  1822               	btfsc	_LED_RAM+2,0
  4987  03A4  1486               	bsf	6,1	;volatile
  4988                           
  4989                           ;display.c: 48: if(LED_RAM[2]&0x02) RC3=1;
  4990  03A5  18A2               	btfsc	_LED_RAM+2,1
  4991  03A6  1587               	bsf	7,3	;volatile
  4992                           
  4993                           ;display.c: 49: if(LED_RAM[2]&0x04) RC2=1;
  4994  03A7  1922               	btfsc	_LED_RAM+2,2
  4995  03A8  1507               	bsf	7,2	;volatile
  4996                           
  4997                           ;display.c: 50: if(LED_RAM[2]&0x08) RC1=1;
  4998  03A9  19A2               	btfsc	_LED_RAM+2,3
  4999  03AA  1487               	bsf	7,1	;volatile
  5000                           
  5001                           ;display.c: 51: if(LED_RAM[2]&0x10) RC0=1;
  5002  03AB  1A22               	btfsc	_LED_RAM+2,4
  5003  03AC  1407               	bsf	7,0	;volatile
  5004                           
  5005                           ;display.c: 52: if(LED_RAM[2]&0x20) RE0=1;
  5006  03AD  1AA2               	btfsc	_LED_RAM+2,5
  5007  03AE  1409               	bsf	9,0	;volatile
  5008                           
  5009                           ;display.c: 53: if(LED_RAM[2]&0x40) RA5=1;
  5010  03AF  1B22               	btfsc	_LED_RAM+2,6
  5011  03B0  1685               	bsf	5,5	;volatile
  5012                           
  5013                           ;display.c: 54: RB3=0;
  5014  03B1  1186               	bcf	6,3	;volatile
  5015                           
  5016                           ;display.c: 55: break;
  5017  03B2  0008               	return
  5018  03B3                     i1l2056:	
  5019                           ;display.c: 56: case 4:
  5020                           
  5021                           
  5022                           ;display.c: 57: if(LED_RAM[3]&0x01) RB1=1;
  5023  03B3  1823               	btfsc	_LED_RAM+3,0
  5024  03B4  1486               	bsf	6,1	;volatile
  5025                           
  5026                           ;display.c: 58: if(LED_RAM[3]&0x02) RC3=1;
  5027  03B5  18A3               	btfsc	_LED_RAM+3,1
  5028  03B6  1587               	bsf	7,3	;volatile
  5029                           
  5030                           ;display.c: 59: if(LED_RAM[3]&0x04) RC2=1;
  5031  03B7  1923               	btfsc	_LED_RAM+3,2
  5032  03B8  1507               	bsf	7,2	;volatile
  5033                           
  5034                           ;display.c: 60: if(LED_RAM[3]&0x08) RC1=1;
  5035  03B9  19A3               	btfsc	_LED_RAM+3,3
  5036  03BA  1487               	bsf	7,1	;volatile
  5037                           
  5038                           ;display.c: 61: if(LED_RAM[3]&0x10) RC0=1;
  5039  03BB  1A23               	btfsc	_LED_RAM+3,4
  5040  03BC  1407               	bsf	7,0	;volatile
  5041                           
  5042                           ;display.c: 62: if(LED_RAM[3]&0x20) RE0=1;
  5043  03BD  1AA3               	btfsc	_LED_RAM+3,5
  5044  03BE  1409               	bsf	9,0	;volatile
  5045                           
  5046                           ;display.c: 63: if(LED_RAM[3]&0x40) RA5=1;
  5047  03BF  1B23               	btfsc	_LED_RAM+3,6
  5048  03C0  1685               	bsf	5,5	;volatile
  5049                           
  5050                           ;display.c: 64: RB2=0;
  5051  03C1  1106               	bcf	6,2	;volatile
  5052                           
  5053                           ;display.c: 68: break;
  5054                           
  5055                           ;display.c: 65: break;
  5056  03C2  0008               	return
  5057  03C3                     i1l5458:	
  5058  03C3  0873               	movf	LedIndex@led_index,w
  5059                           
  5060                           ; Switch size 1, requested type "space"
  5061                           ; Number of cases is 5, Range of values is 0 to 4
  5062                           ; switch strategies available:
  5063                           ; Name         Instructions Cycles
  5064                           ; direct_byte           11     6 (fixed)
  5065                           ; simple_byte           16     9 (average)
  5066                           ; jumptable            260     6 (fixed)
  5067                           ;	Chosen strategy is direct_byte
  5068  03C4  0084               	movwf	4
  5069  03C5  3005               	movlw	5
  5070  03C6  0204               	subwf	4,w
  5071  03C7  1803               	skipnc
  5072  03C8  0008               	return
  5073  03C9  3000               	movlw	high i1S7346
  5074  03CA  008A               	movwf	10
  5075  03CB  3026               	movlw	low i1S7346
  5076  03CC  0704               	addwf	4,w
  5077  03CD  0082               	movwf	2
  5078  03CE  0008               	return
  5079  03CF                     __end_of_LedIndex:	
  5080  007E                     btemp	set	126	;btemp
  5081  007E                     wtemp0	set	126
  5082                           
  5083                           	psect	swtext4
  5084  0026                     __pswtext4:	
  5085  0026                     i1S7346:	
  5086  0026  2B67               	ljmp	i1l2026
  5087  0027  2B83               	ljmp	i1l2032
  5088  0028  2B93               	ljmp	i1l2040
  5089  0029  2BA3               	ljmp	i1l2048
  5090  002A  2BB3               	ljmp	i1l2056


Data Sizes:
    Strings     0
    Constant    17
    Data        0
    BSS         76
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      80
    BANK1            80      4      26

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_AppChr
    _TimeAddDec->___bmul
    _LedRamUpdate->_DisPlayIcon
    _DisPlayNum->___lbmod
    _AppMotor->_ADSample
    _AdRead->_ADSample

Critical Paths under _Isr_Timer in COMMON

    _LedScan->_LedIndex

Critical Paths under _main in BANK0

    _TimeAddDec->___lwdiv
    _LedRamUpdate->_DisPlayNum
    _DisPlayNum->___lbdiv
    _DisPlayNum->___lbmod
    _AppMotor->_ADSample
    _AdProc->___lldiv
    ___lldiv->___lmul
    _AdRead->_ADSample

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_AdProc

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6848
                             _AdProc
                             _AppChr
                           _AppMotor
                           _BeepProc
                            _BtnScan
                        _Init_System
                       _LedRamUpdate
                            _LockSet
                           _SysSleep
                         _TimeAddDec
 ---------------------------------------------------------------------------------
 (1) _TimeAddDec                                           7     5      2    1268
                                              7 BANK0      7     5      2
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     266
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SysSleep                                             0     0      0       0
                        _Init_System
                        _SysSleepSet
 ---------------------------------------------------------------------------------
 (2) _SysSleepSet                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_System                                          0     0      0       0
                           _Btn_Init
                          _GPIO_Init
 ---------------------------------------------------------------------------------
 (3) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Btn_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LockSet                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedRamUpdate                                         0     0      0    4290
                        _DisPlayIcon
                         _DisPlayNum
 ---------------------------------------------------------------------------------
 (2) _DisPlayNum                                           2     1      1    1312
                                              3 BANK0      2     1      1
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     297
                                              4 COMMON     2     1      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     306
                                              4 COMMON     1     0      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DisPlayIcon                                          3     1      2    2978
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _BtnScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BeepProc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AppMotor                                             2     2      0      65
                                              2 BANK0      2     2      0
                           _ADSample
 ---------------------------------------------------------------------------------
 (1) _AppChr                                               2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _AdProc                                               4     4      0    1225
                                              0 BANK1      4     4      0
                             _AdRead
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     396
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _AdRead                                               5     5      0     260
                                              2 BANK0      5     5      0
                           _ADSample
 ---------------------------------------------------------------------------------
 (2) _ADSample                                             3     3      0      65
                                              4 COMMON     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Isr_Timer                                            3     3      0      23
                                              1 COMMON     3     3      0
                            _LedScan
 ---------------------------------------------------------------------------------
 (5) _LedScan                                              0     0      0      23
                           _LedIndex
 ---------------------------------------------------------------------------------
 (6) _LedIndex                                             1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdProc
     _AdRead
       _ADSample
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _AppChr
   _AppMotor
     _ADSample
   _BeepProc
   _BtnScan
   _Init_System
     _Btn_Init
     _GPIO_Init
   _LedRamUpdate
     _DisPlayIcon
     _DisPlayNum
       ___lbdiv
       ___lbmod
   _LockSet
   _SysSleep
     _Init_System
       _Btn_Init
       _GPIO_Init
     _SysSleepSet
   _TimeAddDec
     ___bmul
     ___lwdiv

 _Isr_Timer (ROOT)
   _LedScan
     _LedIndex

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       4       0       28.6%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      74       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      4      1A       7       32.5%
DATA                 0      0      74       8        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 30 14:00:50 2020

      __size_of_SysSleepSet 0010                           pc 0002              ___bmul@product 0056  
                        PL2 04B6                          PL4 0582                          PL6 010D  
                        PL8 07CE                          fsr 0004         __end_of_DisPlayIcon 013F  
                       PL10 04D8                         PL20 07DE                         PL12 07D4  
                       PL22 07E4                         PL14 059A                         PL24 07EA  
                       PL16 07D9                         PL26 0682                         PL18 0451  
                       PL28 013F                         _GIE 005F                         _RA0 0028  
                       _RA1 0029                         _RA2 002A                         _RA3 002B  
                       _RB1 0031                         _RA4 002C                         _RB2 0032  
                       _RC0 0038                         _RA5 002D                         _RB3 0033  
                       _RC1 0039                         _RB4 0034                         _RC2 003A  
                       _RB5 0035                         _RC3 003B                         _RB6 0036  
                       _RE0 0048                         _RB7 0037                         _PR2 0092  
                       fsr0 0004                         indf 0000                        S7340 0021  
                      S7342 002B                        S7344 002E             __end_of_LEDCode 0021  
                      l2131 0690                        l2132 0695                        l1350 0418  
                      l2136 06ED                        l2081 01A1                        l1338 00C1  
                      l1348 03F2                        l1349 0406                        l1366 0493  
                      l2182 0798                        l2168 0739                        l2169 0778  
                      l3501 05B6                        l3510 05F3                        l3511 05FC  
                      l3504 05C1                        l3530 0666                        l3506 05E2  
                      l3531 0672                        l3550 0308                        l3518 0622  
                      l3528 066B                        l7000 06DB                        l3554 0333  
                      l3546 02F4                        l7010 06F2                        l5322 0079  
                      l3643 01C5                        l2835 0098                        l3556 033A  
                      l2836 0099                        l3572 01F5                        l3557 033B  
                      l2837 009D                        l3581 021A                        l7110 076A  
                      l7006 06E6                        l3582 021B                        l7024 0707  
                      l7016 06FF                        l7032 070F                        l7114 0770  
                      l7050 0728                        l7042 0720                        l7034 0712  
                      l7202 02CC                        l3499 05A2                        l7132 0791  
                      l7124 0789                        l7140 07A0                        l7116 0775  
                      l7060 0732                        l6260 0237                        l6502 00DF  
                      l6510 00E5                        l7206 02D5                        l7224 02E3  
                      l7208 02D8                        l7090 075B                        l7066 0740  
                      l7058 0730                        l6266 023B                        l6258 0236  
                      l7234 02EF                        l7156 07BB                        l6710 0489  
                      l5670 0074                        l3894 00D2                        l6518 00F9  
                      l7158 07BD                        l5902 0204                        l6640 0274  
                      l6608 01DB                        l6800 060C                        l7176 02AC  
                      l6714 0497                        l6730 04AA                        l5658 0069  
                      l6570 01B0                        l7098 075F                        l5930 021F  
                      l6618 0042                        l6652 029F                        l6724 04A8  
                      l6580 012C                        l6556 019A                        l6900 0529  
                      l5870 0340                        l5862 0334                        l6830 0659  
                      l6806 0618                        l6750 05BA                        l5694 00A8  
                      l5686 009E                        l6910 0539                        l6902 052B  
                      l6840 0662                        l6832 065A                        l6816 062E  
                      l6584 0134                        l6488 00CC                        l6576 01BE  
                      l6568 01AE                        l5936 0221                        l6904 052D  
                      l5858 0329                        l5882 0350                        l6666 0177  
                      l6914 0544                        l6684 0458                        l5868 033F  
                      l6860 0677                        l6588 013B                        l6940 0567  
                      l6694 0464                        l5878 034E                        l6678 018E  
                      l6950 057F                        l6792 0605                        l6864 0679  
                      l5896 01FF                        l6928 055F                        l6880 0510  
                      l6872 04EC                        l6794 0606                        l6786 05FA  
                      l6778 05ED                        l6980 06AC                        l6948 057C  
                      l6892 0518                        l6876 04F7                        l6990 06BB  
                      l6992 06C4                        l6994 06C9                        l6986 06B0  
                      l6988 06B7                        l6998 06CD                        _ANS1 0C41  
                      _ANS2 0C42                        _IOCB 0096                        u3175 0320  
                      _PIE1 008C                        _PIE2 008D                        u4505 0180  
                      u4275 03FC                        u4285 040F                        _RBIE 005B  
                      _RBIF 0058                        u4465 0287                        u4545 0483  
                      u4625 05DA                        _PIR1 000C                        u4755 0655  
                      u4865 058B                        _RBPU 040F                        _WPUA 018E  
                      _WPUB 0095                        _WPUC 018F                        _WPUE 011A  
                      _main 02A8                        btemp 007E                        start 0008  
        __size_of_GPIO_Init 0014                  _Rt10ms_cnt 004A             __end_of_LedScan 0038  
           __end_of_BtnScan 00AB           ___bmul@multiplier 0057                  _DisPlayNum 0193  
          __end_of_ADSample 00C6             __end_of_LockSet 022A               ??_Init_System 0077  
 LedRamUpdate@alarm_low_cnt 003C                       ?_main 0073             __end_of___lbdiv 00E1  
           __end_of___lbmod 00FD             __end_of___lldiv 02A8                       _T2CON 0012  
           __end_of___lwdiv 0193                       i1l670 014F                       i1l675 0160  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTE 0009                       _TRISA 0085                       _TRISB 0086  
                     _TRISC 0087                       _TRISE 0089                       _WPUA1 0C71  
                     _WPUA2 0C72                       _WPUB4 04AC                       _WPUB5 04AD  
      __end_of_LedRamUpdate 07CE         ___lmul@multiplicand 005A                       _ad_bg 0028  
                     _admax 00B4                       _admin 00B2                       _adsum 00B0  
                     _sta_m 0035              __pbitbssCOMMON 0380                       pclath 000A  
          __end_of_BeepProc 0079                       status 0003                       wtemp0 007E  
           ___lbdiv@divisor 0077             ___lbdiv@counter 0057            __end_of_AppMotor 0682  
          __end_of_LedIndex 03CF            __end_of_Btn_Init 0001                 _DisPlayIcon 011E  
           __initialization 07EF                  _ReadKeyOld 0047                  _ReadKeyTmp 0048  
              __end_of_main 02F3              _alarm_beep_cnt 0053                      ??_main 0079  
               _Flag_lk_set 0393         __end_of_Init_System 0091           __end_of_GPIO_Init 0062  
                    _ADCON0 001F                      _ADCON1 009F                      i1S7346 0026  
                    _ADRESH 001E                      _ADRESL 009E            __end_of_SysSleep 0260  
                    _GODONE 00F9                      i1l2030 037A                      i1l2040 0393  
                    i1l2032 0383                      i1l2026 0367                      i1l2027 0374  
                    i1l2028 0375                      i1l2029 0379                      i1l2056 03B3  
                    i1l2048 03A3                      i1l6306 0157                      i1l5458 03C3  
                    i1l6296 014D                      i1l6298 0150                      _INTCON 000B  
                    _OSCCON 008F         DisPlayIcon@icon_seg 0056         DisPlayIcon@icon_sel 0077  
       DisPlayIcon@icon_sta 0078                      _TMR2IF 0061              _actual_percent 0055  
                    _TMR2ON 0092                   ??_BtnScan 0077                   ??_LedScan 0074  
                    _AdRead 03CF                      _WDTCON 0105                  _TimeAddDec 04E1  
                    _TRISA1 0429                      _TRISA2 042A                      _AdProc 0457  
                    _TRISB4 0434                      _TRISB5 0435                      _AppChr 02F3  
                 ??_LockSet 0077          __size_of_Isr_Timer 0026                 ?_DisPlayNum 0059  
            _Flag_beep_boot 038A                      ___bmul 0040                      ___lmul 01C1  
                    _ad_scp 00A6                      _ad_val 0026                   ??___lbdiv 0078  
                 ??___lbmod 0078                   ??___lldiv 0077                   ??___lwdiv 0077  
                    _sta_ad 0045                   ADSample@i 0057                      saved_w 007E  
            _Flag_ledcp_dir 0378    LedRamUpdate@alarm_lk_cnt 003E            ___lbdiv@dividend 0056  
                 ?_ADSample 0073    LedRamUpdate@alarm_xi_cnt 003D             ___lbmod@divisor 0077  
   __end_of__initialization 07FE             ___lbmod@counter 0057         ___bmul@multiplicand 0077  
            __pcstackCOMMON 0073              _Flag_low_alarm 038D                 _Init_System 0079  
                _ad_current 00AA       __size_of_LedRamUpdate 0148                  __end_ofPL2 04D8  
                __end_ofPL4 059A                  __end_ofPL6 011E                  __end_ofPL8 07D4  
          ___lbdiv@quotient 0058                _Flag_RtSleep 0385                   ?_BeepProc 0073  
              _Flag_ad_done 0384           __end_of_Isr_Timer 0169                   ?_AppMotor 0073  
  LedRamUpdate@chr_boot_cnt 003A                   ?_LedIndex 0073         __size_of_DisPlayNum 002E  
                 ?_Btn_Init 0073                  ??_ADSample 0077                  __pbssBANK0 0020  
                __pbssBANK1 00A0                _Flag_key_set 0380                _Flag_key_usb 0381  
              _Flag_on_boot 0395                     ?_AdRead 0073                 ?_TimeAddDec 005D  
                   ?_AdProc 0073                     ?_AppChr 0073               ??_SysSleepSet 0077  
              _LedRamUpdate 0686                  __pmaintext 02A8                     ?___bmul 0077  
                   ?___lmul 0056                  __pintentry 0000                     _CCP1CON 0017  
                   _CCP2CON 001D              ___lmul@product 005E                   ?_SysSleep 0073  
                ??_BeepProc 0077                     _LEDCode 0010                     _LED_RAM 0020  
                   _KEYCON0 0113       LedRamUpdate@timer_add 0038       LedRamUpdate@timer_off 0039  
                ??_AppMotor 0058                  ??_LedIndex 0073                  ??_Btn_Init 0077  
          _Flag_Btn_Release 0383                  __stringtab 000A                     _Flag_lk 0394  
                   _Flag_on 0397                     _Flag_xi 0390                     _LedScan 0031  
                   _BtnScan 0091            _debance_hiov_cnt 0032             __size_of_AdRead 0082  
           __size_of_AdProc 005F                     _ReadKey 0049                     _LockSet 01F4  
           __size_of_AppChr 0067                ?_DisPlayIcon 0077             __size_of___bmul 000E  
                   ___lbdiv 00C6             __size_of___lmul 0033                     ___lbmod 00E1  
                   ___lldiv 0260                     ___lwdiv 0169                 AdRead@ad_ch 005A  
       __end_of_SysSleepSet 010D                     _bat_val 0024                  ??_SysSleep 0077  
                   __ptext1 04E1                     __ptext2 0169                     __ptext3 0040  
                   __ptext4 022A                     __ptext5 00FD                     __ptext6 0079  
                   __ptext7 004E                     __ptext8 0000                     __ptext9 01F4  
       __size_of_TimeAddDec 00A1                   _LED_RAM_R 00A0                     _sta_chr 002F  
  LedRamUpdate@led_boot_cnt 003F                     clrloop0 0039                   _GPIO_Init 004E  
      end_of_initialization 07FE             ___lldiv@divisor 0062             _lock_count_down 0043  
           ___lldiv@counter 006E           DisPlayNum@dig_sel 0059                ??_DisPlayNum 0079  
         DisPlayNum@dis_num 005A                  _speed_beep 0052                  _timer_beep 002A  
     TimeAddDec@percent_err 0061                  _timer_lock 002B            ___lbmod@dividend 0056  
                ?_GPIO_Init 0073          __end_of_DisPlayNum 01C1                 ___lbmod@rem 0058  
         __size_of_ADSample 001B              __end_of_AdRead 0451              __end_of_AdProc 04B6  
               _SysSleepSet 00FD              __end_of_AppChr 035A                   _Flag_dig1 037B  
                 _Flag_dig2 037A                   _Flag_beep 038B                   _Flag_boot 03C8  
                 _Flag_stop 038C              __end_of___bmul 004E                ?_Init_System 0073  
            __end_of___lmul 01F4                   _RSleepCnt 0044               __pbitbssBANK0 0378  
       TimeAddDec@bat_value 005D                 __end_ofPL10 04E1                 __end_ofPL20 07E4  
               __end_ofPL12 07D9                 __end_ofPL22 07EA                 __end_ofPL14 05A1  
               __end_ofPL24 07EF                 __end_ofPL16 07DE                 __end_ofPL26 0686  
               __end_ofPL18 0457                 __end_ofPL28 0143               __pbitnvCOMMON 03C8  
       start_initialization 07EF                   _Rt2ms_cnt 004B           __size_of_BeepProc 0017  
         LedIndex@led_index 0073           __size_of_AppMotor 00E1                   _Isr_Timer 0143  
         __size_of_LedIndex 0075           __size_of_Btn_Init 0001                ??_TimeAddDec 005F  
                  ??_AdRead 0058                    ??_AdProc 0078                    ??_AppChr 0077  
                  ??___bmul 0078                    ??___lmul 0077      LedRamUpdate@led_cp_cnt 0041  
      __size_of_DisPlayIcon 0021       TimeAddDec@tmp_percent 0062               _Flag_chr_boot 0388  
               _bat_percent 0054       LedScan@led_scan_index 0042               _Flag_lk_alarm 0392  
             _Flag_mainloop 0386           __size_of_SysSleep 0036          __end_of_TimeAddDec 0582  
             _Flag_key_long 0382                   ___latbits 0000               _Flag_scan_dir 0379  
             __pcstackBANK0 0056               __pcstackBANK1 00B6                 ??_GPIO_Init 0077  
                ?_Isr_Timer 0073               _Flag_xi_alarm 038F               AdRead@ad_temp 005B  
                  ?_BtnScan 0073                    ?_LedScan 0073               AdRead@adtimes 0046  
                  ?_LockSet 0073            ___lwdiv@dividend 0058                    ?___lbdiv 0077  
                  ?___lbmod 0077                    ?___lldiv 0062                    ?___lwdiv 0056  
      LedRamUpdate@timer_lk 0037        LedRamUpdate@timer_xi 0036                   __pstrings 000A  
                 __pswtext1 0021                   __pswtext2 002B                   __pswtext3 002E  
                 __pswtext4 0026              _time_motor_cnt 00A8             _debance_iov_cnt 0031  
           _debance_scp_cnt 0030             _debance_low_cnt 0033            ___lwdiv@quotient 005B  
           _debance_usb_cnt 002D                    _ADSample 00AB           interrupt_function 0000  
                 clear_ram0 0038  LedRamUpdate@timer_chr_boot 003B                   _timer_chr 002E  
               __stringbase 000F        __size_of_Init_System 0018              _timer_boot_cnt 004C  
                  _BeepProc 0062                    _AppMotor 05A1                    _Flag_chr 0389  
                  _Flag_off 0396                    _Flag_iov 0391                    _Flag_low 038E  
                  _LedIndex 035A                    _Flag_usb 0387                    _Btn_Init 0000  
         ___lmul@multiplier 0056                 ??_Isr_Timer 0074            __size_of_LedScan 0007  
          __size_of_BtnScan 001A                ?_SysSleepSet 0073            __size_of_LockSet 0036  
          __size_of___lbdiv 001B            __size_of___lbmod 001C            __size_of___lldiv 0048  
          __size_of___lwdiv 002A                    _SysSleep 022A          __end_of__stringtab 0010  
               _current_scp 00AC                 _current_val 00AE             ___lwdiv@divisor 0056  
           ___lwdiv@counter 005A                    __ptext10 0686                    __ptext11 0193  
                  __ptext20 01C1                    __ptext12 00E1                    __ptext21 0260  
                  __ptext13 00C6                    __ptext22 03CF                    __ptext14 011E  
                  __ptext23 00AB                    __ptext15 0091                    __ptext24 0143  
                  __ptext16 0062                    __ptext25 0031                    __ptext17 05A1  
                  __ptext26 035A                    __ptext18 02F3                    __ptext19 0457  
              ADSample@adch 0056               __size_of_main 004B               ?_LedRamUpdate 0073  
                  _timer_1s 004D                    _sta_lock 002C                _time_dec_cnt 0050  
              _time_chr_add 0051                _time_chr_cnt 00A4                    intlevel1 0000  
        LedRamUpdate@led_cp 0040            ___lldiv@dividend 0066               AdProc@dat_tmp 00B6  
            ??_LedRamUpdate 0079                   stringcode 000A               ??_DisPlayIcon 0079  
               _time_minute 004E                 _time_second 004F            ___lldiv@quotient 006A  
                  stringdir 000A                    stringtab 000A                 _timer_motor 0034  
