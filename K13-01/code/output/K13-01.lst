

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 13 10:51:41 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	swtext2,local,class=CONST,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	swtext3,local,class=CONST,delta=2
    47                           	psect	pa_nodes0,global,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataBANK1
    86  05E9                     __pidataBANK1:	
    87                           
    88                           ;initializer for _LEDSeg2
    89  05E9  3400               	retlw	0
    90  05EA  3401               	retlw	1
    91  05EB  3400               	retlw	0
    92  05EC  3401               	retlw	1
    93  05ED  3401               	retlw	1
    94  05EE  3400               	retlw	0
    95  05EF  3400               	retlw	0
    96  05F0  3402               	retlw	2
    97  05F1  3403               	retlw	3
    98  05F2  3402               	retlw	2
    99  05F3  3403               	retlw	3
   100  05F4  3403               	retlw	3
   101  05F5  3402               	retlw	2
   102  05F6  3402               	retlw	2
   103  05F7  3404               	retlw	4
   104  05F8  3404               	retlw	4
   105                           
   106                           ;initializer for _OffHideNumbArr
   107  05F9  3400               	retlw	0
   108  05FA  3400               	retlw	0
   109  05FB  3412               	retlw	18
   110  05FC  3400               	retlw	0
   111  05FD  345B               	retlw	91
   112  05FE  3400               	retlw	0
   113  05FF  347F               	retlw	127
   114  0600  3400               	retlw	0
   115  0601  347F               	retlw	127
   116  0602  3409               	retlw	9
   117  0603  34FF               	retlw	255
   118  0604  342D               	retlw	45
   119  0605  34FF               	retlw	255
   120  0606  343F               	retlw	63
   121                           
   122                           ;initializer for _HideNumbArr
   123  0607  3400               	retlw	0
   124  0608  3440               	retlw	64
   125  0609  3470               	retlw	112
   126  060A  3478               	retlw	120
   127  060B  347E               	retlw	126
   128  060C  347F               	retlw	127
   129  060D  343F               	retlw	63
   130  060E  340F               	retlw	15
   131  060F  3407               	retlw	7
   132  0610  3401               	retlw	1
   133  0611  3400               	retlw	0
   134                           
   135                           ;initializer for _NumbArr
   136  0612  3477               	retlw	119
   137  0613  3424               	retlw	36
   138  0614  345D               	retlw	93
   139  0615  346D               	retlw	109
   140  0616  342E               	retlw	46
   141  0617  346B               	retlw	107
   142  0618  347B               	retlw	123
   143  0619  3425               	retlw	37
   144  061A  347F               	retlw	127
   145  061B  342F               	retlw	47
   146                           
   147                           	psect	strings
   148  074C                     __pstrings:	
   149  074C                     stringtab:	
   150  074C                     __stringtab:	
   151  074C                     stringcode:	
   152                           ;	String table - string pointers are 1 byte each
   153                           
   154  074C                     stringdir:	
   155  074C  3007               	movlw	high stringdir
   156  074D  008A               	movwf	10
   157  074E  0804               	movf	4,w
   158  074F  0A84               	incf	4,f
   159  0750  0782               	addwf	2,f
   160  0751                     __stringbase:	
   161  0751  3400               	retlw	0
   162  0752                     __end_of__stringtab:	
   163  0752                     _LEDSeg1:	
   164  0752  3401               	retlw	1
   165  0753  3402               	retlw	2
   166  0754  3402               	retlw	2
   167  0755  3403               	retlw	3
   168  0756  3400               	retlw	0
   169  0757  3403               	retlw	3
   170  0758  3404               	retlw	4
   171  0759  3400               	retlw	0
   172  075A  3401               	retlw	1
   173  075B  3401               	retlw	1
   174  075C  3402               	retlw	2
   175  075D  3400               	retlw	0
   176  075E  3403               	retlw	3
   177  075F  3404               	retlw	4
   178  0760  3400               	retlw	0
   179  0761  3401               	retlw	1
   180  0762                     __end_of_LEDSeg1:	
   181  001F                     _ADCON0	set	31
   182  001E                     _ADRESH	set	30
   183  0012                     _T2CON	set	18
   184  000B                     _INTCON	set	11
   185  0007                     _PORTC	set	7
   186  0006                     _PORTB	set	6
   187  0005                     _PORTA	set	5
   188  00F9                     _GODONE	set	249
   189  0061                     _TMR2IF	set	97
   190  003B                     _RC3	set	59
   191  003A                     _RC2	set	58
   192  0035                     _RB5	set	53
   193  0034                     _RB4	set	52
   194  0033                     _RB3	set	51
   195  002F                     _RA7	set	47
   196  002E                     _RA6	set	46
   197  002D                     _RA5	set	45
   198  002B                     _RA3	set	43
   199  009F                     _ADCON1	set	159
   200  009E                     _ADRESL	set	158
   201  0095                     _WPUB	set	149
   202  0092                     _PR2	set	146
   203  008F                     _OSCCON	set	143
   204  008C                     _PIE1	set	140
   205  0087                     _TRISC	set	135
   206  0086                     _TRISB	set	134
   207  0085                     _TRISA	set	133
   208  04AD                     _WPUB5	set	1197
   209  04AC                     _WPUB4	set	1196
   210  04AB                     _WPUB3	set	1195
   211  043B                     _TRISC3	set	1083
   212  043A                     _TRISC2	set	1082
   213  0435                     _TRISB5	set	1077
   214  0434                     _TRISB4	set	1076
   215  0433                     _TRISB3	set	1075
   216  042F                     _TRISA7	set	1071
   217  042E                     _TRISA6	set	1070
   218  042A                     _TRISA2	set	1066
   219  0429                     _TRISA1	set	1065
   220  040F                     _RBPU	set	1039
   221  0105                     _WDTCON	set	261
   222  018F                     _WPUC	set	399
   223  018E                     _WPUA	set	398
   224  0C42                     _ANS2	set	3138
   225  0C41                     _ANS1	set	3137
   226  0C7B                     _WPUC3	set	3195
   227  0C7A                     _WPUC2	set	3194
   228  0C77                     _WPUA7	set	3191
   229  0C76                     _WPUA6	set	3190
   230  0C72                     _WPUA2	set	3186
   231  0C71                     _WPUA1	set	3185
   232                           
   233                           	psect	cinit
   234  000D                     start_initialization:	
   235                           ; #config settings
   236                           
   237  000D                     __initialization:	
   238  000D  30D3               	movlw	low (__pdataBANK1+51)
   239                           
   240                           ; Initialize objects allocated to BANK1
   241  000E  1383               	bcf	3,7	;select IRP bank0
   242  000F  00FD               	movwf	125
   243  0010  3005               	movlw	high __pidataBANK1
   244  0011  00FE               	movwf	126
   245  0012  30E9               	movlw	low __pidataBANK1
   246  0013  00FF               	movwf	127
   247  0014  30A0               	movlw	low __pdataBANK1
   248  0015  0084               	movwf	4
   249  0016  277C               	fcall	init_ram0
   250                           
   251                           ; Clear objects allocated to BANK1
   252  0017  30D3               	movlw	low __pbssBANK1
   253  0018  0084               	movwf	4
   254  0019  30DB               	movlw	low (__pbssBANK1+8)
   255  001A  27B9               	fcall	clear_ram0
   256                           
   257                           ; Clear objects allocated to BANK0
   258  001B  3020               	movlw	low __pbssBANK0
   259  001C  0084               	movwf	4
   260  001D  304D               	movlw	low (__pbssBANK0+45)
   261  001E  27B9               	fcall	clear_ram0
   262                           
   263                           ; Clear objects allocated to COMMON
   264  001F  01FA               	clrf	__pbssCOMMON& (0+127)
   265                           
   266                           ; Clear objects allocated to BITCOMMON
   267  0020  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   268  0021  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   269  0022                     end_of_initialization:	
   270                           ;End of C runtime variable initialization code
   271                           
   272  0022                     __end_of__initialization:	
   273  0022  0183               	clrf	3
   274  0023  2FC6               	ljmp	_main	;jump to C main() function
   275                           
   276                           	psect	bitbssCOMMON
   277  0380                     __pbitbssCOMMON:	
   278  0380                     ErrPro@LedSwitchFlag:	
   279  0380                     	ds	1
   280  0381                     LockPro@LedSwitchFlag:	
   281  0381                     	ds	1
   282  0382                     WorkLedPro@dir:	
   283  0382                     	ds	1
   284  0383                     WorkLedPro@LedSwitchFlag:	
   285  0383                     	ds	1
   286  0384                     _USBLink:	
   287  0384                     	ds	1
   288  0385                     _KeyPress:	
   289  0385                     	ds	1
   290  0386                     _KeyInBuf:	
   291  0386                     	ds	1
   292  0387                     _OnOffFlag:	
   293  0387                     	ds	1
   294  0388                     _time10ms:	
   295  0388                     	ds	1
   296  0389                     _time2ms:	
   297  0389                     	ds	1
   298  038A                     _WorkFlag:	
   299  038A                     	ds	1
   300  038B                     _USBFlag:	
   301  038B                     	ds	1
   302  038C                     _IovFlag:	
   303  038C                     	ds	1
   304  038D                     _SystemONFlag:	
   305  038D                     	ds	1
   306                           
   307                           	psect	bssCOMMON
   308  007A                     __pbssCOMMON:	
   309  007A                     _WorkMin:	
   310  007A                     	ds	1
   311                           
   312                           	psect	bssBANK0
   313  0020                     __pbssBANK0:	
   314  0020                     _LEDArrMap:	
   315  0020                     	ds	5
   316  0025                     _ADsum:	
   317  0025                     	ds	4
   318  0029                     _KeyCnt:	
   319  0029                     	ds	2
   320  002B                     _LockSta:	
   321  002B                     	ds	2
   322  002D                     _ADCMin:	
   323  002D                     	ds	2
   324  002F                     _ADCMax:	
   325  002F                     	ds	2
   326  0031                     ErrPro@SwitchCnt:	
   327  0031                     	ds	1
   328  0032                     LockPro@Ledcnt:	
   329  0032                     	ds	1
   330  0033                     LockPro@LockSwitchCnt:	
   331  0033                     	ds	1
   332  0034                     LockPro@SwitchCnt:	
   333  0034                     	ds	1
   334  0035                     WorkLedPro@cnt:	
   335  0035                     	ds	1
   336  0036                     WorkLedPro@index:	
   337  0036                     	ds	1
   338  0037                     WorkLedPro@LedSwitchCnt:	
   339  0037                     	ds	1
   340  0038                     USBLedPro@cnt:	
   341  0038                     	ds	1
   342  0039                     USBLedPro@index:	
   343  0039                     	ds	1
   344  003A                     LEDScan@LEDScanIndex:	
   345  003A                     	ds	1
   346  003B                     _Sec1sCnt:	
   347  003B                     	ds	1
   348  003C                     _LockNumb:	
   349  003C                     	ds	1
   350  003D                     _VarPowerUpCount:	
   351  003D                     	ds	1
   352  003E                     _cnt10ms:	
   353  003E                     	ds	1
   354  003F                     _cnt2ms:	
   355  003F                     	ds	1
   356  0040                     Sec1sPro@ActualPercent:	
   357  0040                     	ds	1
   358  0041                     _CurrentCnt:	
   359  0041                     	ds	1
   360  0042                     _ADcnt:	
   361  0042                     	ds	1
   362  0043                     _ADCState:	
   363  0043                     	ds	1
   364  0044                     _BatDecTime:	
   365  0044                     	ds	1
   366  0045                     _BatAddTime:	
   367  0045                     	ds	1
   368  0046                     _BatPercent:	
   369  0046                     	ds	1
   370  0047                     _ADCVal:	
   371  0047                     	ds	6
   372                           
   373                           	psect	bssBANK1
   374  00D3                     __pbssBANK1:	
   375  00D3                     _TimeAddCnt:	
   376  00D3                     	ds	2
   377  00D5                     _TimeDecCnt:	
   378  00D5                     	ds	2
   379  00D7                     _WorkCnt:	
   380  00D7                     	ds	2
   381  00D9                     _LedIndex:	
   382  00D9                     	ds	2
   383                           
   384                           	psect	dataBANK1
   385  00A0                     __pdataBANK1:	
   386  00A0                     _LEDSeg2:	
   387  00A0                     	ds	16
   388  00B0                     _OffHideNumbArr:	
   389  00B0                     	ds	14
   390  00BE                     _HideNumbArr:	
   391  00BE                     	ds	11
   392  00C9                     _NumbArr:	
   393  00C9                     	ds	10
   394                           
   395                           	psect	inittext
   396  0778                     init_fetch0:	
   397                           ;	Called with low address in FSR and high address in W
   398                           
   399  0778  087E               	movf	126,w
   400  0779  008A               	movwf	10
   401  077A  087F               	movf	127,w
   402  077B  0082               	movwf	2
   403  077C                     init_ram0:	
   404                           ;Called with:
   405                           ;	high address of idata address in btemp 
   406                           ;	low address of idata address in btemp+1 
   407                           ;	low address of data in FSR
   408                           ;	high address + 1 of data in btemp-1
   409                           
   410  077C  2778               	fcall	init_fetch0
   411  077D  0080               	movwf	0
   412  077E  0A84               	incf	4,f
   413  077F  0804               	movf	4,w
   414  0780  067D               	xorwf	125,w
   415  0781  1903               	btfsc	3,2
   416  0782  3400               	retlw	0
   417  0783  0AFF               	incf	127,f
   418  0784  1903               	btfsc	3,2
   419  0785  0AFE               	incf	126,f
   420  0786  2F7C               	goto	init_ram0
   421                           
   422                           	psect	clrtext
   423  07B9                     clear_ram0:	
   424                           ;	Called with FSR containing the base address, and
   425                           ;	W with the last address+1
   426                           
   427  07B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   428  07BA                     clrloop0:	
   429  07BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   430  07BB  0A84               	incf	4,f	;increment pointer
   431  07BC  0604               	xorwf	4,w	;XOR with final address
   432  07BD  1903               	btfsc	3,2	;have we reached the end yet?
   433  07BE  3400               	retlw	0	;all done for this memory range, return
   434  07BF  0604               	xorwf	4,w	;XOR again to restore value
   435  07C0  2FBA               	goto	clrloop0	;do the next byte
   436                           
   437                           	psect	cstackBANK1
   438  00DB                     __pcstackBANK1:	
   439  00DB                     ADCRead@ch:	
   440                           
   441                           ; 1 bytes @ 0x0
   442  00DB                     	ds	1
   443  00DC                     ADCRead@AD_H:	
   444                           
   445                           ; 2 bytes @ 0x1
   446  00DC                     	ds	2
   447  00DE                     ADCRead@AD_L:	
   448                           
   449                           ; 2 bytes @ 0x3
   450  00DE                     	ds	2
   451  00E0                     ADCRead@ad_temp:	
   452                           
   453                           ; 2 bytes @ 0x5
   454  00E0                     	ds	2
   455                           
   456                           	psect	cstackCOMMON
   457  0072                     __pcstackCOMMON:	
   458  0072                     ?_ADSample:	
   459  0072                     ?_LEDScan:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0072                     ??_LEDScan:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0072                     ?_KeyScan:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0072                     ?_Motor:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0072                     ?_DisplayPro:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0072                     ?_SystemInit:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0072                     ?_GPIOInit:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0072                     ?_TimerInit:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0072                     ?_WorkLedPro:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0072                     ?_USBLedPro:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0072                     ?_LockPro:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0072                     ?_ErrPro:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0072                     ?_ADCPro:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0072                     ?_Sec1sPro:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0072                     ?_Isr_Timer:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0072                     ??_Isr_Timer:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0072                     ?_Apply:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0072                     ?_main:	
   511                           ; 1 bytes @ 0x0
   512                           
   513                           
   514                           ; 1 bytes @ 0x0
   515  0072                     	ds	3
   516  0075                     ??_ADSample:	
   517  0075                     ??_KeyScan:	
   518                           ; 1 bytes @ 0x3
   519                           
   520  0075                     ??_SystemInit:	
   521                           ; 1 bytes @ 0x3
   522                           
   523  0075                     ??_GPIOInit:	
   524                           ; 1 bytes @ 0x3
   525                           
   526  0075                     ??_TimerInit:	
   527                           ; 1 bytes @ 0x3
   528                           
   529  0075                     ??_LockPro:	
   530                           ; 1 bytes @ 0x3
   531                           
   532  0075                     ??_ErrPro:	
   533                           ; 1 bytes @ 0x3
   534                           
   535  0075                     ?_DisplayIcon:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0075                     ??___lmul:	
   539                           ; 1 bytes @ 0x3
   540                           
   541  0075                     ?___bmul:	
   542                           ; 1 bytes @ 0x3
   543                           
   544  0075                     ?___lbdiv:	
   545                           ; 1 bytes @ 0x3
   546                           
   547  0075                     ?___lbmod:	
   548                           ; 1 bytes @ 0x3
   549                           
   550  0075                     ?___wmul:	
   551                           ; 1 bytes @ 0x3
   552                           
   553  0075                     ?___lwdiv:	
   554                           ; 2 bytes @ 0x3
   555                           
   556  0075                     ___bmul@multiplicand:	
   557                           ; 2 bytes @ 0x3
   558                           
   559  0075                     ___lbdiv@divisor:	
   560                           ; 1 bytes @ 0x3
   561                           
   562  0075                     ___lbmod@divisor:	
   563                           ; 1 bytes @ 0x3
   564                           
   565  0075                     DisplayIcon@index:	
   566                           ; 1 bytes @ 0x3
   567                           
   568  0075                     ___wmul@multiplier:	
   569                           ; 2 bytes @ 0x3
   570                           
   571  0075                     ___lwdiv@divisor:	
   572                           ; 2 bytes @ 0x3
   573                           
   574  0075                     ___lmul@product:	
   575                           ; 2 bytes @ 0x3
   576                           
   577                           
   578                           ; 4 bytes @ 0x3
   579  0075                     	ds	1
   580  0076                     ??___bmul:	
   581  0076                     ??___lbdiv:	
   582                           ; 1 bytes @ 0x4
   583                           
   584  0076                     ??___lbmod:	
   585                           ; 1 bytes @ 0x4
   586                           
   587  0076                     ADSample@ch:	
   588                           ; 1 bytes @ 0x4
   589                           
   590  0076                     ___bmul@product:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0076                     ___lbdiv@dividend:	
   594                           ; 1 bytes @ 0x4
   595                           
   596                           
   597                           ; 1 bytes @ 0x4
   598  0076                     	ds	1
   599  0077                     ??_DisplayIcon:	
   600  0077                     ADSample@i:	
   601                           ; 1 bytes @ 0x5
   602                           
   603  0077                     ___bmul@multiplier:	
   604                           ; 1 bytes @ 0x5
   605                           
   606  0077                     ___lbdiv@counter:	
   607                           ; 1 bytes @ 0x5
   608                           
   609  0077                     ___lbmod@dividend:	
   610                           ; 1 bytes @ 0x5
   611                           
   612  0077                     ___wmul@multiplicand:	
   613                           ; 1 bytes @ 0x5
   614                           
   615  0077                     ___lwdiv@dividend:	
   616                           ; 2 bytes @ 0x5
   617                           
   618                           
   619                           ; 2 bytes @ 0x5
   620  0077                     	ds	1
   621  0078                     ___lbdiv@quotient:	
   622  0078                     ___lbmod@counter:	
   623                           ; 1 bytes @ 0x6
   624                           
   625                           
   626                           ; 1 bytes @ 0x6
   627  0078                     	ds	1
   628  0079                     ??_Motor:	
   629  0079                     ??_ADCPro:	
   630                           ; 1 bytes @ 0x7
   631                           
   632  0079                     ??___wmul:	
   633                           ; 1 bytes @ 0x7
   634                           
   635  0079                     ??___lldiv:	
   636                           ; 1 bytes @ 0x7
   637                           
   638  0079                     ??___lwdiv:	
   639                           ; 1 bytes @ 0x7
   640                           
   641  0079                     ___lbmod@rem:	
   642                           ; 1 bytes @ 0x7
   643                           
   644                           
   645                           ; 1 bytes @ 0x7
   646  0079                     	ds	1
   647  007A                     ??_DisplayPro:	
   648  007A                     ??_Apply:	
   649                           ; 1 bytes @ 0x8
   650                           
   651  007A                     ??_main:	
   652                           ; 1 bytes @ 0x8
   653                           
   654                           
   655                           	psect	cstackBANK0
   656  004D                     __pcstackBANK0:	
   657                           ; 1 bytes @ 0x8
   658                           
   659  004D                     ??_WorkLedPro:	
   660  004D                     ??_USBLedPro:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  004D                     ?___lmul:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  004D                     ___lwdiv@counter:	
   667                           ; 4 bytes @ 0x0
   668                           
   669  004D                     DisplayIcon@Mask:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  004D                     ___wmul@product:	
   673                           ; 2 bytes @ 0x0
   674                           
   675  004D                     ___lmul@multiplier:	
   676                           ; 2 bytes @ 0x0
   677                           
   678                           
   679                           ; 4 bytes @ 0x0
   680  004D                     	ds	1
   681  004E                     ___lwdiv@quotient:	
   682                           
   683                           ; 2 bytes @ 0x1
   684  004E                     	ds	1
   685  004F                     DisplayIcon@i:	
   686                           
   687                           ; 1 bytes @ 0x2
   688  004F                     	ds	1
   689  0050                     ??_Sec1sPro:	
   690                           
   691                           ; 1 bytes @ 0x3
   692  0050                     	ds	1
   693  0051                     ___lmul@multiplicand:	
   694                           
   695                           ; 4 bytes @ 0x4
   696  0051                     	ds	1
   697  0052                     Sec1sPro@PercentErr:	
   698                           
   699                           ; 1 bytes @ 0x5
   700  0052                     	ds	1
   701  0053                     Sec1sPro@TempPercent:	
   702                           
   703                           ; 2 bytes @ 0x6
   704  0053                     	ds	2
   705  0055                     ?___lldiv:	
   706  0055                     ___lldiv@divisor:	
   707                           ; 4 bytes @ 0x8
   708                           
   709                           
   710                           ; 4 bytes @ 0x8
   711  0055                     	ds	4
   712  0059                     ___lldiv@dividend:	
   713                           
   714                           ; 4 bytes @ 0xC
   715  0059                     	ds	4
   716  005D                     ___lldiv@quotient:	
   717                           
   718                           ; 4 bytes @ 0x10
   719  005D                     	ds	4
   720  0061                     ___lldiv@counter:	
   721                           
   722                           ; 1 bytes @ 0x14
   723  0061                     	ds	1
   724  0062                     ?_ADCRead:	
   725  0062                     ADCRead@Val:	
   726                           ; 1 bytes @ 0x15
   727                           
   728                           
   729                           ; 1 bytes @ 0x15
   730  0062                     	ds	1
   731  0063                     ??_ADCRead:	
   732                           
   733                           ; 1 bytes @ 0x16
   734  0063                     	ds	8
   735                           
   736                           	psect	maintext
   737  07C6                     __pmaintext:	
   738 ;;
   739 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   740 ;;
   741 ;; *************** function _main *****************
   742 ;; Defined at:
   743 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K13-01\code\main.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : B00/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMMON   BANK0   BANK1
   757 ;;      Params:         0       0       0
   758 ;;      Locals:         0       0       0
   759 ;;      Temps:          0       0       0
   760 ;;      Totals:         0       0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels required when called:    6
   763 ;; This function calls:
   764 ;;		_Apply
   765 ;;		_SystemInit
   766 ;; This function is called by:
   767 ;;		Startup code after reset
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           
   772                           ;psect for function _main
   773  07C6                     _main:	
   774                           
   775                           ;main.c: 5: SystemInit();
   776                           
   777                           ;incstack = 0
   778                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   779  07C6  27B0               	fcall	_SystemInit
   780  07C7                     l6930:	
   781                           
   782                           ;main.c: 7: {
   783                           ;main.c: 8: Apply();
   784  07C7  26A1               	fcall	_Apply
   785  07C8  0064               	clrwdt	;# 
   786  07C9  2FC7               	goto	l6930
   787  07CA                     __end_of_main:	
   788                           
   789                           	psect	text1
   790  07B0                     __ptext1:	
   791 ;; *************** function _SystemInit *****************
   792 ;; Defined at:
   793 ;;		line 113 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0, pclath, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : B00/0
   804 ;;		On exit  : 300/200
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMMON   BANK0   BANK1
   807 ;;      Params:         0       0       0
   808 ;;      Locals:         0       0       0
   809 ;;      Temps:          0       0       0
   810 ;;      Totals:         0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    3
   814 ;; This function calls:
   815 ;;		_GPIOInit
   816 ;;		_TimerInit
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _SystemInit
   824  07B0                     _SystemInit:	
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _SystemInit: [wreg+status,2+status,0+pclath+cstack]
   828  07B0  0000               	nop	;# 
   829  07B1  0064               	clrwdt	;# 
   830                           
   831                           ;K13-01.c: 117: GPIOInit();
   832  07B2  2679               	fcall	_GPIOInit
   833                           
   834                           ;K13-01.c: 118: TimerInit();
   835  07B3  2787               	fcall	_TimerInit
   836                           
   837                           ;K13-01.c: 119: WDTCON=0x01;
   838  07B4  3001               	movlw	1
   839  07B5  1283               	bcf	3,5	;RP0=0, select bank2
   840  07B6  1703               	bsf	3,6	;RP1=1, select bank2
   841  07B7  0085               	movwf	5	;volatile
   842  07B8  0008               	return
   843  07B9                     __end_of_SystemInit:	
   844                           
   845                           	psect	text2
   846  0787                     __ptext2:	
   847 ;; *************** function _TimerInit *****************
   848 ;; Defined at:
   849 ;;		line 153 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;		None
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg
   858 ;; Tracked objects:
   859 ;;		On entry : 300/300
   860 ;;		On exit  : 300/100
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMMON   BANK0   BANK1
   863 ;;      Params:         0       0       0
   864 ;;      Locals:         0       0       0
   865 ;;      Temps:          0       0       0
   866 ;;      Totals:         0       0       0
   867 ;;Total ram usage:        0 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    2
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_SystemInit
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           
   878                           ;psect for function _TimerInit
   879  0787                     _TimerInit:	
   880                           
   881                           ;K13-01.c: 164: OSCCON=0X61;
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _TimerInit: [wreg]
   885  0787  3061               	movlw	97
   886  0788  1303               	bcf	3,6	;RP1=0, select bank1
   887  0789  008F               	movwf	15	;volatile
   888                           
   889                           ;K13-01.c: 165: INTCON=0B11000000;
   890  078A  30C0               	movlw	192
   891  078B  008B               	movwf	11	;volatile
   892                           
   893                           ;K13-01.c: 166: PIE1=0B00000010;
   894  078C  3002               	movlw	2
   895  078D  008C               	movwf	12	;volatile
   896                           
   897                           ;K13-01.c: 167: T2CON=0B00000100;
   898  078E  3004               	movlw	4
   899  078F  1283               	bcf	3,5	;RP0=0, select bank0
   900  0790  0092               	movwf	18	;volatile
   901                           
   902                           ;K13-01.c: 168: PR2 = 200;
   903  0791  30C8               	movlw	200
   904  0792  1683               	bsf	3,5	;RP0=1, select bank1
   905  0793  0092               	movwf	18	;volatile
   906  0794  0008               	return
   907  0795                     __end_of_TimerInit:	
   908                           
   909                           	psect	text3
   910  0679                     __ptext3:	
   911 ;; *************** function _GPIOInit *****************
   912 ;; Defined at:
   913 ;;		line 122 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;		None
   916 ;; Auto vars:     Size  Location     Type
   917 ;;		None
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      void 
   920 ;; Registers used:
   921 ;;		wreg, status,2
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 300/300
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMMON   BANK0   BANK1
   927 ;;      Params:         0       0       0
   928 ;;      Locals:         0       0       0
   929 ;;      Temps:          0       0       0
   930 ;;      Totals:         0       0       0
   931 ;;Total ram usage:        0 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; Hardware stack levels required when called:    2
   934 ;; This function calls:
   935 ;;		Nothing
   936 ;; This function is called by:
   937 ;;		_SystemInit
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           
   942                           ;psect for function _GPIOInit
   943  0679                     _GPIOInit:	
   944                           
   945                           ;K13-01.c: 124: RBPU=0;
   946                           
   947                           ;incstack = 0
   948                           ; Regs used in _GPIOInit: [wreg+status,2]
   949  0679  1683               	bsf	3,5	;RP0=1, select bank1
   950  067A  1303               	bcf	3,6	;RP1=0, select bank1
   951  067B  1381               	bcf	1,7	;volatile
   952                           
   953                           ;K13-01.c: 126: TRISA =0X00;
   954  067C  0185               	clrf	5	;volatile
   955                           
   956                           ;K13-01.c: 127: TRISB =0X00;
   957  067D  0186               	clrf	6	;volatile
   958                           
   959                           ;K13-01.c: 128: TRISC =0X00;
   960  067E  0187               	clrf	7	;volatile
   961                           
   962                           ;K13-01.c: 132: WPUA =0XFF;
   963  067F  30FF               	movlw	255
   964  0680  1703               	bsf	3,6	;RP1=1, select bank3
   965  0681  008E               	movwf	14	;volatile
   966                           
   967                           ;K13-01.c: 133: WPUB =0XFF;
   968  0682  1303               	bcf	3,6	;RP1=0, select bank1
   969  0683  0095               	movwf	21	;volatile
   970                           
   971                           ;K13-01.c: 134: WPUC =0XFF;
   972  0684  1703               	bsf	3,6	;RP1=1, select bank3
   973  0685  008F               	movwf	15	;volatile
   974                           
   975                           ;K13-01.c: 138: PORTA = 0X80;
   976  0686  3080               	movlw	128
   977  0687  1283               	bcf	3,5	;RP0=0, select bank0
   978  0688  1303               	bcf	3,6	;RP1=0, select bank0
   979  0689  0085               	movwf	5	;volatile
   980                           
   981                           ;K13-01.c: 139: PORTB = 0X80;
   982  068A  0086               	movwf	6	;volatile
   983                           
   984                           ;K13-01.c: 140: PORTC = 0;
   985  068B  0187               	clrf	7	;volatile
   986                           
   987                           ;K13-01.c: 143: RA5 =1;
   988  068C  1685               	bsf	5,5	;volatile
   989                           
   990                           ;K13-01.c: 144: RBPU=0;
   991  068D  1683               	bsf	3,5	;RP0=1, select bank1
   992  068E  1381               	bcf	1,7	;volatile
   993                           
   994                           ;K13-01.c: 145: TRISA6=1,WPUA6=1;
   995  068F  1705               	bsf	5,6	;volatile
   996  0690  1703               	bsf	3,6	;RP1=1, select bank3
   997  0691  170E               	bsf	14,6	;volatile
   998                           
   999                           ;K13-01.c: 146: TRISA7=1,WPUA7=1;
  1000  0692  1303               	bcf	3,6	;RP1=0, select bank1
  1001  0693  1785               	bsf	5,7	;volatile
  1002  0694  1703               	bsf	3,6	;RP1=1, select bank3
  1003  0695  178E               	bsf	14,7	;volatile
  1004                           
  1005                           ;K13-01.c: 148: TRISA1=1,WPUA1=0; ANS1=1;
  1006  0696  1303               	bcf	3,6	;RP1=0, select bank1
  1007  0697  1485               	bsf	5,1	;volatile
  1008  0698  1703               	bsf	3,6	;RP1=1, select bank3
  1009  0699  108E               	bcf	14,1	;volatile
  1010  069A  1488               	bsf	8,1	;volatile
  1011                           
  1012                           ;K13-01.c: 149: TRISA2=1,WPUA2=0; ANS2=1;
  1013  069B  1303               	bcf	3,6	;RP1=0, select bank1
  1014  069C  1505               	bsf	5,2	;volatile
  1015  069D  1703               	bsf	3,6	;RP1=1, select bank3
  1016  069E  110E               	bcf	14,2	;volatile
  1017  069F  1508               	bsf	8,2	;volatile
  1018  06A0  0008               	return
  1019  06A1                     __end_of_GPIOInit:	
  1020                           
  1021                           	psect	text4
  1022  06A1                     __ptext4:	
  1023 ;; *************** function _Apply *****************
  1024 ;; Defined at:
  1025 ;;		line 24 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;		None
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;		None
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/200
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1
  1039 ;;      Params:         0       0       0
  1040 ;;      Locals:         0       0       0
  1041 ;;      Temps:          0       0       0
  1042 ;;      Totals:         0       0       0
  1043 ;;Total ram usage:        0 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    5
  1046 ;; This function calls:
  1047 ;;		_ADCPro
  1048 ;;		_DisplayPro
  1049 ;;		_KeyScan
  1050 ;;		_Motor
  1051 ;;		_Sec1sPro
  1052 ;; This function is called by:
  1053 ;;		_main
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           
  1058                           ;psect for function _Apply
  1059  06A1                     _Apply:	
  1060                           
  1061                           ;K13-01.c: 26: if(time2ms)
  1062                           
  1063                           ;incstack = 0
  1064                           ; Regs used in _Apply: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1065  06A1  1CF1               	btfss	_time2ms/(0+8),_time2ms& (0+7)
  1066  06A2  2EA7               	goto	l6896
  1067                           
  1068                           ;K13-01.c: 27: {
  1069                           ;K13-01.c: 28: time2ms=0;
  1070  06A3  10F1               	bcf	_time2ms/(0+8),_time2ms& (0+7)
  1071                           
  1072                           ;K13-01.c: 29: if(SystemONFlag)
  1073  06A4  1EF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1074  06A5  2EA7               	goto	l6896
  1075                           
  1076                           ;K13-01.c: 30: {
  1077                           ;K13-01.c: 31: KeyScan();
  1078  06A6  213A               	fcall	_KeyScan
  1079  06A7                     l6896:	
  1080                           
  1081                           ;K13-01.c: 32: }
  1082                           ;K13-01.c: 33: }
  1083                           ;K13-01.c: 34: if(time10ms)
  1084  06A7  1C71               	btfss	_time10ms/(0+8),_time10ms& (0+7)
  1085  06A8  0008               	return
  1086                           
  1087                           ;K13-01.c: 35: {
  1088                           ;K13-01.c: 36: time10ms=0;
  1089  06A9  1071               	bcf	_time10ms/(0+8),_time10ms& (0+7)
  1090                           
  1091                           ;K13-01.c: 37: if(SystemONFlag==0&&VarPowerUpCount<100)
  1092  06AA  1AF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1093  06AB  2EB2               	goto	l6906
  1094  06AC  26C3               	fcall	PL40	;call to abstracted procedure
  1095  06AD  1803               	skipnc
  1096  06AE  2EB2               	goto	l6906
  1097                           
  1098                           ;K13-01.c: 38: {
  1099                           ;K13-01.c: 39: VarPowerUpCount++;
  1100  06AF  0ABD               	incf	_VarPowerUpCount,f
  1101                           
  1102                           ;K13-01.c: 40: ADCPro();
  1103  06B0  256C               	fcall	_ADCPro
  1104                           
  1105                           ;K13-01.c: 41: }
  1106  06B1  2EB7               	goto	l6912
  1107  06B2                     l6906:	
  1108                           
  1109                           ;K13-01.c: 42: else if(VarPowerUpCount>=100)
  1110  06B2  26C3               	fcall	PL40	;call to abstracted procedure
  1111  06B3  1C03               	skipc
  1112  06B4  2EB7               	goto	l6912
  1113                           
  1114                           ;K13-01.c: 43: {
  1115                           ;K13-01.c: 44: SystemONFlag=1;
  1116  06B5  16F1               	bsf	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1117                           
  1118                           ;K13-01.c: 45: VarPowerUpCount=0;
  1119  06B6  01BD               	clrf	_VarPowerUpCount
  1120  06B7                     l6912:	
  1121                           
  1122                           ;K13-01.c: 46: }
  1123                           ;K13-01.c: 48: if(SystemONFlag)
  1124  06B7  1EF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1125  06B8  2EBC               	goto	l6920
  1126                           
  1127                           ;K13-01.c: 49: {
  1128                           ;K13-01.c: 50: ADCPro();
  1129  06B9  256C               	fcall	_ADCPro
  1130                           
  1131                           ;K13-01.c: 51: Motor();
  1132  06BA  2474               	fcall	_Motor
  1133                           
  1134                           ;K13-01.c: 52: DisplayPro();
  1135  06BB  27A3               	fcall	_DisplayPro
  1136  06BC                     l6920:	
  1137  06BC  3064               	movlw	100
  1138                           
  1139                           ;K13-01.c: 54: }
  1140                           ;K13-01.c: 55: Sec1sCnt++;
  1141  06BD  0ABB               	incf	_Sec1sCnt,f
  1142                           
  1143                           ;K13-01.c: 56: if(Sec1sCnt>=100)
  1144  06BE  023B               	subwf	_Sec1sCnt,w
  1145  06BF  1C03               	skipc
  1146  06C0  0008               	return
  1147                           
  1148                           ;K13-01.c: 57: {
  1149                           ;K13-01.c: 58: Sec1sCnt=0;
  1150  06C1  01BB               	clrf	_Sec1sCnt
  1151                           
  1152                           ;K13-01.c: 59: Sec1sPro();
  1153  06C2  2A0F               	ljmp	l6578
  1154  06C3                     __end_of_Apply:	
  1155  06C3                     PL40:	
  1156  06C3  3064               	movlw	100
  1157  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1158  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1159  06C6  023D               	subwf	_VarPowerUpCount,w
  1160  06C7  0008               	return
  1161  06C8                     __end_ofPL40:	
  1162                           
  1163                           	psect	text5
  1164  020F                     __ptext5:	
  1165 ;; *************** function _Sec1sPro *****************
  1166 ;; Defined at:
  1167 ;;		line 66 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;  TempPercent     2    6[BANK0 ] unsigned int 
  1172 ;;  PercentErr      1    5[BANK0 ] unsigned char 
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, status,2, status,0, pclath, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 300/0
  1179 ;;		On exit  : 300/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMMON   BANK0   BANK1
  1182 ;;      Params:         0       0       0
  1183 ;;      Locals:         0       3       0
  1184 ;;      Temps:          0       2       0
  1185 ;;      Totals:         0       5       0
  1186 ;;Total ram usage:        5 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:    3
  1189 ;; This function calls:
  1190 ;;		___bmul
  1191 ;;		___lwdiv
  1192 ;; This function is called by:
  1193 ;;		_Apply
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           
  1198                           ;psect for function _Sec1sPro
  1199  020F                     _Sec1sPro:	
  1200  020F                     l6578:	
  1201                           ;incstack = 0
  1202                           ; Regs used in _Sec1sPro: [wreg+status,2+status,0+pclath+cstack]
  1203                           
  1204                           
  1205                           ;ADC.c: 70: unsigned int TempPercent=0;
  1206  020F  01D3               	clrf	Sec1sPro@TempPercent
  1207  0210  01D4               	clrf	Sec1sPro@TempPercent+1
  1208                           
  1209                           ;ADC.c: 73: if(USBFlag)
  1210  0211  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1211  0212  2A6E               	goto	l6618
  1212                           
  1213                           ;ADC.c: 74: {
  1214                           ;ADC.c: 75: if(ADCVal[2]<275)
  1215  0213  3001               	movlw	1
  1216  0214  024C               	subwf	_ADCVal+5,w
  1217  0215  3013               	movlw	19
  1218  0216  1903               	skipnz
  1219  0217  024B               	subwf	_ADCVal+4,w
  1220  0218  1803               	skipnc
  1221  0219  2A1C               	goto	l6586
  1222                           
  1223                           ;ADC.c: 76: {
  1224                           ;ADC.c: 77: TempPercent=0;
  1225  021A  01D3               	clrf	Sec1sPro@TempPercent
  1226  021B  2A25               	goto	L1
  1227  021C                     l6586:	
  1228                           ;ADC.c: 78: }
  1229                           
  1230                           
  1231                           ;ADC.c: 79: else if(ADCVal[2]>350)
  1232  021C  3001               	movlw	1
  1233  021D  024C               	subwf	_ADCVal+5,w
  1234  021E  305F               	movlw	95
  1235  021F  1903               	skipnz
  1236  0220  024B               	subwf	_ADCVal+4,w
  1237  0221  1C03               	skipc
  1238  0222  2A27               	goto	l6590
  1239                           
  1240                           ;ADC.c: 80: {
  1241                           ;ADC.c: 81: TempPercent=99;
  1242  0223  3063               	movlw	99
  1243  0224  00D3               	movwf	Sec1sPro@TempPercent
  1244  0225                     L1:	
  1245  0225  01D4               	clrf	Sec1sPro@TempPercent+1
  1246                           
  1247                           ;ADC.c: 82: }
  1248  0226  2A43               	goto	l6594
  1249  0227                     l6590:	
  1250                           
  1251                           ;ADC.c: 83: else
  1252                           ;ADC.c: 84: {
  1253                           ;ADC.c: 85: TempPercent=ADCVal[2]-275;
  1254  0227  084C               	movf	_ADCVal+5,w
  1255  0228  00D4               	movwf	Sec1sPro@TempPercent+1
  1256  0229  084B               	movf	_ADCVal+4,w
  1257  022A  00D3               	movwf	Sec1sPro@TempPercent
  1258  022B  30ED               	movlw	237
  1259  022C  22DA               	fcall	PL28	;call to abstracted procedure
  1260                           
  1261                           ;ADC.c: 86: TempPercent=TempPercent*4/3;
  1262  022D  3003               	movlw	3
  1263  022E  00F5               	movwf	___lwdiv@divisor
  1264  022F  01F6               	clrf	___lwdiv@divisor+1
  1265  0230  0854               	movf	Sec1sPro@TempPercent+1,w
  1266  0231  00D1               	movwf	??_Sec1sPro+1
  1267  0232  0853               	movf	Sec1sPro@TempPercent,w
  1268  0233  00D0               	movwf	??_Sec1sPro
  1269  0234  1003               	clrc
  1270  0235  0DD0               	rlf	??_Sec1sPro,f
  1271  0236  0DD1               	rlf	??_Sec1sPro+1,f
  1272  0237  1003               	clrc
  1273  0238  0DD0               	rlf	??_Sec1sPro,f
  1274  0239  0DD1               	rlf	??_Sec1sPro+1,f
  1275  023A  0850               	movf	??_Sec1sPro,w
  1276  023B  00F7               	movwf	___lwdiv@dividend
  1277  023C  0851               	movf	??_Sec1sPro+1,w
  1278  023D  00F8               	movwf	___lwdiv@dividend+1
  1279  023E  264F               	fcall	___lwdiv
  1280  023F  0876               	movf	?___lwdiv+1,w
  1281  0240  00D4               	movwf	Sec1sPro@TempPercent+1
  1282  0241  0875               	movf	?___lwdiv,w
  1283  0242  00D3               	movwf	Sec1sPro@TempPercent
  1284  0243                     l6594:	
  1285                           
  1286                           ;ADC.c: 87: }
  1287                           ;ADC.c: 88: if(ActualPercent>TempPercent)
  1288                           
  1289                           ;ADC.c: 89: {
  1290                           ;ADC.c: 90: if(ActualPercent)
  1291  0243  22CF               	fcall	PL18	;call to abstracted procedure
  1292  0244  1803               	skipnc
  1293  0245  2A4A               	goto	L4
  1294  0246  1903               	btfsc	3,2
  1295  0247  2A59               	goto	l6606
  1296                           
  1297                           ;ADC.c: 91: {
  1298                           ;ADC.c: 92: ActualPercent--;
  1299  0248  03C0               	decf	Sec1sPro@ActualPercent,f
  1300  0249  2A59               	goto	l6606
  1301  024A                     L4:	
  1302                           ;ADC.c: 95: else if(ActualPercent<TempPercent)
  1303                           
  1304  024A  00D0               	movwf	??_Sec1sPro
  1305  024B  01D1               	clrf	??_Sec1sPro+1
  1306  024C  0854               	movf	Sec1sPro@TempPercent+1,w
  1307  024D  0251               	subwf	??_Sec1sPro+1,w
  1308  024E  1D03               	skipz
  1309  024F  2A52               	goto	u4215
  1310  0250  0853               	movf	Sec1sPro@TempPercent,w
  1311  0251  0250               	subwf	??_Sec1sPro,w
  1312  0252                     u4215:	
  1313  0252  1803               	skipnc
  1314  0253  2A59               	goto	l6606
  1315                           
  1316                           ;ADC.c: 96: {
  1317                           ;ADC.c: 97: if(ActualPercent<99)
  1318  0254  3063               	movlw	99
  1319  0255  0240               	subwf	Sec1sPro@ActualPercent,w
  1320  0256  1803               	skipnc
  1321  0257  2A59               	goto	l6606
  1322                           
  1323                           ;ADC.c: 98: {
  1324                           ;ADC.c: 99: ActualPercent++;
  1325  0258  0AC0               	incf	Sec1sPro@ActualPercent,f
  1326  0259                     l6606:	
  1327                           
  1328                           ;ADC.c: 100: }
  1329                           ;ADC.c: 101: }
  1330                           ;ADC.c: 102: if(ActualPercent>BatPercent)
  1331  0259  0840               	movf	Sec1sPro@ActualPercent,w
  1332  025A  0246               	subwf	_BatPercent,w
  1333  025B  1803               	skipnc
  1334  025C  2A6C               	goto	l6616
  1335                           
  1336                           ;ADC.c: 103: {
  1337                           ;ADC.c: 104: PercentErr=ActualPercent-BatPercent;
  1338  025D  0846               	movf	_BatPercent,w
  1339  025E  0240               	subwf	Sec1sPro@ActualPercent,w
  1340  025F  00D2               	movwf	Sec1sPro@PercentErr
  1341                           
  1342                           ;ADC.c: 105: if(PercentErr<5)
  1343  0260  3005               	movlw	5
  1344  0261  0252               	subwf	Sec1sPro@PercentErr,w
  1345  0262  1803               	skipnc
  1346  0263  2A6A               	goto	l6614
  1347                           
  1348                           ;ADC.c: 106: {
  1349                           ;ADC.c: 107: BatAddTime=90-15*PercentErr;
  1350  0264  30F1               	movlw	241
  1351  0265  00F5               	movwf	___bmul@multiplicand
  1352  0266  0852               	movf	Sec1sPro@PercentErr,w
  1353  0267  2795               	fcall	___bmul
  1354  0268  3E5A               	addlw	90
  1355  0269  2A6D               	goto	L2
  1356  026A                     l6614:	
  1357                           ;ADC.c: 108: }
  1358                           
  1359                           
  1360                           ;ADC.c: 109: else
  1361                           ;ADC.c: 110: {
  1362                           ;ADC.c: 111: BatAddTime=15;
  1363  026A  300F               	movlw	15
  1364  026B  2A6D               	goto	L2
  1365  026C                     l6616:	
  1366                           
  1367                           ;ADC.c: 114: else
  1368                           ;ADC.c: 115: {
  1369                           ;ADC.c: 116: BatAddTime=240;
  1370  026C  30F0               	movlw	240
  1371  026D                     L2:	
  1372  026D  00C5               	movwf	_BatAddTime
  1373  026E                     l6618:	
  1374                           
  1375                           ;ADC.c: 117: }
  1376                           ;ADC.c: 118: }
  1377                           ;ADC.c: 121: if(WorkFlag)
  1378  026E  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1379  026F  2ACC               	goto	l6660
  1380                           
  1381                           ;ADC.c: 122: {
  1382                           ;ADC.c: 123: if(ADCVal[2]<267)
  1383  0270  3001               	movlw	1
  1384  0271  024C               	subwf	_ADCVal+5,w
  1385  0272  300B               	movlw	11
  1386  0273  1903               	skipnz
  1387  0274  024B               	subwf	_ADCVal+4,w
  1388  0275  1803               	skipnc
  1389  0276  2A79               	goto	l6624
  1390                           
  1391                           ;ADC.c: 124: {
  1392                           ;ADC.c: 125: TempPercent=0;
  1393  0277  01D3               	clrf	Sec1sPro@TempPercent
  1394  0278  2A82               	goto	L3
  1395  0279                     l6624:	
  1396                           ;ADC.c: 126: }
  1397                           
  1398                           
  1399                           ;ADC.c: 127: else if(ADCVal[2]>333)
  1400  0279  3001               	movlw	1
  1401  027A  024C               	subwf	_ADCVal+5,w
  1402  027B  304E               	movlw	78
  1403  027C  1903               	skipnz
  1404  027D  024B               	subwf	_ADCVal+4,w
  1405  027E  1C03               	skipc
  1406  027F  2A84               	goto	l6628
  1407                           
  1408                           ;ADC.c: 128: {
  1409                           ;ADC.c: 129: TempPercent=99;
  1410  0280  3063               	movlw	99
  1411  0281  00D3               	movwf	Sec1sPro@TempPercent
  1412  0282                     L3:	
  1413  0282  01D4               	clrf	Sec1sPro@TempPercent+1
  1414                           
  1415                           ;ADC.c: 130: }
  1416  0283  2A8A               	goto	l609
  1417  0284                     l6628:	
  1418                           
  1419                           ;ADC.c: 131: else
  1420                           ;ADC.c: 132: {
  1421                           ;ADC.c: 133: TempPercent=ADCVal[2]-267;
  1422  0284  084C               	movf	_ADCVal+5,w
  1423  0285  00D4               	movwf	Sec1sPro@TempPercent+1
  1424  0286  084B               	movf	_ADCVal+4,w
  1425  0287  00D3               	movwf	Sec1sPro@TempPercent
  1426  0288  30F5               	movlw	245
  1427  0289  22DA               	fcall	PL28	;call to abstracted procedure
  1428  028A                     l609:	
  1429                           
  1430                           ;ADC.c: 134: }
  1431                           ;ADC.c: 135: if(TempPercent>=33)
  1432  028A  3000               	movlw	0
  1433  028B  0254               	subwf	Sec1sPro@TempPercent+1,w
  1434  028C  3021               	movlw	33
  1435  028D  1903               	skipnz
  1436  028E  0253               	subwf	Sec1sPro@TempPercent,w
  1437  028F  1C03               	skipc
  1438  0290  2A9E               	goto	l6636
  1439                           
  1440                           ;ADC.c: 136: {
  1441                           ;ADC.c: 137: TempPercent=33+(ADCVal[2]-300)*2;
  1442  0291  084C               	movf	_ADCVal+5,w
  1443  0292  00D4               	movwf	Sec1sPro@TempPercent+1
  1444  0293  084B               	movf	_ADCVal+4,w
  1445  0294  00D3               	movwf	Sec1sPro@TempPercent
  1446  0295  30C9               	movlw	201
  1447  0296  1003               	clrc
  1448  0297  0DD3               	rlf	Sec1sPro@TempPercent,f
  1449  0298  0DD4               	rlf	Sec1sPro@TempPercent+1,f
  1450  0299  07D3               	addwf	Sec1sPro@TempPercent,f
  1451  029A  1803               	skipnc
  1452  029B  0AD4               	incf	Sec1sPro@TempPercent+1,f
  1453  029C  30FD               	movlw	253
  1454  029D  07D4               	addwf	Sec1sPro@TempPercent+1,f
  1455  029E                     l6636:	
  1456                           
  1457                           ;ADC.c: 138: }
  1458                           ;ADC.c: 139: if(ActualPercent>TempPercent)
  1459                           
  1460                           ;ADC.c: 140: {
  1461                           ;ADC.c: 141: if(ActualPercent)
  1462  029E  22CF               	fcall	PL18	;call to abstracted procedure
  1463  029F  1803               	skipnc
  1464  02A0  2AA5               	goto	L5
  1465  02A1  1903               	btfsc	3,2
  1466  02A2  2AB4               	goto	l6648
  1467                           
  1468                           ;ADC.c: 142: {
  1469                           ;ADC.c: 143: ActualPercent--;
  1470  02A3  03C0               	decf	Sec1sPro@ActualPercent,f
  1471  02A4  2AB4               	goto	l6648
  1472  02A5                     L5:	
  1473                           ;ADC.c: 146: else if(ActualPercent<TempPercent)
  1474                           
  1475  02A5  00D0               	movwf	??_Sec1sPro
  1476  02A6  01D1               	clrf	??_Sec1sPro+1
  1477  02A7  0854               	movf	Sec1sPro@TempPercent+1,w
  1478  02A8  0251               	subwf	??_Sec1sPro+1,w
  1479  02A9  1D03               	skipz
  1480  02AA  2AAD               	goto	u4315
  1481  02AB  0853               	movf	Sec1sPro@TempPercent,w
  1482  02AC  0250               	subwf	??_Sec1sPro,w
  1483  02AD                     u4315:	
  1484  02AD  1803               	skipnc
  1485  02AE  2AB4               	goto	l6648
  1486                           
  1487                           ;ADC.c: 147: {
  1488                           ;ADC.c: 148: if(ActualPercent<99)
  1489  02AF  3063               	movlw	99
  1490  02B0  0240               	subwf	Sec1sPro@ActualPercent,w
  1491  02B1  1803               	skipnc
  1492  02B2  2AB4               	goto	l6648
  1493                           
  1494                           ;ADC.c: 149: {
  1495                           ;ADC.c: 150: ActualPercent++;
  1496  02B3  0AC0               	incf	Sec1sPro@ActualPercent,f
  1497  02B4                     l6648:	
  1498                           
  1499                           ;ADC.c: 151: }
  1500                           ;ADC.c: 152: }
  1501                           ;ADC.c: 153: if(ActualPercent<BatPercent)
  1502  02B4  0846               	movf	_BatPercent,w
  1503  02B5  0240               	subwf	Sec1sPro@ActualPercent,w
  1504  02B6  1803               	skipnc
  1505  02B7  2ACC               	goto	l6660
  1506                           
  1507                           ;ADC.c: 154: {
  1508                           ;ADC.c: 155: PercentErr=BatPercent-ActualPercent;
  1509  02B8  0840               	movf	Sec1sPro@ActualPercent,w
  1510  02B9  0246               	subwf	_BatPercent,w
  1511  02BA  00D2               	movwf	Sec1sPro@PercentErr
  1512                           
  1513                           ;ADC.c: 156: if(PercentErr<5&&ActualPercent)
  1514  02BB  3005               	movlw	5
  1515  02BC  0252               	subwf	Sec1sPro@PercentErr,w
  1516  02BD  1803               	skipnc
  1517  02BE  2AC9               	goto	l6658
  1518  02BF  0840               	movf	Sec1sPro@ActualPercent,w
  1519  02C0  1903               	btfsc	3,2
  1520  02C1  2AC9               	goto	l6658
  1521                           
  1522                           ;ADC.c: 157: {
  1523                           ;ADC.c: 158: BatDecTime=75-15*PercentErr;
  1524  02C2  30F1               	movlw	241
  1525  02C3  00F5               	movwf	___bmul@multiplicand
  1526  02C4  0852               	movf	Sec1sPro@PercentErr,w
  1527  02C5  2795               	fcall	___bmul
  1528  02C6  3E4B               	addlw	75
  1529  02C7  00C4               	movwf	_BatDecTime
  1530                           
  1531                           ;ADC.c: 159: }
  1532  02C8  0008               	return
  1533  02C9                     l6658:	
  1534                           
  1535                           ;ADC.c: 160: else
  1536                           ;ADC.c: 161: {
  1537                           ;ADC.c: 162: BatDecTime=8;
  1538  02C9  3008               	movlw	8
  1539  02CA  00C4               	movwf	_BatDecTime
  1540  02CB  0008               	return
  1541  02CC                     l6660:	
  1542                           
  1543                           ;ADC.c: 165: else
  1544                           ;ADC.c: 166: {
  1545                           ;ADC.c: 167: BatDecTime=210;
  1546  02CC  30D2               	movlw	210
  1547  02CD  00C4               	movwf	_BatDecTime
  1548  02CE  0008               	return
  1549  02CF                     __end_of_Sec1sPro:	
  1550  02CF                     PL18:	
  1551  02CF  0840               	movf	Sec1sPro@ActualPercent,w
  1552  02D0  00D0               	movwf	??_Sec1sPro
  1553  02D1  01D1               	clrf	??_Sec1sPro+1
  1554  02D2  0851               	movf	??_Sec1sPro+1,w
  1555  02D3  0254               	subwf	Sec1sPro@TempPercent+1,w
  1556  02D4  1D03               	skipz
  1557  02D5  2AD8               	goto	u4195
  1558  02D6  0850               	movf	??_Sec1sPro,w
  1559  02D7  0253               	subwf	Sec1sPro@TempPercent,w
  1560  02D8                     u4195:	
  1561  02D8  0840               	movf	Sec1sPro@ActualPercent,w
  1562  02D9  0008               	return
  1563  02DA                     __end_ofPL18:	
  1564  02DA                     PL28:	
  1565  02DA  07D3               	addwf	Sec1sPro@TempPercent,f
  1566  02DB  1803               	skipnc
  1567  02DC  0AD4               	incf	Sec1sPro@TempPercent+1,f
  1568  02DD  30FE               	movlw	254
  1569  02DE  07D4               	addwf	Sec1sPro@TempPercent+1,f
  1570  02DF  0008               	return
  1571  02E0                     __end_ofPL28:	
  1572                           
  1573                           	psect	text6
  1574  064F                     __ptext6:	
  1575 ;; *************** function ___lwdiv *****************
  1576 ;; Defined at:
  1577 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  divisor         2    3[COMMON] unsigned int 
  1580 ;;  dividend        2    5[COMMON] unsigned int 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  quotient        2    1[BANK0 ] unsigned int 
  1583 ;;  counter         1    0[BANK0 ] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  2    3[COMMON] unsigned int 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, status,0
  1588 ;; Tracked objects:
  1589 ;;		On entry : 300/0
  1590 ;;		On exit  : 300/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMMON   BANK0   BANK1
  1593 ;;      Params:         4       0       0
  1594 ;;      Locals:         0       3       0
  1595 ;;      Temps:          0       0       0
  1596 ;;      Totals:         4       3       0
  1597 ;;Total ram usage:        7 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    2
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_Sec1sPro
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function ___lwdiv
  1609  064F                     ___lwdiv:	
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1613  064F  01CE               	clrf	___lwdiv@quotient
  1614  0650  01CF               	clrf	___lwdiv@quotient+1
  1615  0651  0875               	movf	___lwdiv@divisor,w
  1616  0652  0476               	iorwf	___lwdiv@divisor+1,w
  1617  0653  1903               	btfsc	3,2
  1618  0654  2E74               	goto	l6530
  1619  0655  01CD               	clrf	___lwdiv@counter
  1620  0656                     L6:	
  1621  0656  0ACD               	incf	___lwdiv@counter,f
  1622  0657  1BF6               	btfsc	___lwdiv@divisor+1,7
  1623  0658  2E5D               	goto	l6518
  1624  0659  1003               	clrc
  1625  065A  0DF5               	rlf	___lwdiv@divisor,f
  1626  065B  0DF6               	rlf	___lwdiv@divisor+1,f
  1627  065C  2E56               	goto	L6
  1628  065D                     l6518:	
  1629  065D  1003               	clrc
  1630  065E  0DCE               	rlf	___lwdiv@quotient,f
  1631  065F  0DCF               	rlf	___lwdiv@quotient+1,f
  1632  0660  0876               	movf	___lwdiv@divisor+1,w
  1633  0661  0278               	subwf	___lwdiv@dividend+1,w
  1634  0662  1D03               	skipz
  1635  0663  2E66               	goto	u4095
  1636  0664  0875               	movf	___lwdiv@divisor,w
  1637  0665  0277               	subwf	___lwdiv@dividend,w
  1638  0666                     u4095:	
  1639  0666  1C03               	skipc
  1640  0667  2E70               	goto	L7
  1641  0668  0875               	movf	___lwdiv@divisor,w
  1642  0669  02F7               	subwf	___lwdiv@dividend,f
  1643  066A  0876               	movf	___lwdiv@divisor+1,w
  1644  066B  1C03               	skipc
  1645  066C  03F8               	decf	___lwdiv@dividend+1,f
  1646  066D  02F8               	subwf	___lwdiv@dividend+1,f
  1647  066E  144E               	bsf	___lwdiv@quotient,0
  1648  066F  1003               	clrc
  1649  0670                     L7:	
  1650  0670  0CF6               	rrf	___lwdiv@divisor+1,f
  1651  0671  0CF5               	rrf	___lwdiv@divisor,f
  1652  0672  0BCD               	decfsz	___lwdiv@counter,f
  1653  0673  2E5D               	goto	l6518
  1654  0674                     l6530:	
  1655  0674  084F               	movf	___lwdiv@quotient+1,w
  1656  0675  00F6               	movwf	?___lwdiv+1
  1657  0676  084E               	movf	___lwdiv@quotient,w
  1658  0677  00F5               	movwf	?___lwdiv
  1659  0678  0008               	return
  1660  0679                     __end_of___lwdiv:	
  1661                           
  1662                           	psect	text7
  1663  0474                     __ptext7:	
  1664 ;; *************** function _Motor *****************
  1665 ;; Defined at:
  1666 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 300/0
  1677 ;;		On exit  : 300/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1
  1680 ;;      Params:         0       0       0
  1681 ;;      Locals:         0       0       0
  1682 ;;      Temps:          0       0       0
  1683 ;;      Totals:         0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    3
  1687 ;; This function calls:
  1688 ;;		___wmul
  1689 ;; This function is called by:
  1690 ;;		_Apply
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           
  1695                           ;psect for function _Motor
  1696  0474                     _Motor:	
  1697                           
  1698                           ;Motor.c: 9: if(!WorkFlag)
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _Motor: [wreg+status,2+status,0+pclath+cstack]
  1702  0474  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1703  0475  2C7D               	goto	l4199
  1704                           
  1705                           ;Motor.c: 10: {
  1706                           ;Motor.c: 11: RA3=0;
  1707  0476  1185               	bcf	5,3	;volatile
  1708                           
  1709                           ;Motor.c: 12: WorkCnt=0;
  1710  0477  1683               	bsf	3,5	;RP0=1, select bank1
  1711  0478  01D7               	clrf	_WorkCnt^(0+128)
  1712  0479  01D8               	clrf	(_WorkCnt+1)^(0+128)
  1713                           
  1714                           ;Motor.c: 13: TimeDecCnt=0;
  1715  047A  01D5               	clrf	_TimeDecCnt^(0+128)
  1716  047B  01D6               	clrf	(_TimeDecCnt+1)^(0+128)
  1717                           
  1718                           ;Motor.c: 14: }
  1719  047C  2CA9               	goto	l6870
  1720  047D                     l4199:	
  1721                           
  1722                           ;Motor.c: 15: else if(WorkFlag&&!LockSta.LockFlag)
  1723  047D  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1724  047E  1B2B               	btfsc	_LockSta,6
  1725  047F  2CA9               	goto	l6870
  1726                           
  1727                           ;Motor.c: 16: {
  1728                           ;Motor.c: 17: RA3=1;
  1729  0480  1585               	bsf	5,3	;volatile
  1730                           
  1731                           ;Motor.c: 18: TimeDecCnt++;
  1732  0481  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0482  0AD5               	incf	_TimeDecCnt^(0+128),f
  1734  0483  1903               	skipnz
  1735  0484  0AD6               	incf	(_TimeDecCnt+1)^(0+128),f
  1736                           
  1737                           ;Motor.c: 19: if(TimeDecCnt>=BatDecTime*100)
  1738  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1739  0486  0844               	movf	_BatDecTime,w
  1740  0487  24D1               	fcall	PL30	;call to abstracted procedure
  1741  0488  271A               	fcall	___wmul
  1742  0489  0876               	movf	?___wmul+1,w
  1743  048A  1683               	bsf	3,5	;RP0=1, select bank1
  1744  048B  0256               	subwf	(_TimeDecCnt+1)^(0+128),w
  1745  048C  1D03               	skipz
  1746  048D  2C90               	goto	u4605
  1747  048E  0875               	movf	?___wmul,w
  1748  048F  0255               	subwf	_TimeDecCnt^(0+128),w
  1749  0490                     u4605:	
  1750  0490  1C03               	skipc
  1751  0491  2C98               	goto	l4202
  1752                           
  1753                           ;Motor.c: 20: {
  1754                           ;Motor.c: 21: TimeDecCnt=0;
  1755  0492  01D5               	clrf	_TimeDecCnt^(0+128)
  1756  0493  01D6               	clrf	(_TimeDecCnt+1)^(0+128)
  1757                           
  1758                           ;Motor.c: 22: if(BatPercent)
  1759  0494  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0495  0846               	movf	_BatPercent,w
  1761  0496  1D03               	btfss	3,2
  1762                           
  1763                           ;Motor.c: 23: {
  1764                           ;Motor.c: 24: BatPercent--;
  1765  0497  03C6               	decf	_BatPercent,f
  1766  0498                     l4202:	
  1767                           
  1768                           ;Motor.c: 25: }
  1769                           ;Motor.c: 26: }
  1770                           ;Motor.c: 27: WorkCnt++;
  1771  0498  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0499  0AD7               	incf	_WorkCnt^(0+128),f
  1773  049A  1903               	skipnz
  1774  049B  0AD8               	incf	(_WorkCnt+1)^(0+128),f
  1775                           
  1776                           ;Motor.c: 28: if(WorkCnt>=6000)
  1777  049C  3017               	movlw	23
  1778  049D  0258               	subwf	(_WorkCnt+1)^(0+128),w
  1779  049E  3070               	movlw	112
  1780  049F  1903               	skipnz
  1781  04A0  0257               	subwf	_WorkCnt^(0+128),w
  1782  04A1  1C03               	skipc
  1783  04A2  2CA9               	goto	l6870
  1784  04A3  3063               	movlw	99
  1785                           
  1786                           ;Motor.c: 29: {
  1787                           ;Motor.c: 30: WorkCnt=0;
  1788  04A4  01D7               	clrf	_WorkCnt^(0+128)
  1789  04A5  01D8               	clrf	(_WorkCnt+1)^(0+128)
  1790                           
  1791                           ;Motor.c: 31: if(WorkMin<99)
  1792  04A6  027A               	subwf	_WorkMin,w
  1793  04A7  1C03               	btfss	3,0
  1794                           
  1795                           ;Motor.c: 32: {
  1796                           ;Motor.c: 33: WorkMin++;
  1797  04A8  0AFA               	incf	_WorkMin,f
  1798  04A9                     l6870:	
  1799                           
  1800                           ;Motor.c: 34: }
  1801                           ;Motor.c: 35: }
  1802                           ;Motor.c: 36: }
  1803                           ;Motor.c: 37: if(USBFlag)
  1804  04A9  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1805  04AA  2CCD               	goto	l6886
  1806                           
  1807                           ;Motor.c: 38: {
  1808                           ;Motor.c: 39: TimeAddCnt++;
  1809  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  1810  04AC  0AD3               	incf	_TimeAddCnt^(0+128),f
  1811  04AD  1903               	skipnz
  1812  04AE  0AD4               	incf	(_TimeAddCnt+1)^(0+128),f
  1813                           
  1814                           ;Motor.c: 40: if(TimeAddCnt>BatAddTime*100)
  1815  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1816  04B0  0845               	movf	_BatAddTime,w
  1817  04B1  24D1               	fcall	PL30	;call to abstracted procedure
  1818  04B2  271A               	fcall	___wmul
  1819  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  1820  04B4  0854               	movf	(_TimeAddCnt+1)^(0+128),w
  1821  04B5  0276               	subwf	?___wmul+1,w
  1822  04B6  1D03               	skipz
  1823  04B7  2CBA               	goto	u4655
  1824  04B8  0853               	movf	_TimeAddCnt^(0+128),w
  1825  04B9  0275               	subwf	?___wmul,w
  1826  04BA                     u4655:	
  1827  04BA  1803               	skipnc
  1828  04BB  2CC3               	goto	l6882
  1829  04BC  3063               	movlw	99
  1830                           
  1831                           ;Motor.c: 41: {
  1832                           ;Motor.c: 42: TimeAddCnt=0;
  1833  04BD  01D3               	clrf	_TimeAddCnt^(0+128)
  1834  04BE  01D4               	clrf	(_TimeAddCnt+1)^(0+128)
  1835                           
  1836                           ;Motor.c: 43: if(BatPercent<99)
  1837  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1838  04C0  0246               	subwf	_BatPercent,w
  1839  04C1  1C03               	btfss	3,0
  1840                           
  1841                           ;Motor.c: 44: {
  1842                           ;Motor.c: 45: BatPercent++;
  1843  04C2  0AC6               	incf	_BatPercent,f
  1844  04C3                     l6882:	
  1845                           
  1846                           ;Motor.c: 46: }
  1847                           ;Motor.c: 47: }
  1848                           ;Motor.c: 48: if(BatPercent<=250)
  1849  04C3  30FB               	movlw	251
  1850  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1851  04C5  0246               	subwf	_BatPercent,w
  1852  04C6  1803               	skipnc
  1853  04C7  2CCA               	goto	l4209
  1854                           
  1855                           ;Motor.c: 49: {
  1856                           ;Motor.c: 50: RA5 =0;
  1857  04C8  1285               	bcf	5,5	;volatile
  1858                           
  1859                           ;Motor.c: 51: }
  1860  04C9  0008               	return
  1861  04CA                     l4209:	
  1862                           
  1863                           ;Motor.c: 52: else
  1864                           ;Motor.c: 53: {
  1865                           ;Motor.c: 54: RA5 =1;
  1866  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  1867  04CB  1685               	bsf	5,5	;volatile
  1868  04CC  0008               	return
  1869  04CD                     l6886:	
  1870                           
  1871                           ;Motor.c: 57: else
  1872                           ;Motor.c: 58: {
  1873                           ;Motor.c: 59: TimeAddCnt=0;
  1874  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  1875  04CE  01D3               	clrf	_TimeAddCnt^(0+128)
  1876  04CF  01D4               	clrf	(_TimeAddCnt+1)^(0+128)
  1877  04D0  2CCA               	goto	l4209
  1878  04D1                     __end_of_Motor:	
  1879  04D1                     PL30:	
  1880  04D1  00F5               	movwf	___wmul@multiplier
  1881  04D2  3064               	movlw	100
  1882  04D3  01F6               	clrf	___wmul@multiplier+1
  1883  04D4  00F7               	movwf	___wmul@multiplicand
  1884  04D5  01F8               	clrf	___wmul@multiplicand+1
  1885  04D6  0008               	return
  1886  04D7                     __end_ofPL30:	
  1887                           
  1888                           	psect	text8
  1889  071A                     __ptext8:	
  1890 ;; *************** function ___wmul *****************
  1891 ;; Defined at:
  1892 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul16.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  multiplier      2    3[COMMON] unsigned int 
  1895 ;;  multiplicand    2    5[COMMON] unsigned int 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  product         2    0[BANK0 ] unsigned int 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  2    3[COMMON] unsigned int 
  1900 ;; Registers used:
  1901 ;;		wreg, status,2, status,0
  1902 ;; Tracked objects:
  1903 ;;		On entry : 300/0
  1904 ;;		On exit  : 300/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMMON   BANK0   BANK1
  1907 ;;      Params:         4       0       0
  1908 ;;      Locals:         0       2       0
  1909 ;;      Temps:          0       0       0
  1910 ;;      Totals:         4       2       0
  1911 ;;Total ram usage:        6 bytes
  1912 ;; Hardware stack levels used:    1
  1913 ;; Hardware stack levels required when called:    2
  1914 ;; This function calls:
  1915 ;;		Nothing
  1916 ;; This function is called by:
  1917 ;;		_Motor
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           
  1922                           ;psect for function ___wmul
  1923  071A                     ___wmul:	
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1927  071A  01CD               	clrf	___wmul@product
  1928  071B  01CE               	clrf	___wmul@product+1
  1929  071C                     l6828:	
  1930  071C  1C75               	btfss	___wmul@multiplier,0
  1931  071D  2F24               	goto	l6832
  1932  071E  0877               	movf	___wmul@multiplicand,w
  1933  071F  07CD               	addwf	___wmul@product,f
  1934  0720  1803               	skipnc
  1935  0721  0ACE               	incf	___wmul@product+1,f
  1936  0722  0878               	movf	___wmul@multiplicand+1,w
  1937  0723  07CE               	addwf	___wmul@product+1,f
  1938  0724                     l6832:	
  1939  0724  1003               	clrc
  1940  0725  0DF7               	rlf	___wmul@multiplicand,f
  1941  0726  0DF8               	rlf	___wmul@multiplicand+1,f
  1942  0727  1003               	clrc
  1943  0728  0CF6               	rrf	___wmul@multiplier+1,f
  1944  0729  0CF5               	rrf	___wmul@multiplier,f
  1945  072A  0875               	movf	___wmul@multiplier,w
  1946  072B  0476               	iorwf	___wmul@multiplier+1,w
  1947  072C  1D03               	btfss	3,2
  1948  072D  2F1C               	goto	l6828
  1949  072E  084E               	movf	___wmul@product+1,w
  1950  072F  00F6               	movwf	?___wmul+1
  1951  0730  084D               	movf	___wmul@product,w
  1952  0731  00F5               	movwf	?___wmul
  1953  0732  0008               	return
  1954  0733                     __end_of___wmul:	
  1955                           
  1956                           	psect	text9
  1957  013A                     __ptext9:	
  1958 ;; *************** function _KeyScan *****************
  1959 ;; Defined at:
  1960 ;;		line 9 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Key.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, status,0
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/200
  1971 ;;		On exit  : 300/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMMON   BANK0   BANK1
  1974 ;;      Params:         0       0       0
  1975 ;;      Locals:         0       0       0
  1976 ;;      Temps:          1       0       0
  1977 ;;      Totals:         1       0       0
  1978 ;;Total ram usage:        1 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    2
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_Apply
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988                           
  1989                           ;psect for function _KeyScan
  1990  013A                     _KeyScan:	
  1991                           
  1992                           ;Key.c: 11: if(!RA6)
  1993                           
  1994                           ;incstack = 0
  1995                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  1996  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1997  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1998  013C  1B05               	btfsc	5,6	;volatile
  1999  013D  2940               	goto	l2371
  2000                           
  2001                           ;Key.c: 12: {
  2002                           ;Key.c: 13: KeyPress=1;
  2003  013E  16F0               	bsf	_KeyPress/(0+8),_KeyPress& (0+7)
  2004                           
  2005                           ;Key.c: 14: }
  2006  013F  2941               	goto	l2372
  2007  0140                     l2371:	
  2008                           
  2009                           ;Key.c: 15: else
  2010                           ;Key.c: 16: {
  2011                           ;Key.c: 17: KeyPress=0;
  2012  0140  12F0               	bcf	_KeyPress/(0+8),_KeyPress& (0+7)
  2013  0141                     l2372:	
  2014                           
  2015                           ;Key.c: 18: }
  2016                           ;Key.c: 20: if(KeyPress&&KeyCnt<10&&KeyInBuf==KeyPress&&!IovFlag)
  2017  0141  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2018  0142  296E               	goto	l2373
  2019  0143  3000               	movlw	0
  2020  0144  022A               	subwf	_KeyCnt+1,w
  2021  0145  300A               	movlw	10
  2022  0146  1903               	skipnz
  2023  0147  0229               	subwf	_KeyCnt,w
  2024  0148  1803               	skipnc
  2025  0149  296E               	goto	l2373
  2026  014A  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2027  014B  294E               	goto	u2770
  2028  014C  3001               	movlw	1
  2029  014D  294F               	goto	u2772
  2030  014E                     u2770:	
  2031  014E  3000               	movlw	0
  2032  014F                     u2772:	
  2033  014F  00F5               	movwf	??_KeyScan
  2034  0150  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2035  0151  2954               	goto	u2780
  2036  0152  3001               	movlw	1
  2037  0153  2955               	goto	u2782
  2038  0154                     u2780:	
  2039  0154  3000               	movlw	0
  2040  0155                     u2782:	
  2041  0155  0675               	xorwf	??_KeyScan,w
  2042  0156  1903               	btfsc	3,2
  2043  0157  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2044  0158  296E               	goto	l2373
  2045                           
  2046                           ;Key.c: 21: {
  2047                           ;Key.c: 22: KeyCnt++;
  2048                           
  2049                           ;Key.c: 23: if(KeyCnt>=10)
  2050  0159  2209               	fcall	PL26	;call to abstracted procedure
  2051  015A  300A               	movlw	10
  2052  015B  1903               	skipnz
  2053  015C  0229               	subwf	_KeyCnt,w
  2054  015D  1C03               	skipc
  2055  015E  29F6               	goto	l2377
  2056                           
  2057                           ;Key.c: 24: {
  2058                           ;Key.c: 25: WorkFlag=~WorkFlag;
  2059  015F  3004               	movlw	(0+1) shl (_WorkFlag& (0+7))
  2060  0160  06F1               	xorwf	_WorkFlag/(0+8),f
  2061                           
  2062                           ;Key.c: 26: if(!WorkFlag&&WorkMin&&!USBFlag&&!LockSta.LockFlag)
  2063  0161  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2064  0162  296B               	goto	l2375
  2065  0163  087A               	movf	_WorkMin,w
  2066  0164  1D03               	btfss	3,2
  2067  0165  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2068  0166  296B               	goto	l2375
  2069  0167  1B2B               	btfsc	_LockSta,6
  2070  0168  296B               	goto	l2375
  2071                           
  2072                           ;Key.c: 27: {
  2073                           ;Key.c: 28: OnOffFlag=1;
  2074  0169  17F0               	bsf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2075                           
  2076                           ;Key.c: 29: }
  2077  016A  29F6               	goto	l2377
  2078  016B                     l2375:	
  2079                           
  2080                           ;Key.c: 30: else
  2081                           ;Key.c: 31: {
  2082                           ;Key.c: 32: OnOffFlag=0;
  2083  016B  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2084                           
  2085                           ;Key.c: 33: WorkMin=0;
  2086  016C  01FA               	clrf	_WorkMin
  2087  016D  29F6               	goto	l2377
  2088  016E                     l2373:	
  2089                           
  2090                           ;Key.c: 37: else if(KeyPress&&KeyCnt>=10&&KeyCnt<250&&KeyInBuf==KeyPress&&!USBFlag)
  2091  016E  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2092  016F  299C               	goto	l2378
  2093  0170  3000               	movlw	0
  2094  0171  022A               	subwf	_KeyCnt+1,w
  2095  0172  300A               	movlw	10
  2096  0173  1903               	skipnz
  2097  0174  0229               	subwf	_KeyCnt,w
  2098  0175  1C03               	skipc
  2099  0176  299C               	goto	l2378
  2100  0177  3000               	movlw	0
  2101  0178  022A               	subwf	_KeyCnt+1,w
  2102  0179  30FA               	movlw	250
  2103  017A  1903               	skipnz
  2104  017B  0229               	subwf	_KeyCnt,w
  2105  017C  1803               	skipnc
  2106  017D  299C               	goto	l2378
  2107  017E  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2108  017F  2982               	goto	u2890
  2109  0180  3001               	movlw	1
  2110  0181  2983               	goto	u2892
  2111  0182                     u2890:	
  2112  0182  3000               	movlw	0
  2113  0183                     u2892:	
  2114  0183  00F5               	movwf	??_KeyScan
  2115  0184  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2116  0185  2988               	goto	u2900
  2117  0186  3001               	movlw	1
  2118  0187  2989               	goto	u2902
  2119  0188                     u2900:	
  2120  0188  3000               	movlw	0
  2121  0189                     u2902:	
  2122  0189  0675               	xorwf	??_KeyScan,w
  2123  018A  1903               	btfsc	3,2
  2124  018B  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2125  018C  299C               	goto	l2378
  2126                           
  2127                           ;Key.c: 38: {
  2128                           ;Key.c: 39: KeyCnt++;
  2129                           
  2130                           ;Key.c: 40: if(KeyCnt>=250)
  2131  018D  2209               	fcall	PL26	;call to abstracted procedure
  2132  018E  30FA               	movlw	250
  2133  018F  1903               	skipnz
  2134  0190  0229               	subwf	_KeyCnt,w
  2135  0191  1C03               	skipc
  2136  0192  29F6               	goto	l2377
  2137                           
  2138                           ;Key.c: 41: {
  2139                           ;Key.c: 42: LockNumb=2;
  2140  0193  3002               	movlw	2
  2141  0194  00BC               	movwf	_LockNumb
  2142                           
  2143                           ;Key.c: 43: if(!LockSta.LockFlag)
  2144  0195  1B2B               	btfsc	_LockSta,6
  2145  0196  2999               	goto	l2380
  2146                           
  2147                           ;Key.c: 44: {
  2148                           ;Key.c: 45: LockSta.LockStart=1;
  2149  0197  142B               	bsf	_LockSta,0
  2150                           
  2151                           ;Key.c: 47: }
  2152  0198  299A               	goto	l2381
  2153  0199                     l2380:	
  2154                           
  2155                           ;Key.c: 48: else
  2156                           ;Key.c: 49: {
  2157                           ;Key.c: 50: LockSta.UnlockStart=1;
  2158  0199  15AB               	bsf	_LockSta,3
  2159  019A                     l2381:	
  2160                           
  2161                           ;Key.c: 51: }
  2162                           ;Key.c: 52: OnOffFlag=0;
  2163  019A  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2164  019B  29F6               	goto	l2377
  2165  019C                     l2378:	
  2166                           
  2167                           ;Key.c: 55: else if(KeyPress&&KeyCnt>=250&&KeyInBuf==KeyPress&&!LockSta.LockEnd&&!LockSt
      +                          a.UnlockEnd)
  2168  019C  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2169  019D  29D8               	goto	l2383
  2170  019E  3000               	movlw	0
  2171  019F  022A               	subwf	_KeyCnt+1,w
  2172  01A0  30FA               	movlw	250
  2173  01A1  1903               	skipnz
  2174  01A2  0229               	subwf	_KeyCnt,w
  2175  01A3  1C03               	skipc
  2176  01A4  29D8               	goto	l2383
  2177  01A5  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2178  01A6  29A9               	goto	u2970
  2179  01A7  3001               	movlw	1
  2180  01A8  29AA               	goto	u2972
  2181  01A9                     u2970:	
  2182  01A9  3000               	movlw	0
  2183  01AA                     u2972:	
  2184  01AA  00F5               	movwf	??_KeyScan
  2185  01AB  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2186  01AC  29AF               	goto	u2980
  2187  01AD  3001               	movlw	1
  2188  01AE  29B0               	goto	u2982
  2189  01AF                     u2980:	
  2190  01AF  3000               	movlw	0
  2191  01B0                     u2982:	
  2192  01B0  0675               	xorwf	??_KeyScan,w
  2193  01B1  1903               	btfsc	3,2
  2194  01B2  192B               	btfsc	_LockSta,2
  2195  01B3  29D8               	goto	l2383
  2196  01B4  1AAB               	btfsc	_LockSta,5
  2197  01B5  29D8               	goto	l2383
  2198                           
  2199                           ;Key.c: 56: {
  2200                           ;Key.c: 57: KeyCnt++;
  2201  01B6  0AA9               	incf	_KeyCnt,f
  2202  01B7  1903               	skipnz
  2203  01B8  0AAA               	incf	_KeyCnt+1,f
  2204                           
  2205                           ;Key.c: 58: if(KeyCnt>=1750)
  2206  01B9  3006               	movlw	6
  2207  01BA  022A               	subwf	_KeyCnt+1,w
  2208  01BB  30D6               	movlw	214
  2209  01BC  1903               	skipnz
  2210  01BD  0229               	subwf	_KeyCnt,w
  2211  01BE  1C03               	skipc
  2212  01BF  29F6               	goto	l2377
  2213                           
  2214                           ;Key.c: 59: {
  2215                           ;Key.c: 60: KeyCnt=1750;
  2216  01C0  30D6               	movlw	214
  2217  01C1  00A9               	movwf	_KeyCnt
  2218  01C2  3006               	movlw	6
  2219  01C3  00AA               	movwf	_KeyCnt+1
  2220                           
  2221                           ;Key.c: 61: LockSta.LockFlag=!LockSta.LockFlag;
  2222  01C4  1003               	clrc
  2223  01C5  1F2B               	btfss	_LockSta,6
  2224  01C6  1403               	setc
  2225  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2226  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2227  01C9  1C03               	btfss	3,0
  2228  01CA  29CD               	goto	L8
  2229  01CB  172B               	bsf	_LockSta,6
  2230  01CC  29CE               	goto	l6018
  2231  01CD                     L8:	
  2232  01CD  132B               	bcf	_LockSta,6
  2233  01CE                     l6018:	
  2234                           
  2235                           ;Key.c: 62: if(LockSta.LockFlag)
  2236  01CE  1F2B               	btfss	_LockSta,6
  2237  01CF  29D4               	goto	l2385
  2238                           
  2239                           ;Key.c: 63: {
  2240                           ;Key.c: 64: LockSta.LockStart=0;
  2241  01D0  102B               	bcf	_LockSta,0
  2242                           
  2243                           ;Key.c: 65: LockSta.LockEnd=1;
  2244  01D1  152B               	bsf	_LockSta,2
  2245                           
  2246                           ;Key.c: 66: WorkFlag=0;
  2247  01D2  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2248                           
  2249                           ;Key.c: 67: }
  2250  01D3  29F6               	goto	l2377
  2251  01D4                     l2385:	
  2252                           
  2253                           ;Key.c: 68: else
  2254                           ;Key.c: 69: {
  2255                           ;Key.c: 70: LockSta.UnlockStart=0;
  2256  01D4  11AB               	bcf	_LockSta,3
  2257                           
  2258                           ;Key.c: 71: LockSta.UnlockEnd=1;
  2259  01D5  16AB               	bsf	_LockSta,5
  2260                           
  2261                           ;Key.c: 72: WorkFlag=1;
  2262  01D6  1571               	bsf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2263  01D7  29F6               	goto	l2377
  2264  01D8                     l2383:	
  2265                           
  2266                           ;Key.c: 76: else if(!KeyPress||KeyInBuf!=KeyPress)
  2267  01D8  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2268  01D9  29E8               	goto	l6024
  2269  01DA  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2270  01DB  29DE               	goto	u3070
  2271  01DC  3001               	movlw	1
  2272  01DD  29DF               	goto	u3072
  2273  01DE                     u3070:	
  2274  01DE  3000               	movlw	0
  2275  01DF                     u3072:	
  2276  01DF  00F5               	movwf	??_KeyScan
  2277  01E0  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2278  01E1  29E4               	goto	u3080
  2279  01E2  3001               	movlw	1
  2280  01E3  29E5               	goto	u3082
  2281  01E4                     u3080:	
  2282  01E4  3000               	movlw	0
  2283  01E5                     u3082:	
  2284  01E5  0675               	xorwf	??_KeyScan,w
  2285  01E6  1903               	skipnz
  2286  01E7  29F6               	goto	l2377
  2287  01E8                     l6024:	
  2288                           
  2289                           ;Key.c: 77: {
  2290                           ;Key.c: 78: KeyCnt=0;
  2291  01E8  01A9               	clrf	_KeyCnt
  2292  01E9  01AA               	clrf	_KeyCnt+1
  2293                           
  2294                           ;Key.c: 79: LockSta.UnlockEnd=0;
  2295  01EA  12AB               	bcf	_LockSta,5
  2296                           
  2297                           ;Key.c: 80: if((LockSta.LockFlag&&WorkFlag)||LockSta.UnlockStart)
  2298  01EB  1F2B               	btfss	_LockSta,6
  2299  01EC  29EF               	goto	l2395
  2300  01ED  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2301  01EE  29F1               	goto	l2393
  2302  01EF                     l2395:	
  2303  01EF  1DAB               	btfss	_LockSta,3
  2304  01F0  29F4               	goto	l2391
  2305  01F1                     l2393:	
  2306                           
  2307                           ;Key.c: 81: {
  2308                           ;Key.c: 82: LockSta.UnlockStart=0;
  2309  01F1  11AB               	bcf	_LockSta,3
  2310                           
  2311                           ;Key.c: 83: LockSta.UnlockFail=1;
  2312  01F2  162B               	bsf	_LockSta,4
  2313                           
  2314                           ;Key.c: 84: WorkFlag=0;
  2315  01F3  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2316  01F4                     l2391:	
  2317                           
  2318                           ;Key.c: 85: }
  2319                           ;Key.c: 86: if(LockSta.LockStart)
  2320  01F4  182B               	btfsc	_LockSta,0
  2321                           
  2322                           ;Key.c: 87: {
  2323                           ;Key.c: 88: LockSta.LockStart=0;
  2324  01F5  102B               	bcf	_LockSta,0
  2325  01F6                     l2377:	
  2326                           
  2327                           ;Key.c: 89: }
  2328                           ;Key.c: 90: }
  2329                           ;Key.c: 91: KeyInBuf=KeyPress;
  2330  01F6  1370               	bcf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2331  01F7  1AF0               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2332  01F8  1770               	bsf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2333                           
  2334                           ;Key.c: 93: if(!RA7)
  2335  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2336  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2337  01FB  1B85               	btfsc	5,7	;volatile
  2338  01FC  29FF               	goto	l2397
  2339                           
  2340                           ;Key.c: 94: {
  2341                           ;Key.c: 95: USBLink=1;
  2342  01FD  1670               	bsf	_USBLink/(0+8),_USBLink& (0+7)
  2343                           
  2344                           ;Key.c: 96: }
  2345  01FE  2A00               	goto	l2398
  2346  01FF                     l2397:	
  2347                           
  2348                           ;Key.c: 97: else
  2349                           ;Key.c: 98: {
  2350                           ;Key.c: 99: USBLink=0;
  2351  01FF  1270               	bcf	_USBLink/(0+8),_USBLink& (0+7)
  2352  0200                     l2398:	
  2353                           
  2354                           ;Key.c: 100: }
  2355                           ;Key.c: 102: if(USBLink&&!IovFlag)
  2356  0200  1A70               	btfsc	_USBLink/(0+8),_USBLink& (0+7)
  2357  0201  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2358  0202  2A06               	goto	l2399
  2359                           
  2360                           ;Key.c: 103: {
  2361                           ;Key.c: 104: USBFlag=1;
  2362  0203  15F1               	bsf	_USBFlag/(0+8),_USBFlag& (0+7)
  2363                           
  2364                           ;Key.c: 105: LockSta.LockFlag=0;
  2365  0204  132B               	bcf	_LockSta,6
  2366                           
  2367                           ;Key.c: 106: }
  2368  0205  0008               	return
  2369  0206                     l2399:	
  2370                           
  2371                           ;Key.c: 107: else if(!USBLink)
  2372  0206  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2373                           
  2374                           ;Key.c: 108: {
  2375                           ;Key.c: 109: USBFlag=0;
  2376  0207  11F1               	bcf	_USBFlag/(0+8),_USBFlag& (0+7)
  2377  0208  0008               	return
  2378  0209                     __end_of_KeyScan:	
  2379  0209                     PL26:	
  2380  0209  0AA9               	incf	_KeyCnt,f
  2381  020A  1903               	skipnz
  2382  020B  0AAA               	incf	_KeyCnt+1,f
  2383  020C  3000               	movlw	0
  2384  020D  022A               	subwf	_KeyCnt+1,w
  2385  020E  0008               	return
  2386  020F                     __end_ofPL26:	
  2387                           
  2388                           	psect	text10
  2389  07A3                     __ptext10:	
  2390 ;; *************** function _DisplayPro *****************
  2391 ;; Defined at:
  2392 ;;		line 144 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      void 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 300/0
  2403 ;;		On exit  : B00/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1
  2406 ;;      Params:         0       0       0
  2407 ;;      Locals:         0       0       0
  2408 ;;      Temps:          0       0       0
  2409 ;;      Totals:         0       0       0
  2410 ;;Total ram usage:        0 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    4
  2413 ;; This function calls:
  2414 ;;		_DisplayIcon
  2415 ;;		_ErrPro
  2416 ;;		_LockPro
  2417 ;;		_USBLedPro
  2418 ;;		_WorkLedPro
  2419 ;; This function is called by:
  2420 ;;		_Apply
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _DisplayPro
  2426  07A3                     _DisplayPro:	
  2427                           
  2428                           ;LED.c: 146: LedIndex=0;
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _DisplayPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2432  07A3  1683               	bsf	3,5	;RP0=1, select bank1
  2433  07A4  01D9               	clrf	_LedIndex^(0+128)
  2434  07A5  01DA               	clrf	(_LedIndex+1)^(0+128)
  2435                           
  2436                           ;LED.c: 147: WorkLedPro();
  2437  07A6  237B               	fcall	_WorkLedPro
  2438                           
  2439                           ;LED.c: 148: USBLedPro();
  2440  07A7  2407               	fcall	_USBLedPro
  2441                           
  2442                           ;LED.c: 149: LockPro();
  2443  07A8  24D7               	fcall	_LockPro
  2444                           
  2445                           ;LED.c: 150: ErrPro();
  2446  07A9  2762               	fcall	_ErrPro
  2447                           
  2448                           ;LED.c: 151: DisplayIcon(LedIndex);
  2449  07AA  1683               	bsf	3,5	;RP0=1, select bank1
  2450  07AB  085A               	movf	(_LedIndex+1)^(0+128),w
  2451  07AC  00F6               	movwf	DisplayIcon@index+1
  2452  07AD  0859               	movf	_LedIndex^(0+128),w
  2453  07AE  00F5               	movwf	DisplayIcon@index
  2454  07AF  2DAE               	ljmp	l6374
  2455  07B0                     __end_of_DisplayPro:	
  2456                           
  2457                           	psect	text11
  2458  037B                     __ptext11:	
  2459 ;; *************** function _WorkLedPro *****************
  2460 ;; Defined at:
  2461 ;;		line 192 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 300/100
  2472 ;;		On exit  : 200/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1
  2475 ;;      Params:         0       0       0
  2476 ;;      Locals:         0       0       0
  2477 ;;      Temps:          0       2       0
  2478 ;;      Totals:         0       2       0
  2479 ;;Total ram usage:        2 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    3
  2482 ;; This function calls:
  2483 ;;		___bmul
  2484 ;;		___lbdiv
  2485 ;;		___lbmod
  2486 ;; This function is called by:
  2487 ;;		_DisplayPro
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           
  2492                           ;psect for function _WorkLedPro
  2493  037B                     _WorkLedPro:	
  2494                           
  2495                           ;LED.c: 194: static char LedSwitchCnt=0;
  2496                           ;LED.c: 195: static bit LedSwitchFlag=0;
  2497                           ;LED.c: 196: static char index=0;
  2498                           ;LED.c: 197: static unsigned char cnt=0;
  2499                           ;LED.c: 198: static bit dir=0;
  2500                           ;LED.c: 199: if(WorkFlag&&!LockSta.LockStart&&!OnOffFlag&&!LockSta.LockFlag)
  2501                           
  2502                           ;incstack = 0
  2503                           ; Regs used in _WorkLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2504  037B  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2505  037C  2BA5               	goto	l3042
  2506  037D  1283               	bcf	3,5	;RP0=0, select bank0
  2507  037E  1C2B               	btfss	_LockSta,0
  2508  037F  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2509  0380  2BA5               	goto	l3042
  2510  0381  1B2B               	btfsc	_LockSta,6
  2511  0382  2BA5               	goto	l3042
  2512                           
  2513                           ;LED.c: 200: {
  2514                           ;LED.c: 201: if(BatPercent<=10)
  2515  0383  300B               	movlw	11
  2516  0384  0246               	subwf	_BatPercent,w
  2517  0385  1803               	skipnc
  2518  0386  2B90               	goto	l6412
  2519  0387  3028               	movlw	40
  2520                           
  2521                           ;LED.c: 202: {
  2522                           ;LED.c: 203: LedSwitchCnt++;
  2523  0388  0AB7               	incf	WorkLedPro@LedSwitchCnt,f
  2524                           
  2525                           ;LED.c: 204: if(LedSwitchCnt>=40)
  2526  0389  0237               	subwf	WorkLedPro@LedSwitchCnt,w
  2527  038A  1C03               	skipc
  2528  038B  2B92               	goto	l6416
  2529  038C  3008               	movlw	(0+1) shl (WorkLedPro@LedSwitchFlag& (0+7))
  2530                           
  2531                           ;LED.c: 205: {
  2532                           ;LED.c: 206: LedSwitchCnt=0;
  2533  038D  01B7               	clrf	WorkLedPro@LedSwitchCnt
  2534                           
  2535                           ;LED.c: 207: LedSwitchFlag=!LedSwitchFlag;
  2536  038E  06F0               	xorwf	WorkLedPro@LedSwitchFlag/(0+8),f
  2537  038F  2B92               	goto	l6416
  2538  0390                     l6412:	
  2539                           
  2540                           ;LED.c: 210: else
  2541                           ;LED.c: 211: {
  2542                           ;LED.c: 212: LedSwitchCnt=0;
  2543  0390  01B7               	clrf	WorkLedPro@LedSwitchCnt
  2544                           
  2545                           ;LED.c: 213: LedSwitchFlag=1;
  2546  0391  15F0               	bsf	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2547  0392                     l6416:	
  2548                           
  2549                           ;LED.c: 214: }
  2550                           ;LED.c: 215: if(LedSwitchFlag)
  2551  0392  1DF0               	btfss	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2552  0393  0008               	return
  2553                           
  2554                           ;LED.c: 216: {
  2555                           ;LED.c: 217: LedIndex|=NumbArr[BatPercent/10];
  2556  0394  300A               	movlw	10
  2557  0395  00F5               	movwf	___lbdiv@divisor
  2558  0396  0846               	movf	_BatPercent,w
  2559  0397  26E4               	fcall	___lbdiv
  2560  0398  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2561  0399  0084               	movwf	4
  2562  039A  1383               	bcf	3,7	;select IRP bank1
  2563  039B  0800               	movf	0,w
  2564  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2565  039D  04D9               	iorwf	_LedIndex^(0+128),f
  2566                           
  2567                           ;LED.c: 218: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2568  039E  300A               	movlw	10
  2569  039F  00F5               	movwf	___lbmod@divisor
  2570  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2571  03A1  0846               	movf	_BatPercent,w
  2572  03A2  26C8               	fcall	___lbmod
  2573  03A3  23E3               	fcall	PL2	;call to abstracted procedure
  2574  03A4  0008               	return
  2575  03A5                     l3042:	
  2576                           
  2577                           ;LED.c: 221: else if(OnOffFlag)
  2578  03A5  1FF0               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2579  03A6  0008               	return
  2580  03A7  3028               	movlw	40
  2581                           
  2582                           ;LED.c: 222: {
  2583                           ;LED.c: 223: cnt++;
  2584  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2585  03A9  0AB5               	incf	WorkLedPro@cnt,f
  2586                           
  2587                           ;LED.c: 224: if(cnt>=40)
  2588  03AA  0235               	subwf	WorkLedPro@cnt,w
  2589  03AB  1C03               	skipc
  2590  03AC  2BBB               	goto	l6444
  2591  03AD  3007               	movlw	7
  2592                           
  2593                           ;LED.c: 225: {
  2594                           ;LED.c: 226: cnt=0;
  2595  03AE  01B5               	clrf	WorkLedPro@cnt
  2596                           
  2597                           ;LED.c: 227: index++;
  2598  03AF  0AB6               	incf	WorkLedPro@index,f
  2599                           
  2600                           ;LED.c: 228: if(index>=7)
  2601  03B0  0236               	subwf	WorkLedPro@index,w
  2602  03B1  1C03               	skipc
  2603  03B2  2BBB               	goto	l6444
  2604                           
  2605                           ;LED.c: 229: {
  2606                           ;LED.c: 230: if(dir)
  2607  03B3  1D70               	btfss	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2608  03B4  2BB8               	goto	l6440
  2609                           
  2610                           ;LED.c: 231: {
  2611                           ;LED.c: 232: OnOffFlag=0;
  2612  03B5  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2613                           
  2614                           ;LED.c: 233: WorkMin=0;
  2615  03B6  01FA               	clrf	_WorkMin
  2616  03B7  0008               	return
  2617  03B8                     l6440:	
  2618                           
  2619                           ;LED.c: 235: }
  2620                           ;LED.c: 236: dir=!dir;
  2621  03B8  3004               	movlw	(0+1) shl (WorkLedPro@dir& (0+7))
  2622  03B9  06F0               	xorwf	WorkLedPro@dir/(0+8),f
  2623                           
  2624                           ;LED.c: 237: index=0;
  2625  03BA  01B6               	clrf	WorkLedPro@index
  2626  03BB                     l6444:	
  2627                           
  2628                           ;LED.c: 238: }
  2629                           ;LED.c: 239: }
  2630                           ;LED.c: 240: if(!dir)
  2631  03BB  1970               	btfsc	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2632  03BC  2BCA               	goto	l6452
  2633                           
  2634                           ;LED.c: 241: {
  2635                           ;LED.c: 242: LedIndex=NumbArr[BatPercent/10];
  2636  03BD  300A               	movlw	10
  2637  03BE  00F5               	movwf	___lbdiv@divisor
  2638  03BF  0846               	movf	_BatPercent,w
  2639  03C0  26E4               	fcall	___lbdiv
  2640                           
  2641                           ;LED.c: 243: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2642  03C1  2462               	fcall	PL6	;call to abstracted procedure
  2643  03C2  26C8               	fcall	___lbmod
  2644  03C3  23E3               	fcall	PL2	;call to abstracted procedure
  2645                           
  2646                           ;LED.c: 244: LedIndex&=~OffHideNumbArr[index];
  2647  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2648  03C5  1003               	clrc
  2649  03C6  0D36               	rlf	WorkLedPro@index,w
  2650  03C7  3EB0               	addlw	(low (_OffHideNumbArr| 0))& (0+255)
  2651  03C8  0084               	movwf	4
  2652                           
  2653                           ;LED.c: 245: }
  2654  03C9  2BF8               	ljmp	PL10	;call to abstracted procedure
  2655  03CA                     l6452:	
  2656                           
  2657                           ;LED.c: 246: else
  2658                           ;LED.c: 247: {
  2659                           ;LED.c: 248: LedIndex=NumbArr[WorkMin/10];
  2660  03CA  300A               	movlw	10
  2661  03CB  00F5               	movwf	___lbdiv@divisor
  2662  03CC  087A               	movf	_WorkMin,w
  2663  03CD  26E4               	fcall	___lbdiv
  2664  03CE  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2665  03CF  0084               	movwf	4
  2666  03D0  1383               	bcf	3,7	;select IRP bank1
  2667  03D1  0800               	movf	0,w
  2668  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  2669  03D3  00D9               	movwf	_LedIndex^(0+128)
  2670  03D4  300A               	movlw	10
  2671  03D5  01DA               	clrf	(_LedIndex+1)^(0+128)
  2672                           
  2673                           ;LED.c: 249: LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
  2674  03D6  00F5               	movwf	___lbmod@divisor
  2675  03D7  087A               	movf	_WorkMin,w
  2676  03D8  26C8               	fcall	___lbmod
  2677  03D9  23E3               	fcall	PL2	;call to abstracted procedure
  2678                           
  2679                           ;LED.c: 250: LedIndex&=~OffHideNumbArr[6-index];
  2680  03DA  30FE               	movlw	254
  2681  03DB  00F5               	movwf	___bmul@multiplicand
  2682  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2683  03DD  0836               	movf	WorkLedPro@index,w
  2684  03DE  2795               	fcall	___bmul
  2685  03DF  3EBC               	addlw	(low ((_OffHideNumbArr| 0+12)))& (0+255)
  2686  03E0  0084               	movwf	4
  2687  03E1  1383               	bcf	3,7	;select IRP bank1
  2688  03E2  2BF8               	ljmp	PL10	;call to abstracted procedure
  2689  03E3                     __end_of_WorkLedPro:	
  2690  03E3                     PL2:	
  2691  03E3  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2692  03E4  0084               	movwf	4
  2693  03E5  0800               	movf	0,w
  2694  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2695  03E7  00CD               	movwf	??_WorkLedPro
  2696  03E8  3007               	movlw	7
  2697  03E9  01CE               	clrf	??_WorkLedPro+1
  2698  03EA  00FF               	movwf	127
  2699  03EB                     u3895:	
  2700  03EB  1003               	clrc
  2701  03EC  0DCD               	rlf	??_WorkLedPro,f
  2702  03ED  0DCE               	rlf	??_WorkLedPro+1,f
  2703  03EE  0BFF               	decfsz	127,f
  2704  03EF  2BEB               	goto	u3895
  2705  03F0  084D               	movf	??_WorkLedPro,w
  2706  03F1  1683               	bsf	3,5	;RP0=1, select bank1
  2707  03F2  04D9               	iorwf	_LedIndex^(0+128),f
  2708  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2709  03F4  084E               	movf	??_WorkLedPro+1,w
  2710  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  2711  03F6  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2712  03F7  0008               	return
  2713  03F8                     __end_ofPL2:	
  2714  03F8                     PL10:	
  2715  03F8  0800               	movf	0,w
  2716  03F9  00CD               	movwf	??_WorkLedPro
  2717  03FA  0A84               	incf	4,f
  2718  03FB  0800               	movf	0,w
  2719  03FC  00CE               	movwf	??_WorkLedPro+1
  2720  03FD  09CD               	comf	??_WorkLedPro,f
  2721  03FE  09CE               	comf	??_WorkLedPro+1,f
  2722  03FF  084D               	movf	??_WorkLedPro,w
  2723  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2724  0401  05D9               	andwf	_LedIndex^(0+128),f
  2725  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0403  084E               	movf	??_WorkLedPro+1,w
  2727  0404  1683               	bsf	3,5	;RP0=1, select bank1
  2728  0405  05DA               	andwf	(_LedIndex+1)^(0+128),f
  2729  0406  0008               	return
  2730  0407                     __end_ofPL10:	
  2731                           
  2732                           	psect	text12
  2733  0795                     __ptext12:	
  2734 ;; *************** function ___bmul *****************
  2735 ;; Defined at:
  2736 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  multiplier      1    wreg     unsigned char 
  2739 ;;  multiplicand    1    3[COMMON] unsigned char 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  multiplier      1    5[COMMON] unsigned char 
  2742 ;;  product         1    4[COMMON] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      unsigned char 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0
  2747 ;; Tracked objects:
  2748 ;;		On entry : 300/0
  2749 ;;		On exit  : 300/0
  2750 ;;		Unchanged: 300/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1
  2752 ;;      Params:         1       0       0
  2753 ;;      Locals:         2       0       0
  2754 ;;      Temps:          0       0       0
  2755 ;;      Totals:         3       0       0
  2756 ;;Total ram usage:        3 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    2
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_Sec1sPro
  2763 ;;		_WorkLedPro
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function ___bmul
  2769  0795                     ___bmul:	
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2773                           ;___bmul@multiplier stored from wreg
  2774  0795  00F7               	movwf	___bmul@multiplier
  2775  0796  01F6               	clrf	___bmul@product
  2776  0797                     l5486:	
  2777  0797  0875               	movf	___bmul@multiplicand,w
  2778  0798  1877               	btfsc	___bmul@multiplier,0
  2779  0799  07F6               	addwf	___bmul@product,f
  2780  079A  1003               	clrc
  2781  079B  0DF5               	rlf	___bmul@multiplicand,f
  2782  079C  1003               	clrc
  2783  079D  0CF7               	rrf	___bmul@multiplier,f
  2784  079E  0877               	movf	___bmul@multiplier,w
  2785  079F  1D03               	btfss	3,2
  2786  07A0  2F97               	goto	l5486
  2787  07A1  0876               	movf	___bmul@product,w
  2788  07A2  0008               	return
  2789  07A3                     __end_of___bmul:	
  2790                           
  2791                           	psect	text13
  2792  0407                     __ptext13:	
  2793 ;; *************** function _USBLedPro *****************
  2794 ;; Defined at:
  2795 ;;		line 154 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 200/100
  2806 ;;		On exit  : 200/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1
  2809 ;;      Params:         0       0       0
  2810 ;;      Locals:         0       0       0
  2811 ;;      Temps:          0       3       0
  2812 ;;      Totals:         0       3       0
  2813 ;;Total ram usage:        3 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    3
  2816 ;; This function calls:
  2817 ;;		___lbdiv
  2818 ;;		___lbmod
  2819 ;; This function is called by:
  2820 ;;		_DisplayPro
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           
  2825                           ;psect for function _USBLedPro
  2826  0407                     _USBLedPro:	
  2827                           
  2828                           ;LED.c: 156: static unsigned char index=0;
  2829                           ;LED.c: 157: static unsigned char cnt=0;
  2830                           ;LED.c: 159: if(USBFlag&&!WorkFlag&&!OnOffFlag)
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _USBLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2834  0407  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2835  0408  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2836  0409  2C5E               	goto	l6490
  2837  040A  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2838  040B  2C5E               	goto	l6490
  2839  040C  3028               	movlw	40
  2840                           
  2841                           ;LED.c: 160: {
  2842                           ;LED.c: 161: cnt++;
  2843  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2844  040E  0AB8               	incf	USBLedPro@cnt,f
  2845                           
  2846                           ;LED.c: 162: if(cnt>=40)
  2847  040F  0238               	subwf	USBLedPro@cnt,w
  2848  0410  1C03               	skipc
  2849  0411  2C18               	goto	l6476
  2850  0412  300B               	movlw	11
  2851                           
  2852                           ;LED.c: 163: {
  2853                           ;LED.c: 164: cnt=0;
  2854  0413  01B8               	clrf	USBLedPro@cnt
  2855                           
  2856                           ;LED.c: 165: index++;
  2857  0414  0AB9               	incf	USBLedPro@index,f
  2858                           
  2859                           ;LED.c: 166: if(index>=11)
  2860  0415  0239               	subwf	USBLedPro@index,w
  2861  0416  1803               	btfsc	3,0
  2862                           
  2863                           ;LED.c: 167: {
  2864                           ;LED.c: 168: index=0;
  2865  0417  01B9               	clrf	USBLedPro@index
  2866  0418                     l6476:	
  2867                           
  2868                           ;LED.c: 169: }
  2869                           ;LED.c: 170: }
  2870                           ;LED.c: 171: if(BatPercent<99)
  2871  0418  3063               	movlw	99
  2872  0419  0246               	subwf	_BatPercent,w
  2873                           
  2874                           ;LED.c: 172: {
  2875                           ;LED.c: 173: LedIndex=NumbArr[BatPercent/10];
  2876  041A  300A               	movlw	10
  2877  041B  1803               	skipnc
  2878  041C  2C47               	goto	L9
  2879  041D  00F5               	movwf	___lbdiv@divisor
  2880  041E  0846               	movf	_BatPercent,w
  2881  041F  26E4               	fcall	___lbdiv
  2882                           
  2883                           ;LED.c: 174: LedIndex|=((unsigned int)NumbArr[BatPercent%10]&~HideNumbArr[index])<<7;
  2884  0420  2462               	fcall	PL6	;call to abstracted procedure
  2885  0421  26C8               	fcall	___lbmod
  2886  0422  246E               	fcall	PL32	;call to abstracted procedure
  2887  0423  0839               	movf	USBLedPro@index,w
  2888  0424  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2889  0425  0084               	movwf	4
  2890  0426  0900               	comf	0,w
  2891  0427  054D               	andwf	??_USBLedPro,w
  2892  0428  00CE               	movwf	??_USBLedPro+1
  2893  0429  3007               	movlw	7
  2894  042A  01CF               	clrf	??_USBLedPro+2
  2895  042B  00FF               	movwf	127
  2896  042C                     u4035:	
  2897  042C  1003               	clrc
  2898  042D  0DCE               	rlf	??_USBLedPro+1,f
  2899  042E  0DCF               	rlf	??_USBLedPro+2,f
  2900  042F  0BFF               	decfsz	127,f
  2901  0430  2C2C               	goto	u4035
  2902  0431  084E               	movf	??_USBLedPro+1,w
  2903  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2904  0433  04D9               	iorwf	_LedIndex^(0+128),f
  2905  0434  1283               	bcf	3,5	;RP0=0, select bank0
  2906  0435  084F               	movf	??_USBLedPro+2,w
  2907  0436  1683               	bsf	3,5	;RP0=1, select bank1
  2908  0437  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2909                           
  2910                           ;LED.c: 175: LedIndex&=~HideNumbArr[index];
  2911  0438  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0439  0839               	movf	USBLedPro@index,w
  2913  043A  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2914  043B  0084               	movwf	4
  2915  043C  0900               	comf	0,w
  2916  043D  00CD               	movwf	??_USBLedPro
  2917  043E  01CE               	clrf	??_USBLedPro+1
  2918  043F  09CE               	comf	??_USBLedPro+1,f
  2919  0440  1683               	bsf	3,5	;RP0=1, select bank1
  2920  0441  05D9               	andwf	_LedIndex^(0+128),f
  2921  0442  1283               	bcf	3,5	;RP0=0, select bank0
  2922  0443  084E               	movf	??_USBLedPro+1,w
  2923  0444  1683               	bsf	3,5	;RP0=1, select bank1
  2924  0445  05DA               	andwf	(_LedIndex+1)^(0+128),f
  2925                           
  2926                           ;LED.c: 176: }
  2927  0446  0008               	return
  2928  0447                     L9:	
  2929                           
  2930                           ;LED.c: 177: else
  2931                           ;LED.c: 178: {
  2932                           ;LED.c: 179: index=0;
  2933  0447  01B9               	clrf	USBLedPro@index
  2934                           
  2935                           ;LED.c: 180: LedIndex=NumbArr[BatPercent/10];
  2936  0448  00F5               	movwf	___lbdiv@divisor
  2937  0449  0846               	movf	_BatPercent,w
  2938  044A  26E4               	fcall	___lbdiv
  2939                           
  2940                           ;LED.c: 181: LedIndex|=NumbArr[BatPercent%10]<<7;
  2941  044B  2462               	fcall	PL6	;call to abstracted procedure
  2942  044C  26C8               	fcall	___lbmod
  2943  044D  246E               	fcall	PL32	;call to abstracted procedure
  2944  044E  3007               	movlw	7
  2945  044F  01CE               	clrf	??_USBLedPro+1
  2946  0450  00FF               	movwf	127
  2947  0451                     u4045:	
  2948  0451  1003               	clrc
  2949  0452  0DCD               	rlf	??_USBLedPro,f
  2950  0453  0DCE               	rlf	??_USBLedPro+1,f
  2951  0454  0BFF               	decfsz	127,f
  2952  0455  2C51               	goto	u4045
  2953  0456  084D               	movf	??_USBLedPro,w
  2954  0457  1683               	bsf	3,5	;RP0=1, select bank1
  2955  0458  04D9               	iorwf	_LedIndex^(0+128),f
  2956  0459  1283               	bcf	3,5	;RP0=0, select bank0
  2957  045A  084E               	movf	??_USBLedPro+1,w
  2958  045B  1683               	bsf	3,5	;RP0=1, select bank1
  2959  045C  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2960  045D  0008               	return
  2961  045E                     l6490:	
  2962                           
  2963                           ;LED.c: 185: else
  2964                           ;LED.c: 186: {
  2965                           ;LED.c: 187: index=0;
  2966  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2967  045F  01B9               	clrf	USBLedPro@index
  2968                           
  2969                           ;LED.c: 188: cnt=0;
  2970  0460  01B8               	clrf	USBLedPro@cnt
  2971  0461  0008               	return
  2972  0462                     __end_of_USBLedPro:	
  2973  0462                     PL6:	
  2974  0462  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2975  0463  0084               	movwf	4
  2976  0464  1383               	bcf	3,7	;select IRP bank1
  2977  0465  0800               	movf	0,w
  2978  0466  1683               	bsf	3,5	;RP0=1, select bank1
  2979  0467  00D9               	movwf	_LedIndex^(0+128)
  2980  0468  300A               	movlw	10
  2981  0469  01DA               	clrf	(_LedIndex+1)^(0+128)
  2982  046A  00F5               	movwf	___lbmod@divisor
  2983  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2984  046C  0846               	movf	_BatPercent,w
  2985  046D  0008               	return
  2986  046E                     __end_ofPL6:	
  2987  046E                     PL32:	
  2988  046E  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2989  046F  0084               	movwf	4
  2990  0470  0800               	movf	0,w
  2991  0471  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0472  00CD               	movwf	??_USBLedPro
  2993  0473  0008               	return
  2994  0474                     __end_ofPL32:	
  2995                           
  2996                           	psect	text14
  2997  06C8                     __ptext14:	
  2998 ;; *************** function ___lbmod *****************
  2999 ;; Defined at:
  3000 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  dividend        1    wreg     unsigned char 
  3003 ;;  divisor         1    3[COMMON] unsigned char 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  dividend        1    5[COMMON] unsigned char 
  3006 ;;  rem             1    7[COMMON] unsigned char 
  3007 ;;  counter         1    6[COMMON] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      unsigned char 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : A00/0
  3014 ;;		On exit  : A00/0
  3015 ;;		Unchanged: A00/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1
  3017 ;;      Params:         1       0       0
  3018 ;;      Locals:         3       0       0
  3019 ;;      Temps:          1       0       0
  3020 ;;      Totals:         5       0       0
  3021 ;;Total ram usage:        5 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    2
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_WorkLedPro
  3028 ;;		_USBLedPro
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function ___lbmod
  3034  06C8                     ___lbmod:	
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3038                           ;___lbmod@dividend stored from wreg
  3039  06C8  00F7               	movwf	___lbmod@dividend
  3040  06C9  3008               	movlw	8
  3041  06CA  00F8               	movwf	___lbmod@counter
  3042  06CB  01F9               	clrf	___lbmod@rem
  3043  06CC                     l5526:	
  3044  06CC  0877               	movf	___lbmod@dividend,w
  3045  06CD  00F6               	movwf	??___lbmod
  3046  06CE  3007               	movlw	7
  3047  06CF  1003               	clrc
  3048  06D0                     L10:	
  3049  06D0  0CF6               	rrf	??___lbmod,f
  3050  06D1  3EFF               	addlw	-1
  3051  06D2  1003               	clrc
  3052  06D3  1D03               	skipz
  3053  06D4  2ED0               	goto	L10
  3054  06D5  0D79               	rlf	___lbmod@rem,w
  3055  06D6  0476               	iorwf	??___lbmod,w
  3056  06D7  00F9               	movwf	___lbmod@rem
  3057  06D8  1003               	clrc
  3058  06D9  0DF7               	rlf	___lbmod@dividend,f
  3059  06DA  0875               	movf	___lbmod@divisor,w
  3060  06DB  0279               	subwf	___lbmod@rem,w
  3061  06DC  1C03               	skipc
  3062  06DD  2EE0               	goto	l5534
  3063  06DE  0875               	movf	___lbmod@divisor,w
  3064  06DF  02F9               	subwf	___lbmod@rem,f
  3065  06E0                     l5534:	
  3066  06E0  0BF8               	decfsz	___lbmod@counter,f
  3067  06E1  2ECC               	goto	l5526
  3068  06E2  0879               	movf	___lbmod@rem,w
  3069  06E3  0008               	return
  3070  06E4                     __end_of___lbmod:	
  3071                           
  3072                           	psect	text15
  3073  06E4                     __ptext15:	
  3074 ;; *************** function ___lbdiv *****************
  3075 ;; Defined at:
  3076 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  dividend        1    wreg     unsigned char 
  3079 ;;  divisor         1    3[COMMON] unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  dividend        1    4[COMMON] unsigned char 
  3082 ;;  quotient        1    6[COMMON] unsigned char 
  3083 ;;  counter         1    5[COMMON] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      unsigned char 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0
  3088 ;; Tracked objects:
  3089 ;;		On entry : 300/0
  3090 ;;		On exit  : 300/0
  3091 ;;		Unchanged: 300/0
  3092 ;; Data sizes:     COMMON   BANK0   BANK1
  3093 ;;      Params:         1       0       0
  3094 ;;      Locals:         3       0       0
  3095 ;;      Temps:          0       0       0
  3096 ;;      Totals:         4       0       0
  3097 ;;Total ram usage:        4 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    2
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_WorkLedPro
  3104 ;;		_USBLedPro
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function ___lbdiv
  3110  06E4                     ___lbdiv:	
  3111                           
  3112                           ;incstack = 0
  3113                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3114                           ;___lbdiv@dividend stored from wreg
  3115  06E4  00F6               	movwf	___lbdiv@dividend
  3116  06E5  01F8               	clrf	___lbdiv@quotient
  3117  06E6  0875               	movf	___lbdiv@divisor,w
  3118  06E7  1903               	btfsc	3,2
  3119  06E8  2EFD               	goto	l5518
  3120  06E9  01F7               	clrf	___lbdiv@counter
  3121  06EA                     l5504:	
  3122  06EA  0AF7               	incf	___lbdiv@counter,f
  3123  06EB  1BF5               	btfsc	___lbdiv@divisor,7
  3124  06EC  2EF0               	goto	l4478
  3125  06ED  1003               	clrc
  3126  06EE  0DF5               	rlf	___lbdiv@divisor,f
  3127  06EF  2EEA               	goto	l5504
  3128  06F0                     l4478:	
  3129  06F0  1003               	clrc
  3130  06F1  0DF8               	rlf	___lbdiv@quotient,f
  3131  06F2  0875               	movf	___lbdiv@divisor,w
  3132  06F3  0276               	subwf	___lbdiv@dividend,w
  3133  06F4  1C03               	skipc
  3134  06F5  2EFA               	goto	L11
  3135  06F6  0875               	movf	___lbdiv@divisor,w
  3136  06F7  02F6               	subwf	___lbdiv@dividend,f
  3137  06F8  1478               	bsf	___lbdiv@quotient,0
  3138  06F9  1003               	clrc
  3139  06FA                     L11:	
  3140  06FA  0CF5               	rrf	___lbdiv@divisor,f
  3141  06FB  0BF7               	decfsz	___lbdiv@counter,f
  3142  06FC  2EF0               	goto	l4478
  3143  06FD                     l5518:	
  3144  06FD  0878               	movf	___lbdiv@quotient,w
  3145  06FE  0008               	return
  3146  06FF                     __end_of___lbdiv:	
  3147                           
  3148                           	psect	text16
  3149  04D7                     __ptext16:	
  3150 ;; *************** function _LockPro *****************
  3151 ;; Defined at:
  3152 ;;		line 255 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;		None
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3161 ;; Tracked objects:
  3162 ;;		On entry : 200/100
  3163 ;;		On exit  : 200/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMMON   BANK0   BANK1
  3166 ;;      Params:         0       0       0
  3167 ;;      Locals:         0       0       0
  3168 ;;      Temps:          2       0       0
  3169 ;;      Totals:         2       0       0
  3170 ;;Total ram usage:        2 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    2
  3173 ;; This function calls:
  3174 ;;		Nothing
  3175 ;; This function is called by:
  3176 ;;		_DisplayPro
  3177 ;; This function uses a non-reentrant model
  3178 ;;
  3179                           
  3180                           
  3181                           ;psect for function _LockPro
  3182  04D7                     _LockPro:	
  3183                           
  3184                           ;LED.c: 257: static unsigned char SwitchCnt=0,LockSwitchCnt=0;
  3185                           ;LED.c: 258: static unsigned char Ledcnt=0;
  3186                           ;LED.c: 259: static bit LedSwitchFlag=0;
  3187                           ;LED.c: 260: if(!USBFlag)
  3188                           
  3189                           ;incstack = 0
  3190                           ; Regs used in _LockPro: [wreg-fsr0h+status,2+status,0+btemp+1]
  3191  04D7  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3192  04D8  0008               	return
  3193                           
  3194                           ;LED.c: 261: {
  3195                           ;LED.c: 262: if(LockSta.LockStart||LockSta.UnlockStart)
  3196  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3197  04DA  182B               	btfsc	_LockSta,0
  3198  04DB  2CDE               	goto	l5740
  3199  04DC  1DAB               	btfss	_LockSta,3
  3200  04DD  2D06               	goto	l5758
  3201  04DE                     l5740:	
  3202  04DE  3064               	movlw	100
  3203                           
  3204                           ;LED.c: 263: {
  3205                           ;LED.c: 264: SwitchCnt++;
  3206  04DF  0AB4               	incf	LockPro@SwitchCnt,f
  3207                           
  3208                           ;LED.c: 265: if(SwitchCnt>=100)
  3209  04E0  0234               	subwf	LockPro@SwitchCnt,w
  3210  04E1  1C03               	skipc
  3211  04E2  2CE8               	goto	l5750
  3212                           
  3213                           ;LED.c: 266: {
  3214                           ;LED.c: 267: SwitchCnt=0;
  3215  04E3  01B4               	clrf	LockPro@SwitchCnt
  3216                           
  3217                           ;LED.c: 268: if(LockNumb>0)
  3218  04E4  083C               	movf	_LockNumb,w
  3219  04E5  1903               	btfsc	3,2
  3220  04E6  2CE8               	goto	l5750
  3221                           
  3222                           ;LED.c: 269: {
  3223                           ;LED.c: 270: LockNumb--;
  3224  04E7  03BC               	decf	_LockNumb,f
  3225  04E8                     l5750:	
  3226                           
  3227                           ;LED.c: 271: }
  3228                           ;LED.c: 272: }
  3229                           ;LED.c: 273: LedIndex=NumbArr[0];
  3230  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  3231  04E9  0849               	movf	_NumbArr^(0+128),w
  3232  04EA  00D9               	movwf	_LedIndex^(0+128)
  3233  04EB  01DA               	clrf	(_LedIndex+1)^(0+128)
  3234                           
  3235                           ;LED.c: 274: LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
  3236  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3237  04ED  083C               	movf	_LockNumb,w
  3238  04EE  3ECA               	addlw	(low ((_NumbArr| 0+1)))& (0+255)
  3239  04EF  0084               	movwf	4
  3240  04F0  1383               	bcf	3,7	;select IRP bank1
  3241  04F1  0800               	movf	0,w
  3242  04F2  00F5               	movwf	??_LockPro
  3243  04F3  3007               	movlw	7
  3244  04F4  01F6               	clrf	??_LockPro+1
  3245  04F5  00FF               	movwf	127
  3246  04F6                     u2345:	
  3247  04F6  1003               	clrc
  3248  04F7  0DF5               	rlf	??_LockPro,f
  3249  04F8  0DF6               	rlf	??_LockPro+1,f
  3250  04F9  0BFF               	decfsz	127,f
  3251  04FA  2CF6               	goto	u2345
  3252  04FB  0875               	movf	??_LockPro,w
  3253  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  3254  04FD  04D9               	iorwf	_LedIndex^(0+128),f
  3255  04FE  0876               	movf	??_LockPro+1,w
  3256  04FF  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  3257                           
  3258                           ;LED.c: 275: if(LockSta.UnlockStart)
  3259  0500  1283               	bcf	3,5	;RP0=0, select bank0
  3260  0501  1DAB               	btfss	_LockSta,3
  3261  0502  2D07               	goto	l5760
  3262                           
  3263                           ;LED.c: 276: {
  3264                           ;LED.c: 277: LedIndex|=0x8000;
  3265  0503  1683               	bsf	3,5	;RP0=1, select bank1
  3266  0504  17DA               	bsf	(_LedIndex^(0+128)+1),7
  3267  0505  2D07               	goto	l5760
  3268  0506                     l5758:	
  3269                           
  3270                           ;LED.c: 280: else
  3271                           ;LED.c: 281: {
  3272                           ;LED.c: 282: SwitchCnt=0;
  3273  0506  01B4               	clrf	LockPro@SwitchCnt
  3274  0507                     l5760:	
  3275                           
  3276                           ;LED.c: 283: }
  3277                           ;LED.c: 284: if(LockSta.LockEnd||LockSta.UnlockFail)
  3278  0507  1283               	bcf	3,5	;RP0=0, select bank0
  3279  0508  192B               	btfsc	_LockSta,2
  3280  0509  2D0C               	goto	l5764
  3281  050A  1E2B               	btfss	_LockSta,4
  3282  050B  2D21               	goto	l5782
  3283  050C                     l5764:	
  3284  050C  3023               	movlw	35
  3285                           
  3286                           ;LED.c: 285: {
  3287                           ;LED.c: 286: LockSwitchCnt++;
  3288  050D  0AB3               	incf	LockPro@LockSwitchCnt,f
  3289                           
  3290                           ;LED.c: 287: if(LockSwitchCnt>=35)
  3291  050E  0233               	subwf	LockPro@LockSwitchCnt,w
  3292  050F  1C03               	skipc
  3293  0510  2D1D               	goto	l3076
  3294  0511  3002               	movlw	(0+1) shl (LockPro@LedSwitchFlag& (0+7))
  3295                           
  3296                           ;LED.c: 288: {
  3297                           ;LED.c: 289: LockSwitchCnt=0;
  3298  0512  01B3               	clrf	LockPro@LockSwitchCnt
  3299                           
  3300                           ;LED.c: 290: LedSwitchFlag=!LedSwitchFlag;
  3301  0513  06F0               	xorwf	LockPro@LedSwitchFlag/(0+8),f
  3302                           
  3303                           ;LED.c: 291: if(!LedSwitchFlag)
  3304  0514  18F0               	btfsc	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3305  0515  2D1D               	goto	l3076
  3306  0516  3004               	movlw	4
  3307                           
  3308                           ;LED.c: 292: {
  3309                           ;LED.c: 293: Ledcnt++;
  3310  0517  0AB2               	incf	LockPro@Ledcnt,f
  3311                           
  3312                           ;LED.c: 294: if(Ledcnt>=4)
  3313  0518  0232               	subwf	LockPro@Ledcnt,w
  3314  0519  1C03               	skipc
  3315  051A  2D1D               	goto	l3076
  3316                           
  3317                           ;LED.c: 295: {
  3318                           ;LED.c: 296: LockSta.LockEnd=0;
  3319  051B  112B               	bcf	_LockSta,2
  3320                           
  3321                           ;LED.c: 297: LockSta.UnlockFail=0;
  3322  051C  122B               	bcf	_LockSta,4
  3323  051D                     l3076:	
  3324                           
  3325                           ;LED.c: 298: }
  3326                           ;LED.c: 299: }
  3327                           ;LED.c: 300: }
  3328                           ;LED.c: 301: if(LedSwitchFlag)
  3329  051D  1CF0               	btfss	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3330  051E  0008               	return
  3331                           
  3332                           ;LED.c: 302: {
  3333                           ;LED.c: 303: LedIndex=0x8000;
  3334  051F  3080               	movlw	128
  3335  0520  2F74               	ljmp	PL36	;call to abstracted procedure
  3336  0521                     l5782:	
  3337                           
  3338                           ;LED.c: 306: else
  3339                           ;LED.c: 307: {
  3340                           ;LED.c: 308: Ledcnt=0;
  3341  0521  01B2               	clrf	LockPro@Ledcnt
  3342                           
  3343                           ;LED.c: 309: LockSwitchCnt=0;
  3344  0522  01B3               	clrf	LockPro@LockSwitchCnt
  3345  0523  0008               	return
  3346  0524                     __end_of_LockPro:	
  3347                           
  3348                           	psect	text17
  3349  0762                     __ptext17:	
  3350 ;; *************** function _ErrPro *****************
  3351 ;; Defined at:
  3352 ;;		line 314 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;		None
  3355 ;; Auto vars:     Size  Location     Type
  3356 ;;		None
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, status,2, status,0
  3361 ;; Tracked objects:
  3362 ;;		On entry : 200/100
  3363 ;;		On exit  : 200/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMMON   BANK0   BANK1
  3366 ;;      Params:         0       0       0
  3367 ;;      Locals:         0       0       0
  3368 ;;      Temps:          0       0       0
  3369 ;;      Totals:         0       0       0
  3370 ;;Total ram usage:        0 bytes
  3371 ;; Hardware stack levels used:    1
  3372 ;; Hardware stack levels required when called:    2
  3373 ;; This function calls:
  3374 ;;		Nothing
  3375 ;; This function is called by:
  3376 ;;		_DisplayPro
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           
  3381                           ;psect for function _ErrPro
  3382  0762                     _ErrPro:	
  3383                           
  3384                           ;LED.c: 316: static unsigned char SwitchCnt=0;
  3385                           ;LED.c: 317: static bit LedSwitchFlag=0;
  3386                           ;LED.c: 318: if(IovFlag)
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in _ErrPro: [wreg+status,2+status,0]
  3390  0762  1E71               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  3391  0763  2F71               	goto	l5798
  3392  0764  3023               	movlw	35
  3393                           
  3394                           ;LED.c: 319: {
  3395                           ;LED.c: 320: SwitchCnt++;
  3396  0765  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0766  0AB1               	incf	ErrPro@SwitchCnt,f
  3398                           
  3399                           ;LED.c: 321: if(SwitchCnt>=35)
  3400  0767  0231               	subwf	ErrPro@SwitchCnt,w
  3401  0768  1C03               	skipc
  3402  0769  2F6D               	goto	l5794
  3403  076A  3001               	movlw	(0+1) shl (ErrPro@LedSwitchFlag& (0+7))
  3404                           
  3405                           ;LED.c: 322: {
  3406                           ;LED.c: 323: SwitchCnt=0;
  3407  076B  01B1               	clrf	ErrPro@SwitchCnt
  3408                           
  3409                           ;LED.c: 324: LedSwitchFlag=!LedSwitchFlag;
  3410  076C  06F0               	xorwf	ErrPro@LedSwitchFlag/(0+8),f
  3411  076D                     l5794:	
  3412                           
  3413                           ;LED.c: 326: }
  3414                           ;LED.c: 327: if(LedSwitchFlag)
  3415  076D  1C70               	btfss	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3416  076E  0008               	return
  3417                           
  3418                           ;LED.c: 328: {
  3419                           ;LED.c: 329: LedIndex=0x4000;
  3420  076F  3040               	movlw	64
  3421  0770  2F74               	ljmp	PL36	;call to abstracted procedure
  3422  0771                     l5798:	
  3423                           
  3424                           ;LED.c: 332: else
  3425                           ;LED.c: 333: {
  3426                           ;LED.c: 334: SwitchCnt=0;
  3427  0771  1283               	bcf	3,5	;RP0=0, select bank0
  3428  0772  01B1               	clrf	ErrPro@SwitchCnt
  3429  0773  0008               	return
  3430  0774                     __end_of_ErrPro:	
  3431  0774                     PL36:	
  3432  0774  1683               	bsf	3,5	;RP0=1, select bank1
  3433  0775  01D9               	clrf	_LedIndex^(0+128)
  3434  0776  00DA               	movwf	(_LedIndex^(0+128)+1)
  3435  0777  0008               	return
  3436  0778                     __end_ofPL36:	
  3437                           
  3438                           	psect	text18
  3439  05AE                     __ptext18:	
  3440 ;; *************** function _DisplayIcon *****************
  3441 ;; Defined at:
  3442 ;;		line 124 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  index           2    3[COMMON] unsigned int 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;  Mask            2    0[BANK0 ] unsigned int 
  3447 ;;  i               1    2[BANK0 ] unsigned char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3452 ;; Tracked objects:
  3453 ;;		On entry : 300/100
  3454 ;;		On exit  : B00/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1
  3457 ;;      Params:         2       0       0
  3458 ;;      Locals:         0       3       0
  3459 ;;      Temps:          2       0       0
  3460 ;;      Totals:         4       3       0
  3461 ;;Total ram usage:        7 bytes
  3462 ;; Hardware stack levels used:    1
  3463 ;; Hardware stack levels required when called:    2
  3464 ;; This function calls:
  3465 ;;		Nothing
  3466 ;; This function is called by:
  3467 ;;		_DisplayPro
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _DisplayIcon
  3473  05AE                     _DisplayIcon:	
  3474  05AE                     l6374:	
  3475                           ;incstack = 0
  3476                           ; Regs used in _DisplayIcon: [wreg-fsr0h+status,2+status,0+pclath]
  3477                           
  3478                           
  3479                           ;LED.c: 127: unsigned int Mask=0x01;
  3480  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3481  05AF  01CD               	clrf	DisplayIcon@Mask
  3482  05B0  0ACD               	incf	DisplayIcon@Mask,f
  3483  05B1  01CE               	clrf	DisplayIcon@Mask+1
  3484                           
  3485                           ;LED.c: 129: for(i=0;i<16;i++)
  3486  05B2  01CF               	clrf	DisplayIcon@i
  3487  05B3                     l6382:	
  3488                           
  3489                           ;LED.c: 130: {
  3490                           ;LED.c: 131: if(index&Mask)
  3491  05B3  084D               	movf	DisplayIcon@Mask,w
  3492  05B4  0575               	andwf	DisplayIcon@index,w
  3493  05B5  00F7               	movwf	??_DisplayIcon
  3494  05B6  084E               	movf	DisplayIcon@Mask+1,w
  3495  05B7  0576               	andwf	DisplayIcon@index+1,w
  3496  05B8  00F8               	movwf	??_DisplayIcon+1
  3497  05B9  0477               	iorwf	??_DisplayIcon,w
  3498                           
  3499                           ;LED.c: 132: {
  3500                           ;LED.c: 133: LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
  3501  05BA  3001               	movlw	1
  3502  05BB  00F7               	movwf	??_DisplayIcon
  3503  05BC  1903               	btfsc	3,2
  3504  05BD  2DC6               	goto	L12
  3505  05BE  25D7               	fcall	PL12	;call to abstracted procedure
  3506  05BF  25E4               	fcall	PL34	;call to abstracted procedure
  3507  05C0  274C               	fcall	stringdir
  3508  05C1  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3509  05C2  0084               	movwf	4
  3510  05C3  0878               	movf	??_DisplayIcon+1,w
  3511  05C4  0480               	iorwf	0,f
  3512                           
  3513                           ;LED.c: 134: }
  3514  05C5  2DCE               	goto	l6388
  3515  05C6                     L12:	
  3516                           ;LED.c: 135: else
  3517                           ;LED.c: 136: {
  3518                           ;LED.c: 137: LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
  3519                           
  3520  05C6  25D7               	fcall	PL12	;call to abstracted procedure
  3521  05C7  3AFF               	xorlw	255
  3522  05C8  25E4               	fcall	PL34	;call to abstracted procedure
  3523  05C9  274C               	fcall	stringdir
  3524  05CA  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3525  05CB  0084               	movwf	4
  3526  05CC  0878               	movf	??_DisplayIcon+1,w
  3527  05CD  0580               	andwf	0,f
  3528  05CE                     l6388:	
  3529  05CE  3010               	movlw	16
  3530                           
  3531                           ;LED.c: 138: }
  3532                           ;LED.c: 140: Mask<<=1;
  3533  05CF  1003               	clrc
  3534  05D0  0DCD               	rlf	DisplayIcon@Mask,f
  3535  05D1  0DCE               	rlf	DisplayIcon@Mask+1,f
  3536  05D2  0ACF               	incf	DisplayIcon@i,f
  3537  05D3  024F               	subwf	DisplayIcon@i,w
  3538  05D4  1803               	btfsc	3,0
  3539  05D5  0008               	return
  3540  05D6  2DB3               	goto	l6382
  3541  05D7                     __end_of_DisplayIcon:	
  3542  05D7                     PL12:	
  3543  05D7  084F               	movf	DisplayIcon@i,w
  3544  05D8  3EA0               	addlw	(low (_LEDSeg2| 0))& (0+255)
  3545  05D9  0084               	movwf	4
  3546  05DA  1383               	bcf	3,7	;select IRP bank1
  3547  05DB  0A00               	incf	0,w
  3548  05DC  2DDF               	goto	u3794
  3549  05DD                     u3795:	
  3550  05DD  1003               	clrc
  3551  05DE  0DF7               	rlf	??_DisplayIcon,f
  3552  05DF                     u3794:	
  3553  05DF  3EFF               	addlw	-1
  3554  05E0  1D03               	skipz
  3555  05E1  2DDD               	goto	u3795
  3556  05E2  0877               	movf	??_DisplayIcon,w
  3557  05E3  0008               	return
  3558  05E4                     __end_ofPL12:	
  3559  05E4                     PL34:	
  3560  05E4  00F8               	movwf	??_DisplayIcon+1
  3561  05E5  084F               	movf	DisplayIcon@i,w
  3562  05E6  3E01               	addlw	low ((_LEDSeg1-__stringbase)| (0+32768))
  3563  05E7  0084               	movwf	4
  3564  05E8  0008               	return
  3565  05E9                     __end_ofPL34:	
  3566                           
  3567                           	psect	text19
  3568  056C                     __ptext19:	
  3569 ;; *************** function _ADCPro *****************
  3570 ;; Defined at:
  3571 ;;		line 11 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 300/0
  3582 ;;		On exit  : 300/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMMON   BANK0   BANK1
  3585 ;;      Params:         0       0       0
  3586 ;;      Locals:         0       0       0
  3587 ;;      Temps:          0       0       0
  3588 ;;      Totals:         0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used:    1
  3591 ;; Hardware stack levels required when called:    4
  3592 ;; This function calls:
  3593 ;;		_ADCRead
  3594 ;; This function is called by:
  3595 ;;		_Apply
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           
  3600                           ;psect for function _ADCPro
  3601  056C                     _ADCPro:	
  3602                           
  3603                           ;ADC.c: 13: switch (ADCState)
  3604                           
  3605                           ;incstack = 0
  3606                           ; Regs used in _ADCPro: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3607  056C  2D7C               	goto	l6544
  3608  056D                     l6536:	
  3609                           
  3610                           ;ADC.c: 16: ADCRead(0b00001111,ADCVal);
  3611  056D  3047               	movlw	(low (_ADCVal| 0))& (0+255)
  3612  056E  00E2               	movwf	ADCRead@Val
  3613  056F  300F               	movlw	15
  3614  0570  2024               	fcall	_ADCRead
  3615                           
  3616                           ;ADC.c: 17: break;
  3617  0571  2D84               	goto	l575
  3618  0572                     l6538:	
  3619                           
  3620                           ;ADC.c: 20: ADCRead(0b00000010,ADCVal+1);
  3621  0572  3049               	movlw	(low ((_ADCVal| 0+2)))& (0+255)
  3622  0573  00E2               	movwf	ADCRead@Val
  3623  0574  3002               	movlw	2
  3624  0575  2024               	fcall	_ADCRead
  3625                           
  3626                           ;ADC.c: 21: break;
  3627  0576  2D84               	goto	l575
  3628  0577                     l6540:	
  3629                           
  3630                           ;ADC.c: 24: ADCRead(0b00000001,ADCVal+2);
  3631  0577  304B               	movlw	(low ((_ADCVal| 0+4)))& (0+255)
  3632  0578  00E2               	movwf	ADCRead@Val
  3633  0579  3001               	movlw	1
  3634  057A  2024               	fcall	_ADCRead
  3635                           
  3636                           ;ADC.c: 25: break;
  3637  057B  2D84               	goto	l575
  3638  057C                     l6544:	
  3639                           
  3640                           ; Switch size 1, requested type "space"
  3641                           ; Number of cases is 3, Range of values is 0 to 2
  3642                           ; switch strategies available:
  3643                           ; Name         Instructions Cycles
  3644                           ; direct_byte            9     6 (fixed)
  3645                           ; simple_byte           10     6 (average)
  3646                           ; jumptable            260     6 (fixed)
  3647                           ;	Chosen strategy is direct_byte
  3648  057C  2135               	fcall	PL38	;call to abstracted procedure
  3649  057D  1803               	skipnc
  3650  057E  2D84               	goto	l575
  3651  057F  3000               	movlw	high S6992
  3652  0580  008A               	movwf	10
  3653  0581  3001               	movlw	low S6992
  3654  0582  0704               	addwf	4,w
  3655  0583  0082               	movwf	2
  3656  0584                     l575:	
  3657                           
  3658                           ;ADC.c: 27: if(SystemONFlag==0)
  3659  0584  1AF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  3660  0585  2D9B               	goto	l6560
  3661                           
  3662                           ;ADC.c: 28: {
  3663                           ;ADC.c: 29: if(ADCVal[2]<267)
  3664  0586  3001               	movlw	1
  3665  0587  024C               	subwf	_ADCVal+5,w
  3666  0588  300B               	movlw	11
  3667  0589  1903               	skipnz
  3668  058A  024B               	subwf	_ADCVal+4,w
  3669  058B  1803               	skipnc
  3670  058C  2D8F               	goto	l6550
  3671                           
  3672                           ;ADC.c: 30: {
  3673                           ;ADC.c: 31: BatPercent=0;
  3674  058D  01C6               	clrf	_BatPercent
  3675                           
  3676                           ;ADC.c: 32: }
  3677  058E  2D9B               	goto	l6560
  3678  058F                     l6550:	
  3679                           
  3680                           ;ADC.c: 33: else if(ADCVal[2]>350)
  3681  058F  3001               	movlw	1
  3682  0590  024C               	subwf	_ADCVal+5,w
  3683  0591  305F               	movlw	95
  3684  0592  1903               	skipnz
  3685  0593  024B               	subwf	_ADCVal+4,w
  3686  0594  1C03               	skipc
  3687  0595  2D98               	goto	l6554
  3688                           
  3689                           ;ADC.c: 34: {
  3690                           ;ADC.c: 35: BatPercent=99;
  3691  0596  3063               	movlw	99
  3692  0597  2D9A               	goto	L13
  3693  0598                     l6554:	
  3694                           ;ADC.c: 36: }
  3695                           
  3696                           
  3697                           ;ADC.c: 37: else
  3698                           ;ADC.c: 38: {
  3699                           ;ADC.c: 39: BatPercent=ADCVal[2]-250;
  3700  0598  084B               	movf	_ADCVal+4,w
  3701  0599  3E06               	addlw	6
  3702  059A                     L13:	
  3703  059A  00C6               	movwf	_BatPercent
  3704  059B                     l6560:	
  3705                           
  3706                           ;ADC.c: 49: }
  3707                           ;ADC.c: 50: if(ADCVal[1]>58)
  3708  059B  3000               	movlw	0
  3709  059C  024A               	subwf	_ADCVal+3,w
  3710  059D  303B               	movlw	59
  3711  059E  1903               	skipnz
  3712  059F  0249               	subwf	_ADCVal+2,w
  3713  05A0  1C03               	skipc
  3714  05A1  2DAB               	goto	l6570
  3715  05A2  30C8               	movlw	200
  3716                           
  3717                           ;ADC.c: 51: {
  3718                           ;ADC.c: 52: CurrentCnt++;
  3719  05A3  0AC1               	incf	_CurrentCnt,f
  3720                           
  3721                           ;ADC.c: 53: if(CurrentCnt>=200)
  3722  05A4  0241               	subwf	_CurrentCnt,w
  3723  05A5  1C03               	skipc
  3724  05A6  0008               	return
  3725                           
  3726                           ;ADC.c: 54: {
  3727                           ;ADC.c: 55: CurrentCnt=200;
  3728  05A7  30C8               	movlw	200
  3729  05A8  00C1               	movwf	_CurrentCnt
  3730                           
  3731                           ;ADC.c: 56: IovFlag=1;
  3732  05A9  1671               	bsf	_IovFlag/(0+8),_IovFlag& (0+7)
  3733  05AA  0008               	return
  3734  05AB                     l6570:	
  3735                           
  3736                           ;ADC.c: 59: else
  3737                           ;ADC.c: 60: {
  3738                           ;ADC.c: 61: CurrentCnt=0;
  3739  05AB  01C1               	clrf	_CurrentCnt
  3740                           
  3741                           ;ADC.c: 62: IovFlag=0;
  3742  05AC  1271               	bcf	_IovFlag/(0+8),_IovFlag& (0+7)
  3743  05AD  0008               	return
  3744  05AE                     __end_of_ADCPro:	
  3745                           
  3746                           	psect	swtext1
  3747  0001                     __pswtext1:	
  3748  0001                     S6992:	
  3749  0001  2D6D               	ljmp	l6536
  3750  0002  2D72               	ljmp	l6538
  3751  0003  2D77               	ljmp	l6540
  3752                           
  3753                           	psect	text20
  3754  0024                     __ptext20:	
  3755 ;; *************** function _ADCRead *****************
  3756 ;; Defined at:
  3757 ;;		line 176 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  ch              1    wreg     unsigned char 
  3760 ;;  Val             1   21[BANK0 ] PTR unsigned int 
  3761 ;;		 -> ADCVal(6), 
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;  ch              1    0[BANK1 ] unsigned char 
  3764 ;;  ad_temp         2    5[BANK1 ] unsigned int 
  3765 ;;  AD_L            2    3[BANK1 ] unsigned int 
  3766 ;;  AD_H            2    1[BANK1 ] unsigned int 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 300/0
  3773 ;;		On exit  : 300/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMMON   BANK0   BANK1
  3776 ;;      Params:         0       1       0
  3777 ;;      Locals:         0       0       7
  3778 ;;      Temps:          0       8       0
  3779 ;;      Totals:         0       9       7
  3780 ;;Total ram usage:       16 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    3
  3783 ;; This function calls:
  3784 ;;		_ADSample
  3785 ;;		___lldiv
  3786 ;;		___lmul
  3787 ;; This function is called by:
  3788 ;;		_ADCPro
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _ADCRead
  3794  0024                     _ADCRead:	
  3795                           
  3796                           ;incstack = 0
  3797                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3798                           ;ADCRead@ch stored from wreg
  3799  0024  1683               	bsf	3,5	;RP0=1, select bank1
  3800  0025  00DB               	movwf	ADCRead@ch^(0+128)
  3801                           
  3802                           ;ADC.c: 178: unsigned int ad_temp,AD_H,AD_L;
  3803                           ;ADC.c: 180: if(ADSample(ch))
  3804  0026  2733               	fcall	_ADSample
  3805  0027  3A00               	xorlw	0
  3806  0028  1903               	skipnz
  3807  0029  0008               	return
  3808                           
  3809                           ;ADC.c: 181: {
  3810                           ;ADC.c: 182: AD_H=ADRESH;
  3811  002A  081E               	movf	30,w	;volatile
  3812  002B  1683               	bsf	3,5	;RP0=1, select bank1
  3813  002C  00DC               	movwf	ADCRead@AD_H^(0+128)
  3814  002D  01DD               	clrf	(ADCRead@AD_H+1)^(0+128)
  3815                           
  3816                           ;ADC.c: 183: AD_L=ADRESL;
  3817  002E  081E               	movf	30,w	;volatile
  3818  002F  00DE               	movwf	ADCRead@AD_L^(0+128)
  3819  0030  01DF               	clrf	(ADCRead@AD_L+1)^(0+128)
  3820                           
  3821                           ;ADC.c: 184: ad_temp=(AD_H<<4)|(AD_L>>4);
  3822  0031  085D               	movf	(ADCRead@AD_H+1)^(0+128),w
  3823  0032  1283               	bcf	3,5	;RP0=0, select bank0
  3824  0033  00E4               	movwf	??_ADCRead+1
  3825  0034  1683               	bsf	3,5	;RP0=1, select bank1
  3826  0035  085C               	movf	ADCRead@AD_H^(0+128),w
  3827  0036  1283               	bcf	3,5	;RP0=0, select bank0
  3828  0037  00E3               	movwf	??_ADCRead
  3829  0038  30F0               	movlw	240
  3830  0039  0EE3               	swapf	??_ADCRead,f
  3831  003A  0EE4               	swapf	??_ADCRead+1,f
  3832  003B  05E4               	andwf	??_ADCRead+1,f
  3833  003C  0863               	movf	??_ADCRead,w
  3834  003D  390F               	andlw	15
  3835  003E  04E4               	iorwf	??_ADCRead+1,f
  3836  003F  30F0               	movlw	240
  3837  0040  05E3               	andwf	??_ADCRead,f
  3838  0041  0863               	movf	??_ADCRead,w
  3839  0042  1683               	bsf	3,5	;RP0=1, select bank1
  3840  0043  00E0               	movwf	ADCRead@ad_temp^(0+128)
  3841  0044  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0045  0864               	movf	??_ADCRead+1,w
  3843  0046  1683               	bsf	3,5	;RP0=1, select bank1
  3844  0047  00E1               	movwf	(ADCRead@ad_temp+1)^(0+128)
  3845  0048  085F               	movf	(ADCRead@AD_L+1)^(0+128),w
  3846  0049  1283               	bcf	3,5	;RP0=0, select bank0
  3847  004A  00E4               	movwf	??_ADCRead+1
  3848  004B  1683               	bsf	3,5	;RP0=1, select bank1
  3849  004C  085E               	movf	ADCRead@AD_L^(0+128),w
  3850  004D  1283               	bcf	3,5	;RP0=0, select bank0
  3851  004E  00E3               	movwf	??_ADCRead
  3852  004F  3004               	movlw	4
  3853  0050                     u3695:	
  3854  0050  1003               	clrc
  3855  0051  0CE4               	rrf	??_ADCRead+1,f
  3856  0052  0CE3               	rrf	??_ADCRead,f
  3857  0053  3EFF               	addlw	-1
  3858  0054  1D03               	skipz
  3859  0055  2850               	goto	u3695
  3860  0056  0863               	movf	??_ADCRead,w
  3861  0057  1683               	bsf	3,5	;RP0=1, select bank1
  3862  0058  04E0               	iorwf	ADCRead@ad_temp^(0+128),f
  3863  0059  1283               	bcf	3,5	;RP0=0, select bank0
  3864  005A  0864               	movf	??_ADCRead+1,w
  3865  005B  1683               	bsf	3,5	;RP0=1, select bank1
  3866  005C  04E1               	iorwf	(ADCRead@ad_temp+1)^(0+128),f
  3867                           
  3868                           ;ADC.c: 185: if(ad_temp>ADCMax)
  3869  005D  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3870  005E  1283               	bcf	3,5	;RP0=0, select bank0
  3871  005F  0230               	subwf	_ADCMax+1,w
  3872  0060  1D03               	skipz
  3873  0061  2866               	goto	u3705
  3874  0062  1683               	bsf	3,5	;RP0=1, select bank1
  3875  0063  0860               	movf	ADCRead@ad_temp^(0+128),w
  3876  0064  1283               	bcf	3,5	;RP0=0, select bank0
  3877  0065  022F               	subwf	_ADCMax,w
  3878  0066                     u3705:	
  3879  0066  1803               	skipnc
  3880  0067  2870               	goto	l627
  3881                           
  3882                           ;ADC.c: 186: {
  3883                           ;ADC.c: 187: ADCMax=ad_temp;
  3884  0068  1683               	bsf	3,5	;RP0=1, select bank1
  3885  0069  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3886  006A  1283               	bcf	3,5	;RP0=0, select bank0
  3887  006B  00B0               	movwf	_ADCMax+1
  3888  006C  1683               	bsf	3,5	;RP0=1, select bank1
  3889  006D  0860               	movf	ADCRead@ad_temp^(0+128),w
  3890  006E  1283               	bcf	3,5	;RP0=0, select bank0
  3891  006F  00AF               	movwf	_ADCMax
  3892  0070                     l627:	
  3893                           
  3894                           ;ADC.c: 188: }
  3895                           ;ADC.c: 189: if(ad_temp<ADCMin)
  3896  0070  082E               	movf	_ADCMin+1,w
  3897  0071  1683               	bsf	3,5	;RP0=1, select bank1
  3898  0072  0261               	subwf	(ADCRead@ad_temp+1)^(0+128),w
  3899  0073  1D03               	skipz
  3900  0074  2879               	goto	u3715
  3901  0075  1283               	bcf	3,5	;RP0=0, select bank0
  3902  0076  082D               	movf	_ADCMin,w
  3903  0077  1683               	bsf	3,5	;RP0=1, select bank1
  3904  0078  0260               	subwf	ADCRead@ad_temp^(0+128),w
  3905  0079                     u3715:	
  3906  0079  1803               	skipnc
  3907  007A  2882               	goto	l628
  3908                           
  3909                           ;ADC.c: 190: {
  3910                           ;ADC.c: 191: ADCMin=ad_temp;
  3911  007B  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3912  007C  1283               	bcf	3,5	;RP0=0, select bank0
  3913  007D  00AE               	movwf	_ADCMin+1
  3914  007E  1683               	bsf	3,5	;RP0=1, select bank1
  3915  007F  0860               	movf	ADCRead@ad_temp^(0+128),w
  3916  0080  1283               	bcf	3,5	;RP0=0, select bank0
  3917  0081  00AD               	movwf	_ADCMin
  3918  0082                     l628:	
  3919                           
  3920                           ;ADC.c: 192: }
  3921                           ;ADC.c: 193: ADsum += ad_temp;
  3922  0082  1683               	bsf	3,5	;RP0=1, select bank1
  3923  0083  0860               	movf	ADCRead@ad_temp^(0+128),w
  3924  0084  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0085  00E3               	movwf	??_ADCRead
  3926  0086  1683               	bsf	3,5	;RP0=1, select bank1
  3927  0087  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3928  0088  1283               	bcf	3,5	;RP0=0, select bank0
  3929  0089  00E4               	movwf	??_ADCRead+1
  3930  008A  01E5               	clrf	??_ADCRead+2
  3931  008B  01E6               	clrf	??_ADCRead+3
  3932  008C  2124               	fcall	PL8	;call to abstracted procedure
  3933  008D  1803               	skipnc
  3934  008E  3E01               	addlw	1
  3935  008F  1D03               	btfss	3,2
  3936  0090  07A8               	addwf	_ADsum+3,f
  3937  0091  300A               	movlw	10
  3938                           
  3939                           ;ADC.c: 194: ADcnt++;
  3940  0092  0AC2               	incf	_ADcnt,f
  3941                           
  3942                           ;ADC.c: 195: if(ADcnt >= 10)
  3943  0093  0242               	subwf	_ADcnt,w
  3944  0094  1C03               	skipc
  3945  0095  0008               	return
  3946                           
  3947                           ;ADC.c: 196: {
  3948                           ;ADC.c: 197: ADcnt = 0;
  3949  0096  01C2               	clrf	_ADcnt
  3950                           
  3951                           ;ADC.c: 198: ADsum= ADsum-ADCMax-ADCMin;
  3952  0097  082D               	movf	_ADCMin,w
  3953  0098  00E3               	movwf	??_ADCRead
  3954  0099  082E               	movf	_ADCMin+1,w
  3955  009A  00E4               	movwf	??_ADCRead+1
  3956  009B  01E5               	clrf	??_ADCRead+2
  3957  009C  01E6               	clrf	??_ADCRead+3
  3958  009D  082F               	movf	_ADCMax,w
  3959  009E  00E7               	movwf	??_ADCRead+4
  3960  009F  0830               	movf	_ADCMax+1,w
  3961  00A0  00E8               	movwf	??_ADCRead+5
  3962  00A1  01E9               	clrf	??_ADCRead+6
  3963  00A2  01EA               	clrf	??_ADCRead+7
  3964  00A3  0867               	movf	??_ADCRead+4,w
  3965  00A4  07E3               	addwf	??_ADCRead,f
  3966  00A5  0868               	movf	??_ADCRead+5,w
  3967  00A6  1803               	skipnc
  3968  00A7  0F68               	incfsz	??_ADCRead+5,w
  3969  00A8  07E4               	addwf	??_ADCRead+1,f
  3970  00A9  0869               	movf	??_ADCRead+6,w
  3971  00AA  1803               	skipnc
  3972  00AB  0F69               	incfsz	??_ADCRead+6,w
  3973  00AC  07E5               	addwf	??_ADCRead+2,f
  3974  00AD  086A               	movf	??_ADCRead+7,w
  3975  00AE  1803               	skipnc
  3976  00AF  0A6A               	incf	??_ADCRead+7,w
  3977  00B0  07E6               	addwf	??_ADCRead+3,f
  3978  00B1  09E3               	comf	??_ADCRead,f
  3979  00B2  09E4               	comf	??_ADCRead+1,f
  3980  00B3  09E5               	comf	??_ADCRead+2,f
  3981  00B4  09E6               	comf	??_ADCRead+3,f
  3982  00B5  0AE3               	incf	??_ADCRead,f
  3983  00B6  1903               	skipnz
  3984  00B7  0AE4               	incf	??_ADCRead+1,f
  3985  00B8  1903               	skipnz
  3986  00B9  0AE5               	incf	??_ADCRead+2,f
  3987  00BA  1903               	skipnz
  3988  00BB  0AE6               	incf	??_ADCRead+3,f
  3989  00BC  2124               	fcall	PL8	;call to abstracted procedure
  3990  00BD  1803               	skipnc
  3991  00BE  3E01               	addlw	1
  3992  00BF  1D03               	btfss	3,2
  3993  00C0  07A8               	addwf	_ADsum+3,f
  3994                           
  3995                           ;ADC.c: 199: ADsum = ADsum >> 3;
  3996  00C1  3003               	movlw	3
  3997  00C2                     u3765:	
  3998  00C2  1003               	clrc
  3999  00C3  0CA8               	rrf	_ADsum+3,f
  4000  00C4  0CA7               	rrf	_ADsum+2,f
  4001  00C5  0CA6               	rrf	_ADsum+1,f
  4002  00C6  0CA5               	rrf	_ADsum,f
  4003  00C7  3EFF               	addlw	-1
  4004  00C8  1D03               	skipz
  4005  00C9  28C2               	goto	u3765
  4006                           
  4007                           ;ADC.c: 200: switch (ADCState)
  4008  00CA  28F7               	goto	l6354
  4009  00CB                     l6346:	
  4010                           
  4011                           ;ADC.c: 203: *Val=ADsum;
  4012  00CB  0862               	movf	ADCRead@Val,w
  4013  00CC  0084               	movwf	4
  4014  00CD  0825               	movf	_ADsum,w
  4015  00CE  1383               	bcf	3,7	;select IRP bank0
  4016  00CF  0080               	movwf	0
  4017  00D0  0A84               	incf	4,f
  4018  00D1  0826               	movf	_ADsum+1,w
  4019  00D2  28F5               	goto	L15
  4020  00D3                     l6348:	
  4021                           ;ADC.c: 204: break;
  4022                           
  4023                           
  4024                           ;ADC.c: 207: *Val=ADsum*1000/(*(Val-1));
  4025  00D3  0862               	movf	ADCRead@Val,w
  4026  00D4  3EFE               	addlw	-2
  4027  00D5  210E               	fcall	PL4	;call to abstracted procedure
  4028  00D6  3003               	movlw	3
  4029  00D7  01D4               	clrf	___lmul@multiplicand+3
  4030  00D8  01D3               	clrf	___lmul@multiplicand+2
  4031  00D9  00D2               	movwf	___lmul@multiplicand+1
  4032  00DA  30E8               	movlw	232
  4033  00DB  00D1               	movwf	___lmul@multiplicand
  4034  00DC  28E5               	goto	L16
  4035  00DD                     l6350:	
  4036                           ;ADC.c: 208: break;
  4037                           
  4038                           
  4039                           ;ADC.c: 211: *Val=ADsum*100/(*(Val-2));
  4040  00DD  0862               	movf	ADCRead@Val,w
  4041  00DE  3EFC               	addlw	-4
  4042  00DF  210E               	fcall	PL4	;call to abstracted procedure
  4043  00E0  3064               	movlw	100
  4044  00E1  00D1               	movwf	___lmul@multiplicand
  4045  00E2  01D2               	clrf	___lmul@multiplicand+1
  4046  00E3  01D3               	clrf	___lmul@multiplicand+2
  4047  00E4  01D4               	clrf	___lmul@multiplicand+3
  4048  00E5                     L16:	
  4049  00E5  261C               	fcall	___lmul
  4050  00E6  0850               	movf	?___lmul+3,w
  4051  00E7  00DC               	movwf	___lldiv@dividend+3
  4052  00E8  084F               	movf	?___lmul+2,w
  4053  00E9  00DB               	movwf	___lldiv@dividend+2
  4054  00EA  084E               	movf	?___lmul+1,w
  4055  00EB  00DA               	movwf	___lldiv@dividend+1
  4056  00EC  084D               	movf	?___lmul,w
  4057  00ED  00D9               	movwf	___lldiv@dividend
  4058  00EE  2524               	fcall	___lldiv
  4059  00EF  0862               	movf	ADCRead@Val,w
  4060  00F0  0084               	movwf	4
  4061  00F1  0855               	movf	?___lldiv,w
  4062  00F2  0080               	movwf	0
  4063  00F3  0A84               	incf	4,f
  4064  00F4  0856               	movf	?___lldiv+1,w
  4065  00F5                     L15:	
  4066  00F5  0080               	movwf	0
  4067                           
  4068                           ;ADC.c: 212: break;
  4069  00F6  28FF               	goto	l6356
  4070  00F7                     l6354:	
  4071                           
  4072                           ; Switch size 1, requested type "space"
  4073                           ; Number of cases is 3, Range of values is 0 to 2
  4074                           ; switch strategies available:
  4075                           ; Name         Instructions Cycles
  4076                           ; direct_byte            9     6 (fixed)
  4077                           ; simple_byte           10     6 (average)
  4078                           ; jumptable            260     6 (fixed)
  4079                           ;	Chosen strategy is direct_byte
  4080  00F7  2135               	fcall	PL38	;call to abstracted procedure
  4081  00F8  1803               	skipnc
  4082  00F9  28FF               	goto	l6356
  4083  00FA  3007               	movlw	high S6994
  4084  00FB  008A               	movwf	10
  4085  00FC  30CA               	movlw	low S6994
  4086  00FD  0704               	addwf	4,w
  4087  00FE  0082               	movwf	2
  4088  00FF                     l6356:	
  4089  00FF  30FF               	movlw	255
  4090                           
  4091                           ;ADC.c: 214: ADCMax=0;
  4092  0100  01AF               	clrf	_ADCMax
  4093  0101  01B0               	clrf	_ADCMax+1
  4094                           
  4095                           ;ADC.c: 215: ADCMin=0xFFFF;
  4096  0102  00AD               	movwf	_ADCMin
  4097  0103  00AE               	movwf	_ADCMin+1
  4098  0104  3003               	movlw	3
  4099                           
  4100                           ;ADC.c: 216: ADsum = 0;
  4101  0105  01A5               	clrf	_ADsum
  4102  0106  01A6               	clrf	_ADsum+1
  4103  0107  01A7               	clrf	_ADsum+2
  4104  0108  01A8               	clrf	_ADsum+3
  4105                           
  4106                           ;ADC.c: 217: ADCState++;
  4107  0109  0AC3               	incf	_ADCState,f
  4108                           
  4109                           ;ADC.c: 218: if(ADCState>=3)
  4110  010A  0243               	subwf	_ADCState,w
  4111  010B  1803               	btfsc	3,0
  4112                           
  4113                           ;ADC.c: 219: {
  4114                           ;ADC.c: 220: ADCState=0;
  4115  010C  01C3               	clrf	_ADCState
  4116  010D  0008               	return
  4117  010E                     __end_of_ADCRead:	
  4118  010E                     PL4:	
  4119  010E  0084               	movwf	4
  4120  010F  1383               	bcf	3,7	;select IRP bank0
  4121  0110  0800               	movf	0,w
  4122  0111  00E3               	movwf	??_ADCRead
  4123  0112  0A84               	incf	4,f
  4124  0113  0800               	movf	0,w
  4125  0114  00E4               	movwf	??_ADCRead+1
  4126  0115  0863               	movf	??_ADCRead,w
  4127  0116  00D5               	movwf	___lldiv@divisor
  4128  0117  0864               	movf	??_ADCRead+1,w
  4129  0118  00D6               	movwf	___lldiv@divisor+1
  4130  0119  01D7               	clrf	___lldiv@divisor+2
  4131  011A  01D8               	clrf	___lldiv@divisor+3
  4132  011B  0828               	movf	_ADsum+3,w
  4133  011C  00D0               	movwf	___lmul@multiplier+3
  4134  011D  0827               	movf	_ADsum+2,w
  4135  011E  00CF               	movwf	___lmul@multiplier+2
  4136  011F  0826               	movf	_ADsum+1,w
  4137  0120  00CE               	movwf	___lmul@multiplier+1
  4138  0121  0825               	movf	_ADsum,w
  4139  0122  00CD               	movwf	___lmul@multiplier
  4140  0123  0008               	return
  4141  0124                     __end_ofPL4:	
  4142  0124                     PL8:	
  4143  0124  0863               	movf	??_ADCRead,w
  4144  0125  07A5               	addwf	_ADsum,f
  4145  0126  0864               	movf	??_ADCRead+1,w
  4146  0127  1103               	clrz
  4147  0128  1803               	skipnc
  4148  0129  3E01               	addlw	1
  4149  012A  1D03               	btfss	3,2
  4150  012B  07A6               	addwf	_ADsum+1,f
  4151  012C  0865               	movf	??_ADCRead+2,w
  4152  012D  1103               	clrz
  4153  012E  1803               	skipnc
  4154  012F  3E01               	addlw	1
  4155  0130  1D03               	btfss	3,2
  4156  0131  07A7               	addwf	_ADsum+2,f
  4157  0132  0866               	movf	??_ADCRead+3,w
  4158  0133  1103               	clrz
  4159  0134  0008               	return
  4160  0135                     __end_ofPL8:	
  4161  0135                     PL38:	
  4162  0135  0843               	movf	_ADCState,w
  4163  0136  0084               	movwf	4
  4164  0137  3003               	movlw	3
  4165  0138  0204               	subwf	4,w
  4166  0139  0008               	return
  4167  013A                     __end_ofPL38:	
  4168                           
  4169                           	psect	swtext2
  4170  07CA                     __pswtext2:	
  4171  07CA                     S6994:	
  4172  07CA  28CB               	ljmp	l6346
  4173  07CB  28D3               	ljmp	l6348
  4174  07CC  28DD               	ljmp	l6350
  4175                           
  4176                           	psect	text21
  4177  061C                     __ptext21:	
  4178 ;; *************** function ___lmul *****************
  4179 ;; Defined at:
  4180 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4183 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  product         4    3[COMMON] unsigned long 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  4    0[BANK0 ] unsigned long 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0
  4190 ;; Tracked objects:
  4191 ;;		On entry : B00/0
  4192 ;;		On exit  : B00/0
  4193 ;;		Unchanged: 800/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1
  4195 ;;      Params:         0       8       0
  4196 ;;      Locals:         4       0       0
  4197 ;;      Temps:          0       0       0
  4198 ;;      Totals:         4       8       0
  4199 ;;Total ram usage:       12 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    2
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_ADCRead
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           
  4210                           ;psect for function ___lmul
  4211  061C                     ___lmul:	
  4212                           
  4213                           ;incstack = 0
  4214                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4215  061C  01F5               	clrf	___lmul@product
  4216  061D  01F6               	clrf	___lmul@product+1
  4217  061E  01F7               	clrf	___lmul@product+2
  4218  061F  01F8               	clrf	___lmul@product+3
  4219  0620                     l4227:	
  4220  0620  1C4D               	btfss	___lmul@multiplier,0
  4221  0621  2E36               	goto	l6290
  4222  0622  0851               	movf	___lmul@multiplicand,w
  4223  0623  07F5               	addwf	___lmul@product,f
  4224  0624  0852               	movf	___lmul@multiplicand+1,w
  4225  0625  1103               	clrz
  4226  0626  1803               	skipnc
  4227  0627  3E01               	addlw	1
  4228  0628  1D03               	btfss	3,2
  4229  0629  07F6               	addwf	___lmul@product+1,f
  4230  062A  0853               	movf	___lmul@multiplicand+2,w
  4231  062B  1103               	clrz
  4232  062C  1803               	skipnc
  4233  062D  3E01               	addlw	1
  4234  062E  1D03               	btfss	3,2
  4235  062F  07F7               	addwf	___lmul@product+2,f
  4236  0630  0854               	movf	___lmul@multiplicand+3,w
  4237  0631  1103               	clrz
  4238  0632  1803               	skipnc
  4239  0633  3E01               	addlw	1
  4240  0634  1D03               	btfss	3,2
  4241  0635  07F8               	addwf	___lmul@product+3,f
  4242  0636                     l6290:	
  4243  0636  1003               	clrc
  4244  0637  0DD1               	rlf	___lmul@multiplicand,f
  4245  0638  0DD2               	rlf	___lmul@multiplicand+1,f
  4246  0639  0DD3               	rlf	___lmul@multiplicand+2,f
  4247  063A  0DD4               	rlf	___lmul@multiplicand+3,f
  4248  063B  1003               	clrc
  4249  063C  0CD0               	rrf	___lmul@multiplier+3,f
  4250  063D  0CCF               	rrf	___lmul@multiplier+2,f
  4251  063E  0CCE               	rrf	___lmul@multiplier+1,f
  4252  063F  0CCD               	rrf	___lmul@multiplier,f
  4253  0640  0850               	movf	___lmul@multiplier+3,w
  4254  0641  044F               	iorwf	___lmul@multiplier+2,w
  4255  0642  044E               	iorwf	___lmul@multiplier+1,w
  4256  0643  044D               	iorwf	___lmul@multiplier,w
  4257  0644  1D03               	skipz
  4258  0645  2E20               	goto	l4227
  4259  0646  0878               	movf	___lmul@product+3,w
  4260  0647  00D0               	movwf	?___lmul+3
  4261  0648  0877               	movf	___lmul@product+2,w
  4262  0649  00CF               	movwf	?___lmul+2
  4263  064A  0876               	movf	___lmul@product+1,w
  4264  064B  00CE               	movwf	?___lmul+1
  4265  064C  0875               	movf	___lmul@product,w
  4266  064D  00CD               	movwf	?___lmul
  4267  064E  0008               	return
  4268  064F                     __end_of___lmul:	
  4269                           
  4270                           	psect	text22
  4271  0524                     __ptext22:	
  4272 ;; *************** function ___lldiv *****************
  4273 ;; Defined at:
  4274 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  divisor         4    8[BANK0 ] unsigned long 
  4277 ;;  dividend        4   12[BANK0 ] unsigned long 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  quotient        4   16[BANK0 ] unsigned long 
  4280 ;;  counter         1   20[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  4    8[BANK0 ] unsigned long 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0
  4285 ;; Tracked objects:
  4286 ;;		On entry : B00/0
  4287 ;;		On exit  : B00/0
  4288 ;;		Unchanged: 800/0
  4289 ;; Data sizes:     COMMON   BANK0   BANK1
  4290 ;;      Params:         0       8       0
  4291 ;;      Locals:         0       5       0
  4292 ;;      Temps:          0       0       0
  4293 ;;      Totals:         0      13       0
  4294 ;;Total ram usage:       13 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_ADCRead
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           
  4305                           ;psect for function ___lldiv
  4306  0524                     ___lldiv:	
  4307                           
  4308                           ;incstack = 0
  4309                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4310  0524  01DD               	clrf	___lldiv@quotient
  4311  0525  01DE               	clrf	___lldiv@quotient+1
  4312  0526  01DF               	clrf	___lldiv@quotient+2
  4313  0527  01E0               	clrf	___lldiv@quotient+3
  4314  0528  0858               	movf	___lldiv@divisor+3,w
  4315  0529  0457               	iorwf	___lldiv@divisor+2,w
  4316  052A  0456               	iorwf	___lldiv@divisor+1,w
  4317  052B  0455               	iorwf	___lldiv@divisor,w
  4318  052C  1903               	skipnz
  4319  052D  2D63               	goto	l6320
  4320  052E  01E1               	clrf	___lldiv@counter
  4321  052F                     L17:	
  4322  052F  0AE1               	incf	___lldiv@counter,f
  4323  0530  1BD8               	btfsc	___lldiv@divisor+3,7
  4324  0531  2D38               	goto	l6308
  4325  0532  1003               	clrc
  4326  0533  0DD5               	rlf	___lldiv@divisor,f
  4327  0534  0DD6               	rlf	___lldiv@divisor+1,f
  4328  0535  0DD7               	rlf	___lldiv@divisor+2,f
  4329  0536  0DD8               	rlf	___lldiv@divisor+3,f
  4330  0537  2D2F               	goto	L17
  4331  0538                     l6308:	
  4332  0538  1003               	clrc
  4333  0539  0DDD               	rlf	___lldiv@quotient,f
  4334  053A  0DDE               	rlf	___lldiv@quotient+1,f
  4335  053B  0DDF               	rlf	___lldiv@quotient+2,f
  4336  053C  0DE0               	rlf	___lldiv@quotient+3,f
  4337  053D  0858               	movf	___lldiv@divisor+3,w
  4338  053E  025C               	subwf	___lldiv@dividend+3,w
  4339  053F  1D03               	skipz
  4340  0540  2D4B               	goto	u3665
  4341  0541  0857               	movf	___lldiv@divisor+2,w
  4342  0542  025B               	subwf	___lldiv@dividend+2,w
  4343  0543  1D03               	skipz
  4344  0544  2D4B               	goto	u3665
  4345  0545  0856               	movf	___lldiv@divisor+1,w
  4346  0546  025A               	subwf	___lldiv@dividend+1,w
  4347  0547  1D03               	skipz
  4348  0548  2D4B               	goto	u3665
  4349  0549  0855               	movf	___lldiv@divisor,w
  4350  054A  0259               	subwf	___lldiv@dividend,w
  4351  054B                     u3665:	
  4352  054B  1C03               	skipc
  4353  054C  2D5D               	goto	L18
  4354  054D  0855               	movf	___lldiv@divisor,w
  4355  054E  02D9               	subwf	___lldiv@dividend,f
  4356  054F  0856               	movf	___lldiv@divisor+1,w
  4357  0550  1C03               	skipc
  4358  0551  0F56               	incfsz	___lldiv@divisor+1,w
  4359  0552  02DA               	subwf	___lldiv@dividend+1,f
  4360  0553  0857               	movf	___lldiv@divisor+2,w
  4361  0554  1C03               	skipc
  4362  0555  0F57               	incfsz	___lldiv@divisor+2,w
  4363  0556  02DB               	subwf	___lldiv@dividend+2,f
  4364  0557  0858               	movf	___lldiv@divisor+3,w
  4365  0558  1C03               	skipc
  4366  0559  0F58               	incfsz	___lldiv@divisor+3,w
  4367  055A  02DC               	subwf	___lldiv@dividend+3,f
  4368  055B  145D               	bsf	___lldiv@quotient,0
  4369  055C  1003               	clrc
  4370  055D                     L18:	
  4371  055D  0CD8               	rrf	___lldiv@divisor+3,f
  4372  055E  0CD7               	rrf	___lldiv@divisor+2,f
  4373  055F  0CD6               	rrf	___lldiv@divisor+1,f
  4374  0560  0CD5               	rrf	___lldiv@divisor,f
  4375  0561  0BE1               	decfsz	___lldiv@counter,f
  4376  0562  2D38               	goto	l6308
  4377  0563                     l6320:	
  4378  0563  0860               	movf	___lldiv@quotient+3,w
  4379  0564  00D8               	movwf	?___lldiv+3
  4380  0565  085F               	movf	___lldiv@quotient+2,w
  4381  0566  00D7               	movwf	?___lldiv+2
  4382  0567  085E               	movf	___lldiv@quotient+1,w
  4383  0568  00D6               	movwf	?___lldiv+1
  4384  0569  085D               	movf	___lldiv@quotient,w
  4385  056A  00D5               	movwf	?___lldiv
  4386  056B  0008               	return
  4387  056C                     __end_of___lldiv:	
  4388                           
  4389                           	psect	text23
  4390  0733                     __ptext23:	
  4391 ;; *************** function _ADSample *****************
  4392 ;; Defined at:
  4393 ;;		line 233 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  ch              1    wreg     unsigned char 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  ch              1    4[COMMON] unsigned char 
  4398 ;;  i               1    5[COMMON] volatile unsigned char 
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      unsigned char 
  4401 ;; Registers used:
  4402 ;;		wreg, status,2, status,0
  4403 ;; Tracked objects:
  4404 ;;		On entry : 300/100
  4405 ;;		On exit  : 300/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1
  4408 ;;      Params:         0       0       0
  4409 ;;      Locals:         2       0       0
  4410 ;;      Temps:          1       0       0
  4411 ;;      Totals:         3       0       0
  4412 ;;Total ram usage:        3 bytes
  4413 ;; Hardware stack levels used:    1
  4414 ;; Hardware stack levels required when called:    2
  4415 ;; This function calls:
  4416 ;;		Nothing
  4417 ;; This function is called by:
  4418 ;;		_ADCRead
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function _ADSample
  4424  0733                     _ADSample:	
  4425                           
  4426                           ;incstack = 0
  4427                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4428                           ;ADSample@ch stored from wreg
  4429  0733  00F6               	movwf	ADSample@ch
  4430                           
  4431                           ;ADC.c: 235: ADCON1 = 0x00;
  4432  0734  019F               	clrf	31	;volatile
  4433                           
  4434                           ;ADC.c: 236: ADCON0 = 0X41 | ( ch << 2);
  4435  0735  00F5               	movwf	??_ADSample
  4436  0736  3001               	movlw	1
  4437  0737  1003               	clrc
  4438  0738                     L19:	
  4439  0738  0DF5               	rlf	??_ADSample,f
  4440  0739  3EFF               	addlw	-1
  4441  073A  1003               	clrc
  4442  073B  1D03               	skipz
  4443  073C  2F38               	goto	L19
  4444  073D  0D75               	rlf	??_ADSample,w
  4445  073E  3841               	iorlw	65
  4446  073F  1283               	bcf	3,5	;RP0=0, select bank0
  4447  0740  009F               	movwf	31	;volatile
  4448  0741  0000               	nop	;# 
  4449  0742  0000               	nop	;# 
  4450                           
  4451                           ;ADC.c: 239: GODONE = 1;
  4452  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0745  149F               	bsf	31,1	;volatile
  4455                           
  4456                           ;ADC.c: 240: volatile unsigned char i = 0;
  4457  0746  01F7               	clrf	ADSample@i	;volatile
  4458  0747                     l639:	
  4459                           ;ADC.c: 241: while(GODONE)
  4460                           
  4461  0747  1C9F               	btfss	31,1	;volatile
  4462  0748  3401               	retlw	1
  4463                           
  4464                           ;ADC.c: 242: {
  4465                           ;ADC.c: 243: if(0 == (--i))
  4466  0749  0BF7               	decfsz	ADSample@i,f	;volatile
  4467  074A  2F47               	goto	l639
  4468                           
  4469                           ;ADC.c: 244: return 0;
  4470  074B  3400               	retlw	0
  4471  074C                     __end_of_ADSample:	
  4472                           ;ADC.c: 245: }
  4473                           ;ADC.c: 246: return 1;
  4474                           
  4475                           
  4476                           	psect	text24
  4477  06FF                     __ptext24:	
  4478 ;; *************** function _Isr_Timer *****************
  4479 ;; Defined at:
  4480 ;;		line 8 in file "C:\Users\Administrator\Desktop\project\K13-01\code\even.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;		None
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;		None
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 300/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMMON   BANK0   BANK1
  4494 ;;      Params:         0       0       0
  4495 ;;      Locals:         0       0       0
  4496 ;;      Temps:          3       0       0
  4497 ;;      Totals:         3       0       0
  4498 ;;Total ram usage:        3 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    1
  4501 ;; This function calls:
  4502 ;;		_LEDScan
  4503 ;; This function is called by:
  4504 ;;		Interrupt level 1
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function _Isr_Timer
  4510  06FF                     _Isr_Timer:	
  4511                           
  4512                           ;even.c: 10: TMR2IF = 0;
  4513  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  4514  0700  1303               	bcf	3,6	;RP1=0, select bank0
  4515  0701  108C               	bcf	12,1	;volatile
  4516  0702  300A               	movlw	10
  4517                           
  4518                           ;even.c: 11: cnt2ms++;
  4519  0703  0ABF               	incf	_cnt2ms,f
  4520                           
  4521                           ;even.c: 12: cnt10ms++;
  4522  0704  0ABE               	incf	_cnt10ms,f
  4523                           
  4524                           ;even.c: 13: if(cnt2ms>=10)
  4525  0705  023F               	subwf	_cnt2ms,w
  4526  0706  1C03               	skipc
  4527  0707  2F0B               	goto	i1l6200
  4528                           
  4529                           ;even.c: 14: {
  4530                           ;even.c: 15: LEDScan();
  4531  0708  22E0               	fcall	_LEDScan
  4532                           
  4533                           ;even.c: 16: cnt2ms=0;
  4534  0709  01BF               	clrf	_cnt2ms
  4535                           
  4536                           ;even.c: 17: time2ms=1;
  4537  070A  14F1               	bsf	_time2ms/(0+8),_time2ms& (0+7)
  4538  070B                     i1l6200:	
  4539                           
  4540                           ;even.c: 18: }
  4541                           ;even.c: 19: if(cnt10ms>=50)
  4542  070B  3032               	movlw	50
  4543  070C  023E               	subwf	_cnt10ms,w
  4544  070D  1C03               	skipc
  4545  070E  2F11               	goto	i1l1196
  4546                           
  4547                           ;even.c: 20: {
  4548                           ;even.c: 21: cnt10ms=0;
  4549  070F  01BE               	clrf	_cnt10ms
  4550                           
  4551                           ;even.c: 22: time10ms=1;
  4552  0710  1471               	bsf	_time10ms/(0+8),_time10ms& (0+7)
  4553  0711                     i1l1196:	
  4554  0711  0874               	movf	??_Isr_Timer+2,w
  4555  0712  008A               	movwf	10
  4556  0713  0873               	movf	??_Isr_Timer+1,w
  4557  0714  0084               	movwf	4
  4558  0715  0E72               	swapf	??_Isr_Timer^(0+-128),w
  4559  0716  0083               	movwf	3
  4560  0717  0EFE               	swapf	126,f
  4561  0718  0E7E               	swapf	126,w
  4562  0719  0009               	retfie
  4563  071A                     __end_of_Isr_Timer:	
  4564                           
  4565                           	psect	intentry
  4566  0004                     __pintentry:	
  4567                           ;incstack = 0
  4568                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4569                           
  4570  0004                     interrupt_function:	
  4571  007E                     saved_w	set	btemp
  4572  0004  00FE               	movwf	btemp
  4573  0005  0E03               	swapf	3,w
  4574  0006  00F2               	movwf	??_Isr_Timer
  4575  0007  0804               	movf	4,w
  4576  0008  00F3               	movwf	??_Isr_Timer+1
  4577  0009  080A               	movf	10,w
  4578  000A  00F4               	movwf	??_Isr_Timer+2
  4579  000B  2EFF               	ljmp	_Isr_Timer
  4580                           
  4581                           	psect	text25
  4582  02E0                     __ptext25:	
  4583 ;; *************** function _LEDScan *****************
  4584 ;; Defined at:
  4585 ;;		line 17 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4594 ;; Tracked objects:
  4595 ;;		On entry : 300/0
  4596 ;;		On exit  : 300/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1
  4599 ;;      Params:         0       0       0
  4600 ;;      Locals:         0       0       0
  4601 ;;      Temps:          0       0       0
  4602 ;;      Totals:         0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		_Isr_Timer
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _LEDScan
  4614  02E0                     _LEDScan:	
  4615                           
  4616                           ;LED.c: 19: static unsigned char LEDScanIndex=0;
  4617                           ;LED.c: 21: TRISB5=1,WPUB5=0;
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _LEDScan: [wreg-fsr0h+status,2+status,0]
  4621  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  4622  02E1  1686               	bsf	6,5	;volatile
  4623  02E2  1295               	bcf	21,5	;volatile
  4624                           
  4625                           ;LED.c: 22: TRISB4=1,WPUB4=0;
  4626  02E3  1606               	bsf	6,4	;volatile
  4627  02E4  1215               	bcf	21,4	;volatile
  4628                           
  4629                           ;LED.c: 23: TRISB3=1,WPUB3=0;
  4630  02E5  1586               	bsf	6,3	;volatile
  4631  02E6  1195               	bcf	21,3	;volatile
  4632                           
  4633                           ;LED.c: 24: TRISC3=1,WPUC3=0;
  4634  02E7  1587               	bsf	7,3	;volatile
  4635  02E8  1703               	bsf	3,6	;RP1=1, select bank3
  4636  02E9  118F               	bcf	15,3	;volatile
  4637                           
  4638                           ;LED.c: 25: TRISC2=1,WPUC2=0;
  4639  02EA  1303               	bcf	3,6	;RP1=0, select bank1
  4640  02EB  1507               	bsf	7,2	;volatile
  4641  02EC  1703               	bsf	3,6	;RP1=1, select bank3
  4642  02ED  110F               	bcf	15,2	;volatile
  4643  02EE  0000               	nop	;# 
  4644  02EF  0000               	nop	;# 
  4645                           
  4646                           ;LED.c: 28: switch(LEDScanIndex)
  4647  02F0  2B46               	goto	i1l6138
  4648  02F1                     i1l2982:	
  4649                           ;LED.c: 29: {
  4650                           ;LED.c: 30: case 0:
  4651                           
  4652                           
  4653                           ;LED.c: 31: if(LEDArrMap[0]&0x02)
  4654  02F1  1CA0               	btfss	_LEDArrMap,1
  4655  02F2  2AF4               	goto	i1l2983
  4656                           
  4657                           ;LED.c: 32: {
  4658                           ;LED.c: 33: TRISB4=0,WPUB4=0;RB4=0 ;
  4659  02F3  2375               	fcall	PL24	;call to abstracted procedure
  4660  02F4                     i1l2983:	
  4661                           
  4662                           ;LED.c: 34: }
  4663                           ;LED.c: 35: if(LEDArrMap[0]&0x04)
  4664  02F4  1D20               	btfss	_LEDArrMap,2
  4665  02F5  2AF7               	goto	i1l2984
  4666                           
  4667                           ;LED.c: 36: {
  4668                           ;LED.c: 37: TRISB3=0,WPUB3=0;RB3=0 ;
  4669  02F6  236F               	fcall	PL22	;call to abstracted procedure
  4670  02F7                     i1l2984:	
  4671                           
  4672                           ;LED.c: 38: }
  4673                           ;LED.c: 39: if(LEDArrMap[0]&0x08)
  4674  02F7  1DA0               	btfss	_LEDArrMap,3
  4675  02F8  2AFA               	goto	i1l2985
  4676                           
  4677                           ;LED.c: 40: {
  4678                           ;LED.c: 41: TRISC3=0,WPUC3=0;RC3=0 ;
  4679  02F9  2359               	fcall	PL14	;call to abstracted procedure
  4680  02FA                     i1l2985:	
  4681                           
  4682                           ;LED.c: 42: }
  4683                           ;LED.c: 43: if(LEDArrMap[0]&0x10)
  4684  02FA  1E20               	btfss	_LEDArrMap,4
  4685  02FB  2AFD               	goto	i1l2986
  4686                           
  4687                           ;LED.c: 44: {
  4688                           ;LED.c: 45: TRISC2=0,WPUC2=0;RC2=0 ;
  4689  02FC  2361               	fcall	PL16	;call to abstracted procedure
  4690  02FD                     i1l2986:	
  4691                           
  4692                           ;LED.c: 46: }
  4693                           ;LED.c: 47: TRISB5=0,WPUB5=0;RB5=1 ;
  4694  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  4695  02FE  1286               	bcf	6,5	;volatile
  4696  02FF  1295               	bcf	21,5	;volatile
  4697  0300  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0301  1686               	bsf	6,5	;volatile
  4699                           
  4700                           ;LED.c: 48: break;
  4701  0302  2B53               	goto	i1l6140
  4702  0303                     i1l2988:	
  4703                           ;LED.c: 50: case 1:
  4704                           
  4705                           
  4706                           ;LED.c: 51: if(LEDArrMap[1]&0x01)
  4707  0303  1C21               	btfss	_LEDArrMap+1,0
  4708  0304  2B06               	goto	i1l2989
  4709                           
  4710                           ;LED.c: 52: {
  4711                           ;LED.c: 53: TRISB5=0,WPUB5=0;RB5=0 ;
  4712  0305  2369               	fcall	PL20	;call to abstracted procedure
  4713  0306                     i1l2989:	
  4714                           
  4715                           ;LED.c: 54: }
  4716                           ;LED.c: 55: if(LEDArrMap[1]&0x04)
  4717  0306  1D21               	btfss	_LEDArrMap+1,2
  4718  0307  2B09               	goto	i1l2990
  4719                           
  4720                           ;LED.c: 56: {
  4721                           ;LED.c: 57: TRISB3=0,WPUB3=0;RB3=0 ;
  4722  0308  236F               	fcall	PL22	;call to abstracted procedure
  4723  0309                     i1l2990:	
  4724                           
  4725                           ;LED.c: 58: }
  4726                           ;LED.c: 59: if(LEDArrMap[1]&0x08)
  4727  0309  1DA1               	btfss	_LEDArrMap+1,3
  4728  030A  2B0C               	goto	i1l2991
  4729                           
  4730                           ;LED.c: 60: {
  4731                           ;LED.c: 61: TRISC3=0,WPUC3=0;RC3=0 ;
  4732  030B  2359               	fcall	PL14	;call to abstracted procedure
  4733  030C                     i1l2991:	
  4734                           
  4735                           ;LED.c: 62: }
  4736                           ;LED.c: 63: if(LEDArrMap[1]&0x10)
  4737  030C  1E21               	btfss	_LEDArrMap+1,4
  4738  030D  2B0F               	goto	i1l2992
  4739                           
  4740                           ;LED.c: 64: {
  4741                           ;LED.c: 65: TRISC2=0,WPUC2=0;RC2=0 ;
  4742  030E  2361               	fcall	PL16	;call to abstracted procedure
  4743  030F                     i1l2992:	
  4744                           
  4745                           ;LED.c: 66: }
  4746                           ;LED.c: 67: TRISB4=0,WPUB4=0; RB4=1 ;
  4747  030F  1683               	bsf	3,5	;RP0=1, select bank1
  4748  0310  1206               	bcf	6,4	;volatile
  4749  0311  1215               	bcf	21,4	;volatile
  4750  0312  1283               	bcf	3,5	;RP0=0, select bank0
  4751  0313  1606               	bsf	6,4	;volatile
  4752                           
  4753                           ;LED.c: 68: break;
  4754  0314  2B53               	goto	i1l6140
  4755  0315                     i1l2993:	
  4756                           ;LED.c: 70: case 2:
  4757                           
  4758                           
  4759                           ;LED.c: 71: if(LEDArrMap[2]&0x01)
  4760  0315  1C22               	btfss	_LEDArrMap+2,0
  4761  0316  2B18               	goto	i1l2994
  4762                           
  4763                           ;LED.c: 72: {
  4764                           ;LED.c: 73: TRISB5=0,WPUB5=0;RB5=0 ;
  4765  0317  2369               	fcall	PL20	;call to abstracted procedure
  4766  0318                     i1l2994:	
  4767                           
  4768                           ;LED.c: 74: }
  4769                           ;LED.c: 75: if(LEDArrMap[2]&0x02)
  4770  0318  1CA2               	btfss	_LEDArrMap+2,1
  4771  0319  2B1B               	goto	i1l2995
  4772                           
  4773                           ;LED.c: 76: {
  4774                           ;LED.c: 77: TRISB4=0,WPUB4=0;RB4=0 ;
  4775  031A  2375               	fcall	PL24	;call to abstracted procedure
  4776  031B                     i1l2995:	
  4777                           
  4778                           ;LED.c: 78: }
  4779                           ;LED.c: 79: if(LEDArrMap[2]&0x08)
  4780  031B  1DA2               	btfss	_LEDArrMap+2,3
  4781  031C  2B1E               	goto	i1l2996
  4782                           
  4783                           ;LED.c: 80: {
  4784                           ;LED.c: 81: TRISC3=0,WPUC3=0;RC3=0 ;
  4785  031D  2359               	fcall	PL14	;call to abstracted procedure
  4786  031E                     i1l2996:	
  4787                           
  4788                           ;LED.c: 82: }
  4789                           ;LED.c: 83: if(LEDArrMap[2]&0x10)
  4790  031E  1E22               	btfss	_LEDArrMap+2,4
  4791  031F  2B21               	goto	i1l2997
  4792                           
  4793                           ;LED.c: 84: {
  4794                           ;LED.c: 85: TRISC2=0,WPUC2=0;RC2=0 ;
  4795  0320  2361               	fcall	PL16	;call to abstracted procedure
  4796  0321                     i1l2997:	
  4797                           
  4798                           ;LED.c: 86: }
  4799                           ;LED.c: 87: TRISB3=0,WPUB3=0;RB3=1 ;
  4800  0321  1683               	bsf	3,5	;RP0=1, select bank1
  4801  0322  1186               	bcf	6,3	;volatile
  4802  0323  1195               	bcf	21,3	;volatile
  4803  0324  1283               	bcf	3,5	;RP0=0, select bank0
  4804  0325  1586               	bsf	6,3	;volatile
  4805                           
  4806                           ;LED.c: 88: break;
  4807  0326  2B53               	goto	i1l6140
  4808  0327                     i1l2998:	
  4809                           ;LED.c: 90: case 3:
  4810                           
  4811                           
  4812                           ;LED.c: 91: if(LEDArrMap[3]&0x01)
  4813  0327  1C23               	btfss	_LEDArrMap+3,0
  4814  0328  2B2A               	goto	i1l2999
  4815                           
  4816                           ;LED.c: 92: {
  4817                           ;LED.c: 93: TRISB5=0,WPUB5=0;RB5=0 ;
  4818  0329  2369               	fcall	PL20	;call to abstracted procedure
  4819  032A                     i1l2999:	
  4820                           
  4821                           ;LED.c: 94: }
  4822                           ;LED.c: 95: if(LEDArrMap[3]&0x02)
  4823  032A  1CA3               	btfss	_LEDArrMap+3,1
  4824  032B  2B2D               	goto	i1l3000
  4825                           
  4826                           ;LED.c: 96: {
  4827                           ;LED.c: 97: TRISB4=0,WPUB4=0;RB4=0 ;
  4828  032C  2375               	fcall	PL24	;call to abstracted procedure
  4829  032D                     i1l3000:	
  4830                           
  4831                           ;LED.c: 98: }
  4832                           ;LED.c: 99: if(LEDArrMap[3]&0x04)
  4833  032D  1D23               	btfss	_LEDArrMap+3,2
  4834  032E  2B30               	goto	i1l3001
  4835                           
  4836                           ;LED.c: 100: {
  4837                           ;LED.c: 101: TRISB3=0,WPUB3=0;RB3=0 ;
  4838  032F  236F               	fcall	PL22	;call to abstracted procedure
  4839  0330                     i1l3001:	
  4840                           
  4841                           ;LED.c: 102: }
  4842                           ;LED.c: 103: TRISC3=0,WPUC3=0;RC3=1 ;
  4843  0330  1683               	bsf	3,5	;RP0=1, select bank1
  4844  0331  1187               	bcf	7,3	;volatile
  4845  0332  1703               	bsf	3,6	;RP1=1, select bank3
  4846  0333  118F               	bcf	15,3	;volatile
  4847  0334  1283               	bcf	3,5	;RP0=0, select bank0
  4848  0335  1303               	bcf	3,6	;RP1=0, select bank0
  4849  0336  1587               	bsf	7,3	;volatile
  4850                           
  4851                           ;LED.c: 104: break;
  4852  0337  2B53               	goto	i1l6140
  4853  0338                     i1l3002:	
  4854                           ;LED.c: 106: case 4:
  4855                           
  4856                           
  4857                           ;LED.c: 107: if(LEDArrMap[4]&0x01)
  4858  0338  1C24               	btfss	_LEDArrMap+4,0
  4859  0339  2B3B               	goto	i1l3003
  4860                           
  4861                           ;LED.c: 108: {
  4862                           ;LED.c: 109: TRISB5=0,WPUB5=0;RB5=0 ;
  4863  033A  2369               	fcall	PL20	;call to abstracted procedure
  4864  033B                     i1l3003:	
  4865                           
  4866                           ;LED.c: 110: }
  4867                           ;LED.c: 111: if(LEDArrMap[4]&0x04)
  4868  033B  1D24               	btfss	_LEDArrMap+4,2
  4869  033C  2B3E               	goto	i1l3004
  4870                           
  4871                           ;LED.c: 112: {
  4872                           ;LED.c: 113: TRISB3=0,WPUB3=0;RB3=0 ;
  4873  033D  236F               	fcall	PL22	;call to abstracted procedure
  4874  033E                     i1l3004:	
  4875                           
  4876                           ;LED.c: 114: }
  4877                           ;LED.c: 115: TRISC2=0,WPUC2=0;RC2=1 ;
  4878  033E  1683               	bsf	3,5	;RP0=1, select bank1
  4879  033F  1107               	bcf	7,2	;volatile
  4880  0340  1703               	bsf	3,6	;RP1=1, select bank3
  4881  0341  110F               	bcf	15,2	;volatile
  4882  0342  1283               	bcf	3,5	;RP0=0, select bank0
  4883  0343  1303               	bcf	3,6	;RP1=0, select bank0
  4884  0344  1507               	bsf	7,2	;volatile
  4885                           
  4886                           ;LED.c: 116: }
  4887  0345  2B53               	goto	i1l6140
  4888  0346                     i1l6138:	
  4889  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4890  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4891  0348  083A               	movf	LEDScan@LEDScanIndex,w
  4892                           
  4893                           ; Switch size 1, requested type "space"
  4894                           ; Number of cases is 5, Range of values is 0 to 4
  4895                           ; switch strategies available:
  4896                           ; Name         Instructions Cycles
  4897                           ; direct_byte           11     6 (fixed)
  4898                           ; simple_byte           16     9 (average)
  4899                           ; jumptable            260     6 (fixed)
  4900                           ;	Chosen strategy is direct_byte
  4901  0349  0084               	movwf	4
  4902  034A  3005               	movlw	5
  4903  034B  0204               	subwf	4,w
  4904  034C  1803               	skipnc
  4905  034D  2B53               	goto	i1l6140
  4906  034E  3007               	movlw	high i1S6996
  4907  034F  008A               	movwf	10
  4908  0350  30C1               	movlw	low i1S6996
  4909  0351  0704               	addwf	4,w
  4910  0352  0082               	movwf	2
  4911  0353                     i1l6140:	
  4912  0353  3005               	movlw	5
  4913                           
  4914                           ;LED.c: 117: LEDScanIndex++;
  4915  0354  0ABA               	incf	LEDScan@LEDScanIndex,f
  4916                           
  4917                           ;LED.c: 118: if(LEDScanIndex>=5)
  4918  0355  023A               	subwf	LEDScan@LEDScanIndex,w
  4919  0356  1803               	btfsc	3,0
  4920                           
  4921                           ;LED.c: 119: {
  4922                           ;LED.c: 120: LEDScanIndex=0;
  4923  0357  01BA               	clrf	LEDScan@LEDScanIndex
  4924  0358  0008               	return
  4925  0359                     __end_of_LEDScan:	
  4926  007E                     btemp	set	126	;btemp
  4927  007E                     wtemp0	set	126
  4928  0359                     PL14:	
  4929  0359  1683               	bsf	3,5	;RP0=1, select bank1
  4930  035A  1187               	bcf	7,3	;volatile
  4931  035B  1703               	bsf	3,6	;RP1=1, select bank3
  4932  035C  118F               	bcf	15,3	;volatile
  4933  035D  1283               	bcf	3,5	;RP0=0, select bank0
  4934  035E  1303               	bcf	3,6	;RP1=0, select bank0
  4935  035F  1187               	bcf	7,3	;volatile
  4936  0360  0008               	return
  4937  0361                     __end_ofPL14:	
  4938  0361                     PL16:	
  4939  0361  1683               	bsf	3,5	;RP0=1, select bank1
  4940  0362  1107               	bcf	7,2	;volatile
  4941  0363  1703               	bsf	3,6	;RP1=1, select bank3
  4942  0364  110F               	bcf	15,2	;volatile
  4943  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4944  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4945  0367  1107               	bcf	7,2	;volatile
  4946  0368  0008               	return
  4947  0369                     __end_ofPL16:	
  4948  0369                     PL20:	
  4949  0369  1683               	bsf	3,5	;RP0=1, select bank1
  4950  036A  1286               	bcf	6,5	;volatile
  4951  036B  1295               	bcf	21,5	;volatile
  4952  036C  1283               	bcf	3,5	;RP0=0, select bank0
  4953  036D  1286               	bcf	6,5	;volatile
  4954  036E  0008               	return
  4955  036F                     __end_ofPL20:	
  4956  036F                     PL22:	
  4957  036F  1683               	bsf	3,5	;RP0=1, select bank1
  4958  0370  1186               	bcf	6,3	;volatile
  4959  0371  1195               	bcf	21,3	;volatile
  4960  0372  1283               	bcf	3,5	;RP0=0, select bank0
  4961  0373  1186               	bcf	6,3	;volatile
  4962  0374  0008               	return
  4963  0375                     __end_ofPL22:	
  4964  0375                     PL24:	
  4965  0375  1683               	bsf	3,5	;RP0=1, select bank1
  4966  0376  1206               	bcf	6,4	;volatile
  4967  0377  1215               	bcf	21,4	;volatile
  4968  0378  1283               	bcf	3,5	;RP0=0, select bank0
  4969  0379  1206               	bcf	6,4	;volatile
  4970  037A  0008               	return
  4971  037B                     __end_ofPL24:	
  4972                           
  4973                           	psect	swtext3
  4974  07C1                     __pswtext3:	
  4975  07C1                     i1S6996:	
  4976  07C1  2AF1               	ljmp	i1l2982
  4977  07C2  2B03               	ljmp	i1l2988
  4978  07C3  2B15               	ljmp	i1l2993
  4979  07C4  2B27               	ljmp	i1l2998
  4980  07C5  2B38               	ljmp	i1l3002


Data Sizes:
    Strings     0
    Constant    16
    Data        51
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     30      75
    BANK1            80      7      66

Pointer List with Targets:

    ADCRead@Val	PTR unsigned int  size(1) Largest target is 6
		 -> ADCVal(BANK0[6]), 


Critical Paths under _main in COMMON

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _WorkLedPro->___lbmod
    _USBLedPro->___lbmod
    _ADCRead->___lmul
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _DisplayPro->_DisplayIcon
    _DisplayPro->_USBLedPro
    _ADCPro->_ADCRead
    _ADCRead->___lldiv
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADCPro->_ADCRead

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3999
                              _Apply
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0       0
                           _GPIOInit
                          _TimerInit
 ---------------------------------------------------------------------------------
 (2) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Apply                                                0     0      0    3999
                             _ADCPro
                         _DisplayPro
                            _KeyScan
                              _Motor
                           _Sec1sPro
 ---------------------------------------------------------------------------------
 (2) _Sec1sPro                                             5     5      0     953
                                              3 BANK0      5     5      0
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Motor                                                0     0      0      52
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _KeyScan                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayPro                                           0     0      0    1422
                        _DisplayIcon
                             _ErrPro
                            _LockPro
                          _USBLedPro
                         _WorkLedPro
 ---------------------------------------------------------------------------------
 (3) _WorkLedPro                                           2     2      0     659
                                              0 BANK0      2     2      0
                             ___bmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     224
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USBLedPro                                            3     3      0     435
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     216
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     219
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LockPro                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ErrPro                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DisplayIcon                                          7     5      2     328
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADCPro                                               0     0      0    1572
                            _ADCRead
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                             16    15      1    1572
                                             21 BANK0      9     8      1
                                              0 BANK1      7     7      0
                           _ADSample
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     501
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADSample                                             3     3      0      65
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _LEDScan
 ---------------------------------------------------------------------------------
 (6) _LEDScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apply
     _ADCPro
       _ADCRead
         _ADSample
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _DisplayPro
       _DisplayIcon
       _ErrPro
       _LockPro
       _USBLedPro
         ___lbdiv
         ___lbmod
       _WorkLedPro
         ___bmul
         ___lbdiv
         ___lbmod
     _KeyScan
     _Motor
       ___wmul
     _Sec1sPro
       ___bmul
       ___lwdiv
   _SystemInit
     _GPIOInit
     _TimerInit

 _Isr_Timer (ROOT)
   _LEDScan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      7      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      98       8        0.0%
ABS                  0      0      98       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 13 10:51:41 2020

                      pc 0002           ___bmul@product 0076                       PL2 03E3  
                     PL4 010E                       PL6 0462                       PL8 0124  
                     fsr 0004      ___wmul@multiplicand 0077               _BatPercent 0046  
                    PL10 03F8                      PL20 0369                      PL12 05D7  
                    PL30 04D1                      PL22 036F                      PL14 0359  
                    PL40 06C3                      PL32 046E                      PL24 0375  
                    PL16 0361                      PL34 05E4                      PL26 0209  
                    PL18 02CF                      PL36 0774                      PL28 02DA  
                    PL38 0135                      l609 028A                      l627 0070  
                    l628 0082                      l639 0747                      l575 0584  
                    _RA3 002B                      _RA5 002D                      _RB3 0033  
                    _RA6 002E                      _RB4 0034                      _RC2 003A  
                    _RA7 002F                      _RB5 0035                      _RC3 003B  
                    _PR2 0092                      fsr0 0004          __end_of_ADCRead 010E  
                    indf 0000                     S6992 0001                     S6994 07CA  
        __end_of_LEDSeg1 0762          __end_of_LEDScan 0359                     l3042 03A5  
                   l4202 0498                     l2371 0140                     l3076 051D  
                   l2380 0199                     l2372 0141                     l2381 019A  
                   l2373 016E                     l2391 01F4                     l2383 01D8  
                   l2375 016B                     l2393 01F1                     l2385 01D4  
                   l2377 01F6                     l4209 04CA                     l2378 019C  
                   l4227 0620                     l2395 01EF                     l2397 01FF  
                   l2398 0200                     l2399 0206                     l6024 01E8  
                   l6018 01CE                     l4199 047D                     l6320 0563  
                   l5504 06EA                     l6308 0538                     l6412 0390  
                   l6350 00DD                     l4478 06F0                     l5518 06FD  
                   l5534 06E0                     l5526 06CC                     l6440 03B8  
                   l6416 0392                     l6290 0636                     l6346 00CB  
                   l6354 00F7                     l6530 0674                     l6348 00D3  
                   l6356 00FF                     l6540 0577                     l5740 04DE  
                   l6452 03CA                     l6444 03BB                     l6550 058F  
                   l6382 05B3                     l6374 05AE                     l5750 04E8  
                   l5486 0797                     l6518 065D                     l6614 026A  
                   l6606 0259                     l6560 059B                     l6536 056D  
                   l6544 057C                     l5760 0507                     l6624 0279  
                   l6616 026C                     l6570 05AB                     l6554 0598  
                   l6538 0572                     l6490 045E                     l6618 026E  
                   l6388 05CE                     l5764 050C                     l6476 0418  
                   l6636 029E                     l6628 0284                     l6660 02CC  
                   l5782 0521                     l5758 0506                     l6590 0227  
                   l6832 0724                     l6648 02B4                     l6920 06BC  
                   l6912 06B7                     l5794 076D                     l6658 02C9  
                   l6594 0243                     l6586 021C                     l6578 020F  
                   l6906 06B2                     l6930 07C7                     l6828 071C  
                   l5798 0771                     l6870 04A9                     l6882 04C3  
                   l6886 04CD                     l6896 06A7                     _ANS1 0C41  
                   _ANS2 0C42                     u3070 01DE                     u3080 01E4  
                   u3072 01DF                     u2345 04F6                     u3082 01E5  
                   u4035 042C                     u4045 0451                     u4215 0252  
                   _PIE1 008C                     u4315 02AD                     u2900 0188  
                   u2902 0189                     u4095 0666                     u3705 0066  
                   u2770 014E                     u3715 0079                     u4195 02D8  
                   u2780 0154                     u2772 014F                     u4605 0490  
                   u2782 0155                     u3665 054B                     u2970 01A9  
                   u2890 0182                     u2980 01AF                     u2972 01AA  
                   u2892 0183                     u3765 00C2                     u2982 01B0  
                   u3695 0050                     u4655 04BA                     u3794 05DF  
                   u3795 05DD                     u3895 03EB                     _RBPU 040F  
                   _WPUA 018E                     _WPUB 0095                     _WPUC 018F  
                   _main 07C6                     btemp 007E                     start 000C  
      ___bmul@multiplier 0077          _VarPowerUpCount 003D         __end_of_ADSample 074C  
        __end_of_KeyScan 0209          __end_of_LockPro 0524         __end_of_GPIOInit 06A1  
    __end_of_DisplayIcon 05D7                    ?_main 0072          __end_of___lbdiv 06FF  
        __end_of___lbmod 06E4          __end_of___lldiv 056C                    _T2CON 0012  
        __end_of___lwdiv 0679                    _ADcnt 0042                    _ADsum 0025  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _WPUA1 0C71                    _WPUA2 0C72                    _WPUB3 04AB  
                  _WPUA6 0C76                    _WPUC2 0C7A                    _WPUB4 04AC  
                  _WPUA7 0C77                    _WPUC3 0C7B                    _WPUB5 04AD  
                  _Apply 06A1      ___lmul@multiplicand 0051                    _Motor 0474  
             _DisplayPro 07A3      ErrPro@LedSwitchFlag 0380           __pbitbssCOMMON 0380  
                  pclath 000A                    status 0003                    wtemp0 007E  
     __size_of_USBLedPro 005B          ___lbdiv@divisor 0075          ___lbdiv@counter 0077  
        __initialization 000D         __end_of_Sec1sPro 02CF             __end_of_main 07CA  
             _CurrentCnt 0041                ??_ADCRead 0063                   ??_main 007A  
            _HideNumbArr 00BE                ??_LEDScan 0072             USBLedPro@cnt 0038  
                 ?_Apply 0072      LEDScan@LEDScanIndex 003A                   ?_Motor 0072  
           _SystemONFlag 038D                ADCRead@ch 00DB                   _ADCON0 001F  
                 _ADCON1 009F                   _ADCMax 002F                   _ADCMin 002D  
                 _ADRESH 001E                   _ADRESL 009E                   _ADCVal 0047  
                 _ADCPro 056C                   i1S6996 07C1                   _GODONE 00F9  
                 i1l3000 032D                   i1l3001 0330                   i1l3002 0338  
                 i1l3003 033B                   i1l3004 033E                   i1l1196 0711  
                 i1l6200 070B                   i1l6140 0353                   i1l6138 0346  
                 i1l2990 0309                   i1l2982 02F1                   i1l2991 030C  
                 i1l2983 02F4                   i1l2992 030F                   i1l2984 02F7  
                 i1l2993 0315                   i1l2985 02FA                   i1l2994 0318  
                 i1l2986 02FD                   i1l2995 031B                   i1l2996 031E  
                 i1l2988 0303                   i1l2997 0321                   i1l2989 0306  
                 i1l2998 0327                   i1l2999 032A                   _INTCON 000B  
                 _OSCCON 008F                   _TMR2IF 0061                   _WDTCON 0105  
                 _TRISA1 0429                   _TRISA2 042A                   _TRISB3 0433  
                 _TRISA6 042E                   _TRISB4 0434                   _TRISC2 043A  
                 _TRISA7 042F                   _TRISB5 0435                   _TRISC3 043B  
             _TimeAddCnt 00D3               _TimeDecCnt 00D5                ??_KeyScan 0075  
              ??_LockPro 0075                   _KeyCnt 0029                   _ErrPro 0762  
     __size_of_Isr_Timer 001B              _DisplayIcon 05AE                   ___bmul 0795  
                 ___lmul 061C                   ___wmul 071A                ??___lbdiv 0076  
              ??___lbmod 0076                   _cnt2ms 003F                ??___lldiv 0079  
              ??___lwdiv 0079          ErrPro@SwitchCnt 0031        __end_of_USBLedPro 0462  
     __size_of_TimerInit 000E                ADSample@i 0077                   saved_w 007E  
            ?_DisplayPro 0072         ___lbdiv@dividend 0076                ?_ADSample 0072  
        ___lbmod@divisor 0075  __end_of__initialization 0022          ___lbmod@counter 0078  
              ?_GPIOInit 0072               _WorkLedPro 037B      ___bmul@multiplicand 0075  
          __end_of_Apply 06C3           __pcstackCOMMON 0072            __end_of_Motor 04D1  
           __pidataBANK1 05E9               __end_ofPL2 03F8               __end_ofPL4 0124  
             __end_ofPL6 046E               __end_ofPL8 0135         ___lbdiv@quotient 0078  
       LockPro@SwitchCnt 0034               _SystemInit 07B0                  ??_Apply 007A  
      __end_of_Isr_Timer 071A                  ??_Motor 0079                  ?_ADCPro 0072  
             ??_ADSample 0075                ?_Sec1sPro 0072               __pbssBANK0 0020  
             __pbssBANK1 00D3     LockPro@LedSwitchFlag 0381               ??_GPIOInit 0075  
      __end_of_TimerInit 0795                  ?_ErrPro 0072               __pmaintext 07C6  
                ?___bmul 0075                  ?___lmul 004D               ADCRead@Val 0062  
    __size_of_DisplayPro 000D                  ?___wmul 0075               __pintentry 0004  
         ___lmul@product 0075                  _ADCRead 0024                  _LEDSeg1 0752  
                _LEDSeg2 00A0                  _LEDScan 02E0    Sec1sPro@ActualPercent 0040  
                _USBFlag 038B                  _USBLink 0384          __size_of_ADCPro 0042  
             ??_Sec1sPro 0050               __stringtab 074C                  _KeyScan 013A  
                _IovFlag 038C                  _LockPro 04D7                  _LockSta 002B  
            ?_WorkLedPro 0072          __size_of_ErrPro 0012                  _NumbArr 00C9  
        __size_of___bmul 000E                  ___lbdiv 06E4          __size_of___lmul 0033  
                ___lbmod 06C8                  _WorkCnt 00D7                  _WorkMin 007A  
                ___lldiv 0524          __size_of___wmul 0019                  ___lwdiv 064F  
                _cnt10ms 003E       Sec1sPro@PercentErr 0052                  __ptext1 07B0  
                __ptext2 0787                  __ptext3 0679                  __ptext4 06A1  
                __ptext5 020F                  __ptext6 064F                  __ptext7 0474  
                __ptext8 071A                  __ptext9 013A           ADCRead@ad_temp 00E0  
            ?_SystemInit 0072                  _time2ms 0389                _LEDArrMap 0020  
                clrloop0 07BA     end_of_initialization 0022            WorkLedPro@dir 0382  
          WorkLedPro@cnt 0035               ADSample@ch 0076          ___lldiv@divisor 0055  
        ___lldiv@counter 0061             ?_DisplayIcon 0075          DisplayIcon@Mask 004D  
       ___lbmod@dividend 0077      __size_of_WorkLedPro 0068             ??_DisplayPro 007A  
              _USBLedPro 0407           __end_of_ADCPro 05AE  WorkLedPro@LedSwitchFlag 0383  
            ___lbmod@rem 0079        __size_of_ADSample 0019            LockPro@Ledcnt 0032  
      __size_of_GPIOInit 0028      __size_of_SystemInit 0009           __end_of_ErrPro 0774  
     __end_of_DisplayPro 07B0           __end_of___bmul 07A3           __end_of___lmul 064F  
         __end_of___wmul 0733                _OnOffFlag 0387              __end_ofPL10 0407  
            __end_ofPL20 036F              __end_ofPL12 05E4              __end_ofPL30 04D7  
            __end_ofPL22 0375              __end_ofPL14 0361              __end_ofPL40 06C8  
            __end_ofPL32 0474              __end_ofPL24 037B              __end_ofPL16 0369  
            __end_ofPL34 05E9              __end_ofPL26 020F              __end_ofPL18 02DA  
            __end_ofPL36 0778              __end_ofPL28 02E0              __end_ofPL38 013A  
    start_initialization 000D               ?_USBLedPro 0072                 ??_ADCPro 0079  
              _Isr_Timer 06FF        __size_of_Sec1sPro 00C0                 ??_ErrPro 0075  
               ??___bmul 0076                _TimerInit 0787                 ??___lmul 0075  
               ??___wmul 0079               init_fetch0 0778              __pdataBANK1 00A0  
               ?_ADCRead 0062                 ?_LEDScan 0072              __pbssCOMMON 007A  
              ___latbits 0000            __pcstackBANK0 004D            __pcstackBANK1 00DB  
             ?_Isr_Timer 0072           USBLedPro@index 0039                 ?_KeyScan 0072  
               ?_LockPro 0072             ??_WorkLedPro 004D         ___lwdiv@dividend 0077  
            ADCRead@AD_H 00DC               ?_TimerInit 0072              ADCRead@AD_L 00DE  
               ?___lbdiv 0075                 ?___lbmod 0075                 ?___lldiv 0055  
   __size_of_DisplayIcon 0029                 ?___lwdiv 0075                __pstrings 074C  
              __pswtext1 0001                __pswtext2 07CA                __pswtext3 07C1  
           ??_SystemInit 0075                 _ADCState 0043           __size_of_Apply 0022  
            ??_USBLedPro 004D           __size_of_Motor 005D       __end_of_WorkLedPro 03E3  
       ___lwdiv@quotient 004E                 _ADSample 0733     LockPro@LockSwitchCnt 0033  
      interrupt_function 0004           ___wmul@product 004D                 _GPIOInit 0679  
              clear_ram0 07B9           _OffHideNumbArr 00B0       __end_of_SystemInit 07B9  
       __size_of_ADCRead 00EA              __stringbase 0751        ___wmul@multiplier 0075  
 WorkLedPro@LedSwitchCnt 0037         __size_of_LEDScan 0079                 _LedIndex 00D9  
      ___lmul@multiplier 004D              ??_Isr_Timer 0072                 _Sec1sCnt 003B  
               _KeyInBuf 0386                 _Sec1sPro 020F                 _KeyPress 0385  
               _LockNumb 003C          WorkLedPro@index 0036         __size_of_KeyScan 00CF  
       __size_of_LockPro 004D              ??_TimerInit 0075         __size_of___lbdiv 001B  
       __size_of___lbmod 001C         __size_of___lldiv 0048         __size_of___lwdiv 002A  
               _WorkFlag 038A       __end_of__stringtab 0752          ___lwdiv@divisor 0075  
        ___lwdiv@counter 004D                 __ptext10 07A3                 __ptext11 037B  
               __ptext20 0024                 __ptext12 0795                 __ptext21 061C  
               __ptext13 0407                 __ptext22 0524                 __ptext14 06C8  
               __ptext23 0733                 __ptext15 06E4                 __ptext24 06FF  
               __ptext16 04D7                 __ptext25 02E0                 __ptext17 0762  
               __ptext18 05AE                 __ptext19 056C            __size_of_main 0004  
               _time10ms 0388      Sec1sPro@TempPercent 0053                 init_ram0 077C  
               intlevel1 0000         ___lldiv@dividend 0059                stringcode 074C  
           DisplayIcon@i 004F         ___lldiv@quotient 005D                 stringdir 074C  
               stringtab 074C         DisplayIcon@index 0075               _BatAddTime 0045  
          ??_DisplayIcon 0077               _BatDecTime 0044  
