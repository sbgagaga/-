

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Tue Aug 25 16:07:55 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	swtext1,local,class=CONST,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	swtext2,local,class=CONST,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	swtext3,local,class=CONST,delta=2
    49                           	psect	pa_nodes0,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  0000                     __pidataBANK0:	
    89                           
    90                           	psect	idataBANK1
    91  0632                     __pidataBANK1:	
    92                           
    93                           ;initializer for _LEDSeg2
    94  0632  3400               	retlw	0
    95  0633  3401               	retlw	1
    96  0634  3400               	retlw	0
    97  0635  3401               	retlw	1
    98  0636  3401               	retlw	1
    99  0637  3400               	retlw	0
   100  0638  3400               	retlw	0
   101  0639  3402               	retlw	2
   102  063A  3403               	retlw	3
   103  063B  3402               	retlw	2
   104  063C  3403               	retlw	3
   105  063D  3403               	retlw	3
   106  063E  3402               	retlw	2
   107  063F  3402               	retlw	2
   108  0640  3404               	retlw	4
   109  0641  3404               	retlw	4
   110                           
   111                           ;initializer for _OffHideNumbArr
   112  0642  3400               	retlw	0
   113  0643  3400               	retlw	0
   114  0644  3412               	retlw	18
   115  0645  3400               	retlw	0
   116  0646  345B               	retlw	91
   117  0647  3400               	retlw	0
   118  0648  347F               	retlw	127
   119  0649  3400               	retlw	0
   120  064A  347F               	retlw	127
   121  064B  3409               	retlw	9
   122  064C  34FF               	retlw	255
   123  064D  342D               	retlw	45
   124  064E  34FF               	retlw	255
   125  064F  343F               	retlw	63
   126                           
   127                           ;initializer for _NumbArr
   128  0650  3477               	retlw	119
   129  0651  3424               	retlw	36
   130  0652  345D               	retlw	93
   131  0653  346D               	retlw	109
   132  0654  342E               	retlw	46
   133  0655  346B               	retlw	107
   134  0656  347B               	retlw	123
   135  0657  3425               	retlw	37
   136  0658  347F               	retlw	127
   137  0659  342F               	retlw	47
   138                           
   139                           ;initializer for _HideNumbArr
   140  065A  3400               	retlw	0
   141  065B  3440               	retlw	64
   142  065C  3470               	retlw	112
   143  065D  3478               	retlw	120
   144  065E  347E               	retlw	126
   145  065F  347F               	retlw	127
   146  0660  347F               	retlw	127
   147                           
   148                           	psect	strings
   149  0777                     __pstrings:	
   150  0777                     stringtab:	
   151  0777                     __stringtab:	
   152  0777                     stringcode:	
   153                           ;	String table - string pointers are 1 byte each
   154                           
   155  0777                     stringdir:	
   156  0777  3007               	movlw	high stringdir
   157  0778  008A               	movwf	10
   158  0779  0804               	movf	4,w
   159  077A  0A84               	incf	4,f
   160  077B  0782               	addwf	2,f
   161  077C                     __stringbase:	
   162  077C  3400               	retlw	0
   163  077D                     __end_of__stringtab:	
   164  077D                     _LEDSeg1:	
   165  077D  3401               	retlw	1
   166  077E  3402               	retlw	2
   167  077F  3402               	retlw	2
   168  0780  3403               	retlw	3
   169  0781  3400               	retlw	0
   170  0782  3403               	retlw	3
   171  0783  3404               	retlw	4
   172  0784  3400               	retlw	0
   173  0785  3401               	retlw	1
   174  0786  3401               	retlw	1
   175  0787  3402               	retlw	2
   176  0788  3400               	retlw	0
   177  0789  3403               	retlw	3
   178  078A  3404               	retlw	4
   179  078B  3400               	retlw	0
   180  078C  3401               	retlw	1
   181  078D                     __end_of_LEDSeg1:	
   182  001F                     _ADCON0	set	31
   183  001E                     _ADRESH	set	30
   184  0012                     _T2CON	set	18
   185  000C                     _PIR1	set	12
   186  000B                     _INTCON	set	11
   187  0007                     _PORTC	set	7
   188  0006                     _PORTB	set	6
   189  0005                     _PORTA	set	5
   190  00F9                     _GODONE	set	249
   191  0061                     _TMR2IF	set	97
   192  005B                     _RBIE	set	91
   193  0058                     _RBIF	set	88
   194  003B                     _RC3	set	59
   195  003A                     _RC2	set	58
   196  0037                     _RB7	set	55
   197  0036                     _RB6	set	54
   198  0035                     _RB5	set	53
   199  0034                     _RB4	set	52
   200  0033                     _RB3	set	51
   201  002D                     _RA5	set	45
   202  002B                     _RA3	set	43
   203  002A                     _RA2	set	42
   204  0029                     _RA1	set	41
   205  0028                     _RA0	set	40
   206  009F                     _ADCON1	set	159
   207  009E                     _ADRESL	set	158
   208  0096                     _IOCB	set	150
   209  0095                     _WPUB	set	149
   210  0092                     _PR2	set	146
   211  008F                     _OSCCON	set	143
   212  008D                     _PIE2	set	141
   213  008C                     _PIE1	set	140
   214  0087                     _TRISC	set	135
   215  0086                     _TRISB	set	134
   216  0085                     _TRISA	set	133
   217  04AF                     _WPUB7	set	1199
   218  04AE                     _WPUB6	set	1198
   219  04AD                     _WPUB5	set	1197
   220  04AC                     _WPUB4	set	1196
   221  04AB                     _WPUB3	set	1195
   222  043B                     _TRISC3	set	1083
   223  043A                     _TRISC2	set	1082
   224  0437                     _TRISB7	set	1079
   225  0436                     _TRISB6	set	1078
   226  0435                     _TRISB5	set	1077
   227  0434                     _TRISB4	set	1076
   228  0433                     _TRISB3	set	1075
   229  042A                     _TRISA2	set	1066
   230  0429                     _TRISA1	set	1065
   231  040F                     _RBPU	set	1039
   232  0105                     _WDTCON	set	261
   233  018F                     _WPUC	set	399
   234  018E                     _WPUA	set	398
   235  0C42                     _ANS2	set	3138
   236  0C41                     _ANS1	set	3137
   237  0C7B                     _WPUC3	set	3195
   238  0C7A                     _WPUC2	set	3194
   239  0C72                     _WPUA2	set	3186
   240  0C71                     _WPUA1	set	3185
   241                           
   242                           	psect	cinit
   243  000D                     start_initialization:	
   244                           ; #config settings
   245                           
   246  000D                     __initialization:	
   247  000D  30CF               	movlw	low (__pdataBANK1+47)
   248                           
   249                           ; Initialize objects allocated to BANK1
   250  000E  1383               	bcf	3,7	;select IRP bank0
   251  000F  00FD               	movwf	125
   252  0010  3006               	movlw	high __pidataBANK1
   253  0011  00FE               	movwf	126
   254  0012  3032               	movlw	low __pidataBANK1
   255  0013  00FF               	movwf	127
   256  0014  30A0               	movlw	low __pdataBANK1
   257  0015  0084               	movwf	4
   258  0016  2791               	fcall	init_ram0
   259                           
   260                           ;initializer for _LEDArrMap
   261  0017  30FF               	movlw	255
   262  0018  00E5               	movwf	__pdataBANK0& (0+127)
   263  0019  00E6               	movwf	(__pdataBANK0+1)& (0+127)
   264  001A  30EF               	movlw	239
   265  001B  00E7               	movwf	(__pdataBANK0+2)& (0+127)
   266  001C  30FF               	movlw	255
   267  001D  00E8               	movwf	(__pdataBANK0+3)& (0+127)
   268  001E  00E9               	movwf	(__pdataBANK0+4)& (0+127)
   269                           
   270                           ;initializer for _BatDecTime
   271  001F  30D2               	movlw	210
   272  0020  00EA               	movwf	(__pdataBANK0+5)& (0+127)
   273                           
   274                           ;initializer for _BatAddTime
   275  0021  30F0               	movlw	240
   276  0022  00EB               	movwf	(__pdataBANK0+6)& (0+127)
   277                           
   278                           ; Clear objects allocated to BANK1
   279  0023  30D6               	movlw	low __pbssBANK1
   280  0024  0084               	movwf	4
   281  0025  30DA               	movlw	low (__pbssBANK1+4)
   282  0026  27CC               	fcall	clear_ram0
   283                           
   284                           ; Clear objects allocated to BANK0
   285  0027  3020               	movlw	low __pbssBANK0
   286  0028  0084               	movwf	4
   287  0029  304B               	movlw	low (__pbssBANK0+43)
   288  002A  27CC               	fcall	clear_ram0
   289                           
   290                           ; Clear objects allocated to BITCOMMON
   291  002B  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   292  002C  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   293  002D  01F2               	clrf	((__pbitbssCOMMON/(0+8)+2))& (0+127)
   294  002E                     end_of_initialization:	
   295                           ;End of C runtime variable initialization code
   296                           
   297  002E                     __end_of__initialization:	
   298  002E  0183               	clrf	3
   299  002F  2FD9               	ljmp	_main	;jump to C main() function
   300                           
   301                           	psect	bitbssCOMMON
   302  0380                     __pbitbssCOMMON:	
   303  0380                     ErrPro@LedSwitchFlag:	
   304  0380                     	ds	1
   305  0381                     LockPro@LedSwitchFlag:	
   306  0381                     	ds	1
   307  0382                     WorkLedPro@dir:	
   308  0382                     	ds	1
   309  0383                     WorkLedPro@LedSwitchFlag:	
   310  0383                     	ds	1
   311  0384                     _USBLink:	
   312  0384                     	ds	1
   313  0385                     _KeyInBuf:	
   314  0385                     	ds	1
   315  0386                     _LEDWorkFlag:	
   316  0386                     	ds	1
   317  0387                     _OnOffFlag:	
   318  0387                     	ds	1
   319  0388                     _KeyPress:	
   320  0388                     	ds	1
   321  0389                     _time10ms:	
   322  0389                     	ds	1
   323  038A                     _time2ms:	
   324  038A                     	ds	1
   325  038B                     _USBFlag:	
   326  038B                     	ds	1
   327  038C                     _WorkFlag:	
   328  038C                     	ds	1
   329  038D                     _LedIovFlag:	
   330  038D                     	ds	1
   331  038E                     _IovFlag:	
   332  038E                     	ds	1
   333  038F                     _LowBatFlag:	
   334  038F                     	ds	1
   335  0390                     _SystemONFlag:	
   336  0390                     	ds	1
   337                           
   338                           	psect	bssBANK0
   339  0020                     __pbssBANK0:	
   340  0020                     _ADsum:	
   341  0020                     	ds	4
   342  0024                     _WorkCnt:	
   343  0024                     	ds	2
   344  0026                     _LedIndex:	
   345  0026                     	ds	2
   346  0028                     _KeyCnt:	
   347  0028                     	ds	2
   348  002A                     SystemSleep@SleepCnt:	
   349  002A                     	ds	2
   350  002C                     _LockSta:	
   351  002C                     	ds	2
   352  002E                     ErrPro@SwitchCnt:	
   353  002E                     	ds	1
   354  002F                     ErrPro@cnt:	
   355  002F                     	ds	1
   356  0030                     LockPro@Ledcnt:	
   357  0030                     	ds	1
   358  0031                     LockPro@LockSwitchCnt:	
   359  0031                     	ds	1
   360  0032                     LockPro@SwitchCnt:	
   361  0032                     	ds	1
   362  0033                     WorkLedPro@delaycnt:	
   363  0033                     	ds	1
   364  0034                     WorkLedPro@cnt:	
   365  0034                     	ds	1
   366  0035                     WorkLedPro@index:	
   367  0035                     	ds	1
   368  0036                     WorkLedPro@LedSwitchCnt:	
   369  0036                     	ds	1
   370  0037                     USBLedPro@cnt:	
   371  0037                     	ds	1
   372  0038                     USBLedPro@index:	
   373  0038                     	ds	1
   374  0039                     LEDScan@LEDScanIndex:	
   375  0039                     	ds	1
   376  003A                     _Sec1sCnt:	
   377  003A                     	ds	1
   378  003B                     _LockNumb:	
   379  003B                     	ds	1
   380  003C                     _VarPowerUpCount:	
   381  003C                     	ds	1
   382  003D                     _cnt10ms:	
   383  003D                     	ds	1
   384  003E                     _cnt2ms:	
   385  003E                     	ds	1
   386  003F                     Sec1sPro@ActualPercent:	
   387  003F                     	ds	1
   388  0040                     _CurrentCnt:	
   389  0040                     	ds	1
   390  0041                     _ADcnt:	
   391  0041                     	ds	1
   392  0042                     _ADCState:	
   393  0042                     	ds	1
   394  0043                     _WorkMin:	
   395  0043                     	ds	1
   396  0044                     _BatPercent:	
   397  0044                     	ds	1
   398  0045                     _ADCVal:	
   399  0045                     	ds	6
   400                           
   401                           	psect	dataBANK0
   402  0065                     __pdataBANK0:	
   403  0065                     _LEDArrMap:	
   404  0065                     	ds	5
   405  006A                     _BatDecTime:	
   406  006A                     	ds	1
   407  006B                     _BatAddTime:	
   408  006B                     	ds	1
   409                           
   410                           	psect	bssBANK1
   411  00D6                     __pbssBANK1:	
   412  00D6                     _TimeAddCnt:	
   413  00D6                     	ds	2
   414  00D8                     _TimeDecCnt:	
   415  00D8                     	ds	2
   416                           
   417                           	psect	dataBANK1
   418  00A0                     __pdataBANK1:	
   419  00A0                     _LEDSeg2:	
   420  00A0                     	ds	16
   421  00B0                     _OffHideNumbArr:	
   422  00B0                     	ds	14
   423  00BE                     _NumbArr:	
   424  00BE                     	ds	10
   425  00C8                     _HideNumbArr:	
   426  00C8                     	ds	7
   427                           
   428                           	psect	inittext
   429  078D                     init_fetch0:	
   430                           ;	Called with low address in FSR and high address in W
   431                           
   432  078D  087E               	movf	126,w
   433  078E  008A               	movwf	10
   434  078F  087F               	movf	127,w
   435  0790  0082               	movwf	2
   436  0791                     init_ram0:	
   437                           ;Called with:
   438                           ;	high address of idata address in btemp 
   439                           ;	low address of idata address in btemp+1 
   440                           ;	low address of data in FSR
   441                           ;	high address + 1 of data in btemp-1
   442                           
   443  0791  278D               	fcall	init_fetch0
   444  0792  0080               	movwf	0
   445  0793  0A84               	incf	4,f
   446  0794  0804               	movf	4,w
   447  0795  067D               	xorwf	125,w
   448  0796  1903               	btfsc	3,2
   449  0797  3400               	retlw	0
   450  0798  0AFF               	incf	127,f
   451  0799  1903               	btfsc	3,2
   452  079A  0AFE               	incf	126,f
   453  079B  2F91               	goto	init_ram0
   454                           
   455                           	psect	clrtext
   456  07CC                     clear_ram0:	
   457                           ;	Called with FSR containing the base address, and
   458                           ;	W with the last address+1
   459                           
   460  07CC  0064               	clrwdt	;clear the watchdog before getting into this loop
   461  07CD                     clrloop0:	
   462  07CD  0180               	clrf	0	;clear RAM location pointed to by FSR
   463  07CE  0A84               	incf	4,f	;increment pointer
   464  07CF  0604               	xorwf	4,w	;XOR with final address
   465  07D0  1903               	btfsc	3,2	;have we reached the end yet?
   466  07D1  3400               	retlw	0	;all done for this memory range, return
   467  07D2  0604               	xorwf	4,w	;XOR again to restore value
   468  07D3  2FCD               	goto	clrloop0	;do the next byte
   469                           
   470                           	psect	cstackBANK1
   471  00CF                     __pcstackBANK1:	
   472  00CF                     ADCRead@ch:	
   473                           
   474                           ; 1 bytes @ 0x0
   475  00CF                     	ds	1
   476  00D0                     ADCRead@AD_H:	
   477                           
   478                           ; 2 bytes @ 0x1
   479  00D0                     	ds	2
   480  00D2                     ADCRead@AD_L:	
   481                           
   482                           ; 2 bytes @ 0x3
   483  00D2                     	ds	2
   484  00D4                     ADCRead@ad_temp:	
   485                           
   486                           ; 2 bytes @ 0x5
   487  00D4                     	ds	2
   488                           
   489                           	psect	cstackCOMMON
   490  0073                     __pcstackCOMMON:	
   491  0073                     ?_ADSample:	
   492  0073                     ?_LEDScan:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0073                     ??_LEDScan:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0073                     ?_KeyScan:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0073                     ?_Motor:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0073                     ?_DisplayPro:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0073                     ?_SystemSleep:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0073                     ?_SystemInit:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0073                     ?_GPIOInit:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0073                     ?_TimerInit:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0073                     ?_WorkLedPro:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0073                     ?_USBLedPro:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0073                     ?_LockPro:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0073                     ?_ErrPro:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0073                     ?_ADCPro:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0073                     ?_Sec1sPro:	
   535                           ; 1 bytes @ 0x0
   536                           
   537  0073                     ?_Isr_Timer:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0073                     ??_Isr_Timer:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0073                     ?_Apply:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0073                     ?_main:	
   547                           ; 1 bytes @ 0x0
   548                           
   549                           
   550                           ; 1 bytes @ 0x0
   551  0073                     	ds	3
   552  0076                     ??_ADSample:	
   553  0076                     ??_KeyScan:	
   554                           ; 1 bytes @ 0x3
   555                           
   556  0076                     ??_SystemSleep:	
   557                           ; 1 bytes @ 0x3
   558                           
   559  0076                     ??_SystemInit:	
   560                           ; 1 bytes @ 0x3
   561                           
   562  0076                     ??_GPIOInit:	
   563                           ; 1 bytes @ 0x3
   564                           
   565  0076                     ??_TimerInit:	
   566                           ; 1 bytes @ 0x3
   567                           
   568  0076                     ??_LockPro:	
   569                           ; 1 bytes @ 0x3
   570                           
   571  0076                     ??_ErrPro:	
   572                           ; 1 bytes @ 0x3
   573                           
   574  0076                     ?_DisplayIcon:	
   575                           ; 1 bytes @ 0x3
   576                           
   577  0076                     ??___lmul:	
   578                           ; 1 bytes @ 0x3
   579                           
   580  0076                     ?___bmul:	
   581                           ; 1 bytes @ 0x3
   582                           
   583  0076                     ?___lbdiv:	
   584                           ; 1 bytes @ 0x3
   585                           
   586  0076                     ?___lbmod:	
   587                           ; 1 bytes @ 0x3
   588                           
   589  0076                     ?___wmul:	
   590                           ; 1 bytes @ 0x3
   591                           
   592  0076                     ?___lwdiv:	
   593                           ; 2 bytes @ 0x3
   594                           
   595  0076                     ___bmul@multiplicand:	
   596                           ; 2 bytes @ 0x3
   597                           
   598  0076                     ___lbdiv@divisor:	
   599                           ; 1 bytes @ 0x3
   600                           
   601  0076                     ___lbmod@divisor:	
   602                           ; 1 bytes @ 0x3
   603                           
   604  0076                     DisplayIcon@index:	
   605                           ; 1 bytes @ 0x3
   606                           
   607  0076                     ___wmul@multiplier:	
   608                           ; 2 bytes @ 0x3
   609                           
   610  0076                     ___lwdiv@divisor:	
   611                           ; 2 bytes @ 0x3
   612                           
   613  0076                     ___lmul@product:	
   614                           ; 2 bytes @ 0x3
   615                           
   616                           
   617                           ; 4 bytes @ 0x3
   618  0076                     	ds	1
   619  0077                     ??___bmul:	
   620  0077                     ??___lbdiv:	
   621                           ; 1 bytes @ 0x4
   622                           
   623  0077                     ??___lbmod:	
   624                           ; 1 bytes @ 0x4
   625                           
   626  0077                     ADSample@ch:	
   627                           ; 1 bytes @ 0x4
   628                           
   629  0077                     ___bmul@product:	
   630                           ; 1 bytes @ 0x4
   631                           
   632  0077                     ___lbdiv@dividend:	
   633                           ; 1 bytes @ 0x4
   634                           
   635                           
   636                           ; 1 bytes @ 0x4
   637  0077                     	ds	1
   638  0078                     ??_DisplayIcon:	
   639  0078                     ADSample@i:	
   640                           ; 1 bytes @ 0x5
   641                           
   642  0078                     ___bmul@multiplier:	
   643                           ; 1 bytes @ 0x5
   644                           
   645  0078                     ___lbdiv@counter:	
   646                           ; 1 bytes @ 0x5
   647                           
   648  0078                     ___lbmod@dividend:	
   649                           ; 1 bytes @ 0x5
   650                           
   651  0078                     ___wmul@multiplicand:	
   652                           ; 1 bytes @ 0x5
   653                           
   654  0078                     ___lwdiv@dividend:	
   655                           ; 2 bytes @ 0x5
   656                           
   657                           
   658                           ; 2 bytes @ 0x5
   659  0078                     	ds	1
   660  0079                     ___lbdiv@quotient:	
   661  0079                     ___lbmod@counter:	
   662                           ; 1 bytes @ 0x6
   663                           
   664                           
   665                           ; 1 bytes @ 0x6
   666  0079                     	ds	1
   667  007A                     ??_Motor:	
   668  007A                     ??_ADCPro:	
   669                           ; 1 bytes @ 0x7
   670                           
   671  007A                     ??___wmul:	
   672                           ; 1 bytes @ 0x7
   673                           
   674  007A                     ??___lldiv:	
   675                           ; 1 bytes @ 0x7
   676                           
   677  007A                     ??___lwdiv:	
   678                           ; 1 bytes @ 0x7
   679                           
   680  007A                     ___lbmod@rem:	
   681                           ; 1 bytes @ 0x7
   682                           
   683                           
   684                           ; 1 bytes @ 0x7
   685  007A                     	ds	1
   686  007B                     ??_DisplayPro:	
   687  007B                     ??_Apply:	
   688                           ; 1 bytes @ 0x8
   689                           
   690  007B                     ??_main:	
   691                           ; 1 bytes @ 0x8
   692                           
   693                           
   694                           	psect	cstackBANK0
   695  004B                     __pcstackBANK0:	
   696                           ; 1 bytes @ 0x8
   697                           
   698  004B                     ??_WorkLedPro:	
   699  004B                     ??_USBLedPro:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  004B                     ?___lmul:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  004B                     ___lwdiv@counter:	
   706                           ; 4 bytes @ 0x0
   707                           
   708  004B                     DisplayIcon@Mask:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  004B                     ___wmul@product:	
   712                           ; 2 bytes @ 0x0
   713                           
   714  004B                     ___lmul@multiplier:	
   715                           ; 2 bytes @ 0x0
   716                           
   717                           
   718                           ; 4 bytes @ 0x0
   719  004B                     	ds	1
   720  004C                     ___lwdiv@quotient:	
   721                           
   722                           ; 2 bytes @ 0x1
   723  004C                     	ds	1
   724  004D                     DisplayIcon@i:	
   725                           
   726                           ; 1 bytes @ 0x2
   727  004D                     	ds	1
   728  004E                     ??_Sec1sPro:	
   729                           
   730                           ; 1 bytes @ 0x3
   731  004E                     	ds	1
   732  004F                     ___lmul@multiplicand:	
   733                           
   734                           ; 4 bytes @ 0x4
   735  004F                     	ds	1
   736  0050                     Sec1sPro@PercentErr:	
   737                           
   738                           ; 1 bytes @ 0x5
   739  0050                     	ds	1
   740  0051                     Sec1sPro@TempPercent:	
   741                           
   742                           ; 2 bytes @ 0x6
   743  0051                     	ds	2
   744  0053                     ?___lldiv:	
   745  0053                     ___lldiv@divisor:	
   746                           ; 4 bytes @ 0x8
   747                           
   748                           
   749                           ; 4 bytes @ 0x8
   750  0053                     	ds	4
   751  0057                     ___lldiv@dividend:	
   752                           
   753                           ; 4 bytes @ 0xC
   754  0057                     	ds	4
   755  005B                     ___lldiv@quotient:	
   756                           
   757                           ; 4 bytes @ 0x10
   758  005B                     	ds	4
   759  005F                     ___lldiv@counter:	
   760                           
   761                           ; 1 bytes @ 0x14
   762  005F                     	ds	1
   763  0060                     ?_ADCRead:	
   764  0060                     ADCRead@Val:	
   765                           ; 1 bytes @ 0x15
   766                           
   767                           
   768                           ; 1 bytes @ 0x15
   769  0060                     	ds	1
   770  0061                     ??_ADCRead:	
   771                           
   772                           ; 1 bytes @ 0x16
   773  0061                     	ds	4
   774                           
   775                           	psect	maintext
   776  07D9                     __pmaintext:	
   777 ;;
   778 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   779 ;;
   780 ;; *************** function _main *****************
   781 ;; Defined at:
   782 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K13-01\code\main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : B00/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0   BANK1
   796 ;;      Params:         0       0       0
   797 ;;      Locals:         0       0       0
   798 ;;      Temps:          0       0       0
   799 ;;      Totals:         0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels required when called:    6
   802 ;; This function calls:
   803 ;;		_Apply
   804 ;;		_SystemInit
   805 ;; This function is called by:
   806 ;;		Startup code after reset
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           
   811                           ;psect for function _main
   812  07D9                     _main:	
   813                           
   814                           ;main.c: 5: SystemInit();
   815                           
   816                           ;incstack = 0
   817                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   818  07D9  27C3               	fcall	_SystemInit
   819  07DA                     l7278:	
   820                           
   821                           ;main.c: 7: {
   822                           ;main.c: 8: Apply();
   823  07DA  268B               	fcall	_Apply
   824  07DB  0064               	clrwdt	;# 
   825  07DC  2FDA               	goto	l7278
   826  07DD                     __end_of_main:	
   827                           
   828                           	psect	text1
   829  068B                     __ptext1:	
   830 ;; *************** function _Apply *****************
   831 ;; Defined at:
   832 ;;		line 26 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;		None
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;                  1    wreg      void 
   839 ;; Registers used:
   840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/200
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1
   846 ;;      Params:         0       0       0
   847 ;;      Locals:         0       0       0
   848 ;;      Temps:          0       0       0
   849 ;;      Totals:         0       0       0
   850 ;;Total ram usage:        0 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    5
   853 ;; This function calls:
   854 ;;		_ADCPro
   855 ;;		_DisplayPro
   856 ;;		_KeyScan
   857 ;;		_Motor
   858 ;;		_Sec1sPro
   859 ;;		_SystemSleep
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           
   866                           ;psect for function _Apply
   867  068B                     _Apply:	
   868                           
   869                           ;K13-01.c: 28: if(time2ms)
   870                           
   871                           ;incstack = 0
   872                           ; Regs used in _Apply: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   873  068B  1D71               	btfss	_time2ms/(0+8),_time2ms& (0+7)
   874  068C  2E91               	goto	l7242
   875                           
   876                           ;K13-01.c: 29: {
   877                           ;K13-01.c: 30: time2ms=0;
   878  068D  1171               	bcf	_time2ms/(0+8),_time2ms& (0+7)
   879                           
   880                           ;K13-01.c: 31: if(SystemONFlag)
   881  068E  1C72               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   882  068F  2E91               	goto	l7242
   883                           
   884                           ;K13-01.c: 32: {
   885                           ;K13-01.c: 33: KeyScan();
   886  0690  2030               	fcall	_KeyScan
   887  0691                     l7242:	
   888                           
   889                           ;K13-01.c: 34: }
   890                           ;K13-01.c: 35: }
   891                           ;K13-01.c: 36: if(time10ms)
   892  0691  1CF1               	btfss	_time10ms/(0+8),_time10ms& (0+7)
   893  0692  0008               	return
   894                           
   895                           ;K13-01.c: 37: {
   896                           ;K13-01.c: 38: time10ms=0;
   897  0693  10F1               	bcf	_time10ms/(0+8),_time10ms& (0+7)
   898                           
   899                           ;K13-01.c: 39: if(SystemONFlag==0&&VarPowerUpCount<100)
   900  0694  1872               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   901  0695  2E9C               	goto	l7252
   902  0696  26AF               	fcall	PL38	;call to abstracted procedure
   903  0697  1803               	skipnc
   904  0698  2E9C               	goto	l7252
   905                           
   906                           ;K13-01.c: 40: {
   907                           ;K13-01.c: 41: VarPowerUpCount++;
   908  0699  0ABC               	incf	_VarPowerUpCount,f
   909                           
   910                           ;K13-01.c: 42: ADCPro();
   911  069A  24AB               	fcall	_ADCPro
   912                           
   913                           ;K13-01.c: 43: }
   914  069B  2EA1               	goto	l7258
   915  069C                     l7252:	
   916                           
   917                           ;K13-01.c: 44: else if(VarPowerUpCount>=100)
   918  069C  26AF               	fcall	PL38	;call to abstracted procedure
   919  069D  1C03               	skipc
   920  069E  2EA1               	goto	l7258
   921                           
   922                           ;K13-01.c: 45: {
   923                           ;K13-01.c: 46: SystemONFlag=1;
   924  069F  1472               	bsf	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   925                           
   926                           ;K13-01.c: 47: VarPowerUpCount=0;
   927  06A0  01BC               	clrf	_VarPowerUpCount
   928  06A1                     l7258:	
   929                           
   930                           ;K13-01.c: 48: }
   931                           ;K13-01.c: 50: if(SystemONFlag)
   932  06A1  1C72               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   933  06A2  2EA7               	goto	l7268
   934                           
   935                           ;K13-01.c: 51: {
   936                           ;K13-01.c: 52: ADCPro();
   937  06A3  24AB               	fcall	_ADCPro
   938                           
   939                           ;K13-01.c: 53: Motor();
   940  06A4  23E5               	fcall	_Motor
   941                           
   942                           ;K13-01.c: 54: DisplayPro();
   943  06A5  27B8               	fcall	_DisplayPro
   944                           
   945                           ;K13-01.c: 56: SystemSleep();
   946  06A6  2585               	fcall	_SystemSleep
   947  06A7                     l7268:	
   948  06A7  3064               	movlw	100
   949                           
   950                           ;K13-01.c: 58: }
   951                           ;K13-01.c: 59: Sec1sCnt++;
   952  06A8  1303               	bcf	3,6	;RP1=0, select bank0
   953  06A9  0ABA               	incf	_Sec1sCnt,f
   954                           
   955                           ;K13-01.c: 60: if(Sec1sCnt>=100)
   956  06AA  023A               	subwf	_Sec1sCnt,w
   957  06AB  1C03               	skipc
   958  06AC  0008               	return
   959                           
   960                           ;K13-01.c: 61: {
   961                           ;K13-01.c: 62: Sec1sCnt=0;
   962  06AD  01BA               	clrf	_Sec1sCnt
   963                           
   964                           ;K13-01.c: 63: Sec1sPro();
   965  06AE  291C               	ljmp	l6794
   966  06AF                     __end_of_Apply:	
   967  06AF                     PL38:	
   968  06AF  3064               	movlw	100
   969  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   970  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   971  06B2  023C               	subwf	_VarPowerUpCount,w
   972  06B3  0008               	return
   973  06B4                     __end_ofPL38:	
   974                           
   975                           	psect	text2
   976  0585                     __ptext2:	
   977 ;; *************** function _SystemSleep *****************
   978 ;; Defined at:
   979 ;;		line 68 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, status,2, status,0, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : B00/0
   990 ;;		On exit  : 100/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1
   993 ;;      Params:         0       0       0
   994 ;;      Locals:         0       0       0
   995 ;;      Temps:          0       0       0
   996 ;;      Totals:         0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    4
  1000 ;; This function calls:
  1001 ;;		_SystemInit
  1002 ;; This function is called by:
  1003 ;;		_Apply
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _SystemSleep
  1009  0585                     _SystemSleep:	
  1010                           
  1011                           ;K13-01.c: 70: static unsigned int SleepCnt=0;
  1012                           ;K13-01.c: 71: if(WorkFlag||OnOffFlag||USBFlag||KeyPress)
  1013                           
  1014                           ;incstack = 0
  1015                           ; Regs used in _SystemSleep: [wreg+status,2+status,0+pclath+cstack]
  1016  0585  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1017  0586  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  1018  0587  2D8C               	goto	l6212
  1019  0588  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  1020  0589  2D8C               	goto	l6212
  1021  058A  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  1022  058B  2D8F               	goto	l6214
  1023  058C                     l6212:	
  1024                           
  1025                           ;K13-01.c: 72: {
  1026                           ;K13-01.c: 73: SleepCnt=0;
  1027  058C  01AA               	clrf	SystemSleep@SleepCnt
  1028  058D  01AB               	clrf	SystemSleep@SleepCnt+1
  1029                           
  1030                           ;K13-01.c: 74: }
  1031  058E  0008               	return
  1032  058F                     l6214:	
  1033                           
  1034                           ;K13-01.c: 75: else
  1035                           ;K13-01.c: 76: {
  1036                           ;K13-01.c: 77: SleepCnt++;
  1037  058F  0AAA               	incf	SystemSleep@SleepCnt,f
  1038  0590  1903               	skipnz
  1039  0591  0AAB               	incf	SystemSleep@SleepCnt+1,f
  1040                           
  1041                           ;K13-01.c: 78: if(SleepCnt>=1000)
  1042  0592  3003               	movlw	3
  1043  0593  022B               	subwf	SystemSleep@SleepCnt+1,w
  1044  0594  30E8               	movlw	232
  1045  0595  1903               	skipnz
  1046  0596  022A               	subwf	SystemSleep@SleepCnt,w
  1047  0597  1C03               	skipc
  1048  0598  0008               	return
  1049                           
  1050                           ;K13-01.c: 79: {
  1051                           ;K13-01.c: 80: LEDWorkFlag=0;
  1052  0599  1370               	bcf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  1053                           
  1054                           ;K13-01.c: 81: SleepCnt=0;
  1055  059A  01AA               	clrf	SystemSleep@SleepCnt
  1056  059B  01AB               	clrf	SystemSleep@SleepCnt+1
  1057  059C  0064               	clrwdt	;# 
  1058                           
  1059                           ;K13-01.c: 83: INTCON=0;
  1060  059D  018B               	clrf	11	;volatile
  1061                           
  1062                           ;K13-01.c: 84: PIE1 = 0;
  1063  059E  1683               	bsf	3,5	;RP0=1, select bank1
  1064  059F  1303               	bcf	3,6	;RP1=0, select bank1
  1065  05A0  018C               	clrf	12	;volatile
  1066                           
  1067                           ;K13-01.c: 85: PIE2 = 0;
  1068  05A1  018D               	clrf	13	;volatile
  1069                           
  1070                           ;K13-01.c: 86: PIR1 = 0;
  1071  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1072  05A3  018C               	clrf	12	;volatile
  1073                           
  1074                           ;K13-01.c: 87: ADCON0 = 0;
  1075  05A4  019F               	clrf	31	;volatile
  1076                           
  1077                           ;K13-01.c: 89: TRISA =0X00;
  1078  05A5  1683               	bsf	3,5	;RP0=1, select bank1
  1079                           
  1080                           ;K13-01.c: 90: TRISB =0X00;
  1081                           
  1082                           ;K13-01.c: 91: TRISC =0x00;
  1083                           
  1084                           ;K13-01.c: 92: WPUA = 0xFF;
  1085                           
  1086                           ;K13-01.c: 93: WPUB = 0xFF;
  1087                           
  1088                           ;K13-01.c: 94: WPUC = 0xFF;
  1089  05A6  26CF               	fcall	PL16	;call to abstracted procedure
  1090                           
  1091                           ;K13-01.c: 95: PORTA = 0;
  1092  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  1093  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  1094  05A9  0185               	clrf	5	;volatile
  1095                           
  1096                           ;K13-01.c: 96: PORTB = 0;
  1097  05AA  0186               	clrf	6	;volatile
  1098                           
  1099                           ;K13-01.c: 97: PORTC = 0;
  1100  05AB  0187               	clrf	7	;volatile
  1101                           
  1102                           ;K13-01.c: 98: RA1=1;
  1103  05AC  1485               	bsf	5,1	;volatile
  1104                           
  1105                           ;K13-01.c: 99: RA2=1;
  1106  05AD  1505               	bsf	5,2	;volatile
  1107                           
  1108                           ;K13-01.c: 100: RA0=1;
  1109  05AE  1405               	bsf	5,0	;volatile
  1110                           
  1111                           ;K13-01.c: 101: RA5 =0;
  1112  05AF  1285               	bcf	5,5	;volatile
  1113                           
  1114                           ;K13-01.c: 102: TRISB6=1,WPUB6=1;
  1115  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  1116  05B1  1706               	bsf	6,6	;volatile
  1117  05B2  1715               	bsf	21,6	;volatile
  1118                           
  1119                           ;K13-01.c: 103: TRISB7=1,WPUB7=1;
  1120  05B3  1786               	bsf	6,7	;volatile
  1121  05B4  1795               	bsf	21,7	;volatile
  1122                           
  1123                           ;K13-01.c: 105: WDTCON=0x00;
  1124  05B5  1283               	bcf	3,5	;RP0=0, select bank2
  1125  05B6  1703               	bsf	3,6	;RP1=1, select bank2
  1126  05B7  0185               	clrf	5	;volatile
  1127                           
  1128                           ;K13-01.c: 106: RBIE=1;
  1129  05B8  158B               	bsf	11,3	;volatile
  1130                           
  1131                           ;K13-01.c: 107: IOCB=0xC0;
  1132  05B9  30C0               	movlw	192
  1133  05BA  1683               	bsf	3,5	;RP0=1, select bank1
  1134  05BB  1303               	bcf	3,6	;RP1=0, select bank1
  1135  05BC  0096               	movwf	22	;volatile
  1136                           
  1137                           ;K13-01.c: 108: OSCCON=0X01;
  1138  05BD  3001               	movlw	1
  1139  05BE  008F               	movwf	15	;volatile
  1140                           
  1141                           ;K13-01.c: 109: RBIF = 0;
  1142  05BF  100B               	bcf	11,0	;volatile
  1143                           
  1144                           ;K13-01.c: 110: PORTB;
  1145  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1146  05C1  0806               	movf	6,w	;volatile
  1147  05C2  0063               	sleep	;# 
  1148  05C3  0000               	nop	;# 
  1149                           
  1150                           ;K13-01.c: 113: SystemInit();
  1151  05C4  2FC3               	ljmp	l5668
  1152  05C5                     __end_of_SystemSleep:	
  1153                           
  1154                           	psect	text3
  1155  07C3                     __ptext3:	
  1156 ;; *************** function _SystemInit *****************
  1157 ;; Defined at:
  1158 ;;		line 118 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0, pclath, cstack
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 300/200
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1
  1172 ;;      Params:         0       0       0
  1173 ;;      Locals:         0       0       0
  1174 ;;      Temps:          0       0       0
  1175 ;;      Totals:         0       0       0
  1176 ;;Total ram usage:        0 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; Hardware stack levels required when called:    3
  1179 ;; This function calls:
  1180 ;;		_GPIOInit
  1181 ;;		_TimerInit
  1182 ;; This function is called by:
  1183 ;;		_SystemSleep
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _SystemInit
  1190  07C3                     _SystemInit:	
  1191  07C3                     l5668:	
  1192                           ;incstack = 0
  1193                           ; Regs used in _SystemInit: [wreg+status,2+status,0+pclath+cstack]
  1194                           
  1195  07C3  0000               	nop	;# 
  1196  07C4  0064               	clrwdt	;# 
  1197                           
  1198                           ;K13-01.c: 122: GPIOInit();
  1199  07C5  26B4               	fcall	_GPIOInit
  1200                           
  1201                           ;K13-01.c: 123: TimerInit();
  1202  07C6  279C               	fcall	_TimerInit
  1203                           
  1204                           ;K13-01.c: 124: WDTCON=0x01;
  1205  07C7  3001               	movlw	1
  1206  07C8  1283               	bcf	3,5	;RP0=0, select bank2
  1207  07C9  1703               	bsf	3,6	;RP1=1, select bank2
  1208  07CA  0085               	movwf	5	;volatile
  1209  07CB  0008               	return
  1210  07CC                     __end_of_SystemInit:	
  1211                           
  1212                           	psect	text4
  1213  079C                     __ptext4:	
  1214 ;; *************** function _TimerInit *****************
  1215 ;; Defined at:
  1216 ;;		line 158 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg
  1225 ;; Tracked objects:
  1226 ;;		On entry : 300/300
  1227 ;;		On exit  : 300/100
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1
  1230 ;;      Params:         0       0       0
  1231 ;;      Locals:         0       0       0
  1232 ;;      Temps:          0       0       0
  1233 ;;      Totals:         0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    2
  1237 ;; This function calls:
  1238 ;;		Nothing
  1239 ;; This function is called by:
  1240 ;;		_SystemInit
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           
  1245                           ;psect for function _TimerInit
  1246  079C                     _TimerInit:	
  1247                           
  1248                           ;K13-01.c: 169: OSCCON=0X61;
  1249                           
  1250                           ;incstack = 0
  1251                           ; Regs used in _TimerInit: [wreg]
  1252  079C  3061               	movlw	97
  1253  079D  1303               	bcf	3,6	;RP1=0, select bank1
  1254  079E  008F               	movwf	15	;volatile
  1255                           
  1256                           ;K13-01.c: 170: INTCON=0B11000000;
  1257  079F  30C0               	movlw	192
  1258  07A0  008B               	movwf	11	;volatile
  1259                           
  1260                           ;K13-01.c: 171: PIE1=0B00000010;
  1261  07A1  3002               	movlw	2
  1262  07A2  008C               	movwf	12	;volatile
  1263                           
  1264                           ;K13-01.c: 172: T2CON=0B00000100;
  1265  07A3  3004               	movlw	4
  1266  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1267  07A5  0092               	movwf	18	;volatile
  1268                           
  1269                           ;K13-01.c: 173: PR2 = 200;
  1270  07A6  30C8               	movlw	200
  1271  07A7  1683               	bsf	3,5	;RP0=1, select bank1
  1272  07A8  0092               	movwf	18	;volatile
  1273  07A9  0008               	return
  1274  07AA                     __end_of_TimerInit:	
  1275                           
  1276                           	psect	text5
  1277  06B4                     __ptext5:	
  1278 ;; *************** function _GPIOInit *****************
  1279 ;; Defined at:
  1280 ;;		line 127 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      void 
  1287 ;; Registers used:
  1288 ;;		wreg, status,2
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 300/300
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1
  1294 ;;      Params:         0       0       0
  1295 ;;      Locals:         0       0       0
  1296 ;;      Temps:          0       0       0
  1297 ;;      Totals:         0       0       0
  1298 ;;Total ram usage:        0 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_SystemInit
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           
  1309                           ;psect for function _GPIOInit
  1310  06B4                     _GPIOInit:	
  1311                           
  1312                           ;K13-01.c: 129: RBPU=0;
  1313                           
  1314                           ;incstack = 0
  1315                           ; Regs used in _GPIOInit: [wreg+status,2]
  1316  06B4  1683               	bsf	3,5	;RP0=1, select bank1
  1317  06B5  1303               	bcf	3,6	;RP1=0, select bank1
  1318  06B6  1381               	bcf	1,7	;volatile
  1319                           
  1320                           ;K13-01.c: 131: TRISA =0X00;
  1321                           
  1322                           ;K13-01.c: 132: TRISB =0X00;
  1323                           
  1324                           ;K13-01.c: 133: TRISC =0X00;
  1325                           
  1326                           ;K13-01.c: 137: WPUA =0XFF;
  1327                           
  1328                           ;K13-01.c: 138: WPUB =0XFF;
  1329                           
  1330                           ;K13-01.c: 139: WPUC =0XFF;
  1331  06B7  26CF               	fcall	PL16	;call to abstracted procedure
  1332                           
  1333                           ;K13-01.c: 143: PORTA = 0X80;
  1334  06B8  3080               	movlw	128
  1335  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  1336  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  1337  06BB  0085               	movwf	5	;volatile
  1338                           
  1339                           ;K13-01.c: 144: PORTB = 0X80;
  1340  06BC  0086               	movwf	6	;volatile
  1341                           
  1342                           ;K13-01.c: 145: PORTC = 0;
  1343  06BD  0187               	clrf	7	;volatile
  1344                           
  1345                           ;K13-01.c: 148: RA5 =1;
  1346  06BE  1685               	bsf	5,5	;volatile
  1347                           
  1348                           ;K13-01.c: 149: RBPU=0;
  1349  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  1350  06C0  1381               	bcf	1,7	;volatile
  1351                           
  1352                           ;K13-01.c: 150: TRISB6=1,WPUB6=1;
  1353  06C1  1706               	bsf	6,6	;volatile
  1354  06C2  1715               	bsf	21,6	;volatile
  1355                           
  1356                           ;K13-01.c: 151: TRISB7=1,WPUB7=1;
  1357  06C3  1786               	bsf	6,7	;volatile
  1358  06C4  1795               	bsf	21,7	;volatile
  1359                           
  1360                           ;K13-01.c: 153: TRISA1=1,WPUA1=0; ANS1=1;
  1361  06C5  1485               	bsf	5,1	;volatile
  1362  06C6  1703               	bsf	3,6	;RP1=1, select bank3
  1363  06C7  108E               	bcf	14,1	;volatile
  1364  06C8  1488               	bsf	8,1	;volatile
  1365                           
  1366                           ;K13-01.c: 154: TRISA2=1,WPUA2=0; ANS2=1;
  1367  06C9  1303               	bcf	3,6	;RP1=0, select bank1
  1368  06CA  1505               	bsf	5,2	;volatile
  1369  06CB  1703               	bsf	3,6	;RP1=1, select bank3
  1370  06CC  110E               	bcf	14,2	;volatile
  1371  06CD  1508               	bsf	8,2	;volatile
  1372  06CE  0008               	return
  1373  06CF                     __end_of_GPIOInit:	
  1374  06CF                     PL16:	
  1375  06CF  0185               	clrf	5	;volatile
  1376  06D0  0186               	clrf	6	;volatile
  1377  06D1  0187               	clrf	7	;volatile
  1378  06D2  30FF               	movlw	255
  1379  06D3  1703               	bsf	3,6	;RP1=1, select bank3
  1380  06D4  008E               	movwf	14	;volatile
  1381  06D5  1303               	bcf	3,6	;RP1=0, select bank1
  1382  06D6  0095               	movwf	21	;volatile
  1383  06D7  1703               	bsf	3,6	;RP1=1, select bank3
  1384  06D8  008F               	movwf	15	;volatile
  1385  06D9  0008               	return
  1386  06DA                     __end_ofPL16:	
  1387                           
  1388                           	psect	text6
  1389  011C                     __ptext6:	
  1390 ;; *************** function _Sec1sPro *****************
  1391 ;; Defined at:
  1392 ;;		line 68 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;		None
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  TempPercent     2    6[BANK0 ] unsigned int 
  1397 ;;  PercentErr      1    5[BANK0 ] unsigned char 
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, status,2, status,0, pclath, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 300/0
  1404 ;;		On exit  : 300/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMMON   BANK0   BANK1
  1407 ;;      Params:         0       0       0
  1408 ;;      Locals:         0       3       0
  1409 ;;      Temps:          0       2       0
  1410 ;;      Totals:         0       5       0
  1411 ;;Total ram usage:        5 bytes
  1412 ;; Hardware stack levels used:    1
  1413 ;; Hardware stack levels required when called:    3
  1414 ;; This function calls:
  1415 ;;		___bmul
  1416 ;;		___lwdiv
  1417 ;; This function is called by:
  1418 ;;		_Apply
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           
  1423                           ;psect for function _Sec1sPro
  1424  011C                     _Sec1sPro:	
  1425  011C                     l6794:	
  1426                           ;incstack = 0
  1427                           ; Regs used in _Sec1sPro: [wreg+status,2+status,0+pclath+cstack]
  1428                           
  1429                           
  1430                           ;ADC.c: 72: unsigned int TempPercent=0;
  1431  011C  01D1               	clrf	Sec1sPro@TempPercent
  1432  011D  01D2               	clrf	Sec1sPro@TempPercent+1
  1433                           
  1434                           ;ADC.c: 75: if(USBFlag)
  1435  011E  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1436  011F  297B               	goto	l6834
  1437                           
  1438                           ;ADC.c: 76: {
  1439                           ;ADC.c: 77: if(ADCVal[2]<138)
  1440  0120  3000               	movlw	0
  1441  0121  024A               	subwf	_ADCVal+5,w
  1442  0122  308A               	movlw	138
  1443  0123  1903               	skipnz
  1444  0124  0249               	subwf	_ADCVal+4,w
  1445  0125  1803               	skipnc
  1446  0126  2929               	goto	l6802
  1447                           
  1448                           ;ADC.c: 78: {
  1449                           ;ADC.c: 79: TempPercent=0;
  1450  0127  01D1               	clrf	Sec1sPro@TempPercent
  1451  0128  2932               	goto	L1
  1452  0129                     l6802:	
  1453                           ;ADC.c: 80: }
  1454                           
  1455                           
  1456                           ;ADC.c: 81: else if(ADCVal[2]>175)
  1457  0129  3000               	movlw	0
  1458  012A  024A               	subwf	_ADCVal+5,w
  1459  012B  30B0               	movlw	176
  1460  012C  1903               	skipnz
  1461  012D  0249               	subwf	_ADCVal+4,w
  1462  012E  1C03               	skipc
  1463  012F  2934               	goto	l6806
  1464                           
  1465                           ;ADC.c: 82: {
  1466                           ;ADC.c: 83: TempPercent=99;
  1467  0130  3063               	movlw	99
  1468  0131  00D1               	movwf	Sec1sPro@TempPercent
  1469  0132                     L1:	
  1470  0132  01D2               	clrf	Sec1sPro@TempPercent+1
  1471                           
  1472                           ;ADC.c: 84: }
  1473  0133  2950               	goto	l6810
  1474  0134                     l6806:	
  1475                           
  1476                           ;ADC.c: 85: else
  1477                           ;ADC.c: 86: {
  1478                           ;ADC.c: 87: TempPercent=ADCVal[2]-138;
  1479  0134  084A               	movf	_ADCVal+5,w
  1480  0135  00D2               	movwf	Sec1sPro@TempPercent+1
  1481  0136  0849               	movf	_ADCVal+4,w
  1482  0137  00D1               	movwf	Sec1sPro@TempPercent
  1483  0138  3076               	movlw	118
  1484  0139  21E7               	fcall	PL34	;call to abstracted procedure
  1485                           
  1486                           ;ADC.c: 88: TempPercent=TempPercent*4/3;
  1487  013A  3003               	movlw	3
  1488  013B  00F6               	movwf	___lwdiv@divisor
  1489  013C  01F7               	clrf	___lwdiv@divisor+1
  1490  013D  0852               	movf	Sec1sPro@TempPercent+1,w
  1491  013E  00CF               	movwf	??_Sec1sPro+1
  1492  013F  0851               	movf	Sec1sPro@TempPercent,w
  1493  0140  00CE               	movwf	??_Sec1sPro
  1494  0141  1003               	clrc
  1495  0142  0DCE               	rlf	??_Sec1sPro,f
  1496  0143  0DCF               	rlf	??_Sec1sPro+1,f
  1497  0144  1003               	clrc
  1498  0145  0DCE               	rlf	??_Sec1sPro,f
  1499  0146  0DCF               	rlf	??_Sec1sPro+1,f
  1500  0147  084E               	movf	??_Sec1sPro,w
  1501  0148  00F8               	movwf	___lwdiv@dividend
  1502  0149  084F               	movf	??_Sec1sPro+1,w
  1503  014A  00F9               	movwf	___lwdiv@dividend+1
  1504  014B  2661               	fcall	___lwdiv
  1505  014C  0877               	movf	?___lwdiv+1,w
  1506  014D  00D2               	movwf	Sec1sPro@TempPercent+1
  1507  014E  0876               	movf	?___lwdiv,w
  1508  014F  00D1               	movwf	Sec1sPro@TempPercent
  1509  0150                     l6810:	
  1510                           
  1511                           ;ADC.c: 89: }
  1512                           ;ADC.c: 90: if(ActualPercent>TempPercent)
  1513                           
  1514                           ;ADC.c: 91: {
  1515                           ;ADC.c: 92: if(ActualPercent)
  1516  0150  21DC               	fcall	PL18	;call to abstracted procedure
  1517  0151  1803               	skipnc
  1518  0152  2957               	goto	L4
  1519  0153  1903               	btfsc	3,2
  1520  0154  2966               	goto	l6822
  1521                           
  1522                           ;ADC.c: 93: {
  1523                           ;ADC.c: 94: ActualPercent--;
  1524  0155  03BF               	decf	Sec1sPro@ActualPercent,f
  1525  0156  2966               	goto	l6822
  1526  0157                     L4:	
  1527                           ;ADC.c: 97: else if(ActualPercent<TempPercent)
  1528                           
  1529  0157  00CE               	movwf	??_Sec1sPro
  1530  0158  01CF               	clrf	??_Sec1sPro+1
  1531  0159  0852               	movf	Sec1sPro@TempPercent+1,w
  1532  015A  024F               	subwf	??_Sec1sPro+1,w
  1533  015B  1D03               	skipz
  1534  015C  295F               	goto	u4405
  1535  015D  0851               	movf	Sec1sPro@TempPercent,w
  1536  015E  024E               	subwf	??_Sec1sPro,w
  1537  015F                     u4405:	
  1538  015F  1803               	skipnc
  1539  0160  2966               	goto	l6822
  1540                           
  1541                           ;ADC.c: 98: {
  1542                           ;ADC.c: 99: if(ActualPercent<99)
  1543  0161  3063               	movlw	99
  1544  0162  023F               	subwf	Sec1sPro@ActualPercent,w
  1545  0163  1803               	skipnc
  1546  0164  2966               	goto	l6822
  1547                           
  1548                           ;ADC.c: 100: {
  1549                           ;ADC.c: 101: ActualPercent++;
  1550  0165  0ABF               	incf	Sec1sPro@ActualPercent,f
  1551  0166                     l6822:	
  1552                           
  1553                           ;ADC.c: 102: }
  1554                           ;ADC.c: 103: }
  1555                           ;ADC.c: 104: if(ActualPercent>BatPercent)
  1556  0166  083F               	movf	Sec1sPro@ActualPercent,w
  1557  0167  0244               	subwf	_BatPercent,w
  1558  0168  1803               	skipnc
  1559  0169  2979               	goto	l6832
  1560                           
  1561                           ;ADC.c: 105: {
  1562                           ;ADC.c: 106: PercentErr=ActualPercent-BatPercent;
  1563  016A  0844               	movf	_BatPercent,w
  1564  016B  023F               	subwf	Sec1sPro@ActualPercent,w
  1565  016C  00D0               	movwf	Sec1sPro@PercentErr
  1566                           
  1567                           ;ADC.c: 107: if(PercentErr<5)
  1568  016D  3005               	movlw	5
  1569  016E  0250               	subwf	Sec1sPro@PercentErr,w
  1570  016F  1803               	skipnc
  1571  0170  2977               	goto	l6830
  1572                           
  1573                           ;ADC.c: 108: {
  1574                           ;ADC.c: 109: BatAddTime=90-15*PercentErr;
  1575  0171  30F1               	movlw	241
  1576  0172  00F6               	movwf	___bmul@multiplicand
  1577  0173  0850               	movf	Sec1sPro@PercentErr,w
  1578  0174  27AA               	fcall	___bmul
  1579  0175  3E5A               	addlw	90
  1580  0176  297A               	goto	L2
  1581  0177                     l6830:	
  1582                           ;ADC.c: 110: }
  1583                           
  1584                           
  1585                           ;ADC.c: 111: else
  1586                           ;ADC.c: 112: {
  1587                           ;ADC.c: 113: BatAddTime=15;
  1588  0177  300F               	movlw	15
  1589  0178  297A               	goto	L2
  1590  0179                     l6832:	
  1591                           
  1592                           ;ADC.c: 116: else
  1593                           ;ADC.c: 117: {
  1594                           ;ADC.c: 118: BatAddTime=240;
  1595  0179  30F0               	movlw	240
  1596  017A                     L2:	
  1597  017A  00EB               	movwf	_BatAddTime
  1598  017B                     l6834:	
  1599                           
  1600                           ;ADC.c: 119: }
  1601                           ;ADC.c: 120: }
  1602                           ;ADC.c: 123: if(WorkFlag)
  1603  017B  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1604  017C  29D9               	goto	l6876
  1605                           
  1606                           ;ADC.c: 124: {
  1607                           ;ADC.c: 125: if(ADCVal[2]<134)
  1608  017D  3000               	movlw	0
  1609  017E  024A               	subwf	_ADCVal+5,w
  1610  017F  3086               	movlw	134
  1611  0180  1903               	skipnz
  1612  0181  0249               	subwf	_ADCVal+4,w
  1613  0182  1803               	skipnc
  1614  0183  2986               	goto	l6840
  1615                           
  1616                           ;ADC.c: 126: {
  1617                           ;ADC.c: 127: TempPercent=0;
  1618  0184  01D1               	clrf	Sec1sPro@TempPercent
  1619  0185  298F               	goto	L3
  1620  0186                     l6840:	
  1621                           ;ADC.c: 128: }
  1622                           
  1623                           
  1624                           ;ADC.c: 129: else if(ADCVal[2]>167)
  1625  0186  3000               	movlw	0
  1626  0187  024A               	subwf	_ADCVal+5,w
  1627  0188  30A8               	movlw	168
  1628  0189  1903               	skipnz
  1629  018A  0249               	subwf	_ADCVal+4,w
  1630  018B  1C03               	skipc
  1631  018C  2991               	goto	l6844
  1632                           
  1633                           ;ADC.c: 130: {
  1634                           ;ADC.c: 131: TempPercent=99;
  1635  018D  3063               	movlw	99
  1636  018E  00D1               	movwf	Sec1sPro@TempPercent
  1637  018F                     L3:	
  1638  018F  01D2               	clrf	Sec1sPro@TempPercent+1
  1639                           
  1640                           ;ADC.c: 132: }
  1641  0190  2997               	goto	l609
  1642  0191                     l6844:	
  1643                           
  1644                           ;ADC.c: 133: else
  1645                           ;ADC.c: 134: {
  1646                           ;ADC.c: 135: TempPercent=ADCVal[2]-134;
  1647  0191  084A               	movf	_ADCVal+5,w
  1648  0192  00D2               	movwf	Sec1sPro@TempPercent+1
  1649  0193  0849               	movf	_ADCVal+4,w
  1650  0194  00D1               	movwf	Sec1sPro@TempPercent
  1651  0195  307A               	movlw	122
  1652  0196  21E7               	fcall	PL34	;call to abstracted procedure
  1653  0197                     l609:	
  1654                           
  1655                           ;ADC.c: 136: }
  1656                           ;ADC.c: 137: if(TempPercent>=33)
  1657  0197  3000               	movlw	0
  1658  0198  0252               	subwf	Sec1sPro@TempPercent+1,w
  1659  0199  3021               	movlw	33
  1660  019A  1903               	skipnz
  1661  019B  0251               	subwf	Sec1sPro@TempPercent,w
  1662  019C  1C03               	skipc
  1663  019D  29AB               	goto	l6852
  1664                           
  1665                           ;ADC.c: 138: {
  1666                           ;ADC.c: 139: TempPercent=33+(ADCVal[2]-150)*2;
  1667  019E  084A               	movf	_ADCVal+5,w
  1668  019F  00D2               	movwf	Sec1sPro@TempPercent+1
  1669  01A0  0849               	movf	_ADCVal+4,w
  1670  01A1  00D1               	movwf	Sec1sPro@TempPercent
  1671  01A2  30F5               	movlw	245
  1672  01A3  1003               	clrc
  1673  01A4  0DD1               	rlf	Sec1sPro@TempPercent,f
  1674  01A5  0DD2               	rlf	Sec1sPro@TempPercent+1,f
  1675  01A6  07D1               	addwf	Sec1sPro@TempPercent,f
  1676  01A7  1803               	skipnc
  1677  01A8  0AD2               	incf	Sec1sPro@TempPercent+1,f
  1678  01A9  30FE               	movlw	254
  1679  01AA  07D2               	addwf	Sec1sPro@TempPercent+1,f
  1680  01AB                     l6852:	
  1681                           
  1682                           ;ADC.c: 140: }
  1683                           ;ADC.c: 141: if(ActualPercent>TempPercent)
  1684                           
  1685                           ;ADC.c: 142: {
  1686                           ;ADC.c: 143: if(ActualPercent)
  1687  01AB  21DC               	fcall	PL18	;call to abstracted procedure
  1688  01AC  1803               	skipnc
  1689  01AD  29B2               	goto	L5
  1690  01AE  1903               	btfsc	3,2
  1691  01AF  29C1               	goto	l6864
  1692                           
  1693                           ;ADC.c: 144: {
  1694                           ;ADC.c: 145: ActualPercent--;
  1695  01B0  03BF               	decf	Sec1sPro@ActualPercent,f
  1696  01B1  29C1               	goto	l6864
  1697  01B2                     L5:	
  1698                           ;ADC.c: 148: else if(ActualPercent<TempPercent)
  1699                           
  1700  01B2  00CE               	movwf	??_Sec1sPro
  1701  01B3  01CF               	clrf	??_Sec1sPro+1
  1702  01B4  0852               	movf	Sec1sPro@TempPercent+1,w
  1703  01B5  024F               	subwf	??_Sec1sPro+1,w
  1704  01B6  1D03               	skipz
  1705  01B7  29BA               	goto	u4505
  1706  01B8  0851               	movf	Sec1sPro@TempPercent,w
  1707  01B9  024E               	subwf	??_Sec1sPro,w
  1708  01BA                     u4505:	
  1709  01BA  1803               	skipnc
  1710  01BB  29C1               	goto	l6864
  1711                           
  1712                           ;ADC.c: 149: {
  1713                           ;ADC.c: 150: if(ActualPercent<99)
  1714  01BC  3063               	movlw	99
  1715  01BD  023F               	subwf	Sec1sPro@ActualPercent,w
  1716  01BE  1803               	skipnc
  1717  01BF  29C1               	goto	l6864
  1718                           
  1719                           ;ADC.c: 151: {
  1720                           ;ADC.c: 152: ActualPercent++;
  1721  01C0  0ABF               	incf	Sec1sPro@ActualPercent,f
  1722  01C1                     l6864:	
  1723                           
  1724                           ;ADC.c: 153: }
  1725                           ;ADC.c: 154: }
  1726                           ;ADC.c: 155: if(ActualPercent<BatPercent)
  1727  01C1  0844               	movf	_BatPercent,w
  1728  01C2  023F               	subwf	Sec1sPro@ActualPercent,w
  1729  01C3  1803               	skipnc
  1730  01C4  29D9               	goto	l6876
  1731                           
  1732                           ;ADC.c: 156: {
  1733                           ;ADC.c: 157: PercentErr=BatPercent-ActualPercent;
  1734  01C5  083F               	movf	Sec1sPro@ActualPercent,w
  1735  01C6  0244               	subwf	_BatPercent,w
  1736  01C7  00D0               	movwf	Sec1sPro@PercentErr
  1737                           
  1738                           ;ADC.c: 158: if(PercentErr<5&&ActualPercent)
  1739  01C8  3005               	movlw	5
  1740  01C9  0250               	subwf	Sec1sPro@PercentErr,w
  1741  01CA  1803               	skipnc
  1742  01CB  29D6               	goto	l6874
  1743  01CC  083F               	movf	Sec1sPro@ActualPercent,w
  1744  01CD  1903               	btfsc	3,2
  1745  01CE  29D6               	goto	l6874
  1746                           
  1747                           ;ADC.c: 159: {
  1748                           ;ADC.c: 160: BatDecTime=75-15*PercentErr;
  1749  01CF  30F1               	movlw	241
  1750  01D0  00F6               	movwf	___bmul@multiplicand
  1751  01D1  0850               	movf	Sec1sPro@PercentErr,w
  1752  01D2  27AA               	fcall	___bmul
  1753  01D3  3E4B               	addlw	75
  1754  01D4  00EA               	movwf	_BatDecTime
  1755                           
  1756                           ;ADC.c: 161: }
  1757  01D5  0008               	return
  1758  01D6                     l6874:	
  1759                           
  1760                           ;ADC.c: 162: else
  1761                           ;ADC.c: 163: {
  1762                           ;ADC.c: 164: BatDecTime=8;
  1763  01D6  3008               	movlw	8
  1764  01D7  00EA               	movwf	_BatDecTime
  1765  01D8  0008               	return
  1766  01D9                     l6876:	
  1767                           
  1768                           ;ADC.c: 167: else
  1769                           ;ADC.c: 168: {
  1770                           ;ADC.c: 169: BatDecTime=210;
  1771  01D9  30D2               	movlw	210
  1772  01DA  00EA               	movwf	_BatDecTime
  1773  01DB  0008               	return
  1774  01DC                     __end_of_Sec1sPro:	
  1775  01DC                     PL18:	
  1776  01DC  083F               	movf	Sec1sPro@ActualPercent,w
  1777  01DD  00CE               	movwf	??_Sec1sPro
  1778  01DE  01CF               	clrf	??_Sec1sPro+1
  1779  01DF  084F               	movf	??_Sec1sPro+1,w
  1780  01E0  0252               	subwf	Sec1sPro@TempPercent+1,w
  1781  01E1  1D03               	skipz
  1782  01E2  29E5               	goto	u4385
  1783  01E3  084E               	movf	??_Sec1sPro,w
  1784  01E4  0251               	subwf	Sec1sPro@TempPercent,w
  1785  01E5                     u4385:	
  1786  01E5  083F               	movf	Sec1sPro@ActualPercent,w
  1787  01E6  0008               	return
  1788  01E7                     __end_ofPL18:	
  1789  01E7                     PL34:	
  1790  01E7  07D1               	addwf	Sec1sPro@TempPercent,f
  1791  01E8  1803               	skipnc
  1792  01E9  0AD2               	incf	Sec1sPro@TempPercent+1,f
  1793  01EA  30FF               	movlw	255
  1794  01EB  07D2               	addwf	Sec1sPro@TempPercent+1,f
  1795  01EC  0008               	return
  1796  01ED                     __end_ofPL34:	
  1797                           
  1798                           	psect	text7
  1799  0661                     __ptext7:	
  1800 ;; *************** function ___lwdiv *****************
  1801 ;; Defined at:
  1802 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  divisor         2    3[COMMON] unsigned int 
  1805 ;;  dividend        2    5[COMMON] unsigned int 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  quotient        2    1[BANK0 ] unsigned int 
  1808 ;;  counter         1    0[BANK0 ] unsigned char 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  2    3[COMMON] unsigned int 
  1811 ;; Registers used:
  1812 ;;		wreg, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 300/0
  1815 ;;		On exit  : 300/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1
  1818 ;;      Params:         4       0       0
  1819 ;;      Locals:         0       3       0
  1820 ;;      Temps:          0       0       0
  1821 ;;      Totals:         4       3       0
  1822 ;;Total ram usage:        7 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    2
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_Sec1sPro
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           
  1833                           ;psect for function ___lwdiv
  1834  0661                     ___lwdiv:	
  1835                           
  1836                           ;incstack = 0
  1837                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1838  0661  01CC               	clrf	___lwdiv@quotient
  1839  0662  01CD               	clrf	___lwdiv@quotient+1
  1840  0663  0876               	movf	___lwdiv@divisor,w
  1841  0664  0477               	iorwf	___lwdiv@divisor+1,w
  1842  0665  1903               	btfsc	3,2
  1843  0666  2E86               	goto	l6740
  1844  0667  01CB               	clrf	___lwdiv@counter
  1845  0668                     L6:	
  1846  0668  0ACB               	incf	___lwdiv@counter,f
  1847  0669  1BF7               	btfsc	___lwdiv@divisor+1,7
  1848  066A  2E6F               	goto	l6728
  1849  066B  1003               	clrc
  1850  066C  0DF6               	rlf	___lwdiv@divisor,f
  1851  066D  0DF7               	rlf	___lwdiv@divisor+1,f
  1852  066E  2E68               	goto	L6
  1853  066F                     l6728:	
  1854  066F  1003               	clrc
  1855  0670  0DCC               	rlf	___lwdiv@quotient,f
  1856  0671  0DCD               	rlf	___lwdiv@quotient+1,f
  1857  0672  0877               	movf	___lwdiv@divisor+1,w
  1858  0673  0279               	subwf	___lwdiv@dividend+1,w
  1859  0674  1D03               	skipz
  1860  0675  2E78               	goto	u4275
  1861  0676  0876               	movf	___lwdiv@divisor,w
  1862  0677  0278               	subwf	___lwdiv@dividend,w
  1863  0678                     u4275:	
  1864  0678  1C03               	skipc
  1865  0679  2E82               	goto	L7
  1866  067A  0876               	movf	___lwdiv@divisor,w
  1867  067B  02F8               	subwf	___lwdiv@dividend,f
  1868  067C  0877               	movf	___lwdiv@divisor+1,w
  1869  067D  1C03               	skipc
  1870  067E  03F9               	decf	___lwdiv@dividend+1,f
  1871  067F  02F9               	subwf	___lwdiv@dividend+1,f
  1872  0680  144C               	bsf	___lwdiv@quotient,0
  1873  0681  1003               	clrc
  1874  0682                     L7:	
  1875  0682  0CF7               	rrf	___lwdiv@divisor+1,f
  1876  0683  0CF6               	rrf	___lwdiv@divisor,f
  1877  0684  0BCB               	decfsz	___lwdiv@counter,f
  1878  0685  2E6F               	goto	l6728
  1879  0686                     l6740:	
  1880  0686  084D               	movf	___lwdiv@quotient+1,w
  1881  0687  00F7               	movwf	?___lwdiv+1
  1882  0688  084C               	movf	___lwdiv@quotient,w
  1883  0689  00F6               	movwf	?___lwdiv
  1884  068A  0008               	return
  1885  068B                     __end_of___lwdiv:	
  1886                           
  1887                           	psect	text8
  1888  03E5                     __ptext8:	
  1889 ;; *************** function _Motor *****************
  1890 ;; Defined at:
  1891 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0, pclath, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 300/0
  1902 ;;		On exit  : 300/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1
  1905 ;;      Params:         0       0       0
  1906 ;;      Locals:         0       0       0
  1907 ;;      Temps:          0       0       0
  1908 ;;      Totals:         0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    3
  1912 ;; This function calls:
  1913 ;;		___wmul
  1914 ;; This function is called by:
  1915 ;;		_Apply
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _Motor
  1921  03E5                     _Motor:	
  1922                           
  1923                           ;Motor.c: 9: if(!WorkFlag)
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _Motor: [wreg+status,2+status,0+pclath+cstack]
  1927  03E5  1A71               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1928  03E6  2BEE               	goto	l4223
  1929                           
  1930                           ;Motor.c: 10: {
  1931                           ;Motor.c: 11: RA3=0;
  1932  03E7  1185               	bcf	5,3	;volatile
  1933                           
  1934                           ;Motor.c: 12: WorkCnt=0;
  1935  03E8  01A4               	clrf	_WorkCnt
  1936  03E9  01A5               	clrf	_WorkCnt+1
  1937                           
  1938                           ;Motor.c: 13: TimeDecCnt=0;
  1939  03EA  1683               	bsf	3,5	;RP0=1, select bank1
  1940  03EB  01D8               	clrf	_TimeDecCnt^(0+128)
  1941  03EC  01D9               	clrf	(_TimeDecCnt+1)^(0+128)
  1942                           
  1943                           ;Motor.c: 14: }
  1944  03ED  2C1A               	goto	l7204
  1945  03EE                     l4223:	
  1946                           
  1947                           ;Motor.c: 15: else if(WorkFlag&&!LockSta.LockFlag)
  1948  03EE  1A71               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1949  03EF  1B2C               	btfsc	_LockSta,6
  1950  03F0  2C1A               	goto	l7204
  1951                           
  1952                           ;Motor.c: 16: {
  1953                           ;Motor.c: 17: RA3=1;
  1954  03F1  1585               	bsf	5,3	;volatile
  1955                           
  1956                           ;Motor.c: 18: TimeDecCnt++;
  1957  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  1958  03F3  0AD8               	incf	_TimeDecCnt^(0+128),f
  1959  03F4  1903               	skipnz
  1960  03F5  0AD9               	incf	(_TimeDecCnt+1)^(0+128),f
  1961                           
  1962                           ;Motor.c: 19: if(TimeDecCnt>=BatDecTime*100)
  1963  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1964  03F7  086A               	movf	_BatDecTime,w
  1965  03F8  2442               	fcall	PL28	;call to abstracted procedure
  1966  03F9  272C               	fcall	___wmul
  1967  03FA  0877               	movf	?___wmul+1,w
  1968  03FB  1683               	bsf	3,5	;RP0=1, select bank1
  1969  03FC  0259               	subwf	(_TimeDecCnt+1)^(0+128),w
  1970  03FD  1D03               	skipz
  1971  03FE  2C01               	goto	u5075
  1972  03FF  0876               	movf	?___wmul,w
  1973  0400  0258               	subwf	_TimeDecCnt^(0+128),w
  1974  0401                     u5075:	
  1975  0401  1C03               	skipc
  1976  0402  2C09               	goto	l4226
  1977                           
  1978                           ;Motor.c: 20: {
  1979                           ;Motor.c: 21: TimeDecCnt=0;
  1980  0403  01D8               	clrf	_TimeDecCnt^(0+128)
  1981  0404  01D9               	clrf	(_TimeDecCnt+1)^(0+128)
  1982                           
  1983                           ;Motor.c: 22: if(BatPercent)
  1984  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0406  0844               	movf	_BatPercent,w
  1986  0407  1D03               	btfss	3,2
  1987                           
  1988                           ;Motor.c: 23: {
  1989                           ;Motor.c: 24: BatPercent--;
  1990  0408  03C4               	decf	_BatPercent,f
  1991  0409                     l4226:	
  1992                           
  1993                           ;Motor.c: 25: }
  1994                           ;Motor.c: 26: }
  1995                           ;Motor.c: 27: WorkCnt++;
  1996  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1997  040A  0AA4               	incf	_WorkCnt,f
  1998  040B  1903               	skipnz
  1999  040C  0AA5               	incf	_WorkCnt+1,f
  2000                           
  2001                           ;Motor.c: 28: if(WorkCnt>=6000)
  2002  040D  3017               	movlw	23
  2003  040E  0225               	subwf	_WorkCnt+1,w
  2004  040F  3070               	movlw	112
  2005  0410  1903               	skipnz
  2006  0411  0224               	subwf	_WorkCnt,w
  2007  0412  1C03               	skipc
  2008  0413  2C1A               	goto	l7204
  2009  0414  3063               	movlw	99
  2010                           
  2011                           ;Motor.c: 29: {
  2012                           ;Motor.c: 30: WorkCnt=0;
  2013  0415  01A4               	clrf	_WorkCnt
  2014  0416  01A5               	clrf	_WorkCnt+1
  2015                           
  2016                           ;Motor.c: 31: if(WorkMin<99)
  2017  0417  0243               	subwf	_WorkMin,w
  2018  0418  1C03               	btfss	3,0
  2019                           
  2020                           ;Motor.c: 32: {
  2021                           ;Motor.c: 33: WorkMin++;
  2022  0419  0AC3               	incf	_WorkMin,f
  2023  041A                     l7204:	
  2024                           
  2025                           ;Motor.c: 34: }
  2026                           ;Motor.c: 35: }
  2027                           ;Motor.c: 36: }
  2028                           ;Motor.c: 37: if(USBFlag)
  2029  041A  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2030  041B  2C3E               	goto	l7220
  2031                           
  2032                           ;Motor.c: 38: {
  2033                           ;Motor.c: 39: TimeAddCnt++;
  2034  041C  1683               	bsf	3,5	;RP0=1, select bank1
  2035  041D  0AD6               	incf	_TimeAddCnt^(0+128),f
  2036  041E  1903               	skipnz
  2037  041F  0AD7               	incf	(_TimeAddCnt+1)^(0+128),f
  2038                           
  2039                           ;Motor.c: 40: if(TimeAddCnt>BatAddTime*100)
  2040  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2041  0421  086B               	movf	_BatAddTime,w
  2042  0422  2442               	fcall	PL28	;call to abstracted procedure
  2043  0423  272C               	fcall	___wmul
  2044  0424  1683               	bsf	3,5	;RP0=1, select bank1
  2045  0425  0857               	movf	(_TimeAddCnt+1)^(0+128),w
  2046  0426  0277               	subwf	?___wmul+1,w
  2047  0427  1D03               	skipz
  2048  0428  2C2B               	goto	u5125
  2049  0429  0856               	movf	_TimeAddCnt^(0+128),w
  2050  042A  0276               	subwf	?___wmul,w
  2051  042B                     u5125:	
  2052  042B  1803               	skipnc
  2053  042C  2C34               	goto	l7216
  2054  042D  3063               	movlw	99
  2055                           
  2056                           ;Motor.c: 41: {
  2057                           ;Motor.c: 42: TimeAddCnt=0;
  2058  042E  01D6               	clrf	_TimeAddCnt^(0+128)
  2059  042F  01D7               	clrf	(_TimeAddCnt+1)^(0+128)
  2060                           
  2061                           ;Motor.c: 43: if(BatPercent<99)
  2062  0430  1283               	bcf	3,5	;RP0=0, select bank0
  2063  0431  0244               	subwf	_BatPercent,w
  2064  0432  1C03               	btfss	3,0
  2065                           
  2066                           ;Motor.c: 44: {
  2067                           ;Motor.c: 45: BatPercent++;
  2068  0433  0AC4               	incf	_BatPercent,f
  2069  0434                     l7216:	
  2070                           
  2071                           ;Motor.c: 46: }
  2072                           ;Motor.c: 47: }
  2073                           ;Motor.c: 48: if(BatPercent<=125)
  2074  0434  307E               	movlw	126
  2075  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0436  0244               	subwf	_BatPercent,w
  2077  0437  1803               	skipnc
  2078  0438  2C3B               	goto	l4233
  2079                           
  2080                           ;Motor.c: 49: {
  2081                           ;Motor.c: 50: RA5 =0;
  2082  0439  1285               	bcf	5,5	;volatile
  2083                           
  2084                           ;Motor.c: 51: }
  2085  043A  0008               	return
  2086  043B                     l4233:	
  2087                           
  2088                           ;Motor.c: 52: else
  2089                           ;Motor.c: 53: {
  2090                           ;Motor.c: 54: RA5 =1;
  2091  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2092  043C  1685               	bsf	5,5	;volatile
  2093  043D  0008               	return
  2094  043E                     l7220:	
  2095                           
  2096                           ;Motor.c: 57: else
  2097                           ;Motor.c: 58: {
  2098                           ;Motor.c: 59: TimeAddCnt=0;
  2099  043E  1683               	bsf	3,5	;RP0=1, select bank1
  2100  043F  01D6               	clrf	_TimeAddCnt^(0+128)
  2101  0440  01D7               	clrf	(_TimeAddCnt+1)^(0+128)
  2102  0441  2C3B               	goto	l4233
  2103  0442                     __end_of_Motor:	
  2104  0442                     PL28:	
  2105  0442  00F6               	movwf	___wmul@multiplier
  2106  0443  3064               	movlw	100
  2107  0444  01F7               	clrf	___wmul@multiplier+1
  2108  0445  00F8               	movwf	___wmul@multiplicand
  2109  0446  01F9               	clrf	___wmul@multiplicand+1
  2110  0447  0008               	return
  2111  0448                     __end_ofPL28:	
  2112                           
  2113                           	psect	text9
  2114  072C                     __ptext9:	
  2115 ;; *************** function ___wmul *****************
  2116 ;; Defined at:
  2117 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul16.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  multiplier      2    3[COMMON] unsigned int 
  2120 ;;  multiplicand    2    5[COMMON] unsigned int 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  product         2    0[BANK0 ] unsigned int 
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  2    3[COMMON] unsigned int 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0
  2127 ;; Tracked objects:
  2128 ;;		On entry : 300/0
  2129 ;;		On exit  : 300/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMMON   BANK0   BANK1
  2132 ;;      Params:         4       0       0
  2133 ;;      Locals:         0       2       0
  2134 ;;      Temps:          0       0       0
  2135 ;;      Totals:         4       2       0
  2136 ;;Total ram usage:        6 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    2
  2139 ;; This function calls:
  2140 ;;		Nothing
  2141 ;; This function is called by:
  2142 ;;		_Motor
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function ___wmul
  2148  072C                     ___wmul:	
  2149                           
  2150                           ;incstack = 0
  2151                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2152  072C  01CB               	clrf	___wmul@product
  2153  072D  01CC               	clrf	___wmul@product+1
  2154  072E                     l7162:	
  2155  072E  1C76               	btfss	___wmul@multiplier,0
  2156  072F  2F36               	goto	l7166
  2157  0730  0878               	movf	___wmul@multiplicand,w
  2158  0731  07CB               	addwf	___wmul@product,f
  2159  0732  1803               	skipnc
  2160  0733  0ACC               	incf	___wmul@product+1,f
  2161  0734  0879               	movf	___wmul@multiplicand+1,w
  2162  0735  07CC               	addwf	___wmul@product+1,f
  2163  0736                     l7166:	
  2164  0736  1003               	clrc
  2165  0737  0DF8               	rlf	___wmul@multiplicand,f
  2166  0738  0DF9               	rlf	___wmul@multiplicand+1,f
  2167  0739  1003               	clrc
  2168  073A  0CF7               	rrf	___wmul@multiplier+1,f
  2169  073B  0CF6               	rrf	___wmul@multiplier,f
  2170  073C  0876               	movf	___wmul@multiplier,w
  2171  073D  0477               	iorwf	___wmul@multiplier+1,w
  2172  073E  1D03               	btfss	3,2
  2173  073F  2F2E               	goto	l7162
  2174  0740  084C               	movf	___wmul@product+1,w
  2175  0741  00F7               	movwf	?___wmul+1
  2176  0742  084B               	movf	___wmul@product,w
  2177  0743  00F6               	movwf	?___wmul
  2178  0744  0008               	return
  2179  0745                     __end_of___wmul:	
  2180                           
  2181                           	psect	text10
  2182  0030                     __ptext10:	
  2183 ;; *************** function _KeyScan *****************
  2184 ;; Defined at:
  2185 ;;		line 9 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Key.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  1    wreg      void 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/200
  2196 ;;		On exit  : 300/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1
  2199 ;;      Params:         0       0       0
  2200 ;;      Locals:         0       0       0
  2201 ;;      Temps:          1       0       0
  2202 ;;      Totals:         1       0       0
  2203 ;;Total ram usage:        1 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_Apply
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           
  2214                           ;psect for function _KeyScan
  2215  0030                     _KeyScan:	
  2216                           
  2217                           ;Key.c: 11: if(!RB6)
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  2221  0030  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0031  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0032  1B06               	btfsc	6,6	;volatile
  2224  0033  2836               	goto	l2379
  2225                           
  2226                           ;Key.c: 12: {
  2227                           ;Key.c: 13: KeyPress=1;
  2228  0034  1471               	bsf	_KeyPress/(0+8),_KeyPress& (0+7)
  2229                           
  2230                           ;Key.c: 14: }
  2231  0035  2837               	goto	l2380
  2232  0036                     l2379:	
  2233                           
  2234                           ;Key.c: 15: else
  2235                           ;Key.c: 16: {
  2236                           ;Key.c: 17: KeyPress=0;
  2237  0036  1071               	bcf	_KeyPress/(0+8),_KeyPress& (0+7)
  2238  0037                     l2380:	
  2239                           
  2240                           ;Key.c: 18: }
  2241                           ;Key.c: 20: if(KeyPress&&KeyCnt<10&&KeyInBuf==KeyPress&&(!LowBatFlag||USBFlag)&&!LockSta
      +                          .LockFlag)
  2242  0037  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2243  0038  2862               	goto	l2381
  2244  0039  3000               	movlw	0
  2245  003A  0229               	subwf	_KeyCnt+1,w
  2246  003B  300A               	movlw	10
  2247  003C  1903               	skipnz
  2248  003D  0228               	subwf	_KeyCnt,w
  2249  003E  1803               	skipnc
  2250  003F  2862               	goto	l2381
  2251  0040  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2252  0041  2844               	goto	u2790
  2253  0042  3001               	movlw	1
  2254  0043  2845               	goto	u2792
  2255  0044                     u2790:	
  2256  0044  3000               	movlw	0
  2257  0045                     u2792:	
  2258  0045  00F6               	movwf	??_KeyScan
  2259  0046  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2260  0047  284A               	goto	u2800
  2261  0048  3001               	movlw	1
  2262  0049  284B               	goto	u2802
  2263  004A                     u2800:	
  2264  004A  3000               	movlw	0
  2265  004B                     u2802:	
  2266  004B  0676               	xorwf	??_KeyScan,w
  2267  004C  1D03               	skipz
  2268  004D  2862               	goto	l2381
  2269  004E  1FF1               	btfss	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  2270  004F  2852               	goto	l2383
  2271  0050  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2272  0051  2862               	goto	l2381
  2273  0052                     l2383:	
  2274  0052  1B2C               	btfsc	_LockSta,6
  2275  0053  2862               	goto	l2381
  2276                           
  2277                           ;Key.c: 21: {
  2278                           ;Key.c: 22: KeyCnt++;
  2279                           
  2280                           ;Key.c: 23: if(KeyCnt>=10)
  2281  0054  2116               	fcall	PL32	;call to abstracted procedure
  2282  0055  300A               	movlw	10
  2283  0056  1903               	skipnz
  2284  0057  0228               	subwf	_KeyCnt,w
  2285  0058  1C03               	skipc
  2286  0059  28FA               	goto	l2386
  2287                           
  2288                           ;Key.c: 24: {
  2289                           ;Key.c: 25: WorkFlag=~WorkFlag;
  2290  005A  3010               	movlw	(0+1) shl (_WorkFlag& (0+7))
  2291  005B  06F1               	xorwf	_WorkFlag/(0+8),f
  2292                           
  2293                           ;Key.c: 26: if(WorkFlag)
  2294  005C  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2295  005D  28FA               	goto	l2386
  2296                           
  2297                           ;Key.c: 27: {
  2298                           ;Key.c: 28: LEDWorkFlag=1;
  2299  005E  1770               	bsf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2300                           
  2301                           ;Key.c: 29: OnOffFlag=0;
  2302  005F  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2303  0060                     l6068:	
  2304                           
  2305                           ;Key.c: 30: WorkMin=0;
  2306  0060  01C3               	clrf	_WorkMin
  2307  0061  28FA               	goto	l2386
  2308  0062                     l2381:	
  2309                           
  2310                           ;Key.c: 34: else if(KeyPress&&(KeyCnt>=10||LockSta.LockFlag)&&KeyCnt<250&&KeyInBuf==KeyP
      +                          ress&&!USBFlag)
  2311  0062  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2312  0063  289F               	goto	l2387
  2313  0064  3000               	movlw	0
  2314  0065  0229               	subwf	_KeyCnt+1,w
  2315  0066  300A               	movlw	10
  2316  0067  1903               	skipnz
  2317  0068  0228               	subwf	_KeyCnt,w
  2318  0069  1803               	skipnc
  2319  006A  286D               	goto	l6074
  2320  006B  1F2C               	btfss	_LockSta,6
  2321  006C  289F               	goto	l2387
  2322  006D                     l6074:	
  2323  006D  3000               	movlw	0
  2324  006E  0229               	subwf	_KeyCnt+1,w
  2325  006F  30FA               	movlw	250
  2326  0070  1903               	skipnz
  2327  0071  0228               	subwf	_KeyCnt,w
  2328  0072  1803               	skipnc
  2329  0073  289F               	goto	l2387
  2330  0074  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2331  0075  2878               	goto	u2910
  2332  0076  3001               	movlw	1
  2333  0077  2879               	goto	u2912
  2334  0078                     u2910:	
  2335  0078  3000               	movlw	0
  2336  0079                     u2912:	
  2337  0079  00F6               	movwf	??_KeyScan
  2338  007A  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2339  007B  287E               	goto	u2920
  2340  007C  3001               	movlw	1
  2341  007D  287F               	goto	u2922
  2342  007E                     u2920:	
  2343  007E  3000               	movlw	0
  2344  007F                     u2922:	
  2345  007F  0676               	xorwf	??_KeyScan,w
  2346  0080  1903               	btfsc	3,2
  2347  0081  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2348  0082  289F               	goto	l2387
  2349                           
  2350                           ;Key.c: 35: {
  2351                           ;Key.c: 36: KeyCnt++;
  2352                           
  2353                           ;Key.c: 37: if(KeyCnt>=250||(LockSta.LockFlag&&KeyCnt>=10))
  2354  0083  2116               	fcall	PL32	;call to abstracted procedure
  2355  0084  30FA               	movlw	250
  2356  0085  1903               	skipnz
  2357  0086  0228               	subwf	_KeyCnt,w
  2358  0087  1803               	skipnc
  2359  0088  2892               	goto	l6088
  2360  0089  1F2C               	btfss	_LockSta,6
  2361  008A  28FA               	goto	l2386
  2362  008B  3000               	movlw	0
  2363  008C  0229               	subwf	_KeyCnt+1,w
  2364  008D  300A               	movlw	10
  2365  008E  1903               	skipnz
  2366  008F  0228               	subwf	_KeyCnt,w
  2367  0090  1C03               	skipc
  2368  0091  28FA               	goto	l2386
  2369  0092                     l6088:	
  2370                           
  2371                           ;Key.c: 38: {
  2372                           ;Key.c: 39: KeyCnt=250;
  2373  0092  30FA               	movlw	250
  2374  0093  00A8               	movwf	_KeyCnt
  2375  0094  3002               	movlw	2
  2376  0095  01A9               	clrf	_KeyCnt+1
  2377                           
  2378                           ;Key.c: 40: LockNumb=2;
  2379  0096  00BB               	movwf	_LockNumb
  2380                           
  2381                           ;Key.c: 41: if(!LockSta.LockFlag)
  2382  0097  1B2C               	btfsc	_LockSta,6
  2383  0098  289C               	goto	l2393
  2384                           
  2385                           ;Key.c: 42: {
  2386                           ;Key.c: 43: LockSta.LockStart=1;
  2387  0099  142C               	bsf	_LockSta,0
  2388                           
  2389                           ;Key.c: 44: LockSta.UnlockEnd=0;
  2390  009A  12AC               	bcf	_LockSta,5
  2391                           
  2392                           ;Key.c: 45: }
  2393  009B  2860               	goto	l6068
  2394  009C                     l2393:	
  2395                           
  2396                           ;Key.c: 46: else
  2397                           ;Key.c: 47: {
  2398                           ;Key.c: 48: LockSta.UnlockStart=1;
  2399  009C  15AC               	bsf	_LockSta,3
  2400                           
  2401                           ;Key.c: 49: LockSta.LockEnd=0;
  2402  009D  112C               	bcf	_LockSta,2
  2403  009E  2860               	goto	l6068
  2404  009F                     l2387:	
  2405                           
  2406                           ;Key.c: 54: else if(KeyPress&&KeyCnt>=250&&KeyInBuf==KeyPress&&!LockSta.LockEnd&&!LockSt
      +                          a.UnlockEnd)
  2407  009F  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2408  00A0  28DD               	goto	l2396
  2409  00A1  3000               	movlw	0
  2410  00A2  0229               	subwf	_KeyCnt+1,w
  2411  00A3  30FA               	movlw	250
  2412  00A4  1903               	skipnz
  2413  00A5  0228               	subwf	_KeyCnt,w
  2414  00A6  1C03               	skipc
  2415  00A7  28DD               	goto	l2396
  2416  00A8  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2417  00A9  28AC               	goto	u3010
  2418  00AA  3001               	movlw	1
  2419  00AB  28AD               	goto	u3012
  2420  00AC                     u3010:	
  2421  00AC  3000               	movlw	0
  2422  00AD                     u3012:	
  2423  00AD  00F6               	movwf	??_KeyScan
  2424  00AE  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2425  00AF  28B2               	goto	u3020
  2426  00B0  3001               	movlw	1
  2427  00B1  28B3               	goto	u3022
  2428  00B2                     u3020:	
  2429  00B2  3000               	movlw	0
  2430  00B3                     u3022:	
  2431  00B3  0676               	xorwf	??_KeyScan,w
  2432  00B4  1903               	btfsc	3,2
  2433  00B5  192C               	btfsc	_LockSta,2
  2434  00B6  28DD               	goto	l2396
  2435  00B7  1AAC               	btfsc	_LockSta,5
  2436  00B8  28DD               	goto	l2396
  2437                           
  2438                           ;Key.c: 55: {
  2439                           ;Key.c: 56: KeyCnt++;
  2440  00B9  0AA8               	incf	_KeyCnt,f
  2441  00BA  1903               	skipnz
  2442  00BB  0AA9               	incf	_KeyCnt+1,f
  2443                           
  2444                           ;Key.c: 57: if(KeyCnt>=1750)
  2445  00BC  3006               	movlw	6
  2446  00BD  0229               	subwf	_KeyCnt+1,w
  2447  00BE  30D6               	movlw	214
  2448  00BF  1903               	skipnz
  2449  00C0  0228               	subwf	_KeyCnt,w
  2450  00C1  1C03               	skipc
  2451  00C2  28FA               	goto	l2386
  2452                           
  2453                           ;Key.c: 58: {
  2454                           ;Key.c: 59: KeyCnt=1750;
  2455  00C3  30D6               	movlw	214
  2456  00C4  00A8               	movwf	_KeyCnt
  2457  00C5  3006               	movlw	6
  2458  00C6  00A9               	movwf	_KeyCnt+1
  2459                           
  2460                           ;Key.c: 60: LockSta.LockFlag=!LockSta.LockFlag;
  2461  00C7  1003               	clrc
  2462  00C8  1F2C               	btfss	_LockSta,6
  2463  00C9  1403               	setc
  2464  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  2465  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  2466  00CC  1C03               	btfss	3,0
  2467  00CD  28D0               	goto	L8
  2468  00CE  172C               	bsf	_LockSta,6
  2469  00CF  28D1               	goto	l6112
  2470  00D0                     L8:	
  2471  00D0  132C               	bcf	_LockSta,6
  2472  00D1                     l6112:	
  2473                           
  2474                           ;Key.c: 61: if(LockSta.LockFlag)
  2475  00D1  1F2C               	btfss	_LockSta,6
  2476  00D2  28D8               	goto	l2398
  2477                           
  2478                           ;Key.c: 62: {
  2479                           ;Key.c: 63: LockSta.LockStart=0;
  2480  00D3  102C               	bcf	_LockSta,0
  2481                           
  2482                           ;Key.c: 64: LockSta.LockEnd=1;
  2483  00D4  152C               	bsf	_LockSta,2
  2484                           
  2485                           ;Key.c: 65: WorkFlag=0;
  2486  00D5  1271               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2487                           
  2488                           ;Key.c: 66: LEDWorkFlag=0;
  2489  00D6  1370               	bcf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2490                           
  2491                           ;Key.c: 67: }
  2492  00D7  28FA               	goto	l2386
  2493  00D8                     l2398:	
  2494                           
  2495                           ;Key.c: 68: else
  2496                           ;Key.c: 69: {
  2497                           ;Key.c: 70: LockSta.UnlockStart=0;
  2498  00D8  11AC               	bcf	_LockSta,3
  2499                           
  2500                           ;Key.c: 71: LockSta.UnlockEnd=1;
  2501  00D9  16AC               	bsf	_LockSta,5
  2502                           
  2503                           ;Key.c: 72: WorkFlag=1;
  2504  00DA  1671               	bsf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2505                           
  2506                           ;Key.c: 73: LEDWorkFlag=1;
  2507  00DB  1770               	bsf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2508  00DC  28FA               	goto	l2386
  2509  00DD                     l2396:	
  2510                           
  2511                           ;Key.c: 77: else if(!KeyPress||KeyInBuf!=KeyPress)
  2512  00DD  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2513  00DE  28ED               	goto	l6118
  2514  00DF  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2515  00E0  28E3               	goto	u3110
  2516  00E1  3001               	movlw	1
  2517  00E2  28E4               	goto	u3112
  2518  00E3                     u3110:	
  2519  00E3  3000               	movlw	0
  2520  00E4                     u3112:	
  2521  00E4  00F6               	movwf	??_KeyScan
  2522  00E5  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2523  00E6  28E9               	goto	u3120
  2524  00E7  3001               	movlw	1
  2525  00E8  28EA               	goto	u3122
  2526  00E9                     u3120:	
  2527  00E9  3000               	movlw	0
  2528  00EA                     u3122:	
  2529  00EA  0676               	xorwf	??_KeyScan,w
  2530  00EB  1903               	skipnz
  2531  00EC  28FA               	goto	l2386
  2532  00ED                     l6118:	
  2533                           
  2534                           ;Key.c: 78: {
  2535                           ;Key.c: 79: KeyCnt=0;
  2536  00ED  01A8               	clrf	_KeyCnt
  2537  00EE  01A9               	clrf	_KeyCnt+1
  2538                           
  2539                           ;Key.c: 80: LockSta.UnlockEnd=0;
  2540  00EF  12AC               	bcf	_LockSta,5
  2541                           
  2542                           ;Key.c: 81: if(LockSta.LockEnd)
  2543  00F0  1D2C               	btfss	_LockSta,2
  2544  00F1  28F4               	goto	l2404
  2545                           
  2546                           ;Key.c: 82: {
  2547                           ;Key.c: 83: LockSta.LockEnd=0;
  2548  00F2  112C               	bcf	_LockSta,2
  2549                           
  2550                           ;Key.c: 84: LockSta.UnlockFail=1;
  2551  00F3  162C               	bsf	_LockSta,4
  2552  00F4                     l2404:	
  2553                           
  2554                           ;Key.c: 85: }
  2555                           ;Key.c: 86: if(LockSta.UnlockStart)
  2556  00F4  1DAC               	btfss	_LockSta,3
  2557  00F5  28F8               	goto	l2405
  2558                           
  2559                           ;Key.c: 87: {
  2560                           ;Key.c: 88: LockSta.UnlockStart=0;
  2561  00F6  11AC               	bcf	_LockSta,3
  2562                           
  2563                           ;Key.c: 89: LockSta.UnlockFail=1;
  2564  00F7  162C               	bsf	_LockSta,4
  2565  00F8                     l2405:	
  2566                           
  2567                           ;Key.c: 90: }
  2568                           ;Key.c: 91: if(LockSta.LockStart)
  2569  00F8  182C               	btfsc	_LockSta,0
  2570                           
  2571                           ;Key.c: 92: {
  2572                           ;Key.c: 93: LockSta.LockStart=0;
  2573  00F9  102C               	bcf	_LockSta,0
  2574  00FA                     l2386:	
  2575                           
  2576                           ;Key.c: 94: }
  2577                           ;Key.c: 95: }
  2578                           ;Key.c: 96: KeyInBuf=KeyPress;
  2579  00FA  12F0               	bcf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2580  00FB  1871               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2581  00FC  16F0               	bsf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2582                           
  2583                           ;Key.c: 98: if(!WorkFlag&&!KeyPress&&WorkMin!=0&&!USBFlag)
  2584  00FD  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2585  00FE  1871               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2586  00FF  2907               	goto	l2407
  2587  0100  1283               	bcf	3,5	;RP0=0, select bank0
  2588  0101  1303               	bcf	3,6	;RP1=0, select bank0
  2589  0102  0843               	movf	_WorkMin,w
  2590  0103  1D03               	btfss	3,2
  2591  0104  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2592  0105  2907               	goto	l2407
  2593                           
  2594                           ;Key.c: 99: {
  2595                           ;Key.c: 100: OnOffFlag=1;
  2596  0106  17F0               	bsf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2597  0107                     l2407:	
  2598                           
  2599                           ;Key.c: 101: }
  2600                           ;Key.c: 103: if(!RB7)
  2601  0107  1283               	bcf	3,5	;RP0=0, select bank0
  2602  0108  1303               	bcf	3,6	;RP1=0, select bank0
  2603  0109  1B86               	btfsc	6,7	;volatile
  2604  010A  290D               	goto	l2408
  2605                           
  2606                           ;Key.c: 104: {
  2607                           ;Key.c: 105: USBLink=1;
  2608  010B  1670               	bsf	_USBLink/(0+8),_USBLink& (0+7)
  2609                           
  2610                           ;Key.c: 106: }
  2611  010C  290E               	goto	l2409
  2612  010D                     l2408:	
  2613                           
  2614                           ;Key.c: 107: else
  2615                           ;Key.c: 108: {
  2616                           ;Key.c: 109: USBLink=0;
  2617  010D  1270               	bcf	_USBLink/(0+8),_USBLink& (0+7)
  2618  010E                     l2409:	
  2619                           
  2620                           ;Key.c: 110: }
  2621                           ;Key.c: 112: if(USBLink)
  2622  010E  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2623  010F  2913               	goto	l2410
  2624                           
  2625                           ;Key.c: 113: {
  2626                           ;Key.c: 114: USBFlag=1;
  2627  0110  15F1               	bsf	_USBFlag/(0+8),_USBFlag& (0+7)
  2628                           
  2629                           ;Key.c: 115: LockSta.LockFlag=0;
  2630  0111  132C               	bcf	_LockSta,6
  2631                           
  2632                           ;Key.c: 116: }
  2633  0112  0008               	return
  2634  0113                     l2410:	
  2635                           
  2636                           ;Key.c: 117: else if(!USBLink)
  2637  0113  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2638                           
  2639                           ;Key.c: 118: {
  2640                           ;Key.c: 119: USBFlag=0;
  2641  0114  11F1               	bcf	_USBFlag/(0+8),_USBFlag& (0+7)
  2642  0115  0008               	return
  2643  0116                     __end_of_KeyScan:	
  2644  0116                     PL32:	
  2645  0116  0AA8               	incf	_KeyCnt,f
  2646  0117  1903               	skipnz
  2647  0118  0AA9               	incf	_KeyCnt+1,f
  2648  0119  3000               	movlw	0
  2649  011A  0229               	subwf	_KeyCnt+1,w
  2650  011B  0008               	return
  2651  011C                     __end_ofPL32:	
  2652                           
  2653                           	psect	text11
  2654  07B8                     __ptext11:	
  2655 ;; *************** function _DisplayPro *****************
  2656 ;; Defined at:
  2657 ;;		line 145 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 300/0
  2668 ;;		On exit  : B00/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1
  2671 ;;      Params:         0       0       0
  2672 ;;      Locals:         0       0       0
  2673 ;;      Temps:          0       0       0
  2674 ;;      Totals:         0       0       0
  2675 ;;Total ram usage:        0 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    4
  2678 ;; This function calls:
  2679 ;;		_DisplayIcon
  2680 ;;		_ErrPro
  2681 ;;		_LockPro
  2682 ;;		_USBLedPro
  2683 ;;		_WorkLedPro
  2684 ;; This function is called by:
  2685 ;;		_Apply
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function _DisplayPro
  2691  07B8                     _DisplayPro:	
  2692                           
  2693                           ;LED.c: 147: LedIndex=0;
  2694                           
  2695                           ;incstack = 0
  2696                           ; Regs used in _DisplayPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2697  07B8  01A6               	clrf	_LedIndex
  2698  07B9  01A7               	clrf	_LedIndex+1
  2699                           
  2700                           ;LED.c: 148: WorkLedPro();
  2701  07BA  2355               	fcall	_WorkLedPro
  2702                           
  2703                           ;LED.c: 149: USBLedPro();
  2704  07BB  2448               	fcall	_USBLedPro
  2705                           
  2706                           ;LED.c: 150: LockPro();
  2707  07BC  2542               	fcall	_LockPro
  2708                           
  2709                           ;LED.c: 151: ErrPro();
  2710  07BD  2745               	fcall	_ErrPro
  2711                           
  2712                           ;LED.c: 152: DisplayIcon(LedIndex);
  2713  07BE  0827               	movf	_LedIndex+1,w
  2714  07BF  00F7               	movwf	DisplayIcon@index+1
  2715  07C0  0826               	movf	_LedIndex,w
  2716  07C1  00F6               	movwf	DisplayIcon@index
  2717  07C2  2DC5               	ljmp	l6566
  2718  07C3                     __end_of_DisplayPro:	
  2719                           
  2720                           	psect	text12
  2721  0355                     __ptext12:	
  2722 ;; *************** function _WorkLedPro *****************
  2723 ;; Defined at:
  2724 ;;		line 191 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 300/0
  2735 ;;		On exit  : 300/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1
  2738 ;;      Params:         0       0       0
  2739 ;;      Locals:         0       0       0
  2740 ;;      Temps:          0       2       0
  2741 ;;      Totals:         0       2       0
  2742 ;;Total ram usage:        2 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    3
  2745 ;; This function calls:
  2746 ;;		___bmul
  2747 ;;		___lbdiv
  2748 ;;		___lbmod
  2749 ;; This function is called by:
  2750 ;;		_DisplayPro
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           
  2755                           ;psect for function _WorkLedPro
  2756  0355                     _WorkLedPro:	
  2757                           
  2758                           ;LED.c: 193: static char LedSwitchCnt=0;
  2759                           ;LED.c: 194: static bit LedSwitchFlag=0;
  2760                           ;LED.c: 195: static char index=0;
  2761                           ;LED.c: 196: static unsigned char cnt=0;
  2762                           ;LED.c: 197: static bit dir=0;
  2763                           ;LED.c: 198: static unsigned char delaycnt=0;
  2764                           ;LED.c: 199: if(LEDWorkFlag&&!OnOffFlag&&!LockSta.LockFlag&&!LockSta.LockStart&&(!USBFla
      +                          g||WorkFlag))
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _WorkLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2768  0355  1B70               	btfsc	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2769  0356  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2770  0357  2B7C               	goto	l3059
  2771  0358  1F2C               	btfss	_LockSta,6
  2772  0359  182C               	btfsc	_LockSta,0
  2773  035A  2B7C               	goto	l3059
  2774  035B  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2775  035C  2B5F               	goto	l7056
  2776  035D  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2777  035E  2B7C               	goto	l3059
  2778  035F                     l7056:	
  2779                           
  2780                           ;LED.c: 200: {
  2781                           ;LED.c: 201: if(BatPercent<=10&&WorkFlag)
  2782  035F  300B               	movlw	11
  2783  0360  0244               	subwf	_BatPercent,w
  2784  0361  1C03               	btfss	3,0
  2785  0362  1E71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2786  0363  2B6D               	goto	l7068
  2787  0364  3050               	movlw	80
  2788                           
  2789                           ;LED.c: 202: {
  2790                           ;LED.c: 203: LedSwitchCnt++;
  2791  0365  0AB6               	incf	WorkLedPro@LedSwitchCnt,f
  2792                           
  2793                           ;LED.c: 204: if(LedSwitchCnt>=80)
  2794  0366  0236               	subwf	WorkLedPro@LedSwitchCnt,w
  2795  0367  1C03               	skipc
  2796  0368  2B6F               	goto	l7072
  2797  0369  3008               	movlw	(0+1) shl (WorkLedPro@LedSwitchFlag& (0+7))
  2798                           
  2799                           ;LED.c: 205: {
  2800                           ;LED.c: 206: LedSwitchCnt=0;
  2801  036A  01B6               	clrf	WorkLedPro@LedSwitchCnt
  2802                           
  2803                           ;LED.c: 207: LedSwitchFlag=!LedSwitchFlag;
  2804  036B  06F0               	xorwf	WorkLedPro@LedSwitchFlag/(0+8),f
  2805  036C  2B6F               	goto	l7072
  2806  036D                     l7068:	
  2807                           
  2808                           ;LED.c: 210: else
  2809                           ;LED.c: 211: {
  2810                           ;LED.c: 212: LedSwitchCnt=0;
  2811  036D  01B6               	clrf	WorkLedPro@LedSwitchCnt
  2812                           
  2813                           ;LED.c: 213: LedSwitchFlag=1;
  2814  036E  15F0               	bsf	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2815  036F                     l7072:	
  2816                           
  2817                           ;LED.c: 214: }
  2818                           ;LED.c: 215: if(LedSwitchFlag)
  2819  036F  1DF0               	btfss	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2820  0370  2B78               	goto	l7078
  2821                           
  2822                           ;LED.c: 216: {
  2823                           ;LED.c: 217: LedIndex|=NumbArr[BatPercent/10];
  2824  0371  300A               	movlw	10
  2825  0372  00F6               	movwf	___lbdiv@divisor
  2826  0373  0844               	movf	_BatPercent,w
  2827  0374  26F6               	fcall	___lbdiv
  2828                           
  2829                           ;LED.c: 218: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2830  0375  23D0               	fcall	PL6	;call to abstracted procedure
  2831  0376  26DA               	fcall	___lbmod
  2832  0377  23BE               	fcall	PL2	;call to abstracted procedure
  2833  0378                     l7078:	
  2834                           
  2835                           ;LED.c: 219: }
  2836                           ;LED.c: 220: cnt=0;
  2837  0378  01B4               	clrf	WorkLedPro@cnt
  2838                           
  2839                           ;LED.c: 221: index=0;
  2840  0379  01B5               	clrf	WorkLedPro@index
  2841  037A                     l7082:	
  2842                           
  2843                           ;LED.c: 222: dir=0;
  2844  037A  1170               	bcf	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2845                           
  2846                           ;LED.c: 223: }
  2847  037B  0008               	return
  2848  037C                     l3059:	
  2849                           
  2850                           ;LED.c: 224: else if(OnOffFlag)
  2851  037C  1FF0               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2852  037D  0008               	return
  2853  037E  301E               	movlw	30
  2854                           
  2855                           ;LED.c: 225: {
  2856                           ;LED.c: 226: cnt++;
  2857  037F  0AB4               	incf	WorkLedPro@cnt,f
  2858                           
  2859                           ;LED.c: 227: if(cnt>=30)
  2860  0380  0234               	subwf	WorkLedPro@cnt,w
  2861  0381  1C03               	skipc
  2862  0382  2B9A               	goto	l7114
  2863  0383  3007               	movlw	7
  2864                           
  2865                           ;LED.c: 228: {
  2866                           ;LED.c: 229: cnt=0;
  2867  0384  01B4               	clrf	WorkLedPro@cnt
  2868                           
  2869                           ;LED.c: 230: index++;
  2870  0385  0AB5               	incf	WorkLedPro@index,f
  2871                           
  2872                           ;LED.c: 231: if(index>=7)
  2873  0386  0235               	subwf	WorkLedPro@index,w
  2874  0387  1C03               	skipc
  2875  0388  2B9A               	goto	l7114
  2876                           
  2877                           ;LED.c: 232: {
  2878                           ;LED.c: 233: if(dir)
  2879  0389  1D70               	btfss	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2880  038A  2B97               	goto	l7110
  2881                           
  2882                           ;LED.c: 234: {
  2883                           ;LED.c: 235: index=6;
  2884  038B  3006               	movlw	6
  2885  038C  00B5               	movwf	WorkLedPro@index
  2886  038D  3007               	movlw	7
  2887                           
  2888                           ;LED.c: 236: delaycnt++;
  2889  038E  0AB3               	incf	WorkLedPro@delaycnt,f
  2890                           
  2891                           ;LED.c: 237: if(delaycnt>=7)
  2892  038F  0233               	subwf	WorkLedPro@delaycnt,w
  2893  0390  1C03               	skipc
  2894  0391  2B9A               	goto	l7114
  2895                           
  2896                           ;LED.c: 238: {
  2897                           ;LED.c: 239: index=0;
  2898  0392  01B5               	clrf	WorkLedPro@index
  2899                           
  2900                           ;LED.c: 240: delaycnt=0;
  2901  0393  01B3               	clrf	WorkLedPro@delaycnt
  2902                           
  2903                           ;LED.c: 241: OnOffFlag=0;
  2904  0394  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2905                           
  2906                           ;LED.c: 242: WorkMin=0;
  2907  0395  01C3               	clrf	_WorkMin
  2908  0396  2B7A               	goto	l7082
  2909  0397                     l7110:	
  2910                           
  2911                           ;LED.c: 247: else
  2912                           ;LED.c: 248: {
  2913                           ;LED.c: 249: dir=!dir;
  2914  0397  3004               	movlw	(0+1) shl (WorkLedPro@dir& (0+7))
  2915  0398  06F0               	xorwf	WorkLedPro@dir/(0+8),f
  2916                           
  2917                           ;LED.c: 250: index=0;
  2918  0399  01B5               	clrf	WorkLedPro@index
  2919  039A                     l7114:	
  2920                           
  2921                           ;LED.c: 251: }
  2922                           ;LED.c: 253: }
  2923                           ;LED.c: 254: }
  2924                           ;LED.c: 255: if(!dir)
  2925  039A  1970               	btfsc	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2926  039B  2BA8               	goto	l7122
  2927                           
  2928                           ;LED.c: 256: {
  2929                           ;LED.c: 257: LedIndex|=NumbArr[BatPercent/10];
  2930  039C  300A               	movlw	10
  2931  039D  00F6               	movwf	___lbdiv@divisor
  2932  039E  0844               	movf	_BatPercent,w
  2933  039F  26F6               	fcall	___lbdiv
  2934                           
  2935                           ;LED.c: 258: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2936  03A0  23D0               	fcall	PL6	;call to abstracted procedure
  2937  03A1  26DA               	fcall	___lbmod
  2938  03A2  23BE               	fcall	PL2	;call to abstracted procedure
  2939                           
  2940                           ;LED.c: 259: LedIndex&=~OffHideNumbArr[index];
  2941  03A3  1003               	clrc
  2942  03A4  0D35               	rlf	WorkLedPro@index,w
  2943  03A5  3EB0               	addlw	(low (_OffHideNumbArr| 0))& (0+255)
  2944  03A6  0084               	movwf	4
  2945                           
  2946                           ;LED.c: 260: }
  2947  03A7  2BD9               	ljmp	PL10	;call to abstracted procedure
  2948  03A8                     l7122:	
  2949                           
  2950                           ;LED.c: 261: else
  2951                           ;LED.c: 262: {
  2952                           ;LED.c: 263: LedIndex|=NumbArr[WorkMin/10];
  2953  03A8  300A               	movlw	10
  2954  03A9  00F6               	movwf	___lbdiv@divisor
  2955  03AA  0843               	movf	_WorkMin,w
  2956  03AB  26F6               	fcall	___lbdiv
  2957  03AC  3EBE               	addlw	(low (_NumbArr| 0))& (0+255)
  2958  03AD  0084               	movwf	4
  2959  03AE  1383               	bcf	3,7	;select IRP bank1
  2960  03AF  0800               	movf	0,w
  2961  03B0  04A6               	iorwf	_LedIndex,f
  2962                           
  2963                           ;LED.c: 264: LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
  2964  03B1  300A               	movlw	10
  2965  03B2  00F6               	movwf	___lbmod@divisor
  2966  03B3  0843               	movf	_WorkMin,w
  2967  03B4  26DA               	fcall	___lbmod
  2968  03B5  23BE               	fcall	PL2	;call to abstracted procedure
  2969                           
  2970                           ;LED.c: 265: LedIndex&=~OffHideNumbArr[6-index];
  2971  03B6  30FE               	movlw	254
  2972  03B7  00F6               	movwf	___bmul@multiplicand
  2973  03B8  0835               	movf	WorkLedPro@index,w
  2974  03B9  27AA               	fcall	___bmul
  2975  03BA  3EBC               	addlw	(low ((_OffHideNumbArr| 0+12)))& (0+255)
  2976  03BB  0084               	movwf	4
  2977  03BC  1383               	bcf	3,7	;select IRP bank1
  2978  03BD  2BD9               	ljmp	PL10	;call to abstracted procedure
  2979  03BE                     __end_of_WorkLedPro:	
  2980  03BE                     PL2:	
  2981  03BE  3EBE               	addlw	(low (_NumbArr| 0))& (0+255)
  2982  03BF  0084               	movwf	4
  2983  03C0  1383               	bcf	3,7	;select IRP bank1
  2984  03C1  0800               	movf	0,w
  2985  03C2  00CB               	movwf	??_WorkLedPro
  2986  03C3  3007               	movlw	7
  2987  03C4  01CC               	clrf	??_WorkLedPro+1
  2988  03C5  00FF               	movwf	127
  2989  03C6                     u4845:	
  2990  03C6  1003               	clrc
  2991  03C7  0DCB               	rlf	??_WorkLedPro,f
  2992  03C8  0DCC               	rlf	??_WorkLedPro+1,f
  2993  03C9  0BFF               	decfsz	127,f
  2994  03CA  2BC6               	goto	u4845
  2995  03CB  084B               	movf	??_WorkLedPro,w
  2996  03CC  04A6               	iorwf	_LedIndex,f
  2997  03CD  084C               	movf	??_WorkLedPro+1,w
  2998  03CE  04A7               	iorwf	_LedIndex+1,f
  2999  03CF  0008               	return
  3000  03D0                     __end_ofPL2:	
  3001  03D0                     PL6:	
  3002  03D0  3EBE               	addlw	(low (_NumbArr| 0))& (0+255)
  3003  03D1  0084               	movwf	4
  3004  03D2  1383               	bcf	3,7	;select IRP bank1
  3005  03D3  0800               	movf	0,w
  3006  03D4  04A6               	iorwf	_LedIndex,f
  3007  03D5  300A               	movlw	10
  3008  03D6  00F6               	movwf	___lbmod@divisor
  3009  03D7  0844               	movf	_BatPercent,w
  3010  03D8  0008               	return
  3011  03D9                     __end_ofPL6:	
  3012  03D9                     PL10:	
  3013  03D9  0800               	movf	0,w
  3014  03DA  00CB               	movwf	??_WorkLedPro
  3015  03DB  0A84               	incf	4,f
  3016  03DC  0800               	movf	0,w
  3017  03DD  00CC               	movwf	??_WorkLedPro+1
  3018  03DE  09CB               	comf	??_WorkLedPro,f
  3019  03DF  09CC               	comf	??_WorkLedPro+1,f
  3020  03E0  084B               	movf	??_WorkLedPro,w
  3021  03E1  05A6               	andwf	_LedIndex,f
  3022  03E2  084C               	movf	??_WorkLedPro+1,w
  3023  03E3  05A7               	andwf	_LedIndex+1,f
  3024  03E4  0008               	return
  3025  03E5                     __end_ofPL10:	
  3026                           
  3027                           	psect	text13
  3028  07AA                     __ptext13:	
  3029 ;; *************** function ___bmul *****************
  3030 ;; Defined at:
  3031 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  multiplier      1    wreg     unsigned char 
  3034 ;;  multiplicand    1    3[COMMON] unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  multiplier      1    5[COMMON] unsigned char 
  3037 ;;  product         1    4[COMMON] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      unsigned char 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 300/0
  3044 ;;		On exit  : 300/0
  3045 ;;		Unchanged: 300/0
  3046 ;; Data sizes:     COMMON   BANK0   BANK1
  3047 ;;      Params:         1       0       0
  3048 ;;      Locals:         2       0       0
  3049 ;;      Temps:          0       0       0
  3050 ;;      Totals:         3       0       0
  3051 ;;Total ram usage:        3 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    2
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_Sec1sPro
  3058 ;;		_WorkLedPro
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           
  3063                           ;psect for function ___bmul
  3064  07AA                     ___bmul:	
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3068                           ;___bmul@multiplier stored from wreg
  3069  07AA  00F8               	movwf	___bmul@multiplier
  3070  07AB  01F7               	clrf	___bmul@product
  3071  07AC                     l5596:	
  3072  07AC  0876               	movf	___bmul@multiplicand,w
  3073  07AD  1878               	btfsc	___bmul@multiplier,0
  3074  07AE  07F7               	addwf	___bmul@product,f
  3075  07AF  1003               	clrc
  3076  07B0  0DF6               	rlf	___bmul@multiplicand,f
  3077  07B1  1003               	clrc
  3078  07B2  0CF8               	rrf	___bmul@multiplier,f
  3079  07B3  0878               	movf	___bmul@multiplier,w
  3080  07B4  1D03               	btfss	3,2
  3081  07B5  2FAC               	goto	l5596
  3082  07B6  0877               	movf	___bmul@product,w
  3083  07B7  0008               	return
  3084  07B8                     __end_of___bmul:	
  3085                           
  3086                           	psect	text14
  3087  0448                     __ptext14:	
  3088 ;; *************** function _USBLedPro *****************
  3089 ;; Defined at:
  3090 ;;		line 155 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 300/0
  3101 ;;		On exit  : 300/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1
  3104 ;;      Params:         0       0       0
  3105 ;;      Locals:         0       0       0
  3106 ;;      Temps:          0       4       0
  3107 ;;      Totals:         0       4       0
  3108 ;;Total ram usage:        4 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    3
  3111 ;; This function calls:
  3112 ;;		___lbdiv
  3113 ;;		___lbmod
  3114 ;; This function is called by:
  3115 ;;		_DisplayPro
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function _USBLedPro
  3121  0448                     _USBLedPro:	
  3122                           
  3123                           ;LED.c: 157: static unsigned char index=0;
  3124                           ;LED.c: 158: static unsigned char cnt=0;
  3125                           ;LED.c: 160: if(USBFlag&&!WorkFlag&&!OnOffFlag)
  3126                           
  3127                           ;incstack = 0
  3128                           ; Regs used in _USBLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3129  0448  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3130  0449  1A71               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  3131  044A  2C99               	goto	l7158
  3132  044B  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  3133  044C  2C99               	goto	l7158
  3134  044D  3028               	movlw	40
  3135                           
  3136                           ;LED.c: 161: {
  3137                           ;LED.c: 162: cnt++;
  3138  044E  0AB7               	incf	USBLedPro@cnt,f
  3139                           
  3140                           ;LED.c: 163: if(cnt>=40)
  3141  044F  0237               	subwf	USBLedPro@cnt,w
  3142  0450  1C03               	skipc
  3143  0451  2C58               	goto	l7146
  3144  0452  3007               	movlw	7
  3145                           
  3146                           ;LED.c: 164: {
  3147                           ;LED.c: 165: cnt=0;
  3148  0453  01B7               	clrf	USBLedPro@cnt
  3149                           
  3150                           ;LED.c: 166: index++;
  3151  0454  0AB8               	incf	USBLedPro@index,f
  3152                           
  3153                           ;LED.c: 167: if(index>=7)
  3154  0455  0238               	subwf	USBLedPro@index,w
  3155  0456  1803               	btfsc	3,0
  3156                           
  3157                           ;LED.c: 168: {
  3158                           ;LED.c: 169: index=0;
  3159  0457  01B8               	clrf	USBLedPro@index
  3160  0458                     l7146:	
  3161                           
  3162                           ;LED.c: 170: }
  3163                           ;LED.c: 171: }
  3164                           ;LED.c: 172: if(BatPercent<99)
  3165  0458  3063               	movlw	99
  3166  0459  0244               	subwf	_BatPercent,w
  3167                           
  3168                           ;LED.c: 173: {
  3169                           ;LED.c: 174: LedIndex|=(NumbArr[BatPercent/10]|(unsigned int)NumbArr[BatPercent%10]<<7);
  3170  045A  300A               	movlw	10
  3171  045B  1803               	skipnc
  3172  045C  2C88               	goto	L9
  3173  045D  00F6               	movwf	___lbmod@divisor
  3174  045E  0844               	movf	_BatPercent,w
  3175  045F  26DA               	fcall	___lbmod
  3176  0460  249C               	fcall	PL24	;call to abstracted procedure
  3177  0461                     u4995:	
  3178  0461  1003               	clrc
  3179  0462  0DCB               	rlf	??_USBLedPro,f
  3180  0463  0DCC               	rlf	??_USBLedPro+1,f
  3181  0464  0BFF               	decfsz	127,f
  3182  0465  2C61               	goto	u4995
  3183  0466  300A               	movlw	10
  3184  0467  00F6               	movwf	___lbdiv@divisor
  3185  0468  0844               	movf	_BatPercent,w
  3186  0469  26F6               	fcall	___lbdiv
  3187  046A  3EBE               	addlw	(low (_NumbArr| 0))& (0+255)
  3188  046B  0084               	movwf	4
  3189  046C  084B               	movf	??_USBLedPro,w
  3190  046D  1383               	bcf	3,7	;select IRP bank1
  3191  046E  24A5               	fcall	PL30	;call to abstracted procedure
  3192  046F  04A6               	iorwf	_LedIndex,f
  3193  0470  084E               	movf	??_USBLedPro+3,w
  3194  0471  04A7               	iorwf	_LedIndex+1,f
  3195                           
  3196                           ;LED.c: 175: LedIndex&=(HideNumbArr[index]|(unsigned int)HideNumbArr[index]<<7);
  3197  0472  0838               	movf	USBLedPro@index,w
  3198  0473  3EC8               	addlw	(low (_HideNumbArr| 0))& (0+255)
  3199  0474  0084               	movwf	4
  3200  0475  0800               	movf	0,w
  3201  0476  00CB               	movwf	??_USBLedPro
  3202  0477  3007               	movlw	7
  3203  0478  01CC               	clrf	??_USBLedPro+1
  3204  0479  00FF               	movwf	127
  3205  047A                     u5005:	
  3206  047A  1003               	clrc
  3207  047B  0DCB               	rlf	??_USBLedPro,f
  3208  047C  0DCC               	rlf	??_USBLedPro+1,f
  3209  047D  0BFF               	decfsz	127,f
  3210  047E  2C7A               	goto	u5005
  3211  047F  0838               	movf	USBLedPro@index,w
  3212  0480  3EC8               	addlw	(low (_HideNumbArr| 0))& (0+255)
  3213  0481  0084               	movwf	4
  3214  0482  084B               	movf	??_USBLedPro,w
  3215  0483  24A5               	fcall	PL30	;call to abstracted procedure
  3216  0484  05A6               	andwf	_LedIndex,f
  3217  0485  084E               	movf	??_USBLedPro+3,w
  3218  0486  05A7               	andwf	_LedIndex+1,f
  3219                           
  3220                           ;LED.c: 176: }
  3221  0487  0008               	return
  3222  0488                     L9:	
  3223                           
  3224                           ;LED.c: 177: else
  3225                           ;LED.c: 178: {
  3226                           ;LED.c: 179: index=0;
  3227  0488  01B8               	clrf	USBLedPro@index
  3228                           
  3229                           ;LED.c: 180: LedIndex|=NumbArr[BatPercent/10];
  3230  0489  00F6               	movwf	___lbdiv@divisor
  3231  048A  0844               	movf	_BatPercent,w
  3232  048B  26F6               	fcall	___lbdiv
  3233                           
  3234                           ;LED.c: 181: LedIndex|=NumbArr[BatPercent%10]<<7;
  3235  048C  23D0               	fcall	PL6	;call to abstracted procedure
  3236  048D  26DA               	fcall	___lbmod
  3237  048E  249C               	fcall	PL24	;call to abstracted procedure
  3238  048F                     u5015:	
  3239  048F  1003               	clrc
  3240  0490  0DCB               	rlf	??_USBLedPro,f
  3241  0491  0DCC               	rlf	??_USBLedPro+1,f
  3242  0492  0BFF               	decfsz	127,f
  3243  0493  2C8F               	goto	u5015
  3244  0494  084B               	movf	??_USBLedPro,w
  3245  0495  04A6               	iorwf	_LedIndex,f
  3246  0496  084C               	movf	??_USBLedPro+1,w
  3247  0497  04A7               	iorwf	_LedIndex+1,f
  3248  0498  0008               	return
  3249  0499                     l7158:	
  3250                           
  3251                           ;LED.c: 184: else
  3252                           ;LED.c: 185: {
  3253                           ;LED.c: 186: index=0;
  3254  0499  01B8               	clrf	USBLedPro@index
  3255                           
  3256                           ;LED.c: 187: cnt=0;
  3257  049A  01B7               	clrf	USBLedPro@cnt
  3258  049B  0008               	return
  3259  049C                     __end_of_USBLedPro:	
  3260  049C                     PL24:	
  3261  049C  3EBE               	addlw	(low (_NumbArr| 0))& (0+255)
  3262  049D  0084               	movwf	4
  3263  049E  1383               	bcf	3,7	;select IRP bank1
  3264  049F  0800               	movf	0,w
  3265  04A0  00CB               	movwf	??_USBLedPro
  3266  04A1  3007               	movlw	7
  3267  04A2  01CC               	clrf	??_USBLedPro+1
  3268  04A3  00FF               	movwf	127
  3269  04A4  0008               	return
  3270  04A5                     __end_ofPL24:	
  3271  04A5                     PL30:	
  3272  04A5  0400               	iorwf	0,w
  3273  04A6  00CD               	movwf	??_USBLedPro+2
  3274  04A7  084C               	movf	??_USBLedPro+1,w
  3275  04A8  00CE               	movwf	??_USBLedPro+3
  3276  04A9  084D               	movf	??_USBLedPro+2,w
  3277  04AA  0008               	return
  3278  04AB                     __end_ofPL30:	
  3279                           
  3280                           	psect	text15
  3281  06DA                     __ptext15:	
  3282 ;; *************** function ___lbmod *****************
  3283 ;; Defined at:
  3284 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  dividend        1    wreg     unsigned char 
  3287 ;;  divisor         1    3[COMMON] unsigned char 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  dividend        1    5[COMMON] unsigned char 
  3290 ;;  rem             1    7[COMMON] unsigned char 
  3291 ;;  counter         1    6[COMMON] unsigned char 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      unsigned char 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0
  3296 ;; Tracked objects:
  3297 ;;		On entry : 300/0
  3298 ;;		On exit  : 300/0
  3299 ;;		Unchanged: 300/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1
  3301 ;;      Params:         1       0       0
  3302 ;;      Locals:         3       0       0
  3303 ;;      Temps:          1       0       0
  3304 ;;      Totals:         5       0       0
  3305 ;;Total ram usage:        5 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    2
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_WorkLedPro
  3312 ;;		_USBLedPro
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function ___lbmod
  3318  06DA                     ___lbmod:	
  3319                           
  3320                           ;incstack = 0
  3321                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3322                           ;___lbmod@dividend stored from wreg
  3323  06DA  00F8               	movwf	___lbmod@dividend
  3324  06DB  3008               	movlw	8
  3325  06DC  00F9               	movwf	___lbmod@counter
  3326  06DD  01FA               	clrf	___lbmod@rem
  3327  06DE                     l6490:	
  3328  06DE  0878               	movf	___lbmod@dividend,w
  3329  06DF  00F7               	movwf	??___lbmod
  3330  06E0  3007               	movlw	7
  3331  06E1  1003               	clrc
  3332  06E2                     L10:	
  3333  06E2  0CF7               	rrf	??___lbmod,f
  3334  06E3  3EFF               	addlw	-1
  3335  06E4  1003               	clrc
  3336  06E5  1D03               	skipz
  3337  06E6  2EE2               	goto	L10
  3338  06E7  0D7A               	rlf	___lbmod@rem,w
  3339  06E8  0477               	iorwf	??___lbmod,w
  3340  06E9  00FA               	movwf	___lbmod@rem
  3341  06EA  1003               	clrc
  3342  06EB  0DF8               	rlf	___lbmod@dividend,f
  3343  06EC  0876               	movf	___lbmod@divisor,w
  3344  06ED  027A               	subwf	___lbmod@rem,w
  3345  06EE  1C03               	skipc
  3346  06EF  2EF2               	goto	l6498
  3347  06F0  0876               	movf	___lbmod@divisor,w
  3348  06F1  02FA               	subwf	___lbmod@rem,f
  3349  06F2                     l6498:	
  3350  06F2  0BF9               	decfsz	___lbmod@counter,f
  3351  06F3  2EDE               	goto	l6490
  3352  06F4  087A               	movf	___lbmod@rem,w
  3353  06F5  0008               	return
  3354  06F6                     __end_of___lbmod:	
  3355                           
  3356                           	psect	text16
  3357  06F6                     __ptext16:	
  3358 ;; *************** function ___lbdiv *****************
  3359 ;; Defined at:
  3360 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  dividend        1    wreg     unsigned char 
  3363 ;;  divisor         1    3[COMMON] unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  dividend        1    4[COMMON] unsigned char 
  3366 ;;  quotient        1    6[COMMON] unsigned char 
  3367 ;;  counter         1    5[COMMON] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, status,2, status,0
  3372 ;; Tracked objects:
  3373 ;;		On entry : 300/0
  3374 ;;		On exit  : 300/0
  3375 ;;		Unchanged: 300/0
  3376 ;; Data sizes:     COMMON   BANK0   BANK1
  3377 ;;      Params:         1       0       0
  3378 ;;      Locals:         3       0       0
  3379 ;;      Temps:          0       0       0
  3380 ;;      Totals:         4       0       0
  3381 ;;Total ram usage:        4 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    2
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_WorkLedPro
  3388 ;;		_USBLedPro
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function ___lbdiv
  3394  06F6                     ___lbdiv:	
  3395                           
  3396                           ;incstack = 0
  3397                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3398                           ;___lbdiv@dividend stored from wreg
  3399  06F6  00F7               	movwf	___lbdiv@dividend
  3400  06F7  01F9               	clrf	___lbdiv@quotient
  3401  06F8  0876               	movf	___lbdiv@divisor,w
  3402  06F9  1903               	btfsc	3,2
  3403  06FA  2F0F               	goto	l6482
  3404  06FB  01F8               	clrf	___lbdiv@counter
  3405  06FC                     l6468:	
  3406  06FC  0AF8               	incf	___lbdiv@counter,f
  3407  06FD  1BF6               	btfsc	___lbdiv@divisor,7
  3408  06FE  2F02               	goto	l4502
  3409  06FF  1003               	clrc
  3410  0700  0DF6               	rlf	___lbdiv@divisor,f
  3411  0701  2EFC               	goto	l6468
  3412  0702                     l4502:	
  3413  0702  1003               	clrc
  3414  0703  0DF9               	rlf	___lbdiv@quotient,f
  3415  0704  0876               	movf	___lbdiv@divisor,w
  3416  0705  0277               	subwf	___lbdiv@dividend,w
  3417  0706  1C03               	skipc
  3418  0707  2F0C               	goto	L11
  3419  0708  0876               	movf	___lbdiv@divisor,w
  3420  0709  02F7               	subwf	___lbdiv@dividend,f
  3421  070A  1479               	bsf	___lbdiv@quotient,0
  3422  070B  1003               	clrc
  3423  070C                     L11:	
  3424  070C  0CF6               	rrf	___lbdiv@divisor,f
  3425  070D  0BF8               	decfsz	___lbdiv@counter,f
  3426  070E  2F02               	goto	l4502
  3427  070F                     l6482:	
  3428  070F  0879               	movf	___lbdiv@quotient,w
  3429  0710  0008               	return
  3430  0711                     __end_of___lbdiv:	
  3431                           
  3432                           	psect	text17
  3433  0542                     __ptext17:	
  3434 ;; *************** function _LockPro *****************
  3435 ;; Defined at:
  3436 ;;		line 270 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3445 ;; Tracked objects:
  3446 ;;		On entry : 300/0
  3447 ;;		On exit  : 300/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1
  3450 ;;      Params:         0       0       0
  3451 ;;      Locals:         0       0       0
  3452 ;;      Temps:          2       0       0
  3453 ;;      Totals:         2       0       0
  3454 ;;Total ram usage:        2 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    2
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_DisplayPro
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           
  3465                           ;psect for function _LockPro
  3466  0542                     _LockPro:	
  3467                           
  3468                           ;LED.c: 272: static unsigned char SwitchCnt=0,LockSwitchCnt=0;
  3469                           ;LED.c: 273: static unsigned char Ledcnt=0;
  3470                           ;LED.c: 274: static bit LedSwitchFlag=0;
  3471                           ;LED.c: 275: if(!USBFlag)
  3472                           
  3473                           ;incstack = 0
  3474                           ; Regs used in _LockPro: [wreg-fsr0h+status,2+status,0+btemp+1]
  3475  0542  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3476  0543  0008               	return
  3477                           
  3478                           ;LED.c: 276: {
  3479                           ;LED.c: 277: if(LockSta.LockStart||LockSta.UnlockStart)
  3480  0544  182C               	btfsc	_LockSta,0
  3481  0545  2D48               	goto	l5812
  3482  0546  1DAC               	btfss	_LockSta,3
  3483  0547  2D69               	goto	l5826
  3484  0548                     l5812:	
  3485  0548  3064               	movlw	100
  3486                           
  3487                           ;LED.c: 278: {
  3488                           ;LED.c: 279: SwitchCnt++;
  3489  0549  0AB2               	incf	LockPro@SwitchCnt,f
  3490                           
  3491                           ;LED.c: 280: if(SwitchCnt>=100)
  3492  054A  0232               	subwf	LockPro@SwitchCnt,w
  3493  054B  1C03               	skipc
  3494  054C  2D52               	goto	l5822
  3495                           
  3496                           ;LED.c: 281: {
  3497                           ;LED.c: 282: SwitchCnt=0;
  3498  054D  01B2               	clrf	LockPro@SwitchCnt
  3499                           
  3500                           ;LED.c: 283: if(LockNumb>0)
  3501  054E  083B               	movf	_LockNumb,w
  3502  054F  1903               	btfsc	3,2
  3503  0550  2D52               	goto	l5822
  3504                           
  3505                           ;LED.c: 284: {
  3506                           ;LED.c: 285: LockNumb--;
  3507  0551  03BB               	decf	_LockNumb,f
  3508  0552                     l5822:	
  3509                           
  3510                           ;LED.c: 286: }
  3511                           ;LED.c: 287: }
  3512                           ;LED.c: 288: LedIndex|=NumbArr[0];
  3513  0552  1683               	bsf	3,5	;RP0=1, select bank1
  3514  0553  083E               	movf	_NumbArr^(0+128),w
  3515  0554  1283               	bcf	3,5	;RP0=0, select bank0
  3516  0555  04A6               	iorwf	_LedIndex,f
  3517                           
  3518                           ;LED.c: 289: LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
  3519  0556  083B               	movf	_LockNumb,w
  3520  0557  3EBF               	addlw	(low ((_NumbArr| 0+1)))& (0+255)
  3521  0558  0084               	movwf	4
  3522  0559  1383               	bcf	3,7	;select IRP bank1
  3523  055A  0800               	movf	0,w
  3524  055B  00F6               	movwf	??_LockPro
  3525  055C  3007               	movlw	7
  3526  055D  01F7               	clrf	??_LockPro+1
  3527  055E  00FF               	movwf	127
  3528  055F                     u2315:	
  3529  055F  1003               	clrc
  3530  0560  0DF6               	rlf	??_LockPro,f
  3531  0561  0DF7               	rlf	??_LockPro+1,f
  3532  0562  0BFF               	decfsz	127,f
  3533  0563  2D5F               	goto	u2315
  3534  0564  0876               	movf	??_LockPro,w
  3535  0565  04A6               	iorwf	_LedIndex,f
  3536  0566  0877               	movf	??_LockPro+1,w
  3537  0567  04A7               	iorwf	_LedIndex+1,f
  3538                           
  3539                           ;LED.c: 290: }
  3540  0568  2D6A               	goto	l5828
  3541  0569                     l5826:	
  3542                           
  3543                           ;LED.c: 291: else
  3544                           ;LED.c: 292: {
  3545                           ;LED.c: 293: SwitchCnt=0;
  3546  0569  01B2               	clrf	LockPro@SwitchCnt
  3547  056A                     l5828:	
  3548                           
  3549                           ;LED.c: 294: }
  3550                           ;LED.c: 295: if(LockSta.LockEnd||LockSta.UnlockFail||LockSta.UnlockStart)
  3551  056A  1D2C               	btfss	_LockSta,2
  3552  056B  1A2C               	btfsc	_LockSta,4
  3553  056C  2D6F               	goto	l5834
  3554  056D  1DAC               	btfss	_LockSta,3
  3555  056E  2D82               	goto	l5854
  3556  056F                     l5834:	
  3557  056F  3023               	movlw	35
  3558                           
  3559                           ;LED.c: 296: {
  3560                           ;LED.c: 297: LockSwitchCnt++;
  3561  0570  0AB1               	incf	LockPro@LockSwitchCnt,f
  3562                           
  3563                           ;LED.c: 298: if(LockSwitchCnt>=35)
  3564  0571  0231               	subwf	LockPro@LockSwitchCnt,w
  3565  0572  1C03               	skipc
  3566  0573  2D7F               	goto	l3096
  3567  0574  3002               	movlw	(0+1) shl (LockPro@LedSwitchFlag& (0+7))
  3568                           
  3569                           ;LED.c: 299: {
  3570                           ;LED.c: 300: LockSwitchCnt=0;
  3571  0575  01B1               	clrf	LockPro@LockSwitchCnt
  3572                           
  3573                           ;LED.c: 301: LedSwitchFlag=!LedSwitchFlag;
  3574  0576  06F0               	xorwf	LockPro@LedSwitchFlag/(0+8),f
  3575                           
  3576                           ;LED.c: 302: if(!LedSwitchFlag&&LockSta.UnlockFail)
  3577  0577  1CF0               	btfss	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3578  0578  1E2C               	btfss	_LockSta,4
  3579  0579  2D7F               	goto	l3096
  3580  057A  3003               	movlw	3
  3581                           
  3582                           ;LED.c: 303: {
  3583                           ;LED.c: 304: Ledcnt++;
  3584  057B  0AB0               	incf	LockPro@Ledcnt,f
  3585                           
  3586                           ;LED.c: 305: if(Ledcnt>=3)
  3587  057C  0230               	subwf	LockPro@Ledcnt,w
  3588  057D  1803               	btfsc	3,0
  3589                           
  3590                           ;LED.c: 306: {
  3591                           ;LED.c: 307: LockSta.UnlockFail=0;
  3592  057E  122C               	bcf	_LockSta,4
  3593  057F                     l3096:	
  3594                           
  3595                           ;LED.c: 308: }
  3596                           ;LED.c: 309: }
  3597                           ;LED.c: 310: }
  3598                           ;LED.c: 311: if(LedSwitchFlag)
  3599  057F  18F0               	btfsc	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3600                           
  3601                           ;LED.c: 312: {
  3602                           ;LED.c: 313: LedIndex|=0x8000;
  3603  0580  17A7               	bsf	_LedIndex+1,7
  3604  0581  0008               	return
  3605  0582                     l5854:	
  3606                           
  3607                           ;LED.c: 316: else
  3608                           ;LED.c: 317: {
  3609                           ;LED.c: 318: Ledcnt=0;
  3610  0582  01B0               	clrf	LockPro@Ledcnt
  3611                           
  3612                           ;LED.c: 319: LockSwitchCnt=0;
  3613  0583  01B1               	clrf	LockPro@LockSwitchCnt
  3614  0584  0008               	return
  3615  0585                     __end_of_LockPro:	
  3616                           
  3617                           	psect	text18
  3618  0745                     __ptext18:	
  3619 ;; *************** function _ErrPro *****************
  3620 ;; Defined at:
  3621 ;;		line 324 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3622 ;; Parameters:    Size  Location     Type
  3623 ;;		None
  3624 ;; Auto vars:     Size  Location     Type
  3625 ;;		None
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      void 
  3628 ;; Registers used:
  3629 ;;		wreg, status,2, status,0
  3630 ;; Tracked objects:
  3631 ;;		On entry : 300/0
  3632 ;;		On exit  : 300/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1
  3635 ;;      Params:         0       0       0
  3636 ;;      Locals:         0       0       0
  3637 ;;      Temps:          0       0       0
  3638 ;;      Totals:         0       0       0
  3639 ;;Total ram usage:        0 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    2
  3642 ;; This function calls:
  3643 ;;		Nothing
  3644 ;; This function is called by:
  3645 ;;		_DisplayPro
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function _ErrPro
  3651  0745                     _ErrPro:	
  3652                           
  3653                           ;LED.c: 326: static unsigned char cnt=0;
  3654                           ;LED.c: 327: static unsigned char SwitchCnt=0;
  3655                           ;LED.c: 328: static bit LedSwitchFlag=0;
  3656                           ;LED.c: 329: if(LedIovFlag)
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _ErrPro: [wreg+status,2+status,0]
  3660  0745  1EF1               	btfss	_LedIovFlag/(0+8),_LedIovFlag& (0+7)
  3661  0746  2F5C               	goto	l5882
  3662  0747  3023               	movlw	35
  3663                           
  3664                           ;LED.c: 330: {
  3665                           ;LED.c: 331: SwitchCnt++;
  3666  0748  0AAE               	incf	ErrPro@SwitchCnt,f
  3667                           
  3668                           ;LED.c: 332: if(SwitchCnt>=35)
  3669  0749  022E               	subwf	ErrPro@SwitchCnt,w
  3670  074A  1C03               	skipc
  3671  074B  2F59               	goto	l5878
  3672  074C  3001               	movlw	(0+1) shl (ErrPro@LedSwitchFlag& (0+7))
  3673                           
  3674                           ;LED.c: 333: {
  3675                           ;LED.c: 334: SwitchCnt=0;
  3676  074D  01AE               	clrf	ErrPro@SwitchCnt
  3677                           
  3678                           ;LED.c: 335: LedSwitchFlag=!LedSwitchFlag;
  3679  074E  06F0               	xorwf	ErrPro@LedSwitchFlag/(0+8),f
  3680                           
  3681                           ;LED.c: 336: if(!IovFlag&&!LedSwitchFlag)
  3682  074F  1F71               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  3683  0750  1870               	btfsc	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3684  0751  2F59               	goto	l5878
  3685  0752  3003               	movlw	3
  3686                           
  3687                           ;LED.c: 337: {
  3688                           ;LED.c: 338: cnt++;
  3689  0753  0AAF               	incf	ErrPro@cnt,f
  3690                           
  3691                           ;LED.c: 339: if(cnt>=3)
  3692  0754  022F               	subwf	ErrPro@cnt,w
  3693  0755  1C03               	skipc
  3694  0756  2F59               	goto	l5878
  3695                           
  3696                           ;LED.c: 340: {
  3697                           ;LED.c: 341: cnt=0;
  3698  0757  01AF               	clrf	ErrPro@cnt
  3699                           
  3700                           ;LED.c: 342: LedIovFlag=0;
  3701  0758  12F1               	bcf	_LedIovFlag/(0+8),_LedIovFlag& (0+7)
  3702  0759                     l5878:	
  3703                           
  3704                           ;LED.c: 343: }
  3705                           ;LED.c: 344: }
  3706                           ;LED.c: 345: }
  3707                           ;LED.c: 346: if(LedSwitchFlag)
  3708  0759  1870               	btfsc	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3709                           
  3710                           ;LED.c: 347: {
  3711                           ;LED.c: 348: LedIndex|=0x4000;
  3712  075A  1727               	bsf	_LedIndex+1,6
  3713  075B  0008               	return
  3714  075C                     l5882:	
  3715                           
  3716                           ;LED.c: 351: else
  3717                           ;LED.c: 352: {
  3718                           ;LED.c: 353: SwitchCnt=0;
  3719  075C  01AE               	clrf	ErrPro@SwitchCnt
  3720  075D  0008               	return
  3721  075E                     __end_of_ErrPro:	
  3722                           
  3723                           	psect	text19
  3724  05C5                     __ptext19:	
  3725 ;; *************** function _DisplayIcon *****************
  3726 ;; Defined at:
  3727 ;;		line 125 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  index           2    3[COMMON] unsigned int 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  Mask            2    0[BANK0 ] unsigned int 
  3732 ;;  i               1    2[BANK0 ] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      void 
  3735 ;; Registers used:
  3736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3737 ;; Tracked objects:
  3738 ;;		On entry : 300/0
  3739 ;;		On exit  : B00/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1
  3742 ;;      Params:         2       0       0
  3743 ;;      Locals:         0       3       0
  3744 ;;      Temps:          2       0       0
  3745 ;;      Totals:         4       3       0
  3746 ;;Total ram usage:        7 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    2
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_DisplayPro
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _DisplayIcon
  3758  05C5                     _DisplayIcon:	
  3759  05C5                     l6566:	
  3760                           ;incstack = 0
  3761                           ; Regs used in _DisplayIcon: [wreg-fsr0h+status,2+status,0+pclath]
  3762                           
  3763                           
  3764                           ;LED.c: 128: unsigned int Mask=0x01;
  3765  05C5  01CB               	clrf	DisplayIcon@Mask
  3766  05C6  0ACB               	incf	DisplayIcon@Mask,f
  3767  05C7  01CC               	clrf	DisplayIcon@Mask+1
  3768                           
  3769                           ;LED.c: 130: for(i=0;i<16;i++)
  3770  05C8  01CD               	clrf	DisplayIcon@i
  3771  05C9                     l6574:	
  3772                           
  3773                           ;LED.c: 131: {
  3774                           ;LED.c: 132: if(index&Mask)
  3775  05C9  084B               	movf	DisplayIcon@Mask,w
  3776  05CA  0576               	andwf	DisplayIcon@index,w
  3777  05CB  00F8               	movwf	??_DisplayIcon
  3778  05CC  084C               	movf	DisplayIcon@Mask+1,w
  3779  05CD  0577               	andwf	DisplayIcon@index+1,w
  3780  05CE  00F9               	movwf	??_DisplayIcon+1
  3781  05CF  0478               	iorwf	??_DisplayIcon,w
  3782                           
  3783                           ;LED.c: 133: {
  3784                           ;LED.c: 134: LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
  3785  05D0  3001               	movlw	1
  3786  05D1  00F8               	movwf	??_DisplayIcon
  3787  05D2  1903               	btfsc	3,2
  3788  05D3  2DDC               	goto	L12
  3789  05D4  25ED               	fcall	PL8	;call to abstracted procedure
  3790  05D5  25FA               	fcall	PL40	;call to abstracted procedure
  3791  05D6  2777               	fcall	stringdir
  3792  05D7  3E65               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3793  05D8  0084               	movwf	4
  3794  05D9  0879               	movf	??_DisplayIcon+1,w
  3795  05DA  0480               	iorwf	0,f
  3796                           
  3797                           ;LED.c: 135: }
  3798  05DB  2DE4               	goto	l6580
  3799  05DC                     L12:	
  3800                           ;LED.c: 136: else
  3801                           ;LED.c: 137: {
  3802                           ;LED.c: 138: LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
  3803                           
  3804  05DC  25ED               	fcall	PL8	;call to abstracted procedure
  3805  05DD  3AFF               	xorlw	255
  3806  05DE  25FA               	fcall	PL40	;call to abstracted procedure
  3807  05DF  2777               	fcall	stringdir
  3808  05E0  3E65               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3809  05E1  0084               	movwf	4
  3810  05E2  0879               	movf	??_DisplayIcon+1,w
  3811  05E3  0580               	andwf	0,f
  3812  05E4                     l6580:	
  3813  05E4  3010               	movlw	16
  3814                           
  3815                           ;LED.c: 139: }
  3816                           ;LED.c: 141: Mask<<=1;
  3817  05E5  1003               	clrc
  3818  05E6  0DCB               	rlf	DisplayIcon@Mask,f
  3819  05E7  0DCC               	rlf	DisplayIcon@Mask+1,f
  3820  05E8  0ACD               	incf	DisplayIcon@i,f
  3821  05E9  024D               	subwf	DisplayIcon@i,w
  3822  05EA  1803               	btfsc	3,0
  3823  05EB  0008               	return
  3824  05EC  2DC9               	goto	l6574
  3825  05ED                     __end_of_DisplayIcon:	
  3826  05ED                     PL8:	
  3827  05ED  084D               	movf	DisplayIcon@i,w
  3828  05EE  3EA0               	addlw	(low (_LEDSeg2| 0))& (0+255)
  3829  05EF  0084               	movwf	4
  3830  05F0  1383               	bcf	3,7	;select IRP bank1
  3831  05F1  0A00               	incf	0,w
  3832  05F2  2DF5               	goto	u3924
  3833  05F3                     u3925:	
  3834  05F3  1003               	clrc
  3835  05F4  0DF8               	rlf	??_DisplayIcon,f
  3836  05F5                     u3924:	
  3837  05F5  3EFF               	addlw	-1
  3838  05F6  1D03               	skipz
  3839  05F7  2DF3               	goto	u3925
  3840  05F8  0878               	movf	??_DisplayIcon,w
  3841  05F9  0008               	return
  3842  05FA                     __end_ofPL8:	
  3843  05FA                     PL40:	
  3844  05FA  00F9               	movwf	??_DisplayIcon+1
  3845  05FB  084D               	movf	DisplayIcon@i,w
  3846  05FC  3E01               	addlw	low ((_LEDSeg1-__stringbase)| (0+32768))
  3847  05FD  0084               	movwf	4
  3848  05FE  0008               	return
  3849  05FF                     __end_ofPL40:	
  3850                           
  3851                           	psect	text20
  3852  04AB                     __ptext20:	
  3853 ;; *************** function _ADCPro *****************
  3854 ;; Defined at:
  3855 ;;		line 10 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3856 ;; Parameters:    Size  Location     Type
  3857 ;;		None
  3858 ;; Auto vars:     Size  Location     Type
  3859 ;;		None
  3860 ;; Return value:  Size  Location     Type
  3861 ;;                  1    wreg      void 
  3862 ;; Registers used:
  3863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3864 ;; Tracked objects:
  3865 ;;		On entry : 300/0
  3866 ;;		On exit  : 300/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMMON   BANK0   BANK1
  3869 ;;      Params:         0       0       0
  3870 ;;      Locals:         0       0       0
  3871 ;;      Temps:          0       0       0
  3872 ;;      Totals:         0       0       0
  3873 ;;Total ram usage:        0 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; Hardware stack levels required when called:    4
  3876 ;; This function calls:
  3877 ;;		_ADCRead
  3878 ;; This function is called by:
  3879 ;;		_Apply
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _ADCPro
  3885  04AB                     _ADCPro:	
  3886                           
  3887                           ;ADC.c: 12: switch (ADCState)
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in _ADCPro: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3891  04AB  2CBB               	goto	l6754
  3892  04AC                     l6746:	
  3893                           
  3894                           ;ADC.c: 15: ADCRead(0b00001111,ADCVal);
  3895  04AC  3045               	movlw	(low (_ADCVal| 0))& (0+255)
  3896  04AD  00E0               	movwf	ADCRead@Val
  3897  04AE  300F               	movlw	15
  3898  04AF  21ED               	fcall	_ADCRead
  3899                           
  3900                           ;ADC.c: 16: break;
  3901  04B0  2CC3               	goto	l575
  3902  04B1                     l6748:	
  3903                           
  3904                           ;ADC.c: 19: ADCRead(0b00000010,ADCVal+1);
  3905  04B1  3047               	movlw	(low ((_ADCVal| 0+2)))& (0+255)
  3906  04B2  00E0               	movwf	ADCRead@Val
  3907  04B3  3002               	movlw	2
  3908  04B4  21ED               	fcall	_ADCRead
  3909                           
  3910                           ;ADC.c: 20: break;
  3911  04B5  2CC3               	goto	l575
  3912  04B6                     l6750:	
  3913                           
  3914                           ;ADC.c: 23: ADCRead(0b00000001,ADCVal+2);
  3915  04B6  3049               	movlw	(low ((_ADCVal| 0+4)))& (0+255)
  3916  04B7  00E0               	movwf	ADCRead@Val
  3917  04B8  3001               	movlw	1
  3918  04B9  21ED               	fcall	_ADCRead
  3919                           
  3920                           ;ADC.c: 24: break;
  3921  04BA  2CC3               	goto	l575
  3922  04BB                     l6754:	
  3923                           
  3924                           ; Switch size 1, requested type "space"
  3925                           ; Number of cases is 3, Range of values is 0 to 2
  3926                           ; switch strategies available:
  3927                           ; Name         Instructions Cycles
  3928                           ; direct_byte            9     6 (fixed)
  3929                           ; simple_byte           10     6 (average)
  3930                           ; jumptable            260     6 (fixed)
  3931                           ;	Chosen strategy is direct_byte
  3932  04BB  22B5               	fcall	PL36	;call to abstracted procedure
  3933  04BC  1803               	skipnc
  3934  04BD  2CC3               	goto	l575
  3935  04BE  3000               	movlw	high S7340
  3936  04BF  008A               	movwf	10
  3937  04C0  3001               	movlw	low S7340
  3938  04C1  0704               	addwf	4,w
  3939  04C2  0082               	movwf	2
  3940  04C3                     l575:	
  3941                           
  3942                           ;ADC.c: 26: if(SystemONFlag==0)
  3943  04C3  1872               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  3944  04C4  2CDA               	goto	l6766
  3945                           
  3946                           ;ADC.c: 27: {
  3947                           ;ADC.c: 28: if(ADCVal[2]<134)
  3948  04C5  3000               	movlw	0
  3949  04C6  024A               	subwf	_ADCVal+5,w
  3950  04C7  3086               	movlw	134
  3951  04C8  1903               	skipnz
  3952  04C9  0249               	subwf	_ADCVal+4,w
  3953  04CA  1803               	skipnc
  3954  04CB  2CCE               	goto	l6760
  3955                           
  3956                           ;ADC.c: 29: {
  3957                           ;ADC.c: 30: BatPercent=0;
  3958  04CC  01C4               	clrf	_BatPercent
  3959                           
  3960                           ;ADC.c: 31: }
  3961  04CD  2CDA               	goto	l6766
  3962  04CE                     l6760:	
  3963                           
  3964                           ;ADC.c: 32: else if(ADCVal[2]>175)
  3965  04CE  3000               	movlw	0
  3966  04CF  024A               	subwf	_ADCVal+5,w
  3967  04D0  30B0               	movlw	176
  3968  04D1  1903               	skipnz
  3969  04D2  0249               	subwf	_ADCVal+4,w
  3970  04D3  1C03               	skipc
  3971  04D4  2CD7               	goto	l6764
  3972                           
  3973                           ;ADC.c: 33: {
  3974                           ;ADC.c: 34: BatPercent=99;
  3975  04D5  3063               	movlw	99
  3976  04D6  2CD9               	goto	L13
  3977  04D7                     l6764:	
  3978                           ;ADC.c: 35: }
  3979                           
  3980                           
  3981                           ;ADC.c: 36: else
  3982                           ;ADC.c: 37: {
  3983                           ;ADC.c: 38: BatPercent=ADCVal[2]-125;
  3984  04D7  0849               	movf	_ADCVal+4,w
  3985  04D8  3E83               	addlw	131
  3986  04D9                     L13:	
  3987  04D9  00C4               	movwf	_BatPercent
  3988  04DA                     l6766:	
  3989                           
  3990                           ;ADC.c: 39: }
  3991                           ;ADC.c: 40: }
  3992                           ;ADC.c: 41: if(ADCVal[2]<125)
  3993  04DA  3000               	movlw	0
  3994  04DB  024A               	subwf	_ADCVal+5,w
  3995  04DC  307D               	movlw	125
  3996  04DD  1903               	skipnz
  3997  04DE  0249               	subwf	_ADCVal+4,w
  3998  04DF  1803               	skipnc
  3999  04E0  2CE3               	goto	l583
  4000                           
  4001                           ;ADC.c: 42: {
  4002                           ;ADC.c: 43: LowBatFlag=1;
  4003  04E1  17F1               	bsf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  4004                           
  4005                           ;ADC.c: 44: }
  4006  04E2  2CE4               	goto	l6770
  4007  04E3                     l583:	
  4008                           
  4009                           ;ADC.c: 45: else
  4010                           ;ADC.c: 46: {
  4011                           ;ADC.c: 47: LowBatFlag=0;
  4012  04E3  13F1               	bcf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  4013  04E4                     l6770:	
  4014                           
  4015                           ;ADC.c: 48: }
  4016                           ;ADC.c: 49: if(ADCVal[1]>29)
  4017  04E4  3000               	movlw	0
  4018  04E5  0248               	subwf	_ADCVal+3,w
  4019  04E6  301E               	movlw	30
  4020  04E7  1903               	skipnz
  4021  04E8  0247               	subwf	_ADCVal+2,w
  4022  04E9  1C03               	skipc
  4023  04EA  2CF7               	goto	l6786
  4024  04EB  30C8               	movlw	200
  4025                           
  4026                           ;ADC.c: 50: {
  4027                           ;ADC.c: 51: CurrentCnt++;
  4028  04EC  0AC0               	incf	_CurrentCnt,f
  4029                           
  4030                           ;ADC.c: 52: if(CurrentCnt>=200)
  4031  04ED  0240               	subwf	_CurrentCnt,w
  4032  04EE  1C03               	skipc
  4033  04EF  0008               	return
  4034                           
  4035                           ;ADC.c: 53: {
  4036                           ;ADC.c: 54: CurrentCnt=200;
  4037  04F0  30C8               	movlw	200
  4038  04F1  00C0               	movwf	_CurrentCnt
  4039                           
  4040                           ;ADC.c: 55: IovFlag=1;
  4041  04F2  1771               	bsf	_IovFlag/(0+8),_IovFlag& (0+7)
  4042                           
  4043                           ;ADC.c: 56: LedIovFlag=1;
  4044  04F3  16F1               	bsf	_LedIovFlag/(0+8),_LedIovFlag& (0+7)
  4045                           
  4046                           ;ADC.c: 57: WorkFlag=0;
  4047  04F4  1271               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  4048                           
  4049                           ;ADC.c: 58: WorkMin=0;
  4050  04F5  01C3               	clrf	_WorkMin
  4051  04F6  0008               	return
  4052  04F7                     l6786:	
  4053                           
  4054                           ;ADC.c: 61: else
  4055                           ;ADC.c: 62: {
  4056                           ;ADC.c: 63: CurrentCnt=0;
  4057  04F7  01C0               	clrf	_CurrentCnt
  4058                           
  4059                           ;ADC.c: 64: IovFlag=0;
  4060  04F8  1371               	bcf	_IovFlag/(0+8),_IovFlag& (0+7)
  4061  04F9  0008               	return
  4062  04FA                     __end_of_ADCPro:	
  4063                           
  4064                           	psect	swtext1
  4065  0001                     __pswtext1:	
  4066  0001                     S7340:	
  4067  0001  2CAC               	ljmp	l6746
  4068  0002  2CB1               	ljmp	l6748
  4069  0003  2CB6               	ljmp	l6750
  4070                           
  4071                           	psect	text21
  4072  01ED                     __ptext21:	
  4073 ;; *************** function _ADCRead *****************
  4074 ;; Defined at:
  4075 ;;		line 178 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  ch              1    wreg     unsigned char 
  4078 ;;  Val             1   21[BANK0 ] PTR unsigned int 
  4079 ;;		 -> ADCVal(6), 
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  ch              1    0[BANK1 ] unsigned char 
  4082 ;;  ad_temp         2    5[BANK1 ] unsigned int 
  4083 ;;  AD_L            2    3[BANK1 ] unsigned int 
  4084 ;;  AD_H            2    1[BANK1 ] unsigned int 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 300/0
  4091 ;;		On exit  : 300/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1
  4094 ;;      Params:         0       1       0
  4095 ;;      Locals:         0       0       7
  4096 ;;      Temps:          0       4       0
  4097 ;;      Totals:         0       5       7
  4098 ;;Total ram usage:       12 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    3
  4101 ;; This function calls:
  4102 ;;		_ADSample
  4103 ;;		___lldiv
  4104 ;;		___lmul
  4105 ;; This function is called by:
  4106 ;;		_ADCPro
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           
  4111                           ;psect for function _ADCRead
  4112  01ED                     _ADCRead:	
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4116                           ;ADCRead@ch stored from wreg
  4117  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  4118  01EE  00CF               	movwf	ADCRead@ch^(0+128)
  4119                           
  4120                           ;ADC.c: 180: unsigned int ad_temp,AD_H,AD_L;
  4121                           ;ADC.c: 182: if(ADSample(ch))
  4122  01EF  275E               	fcall	_ADSample
  4123  01F0  3A00               	xorlw	0
  4124  01F1  1903               	skipnz
  4125  01F2  0008               	return
  4126                           
  4127                           ;ADC.c: 183: {
  4128                           ;ADC.c: 184: AD_H=ADRESH;
  4129  01F3  081E               	movf	30,w	;volatile
  4130  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  4131  01F5  00D0               	movwf	ADCRead@AD_H^(0+128)
  4132  01F6  01D1               	clrf	(ADCRead@AD_H+1)^(0+128)
  4133                           
  4134                           ;ADC.c: 185: AD_L=ADRESL;
  4135  01F7  081E               	movf	30,w	;volatile
  4136  01F8  00D2               	movwf	ADCRead@AD_L^(0+128)
  4137  01F9  01D3               	clrf	(ADCRead@AD_L+1)^(0+128)
  4138                           
  4139                           ;ADC.c: 186: ad_temp=(AD_H<<4)|(AD_L>>4);
  4140  01FA  0851               	movf	(ADCRead@AD_H+1)^(0+128),w
  4141  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  4142  01FC  00E2               	movwf	??_ADCRead+1
  4143  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  4144  01FE  0850               	movf	ADCRead@AD_H^(0+128),w
  4145  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  4146  0200  00E1               	movwf	??_ADCRead
  4147  0201  30F0               	movlw	240
  4148  0202  0EE1               	swapf	??_ADCRead,f
  4149  0203  0EE2               	swapf	??_ADCRead+1,f
  4150  0204  05E2               	andwf	??_ADCRead+1,f
  4151  0205  0861               	movf	??_ADCRead,w
  4152  0206  390F               	andlw	15
  4153  0207  04E2               	iorwf	??_ADCRead+1,f
  4154  0208  30F0               	movlw	240
  4155  0209  05E1               	andwf	??_ADCRead,f
  4156  020A  0861               	movf	??_ADCRead,w
  4157  020B  1683               	bsf	3,5	;RP0=1, select bank1
  4158  020C  00D4               	movwf	ADCRead@ad_temp^(0+128)
  4159  020D  1283               	bcf	3,5	;RP0=0, select bank0
  4160  020E  0862               	movf	??_ADCRead+1,w
  4161  020F  1683               	bsf	3,5	;RP0=1, select bank1
  4162  0210  00D5               	movwf	(ADCRead@ad_temp+1)^(0+128)
  4163  0211  0853               	movf	(ADCRead@AD_L+1)^(0+128),w
  4164  0212  1283               	bcf	3,5	;RP0=0, select bank0
  4165  0213  00E2               	movwf	??_ADCRead+1
  4166  0214  1683               	bsf	3,5	;RP0=1, select bank1
  4167  0215  0852               	movf	ADCRead@AD_L^(0+128),w
  4168  0216  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0217  00E1               	movwf	??_ADCRead
  4170  0218  3004               	movlw	4
  4171  0219                     u3875:	
  4172  0219  1003               	clrc
  4173  021A  0CE2               	rrf	??_ADCRead+1,f
  4174  021B  0CE1               	rrf	??_ADCRead,f
  4175  021C  3EFF               	addlw	-1
  4176  021D  1D03               	skipz
  4177  021E  2A19               	goto	u3875
  4178  021F  0861               	movf	??_ADCRead,w
  4179  0220  1683               	bsf	3,5	;RP0=1, select bank1
  4180  0221  04D4               	iorwf	ADCRead@ad_temp^(0+128),f
  4181  0222  1283               	bcf	3,5	;RP0=0, select bank0
  4182  0223  0862               	movf	??_ADCRead+1,w
  4183  0224  1683               	bsf	3,5	;RP0=1, select bank1
  4184  0225  04D5               	iorwf	(ADCRead@ad_temp+1)^(0+128),f
  4185                           
  4186                           ;ADC.c: 187: ADsum += ad_temp;
  4187  0226  0854               	movf	ADCRead@ad_temp^(0+128),w
  4188  0227  1283               	bcf	3,5	;RP0=0, select bank0
  4189  0228  00E1               	movwf	??_ADCRead
  4190  0229  1683               	bsf	3,5	;RP0=1, select bank1
  4191  022A  0855               	movf	(ADCRead@ad_temp+1)^(0+128),w
  4192  022B  1283               	bcf	3,5	;RP0=0, select bank0
  4193  022C  00E2               	movwf	??_ADCRead+1
  4194  022D  01E3               	clrf	??_ADCRead+2
  4195  022E  01E4               	clrf	??_ADCRead+3
  4196  022F  0861               	movf	??_ADCRead,w
  4197  0230  07A0               	addwf	_ADsum,f
  4198  0231  0862               	movf	??_ADCRead+1,w
  4199  0232  1103               	clrz
  4200  0233  1803               	skipnc
  4201  0234  3E01               	addlw	1
  4202  0235  1D03               	btfss	3,2
  4203  0236  07A1               	addwf	_ADsum+1,f
  4204  0237  0863               	movf	??_ADCRead+2,w
  4205  0238  1103               	clrz
  4206  0239  1803               	skipnc
  4207  023A  3E01               	addlw	1
  4208  023B  1D03               	btfss	3,2
  4209  023C  07A2               	addwf	_ADsum+2,f
  4210  023D  0864               	movf	??_ADCRead+3,w
  4211  023E  1103               	clrz
  4212  023F  1803               	skipnc
  4213  0240  3E01               	addlw	1
  4214  0241  1D03               	btfss	3,2
  4215  0242  07A3               	addwf	_ADsum+3,f
  4216  0243  300A               	movlw	10
  4217                           
  4218                           ;ADC.c: 188: ADcnt++;
  4219  0244  0AC1               	incf	_ADcnt,f
  4220                           
  4221                           ;ADC.c: 189: if(ADcnt >= 10)
  4222  0245  0241               	subwf	_ADcnt,w
  4223  0246  1C03               	skipc
  4224  0247  0008               	return
  4225  0248  300A               	movlw	10
  4226                           
  4227                           ;ADC.c: 190: {
  4228                           ;ADC.c: 191: ADcnt = 0;
  4229  0249  01C1               	clrf	_ADcnt
  4230                           
  4231                           ;ADC.c: 192: ADsum /=10;
  4232  024A  00D3               	movwf	___lldiv@divisor
  4233  024B  01D4               	clrf	___lldiv@divisor+1
  4234  024C  01D5               	clrf	___lldiv@divisor+2
  4235  024D  01D6               	clrf	___lldiv@divisor+3
  4236  024E  0823               	movf	_ADsum+3,w
  4237  024F  00DA               	movwf	___lldiv@dividend+3
  4238  0250  0822               	movf	_ADsum+2,w
  4239  0251  00D9               	movwf	___lldiv@dividend+2
  4240  0252  0821               	movf	_ADsum+1,w
  4241  0253  00D8               	movwf	___lldiv@dividend+1
  4242  0254  0820               	movf	_ADsum,w
  4243  0255  00D7               	movwf	___lldiv@dividend
  4244  0256  24FA               	fcall	___lldiv
  4245  0257  0856               	movf	?___lldiv+3,w
  4246  0258  00A3               	movwf	_ADsum+3
  4247  0259  0855               	movf	?___lldiv+2,w
  4248  025A  00A2               	movwf	_ADsum+2
  4249  025B  0854               	movf	?___lldiv+1,w
  4250  025C  00A1               	movwf	_ADsum+1
  4251  025D  0853               	movf	?___lldiv,w
  4252  025E  00A0               	movwf	_ADsum
  4253                           
  4254                           ;ADC.c: 193: switch (ADCState)
  4255  025F  2A8D               	goto	l6552
  4256  0260                     l6544:	
  4257                           
  4258                           ;ADC.c: 196: *Val=ADsum;
  4259  0260  0860               	movf	ADCRead@Val,w
  4260  0261  0084               	movwf	4
  4261  0262  0820               	movf	_ADsum,w
  4262  0263  1383               	bcf	3,7	;select IRP bank0
  4263  0264  0080               	movwf	0
  4264  0265  0A84               	incf	4,f
  4265  0266  0821               	movf	_ADsum+1,w
  4266  0267  2A8B               	goto	L15
  4267  0268                     l6546:	
  4268                           ;ADC.c: 197: break;
  4269                           
  4270                           
  4271                           ;ADC.c: 200: *Val=ADsum*1000/(*(Val-1));
  4272  0268  0860               	movf	ADCRead@Val,w
  4273  0269  3EFE               	addlw	-2
  4274  026A  229F               	fcall	PL4	;call to abstracted procedure
  4275  026B  3003               	movlw	3
  4276  026C  01D2               	clrf	___lmul@multiplicand+3
  4277  026D  01D1               	clrf	___lmul@multiplicand+2
  4278  026E  00D0               	movwf	___lmul@multiplicand+1
  4279  026F  30E8               	movlw	232
  4280  0270  00CF               	movwf	___lmul@multiplicand
  4281  0271  2A7A               	goto	L16
  4282  0272                     l6548:	
  4283                           ;ADC.c: 201: break;
  4284                           
  4285                           
  4286                           ;ADC.c: 204: *Val=ADsum*100/(*(Val-2));
  4287  0272  0860               	movf	ADCRead@Val,w
  4288  0273  3EFC               	addlw	-4
  4289  0274  229F               	fcall	PL4	;call to abstracted procedure
  4290  0275  3064               	movlw	100
  4291  0276  00CF               	movwf	___lmul@multiplicand
  4292  0277  01D0               	clrf	___lmul@multiplicand+1
  4293  0278  01D1               	clrf	___lmul@multiplicand+2
  4294  0279  01D2               	clrf	___lmul@multiplicand+3
  4295  027A                     L16:	
  4296  027A  25FF               	fcall	___lmul
  4297  027B  084E               	movf	?___lmul+3,w
  4298  027C  00DA               	movwf	___lldiv@dividend+3
  4299  027D  084D               	movf	?___lmul+2,w
  4300  027E  00D9               	movwf	___lldiv@dividend+2
  4301  027F  084C               	movf	?___lmul+1,w
  4302  0280  00D8               	movwf	___lldiv@dividend+1
  4303  0281  084B               	movf	?___lmul,w
  4304  0282  00D7               	movwf	___lldiv@dividend
  4305  0283  24FA               	fcall	___lldiv
  4306  0284  0860               	movf	ADCRead@Val,w
  4307  0285  0084               	movwf	4
  4308  0286  0853               	movf	?___lldiv,w
  4309  0287  1383               	bcf	3,7	;select IRP bank0
  4310  0288  0080               	movwf	0
  4311  0289  0A84               	incf	4,f
  4312  028A  0854               	movf	?___lldiv+1,w
  4313  028B                     L15:	
  4314  028B  0080               	movwf	0
  4315                           
  4316                           ;ADC.c: 205: break;
  4317  028C  2A95               	goto	l630
  4318  028D                     l6552:	
  4319                           
  4320                           ; Switch size 1, requested type "space"
  4321                           ; Number of cases is 3, Range of values is 0 to 2
  4322                           ; switch strategies available:
  4323                           ; Name         Instructions Cycles
  4324                           ; direct_byte            9     6 (fixed)
  4325                           ; simple_byte           10     6 (average)
  4326                           ; jumptable            260     6 (fixed)
  4327                           ;	Chosen strategy is direct_byte
  4328  028D  22B5               	fcall	PL36	;call to abstracted procedure
  4329  028E  1803               	skipnc
  4330  028F  2A95               	goto	l630
  4331  0290  3007               	movlw	high S7342
  4332  0291  008A               	movwf	10
  4333  0292  30DD               	movlw	low S7342
  4334  0293  0704               	addwf	4,w
  4335  0294  0082               	movwf	2
  4336  0295                     l630:	
  4337  0295  3003               	movlw	3
  4338                           
  4339                           ;ADC.c: 207: ADsum = 0;
  4340  0296  01A0               	clrf	_ADsum
  4341  0297  01A1               	clrf	_ADsum+1
  4342  0298  01A2               	clrf	_ADsum+2
  4343  0299  01A3               	clrf	_ADsum+3
  4344                           
  4345                           ;ADC.c: 208: ADCState++;
  4346  029A  0AC2               	incf	_ADCState,f
  4347                           
  4348                           ;ADC.c: 209: if(ADCState>=3)
  4349  029B  0242               	subwf	_ADCState,w
  4350  029C  1803               	btfsc	3,0
  4351                           
  4352                           ;ADC.c: 210: {
  4353                           ;ADC.c: 211: ADCState=0;
  4354  029D  01C2               	clrf	_ADCState
  4355  029E  0008               	return
  4356  029F                     __end_of_ADCRead:	
  4357  029F                     PL4:	
  4358  029F  0084               	movwf	4
  4359  02A0  1383               	bcf	3,7	;select IRP bank0
  4360  02A1  0800               	movf	0,w
  4361  02A2  00E1               	movwf	??_ADCRead
  4362  02A3  0A84               	incf	4,f
  4363  02A4  0800               	movf	0,w
  4364  02A5  00E2               	movwf	??_ADCRead+1
  4365  02A6  0861               	movf	??_ADCRead,w
  4366  02A7  00D3               	movwf	___lldiv@divisor
  4367  02A8  0862               	movf	??_ADCRead+1,w
  4368  02A9  00D4               	movwf	___lldiv@divisor+1
  4369  02AA  01D5               	clrf	___lldiv@divisor+2
  4370  02AB  01D6               	clrf	___lldiv@divisor+3
  4371  02AC  0823               	movf	_ADsum+3,w
  4372  02AD  00CE               	movwf	___lmul@multiplier+3
  4373  02AE  0822               	movf	_ADsum+2,w
  4374  02AF  00CD               	movwf	___lmul@multiplier+2
  4375  02B0  0821               	movf	_ADsum+1,w
  4376  02B1  00CC               	movwf	___lmul@multiplier+1
  4377  02B2  0820               	movf	_ADsum,w
  4378  02B3  00CB               	movwf	___lmul@multiplier
  4379  02B4  0008               	return
  4380  02B5                     __end_ofPL4:	
  4381  02B5                     PL36:	
  4382  02B5  0842               	movf	_ADCState,w
  4383  02B6  0084               	movwf	4
  4384  02B7  3003               	movlw	3
  4385  02B8  0204               	subwf	4,w
  4386  02B9  0008               	return
  4387  02BA                     __end_ofPL36:	
  4388                           
  4389                           	psect	swtext2
  4390  07DD                     __pswtext2:	
  4391  07DD                     S7342:	
  4392  07DD  2A60               	ljmp	l6544
  4393  07DE  2A68               	ljmp	l6546
  4394  07DF  2A72               	ljmp	l6548
  4395                           
  4396                           	psect	text22
  4397  05FF                     __ptext22:	
  4398 ;; *************** function ___lmul *****************
  4399 ;; Defined at:
  4400 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4403 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  product         4    3[COMMON] unsigned long 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  4    0[BANK0 ] unsigned long 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0
  4410 ;; Tracked objects:
  4411 ;;		On entry : B00/0
  4412 ;;		On exit  : B00/0
  4413 ;;		Unchanged: 800/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1
  4415 ;;      Params:         0       8       0
  4416 ;;      Locals:         4       0       0
  4417 ;;      Temps:          0       0       0
  4418 ;;      Totals:         4       8       0
  4419 ;;Total ram usage:       12 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    2
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_ADCRead
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function ___lmul
  4431  05FF                     ___lmul:	
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4435  05FF  01F6               	clrf	___lmul@product
  4436  0600  01F7               	clrf	___lmul@product+1
  4437  0601  01F8               	clrf	___lmul@product+2
  4438  0602  01F9               	clrf	___lmul@product+3
  4439  0603                     l4251:	
  4440  0603  1C4B               	btfss	___lmul@multiplier,0
  4441  0604  2E19               	goto	l6454
  4442  0605  084F               	movf	___lmul@multiplicand,w
  4443  0606  07F6               	addwf	___lmul@product,f
  4444  0607  0850               	movf	___lmul@multiplicand+1,w
  4445  0608  1103               	clrz
  4446  0609  1803               	skipnc
  4447  060A  3E01               	addlw	1
  4448  060B  1D03               	btfss	3,2
  4449  060C  07F7               	addwf	___lmul@product+1,f
  4450  060D  0851               	movf	___lmul@multiplicand+2,w
  4451  060E  1103               	clrz
  4452  060F  1803               	skipnc
  4453  0610  3E01               	addlw	1
  4454  0611  1D03               	btfss	3,2
  4455  0612  07F8               	addwf	___lmul@product+2,f
  4456  0613  0852               	movf	___lmul@multiplicand+3,w
  4457  0614  1103               	clrz
  4458  0615  1803               	skipnc
  4459  0616  3E01               	addlw	1
  4460  0617  1D03               	btfss	3,2
  4461  0618  07F9               	addwf	___lmul@product+3,f
  4462  0619                     l6454:	
  4463  0619  1003               	clrc
  4464  061A  0DCF               	rlf	___lmul@multiplicand,f
  4465  061B  0DD0               	rlf	___lmul@multiplicand+1,f
  4466  061C  0DD1               	rlf	___lmul@multiplicand+2,f
  4467  061D  0DD2               	rlf	___lmul@multiplicand+3,f
  4468  061E  1003               	clrc
  4469  061F  0CCE               	rrf	___lmul@multiplier+3,f
  4470  0620  0CCD               	rrf	___lmul@multiplier+2,f
  4471  0621  0CCC               	rrf	___lmul@multiplier+1,f
  4472  0622  0CCB               	rrf	___lmul@multiplier,f
  4473  0623  084E               	movf	___lmul@multiplier+3,w
  4474  0624  044D               	iorwf	___lmul@multiplier+2,w
  4475  0625  044C               	iorwf	___lmul@multiplier+1,w
  4476  0626  044B               	iorwf	___lmul@multiplier,w
  4477  0627  1D03               	skipz
  4478  0628  2E03               	goto	l4251
  4479  0629  0879               	movf	___lmul@product+3,w
  4480  062A  00CE               	movwf	?___lmul+3
  4481  062B  0878               	movf	___lmul@product+2,w
  4482  062C  00CD               	movwf	?___lmul+2
  4483  062D  0877               	movf	___lmul@product+1,w
  4484  062E  00CC               	movwf	?___lmul+1
  4485  062F  0876               	movf	___lmul@product,w
  4486  0630  00CB               	movwf	?___lmul
  4487  0631  0008               	return
  4488  0632                     __end_of___lmul:	
  4489                           
  4490                           	psect	text23
  4491  04FA                     __ptext23:	
  4492 ;; *************** function ___lldiv *****************
  4493 ;; Defined at:
  4494 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  divisor         4    8[BANK0 ] unsigned long 
  4497 ;;  dividend        4   12[BANK0 ] unsigned long 
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;  quotient        4   16[BANK0 ] unsigned long 
  4500 ;;  counter         1   20[BANK0 ] unsigned char 
  4501 ;; Return value:  Size  Location     Type
  4502 ;;                  4    8[BANK0 ] unsigned long 
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, status,0
  4505 ;; Tracked objects:
  4506 ;;		On entry : 300/0
  4507 ;;		On exit  : 300/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1
  4510 ;;      Params:         0       8       0
  4511 ;;      Locals:         0       5       0
  4512 ;;      Temps:          0       0       0
  4513 ;;      Totals:         0      13       0
  4514 ;;Total ram usage:       13 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    2
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_ADCRead
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function ___lldiv
  4526  04FA                     ___lldiv:	
  4527                           
  4528                           ;incstack = 0
  4529                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4530  04FA  01DB               	clrf	___lldiv@quotient
  4531  04FB  01DC               	clrf	___lldiv@quotient+1
  4532  04FC  01DD               	clrf	___lldiv@quotient+2
  4533  04FD  01DE               	clrf	___lldiv@quotient+3
  4534  04FE  0856               	movf	___lldiv@divisor+3,w
  4535  04FF  0455               	iorwf	___lldiv@divisor+2,w
  4536  0500  0454               	iorwf	___lldiv@divisor+1,w
  4537  0501  0453               	iorwf	___lldiv@divisor,w
  4538  0502  1903               	skipnz
  4539  0503  2D39               	goto	l6526
  4540  0504  01DF               	clrf	___lldiv@counter
  4541  0505                     L17:	
  4542  0505  0ADF               	incf	___lldiv@counter,f
  4543  0506  1BD6               	btfsc	___lldiv@divisor+3,7
  4544  0507  2D0E               	goto	l6514
  4545  0508  1003               	clrc
  4546  0509  0DD3               	rlf	___lldiv@divisor,f
  4547  050A  0DD4               	rlf	___lldiv@divisor+1,f
  4548  050B  0DD5               	rlf	___lldiv@divisor+2,f
  4549  050C  0DD6               	rlf	___lldiv@divisor+3,f
  4550  050D  2D05               	goto	L17
  4551  050E                     l6514:	
  4552  050E  1003               	clrc
  4553  050F  0DDB               	rlf	___lldiv@quotient,f
  4554  0510  0DDC               	rlf	___lldiv@quotient+1,f
  4555  0511  0DDD               	rlf	___lldiv@quotient+2,f
  4556  0512  0DDE               	rlf	___lldiv@quotient+3,f
  4557  0513  0856               	movf	___lldiv@divisor+3,w
  4558  0514  025A               	subwf	___lldiv@dividend+3,w
  4559  0515  1D03               	skipz
  4560  0516  2D21               	goto	u3845
  4561  0517  0855               	movf	___lldiv@divisor+2,w
  4562  0518  0259               	subwf	___lldiv@dividend+2,w
  4563  0519  1D03               	skipz
  4564  051A  2D21               	goto	u3845
  4565  051B  0854               	movf	___lldiv@divisor+1,w
  4566  051C  0258               	subwf	___lldiv@dividend+1,w
  4567  051D  1D03               	skipz
  4568  051E  2D21               	goto	u3845
  4569  051F  0853               	movf	___lldiv@divisor,w
  4570  0520  0257               	subwf	___lldiv@dividend,w
  4571  0521                     u3845:	
  4572  0521  1C03               	skipc
  4573  0522  2D33               	goto	L18
  4574  0523  0853               	movf	___lldiv@divisor,w
  4575  0524  02D7               	subwf	___lldiv@dividend,f
  4576  0525  0854               	movf	___lldiv@divisor+1,w
  4577  0526  1C03               	skipc
  4578  0527  0F54               	incfsz	___lldiv@divisor+1,w
  4579  0528  02D8               	subwf	___lldiv@dividend+1,f
  4580  0529  0855               	movf	___lldiv@divisor+2,w
  4581  052A  1C03               	skipc
  4582  052B  0F55               	incfsz	___lldiv@divisor+2,w
  4583  052C  02D9               	subwf	___lldiv@dividend+2,f
  4584  052D  0856               	movf	___lldiv@divisor+3,w
  4585  052E  1C03               	skipc
  4586  052F  0F56               	incfsz	___lldiv@divisor+3,w
  4587  0530  02DA               	subwf	___lldiv@dividend+3,f
  4588  0531  145B               	bsf	___lldiv@quotient,0
  4589  0532  1003               	clrc
  4590  0533                     L18:	
  4591  0533  0CD6               	rrf	___lldiv@divisor+3,f
  4592  0534  0CD5               	rrf	___lldiv@divisor+2,f
  4593  0535  0CD4               	rrf	___lldiv@divisor+1,f
  4594  0536  0CD3               	rrf	___lldiv@divisor,f
  4595  0537  0BDF               	decfsz	___lldiv@counter,f
  4596  0538  2D0E               	goto	l6514
  4597  0539                     l6526:	
  4598  0539  085E               	movf	___lldiv@quotient+3,w
  4599  053A  00D6               	movwf	?___lldiv+3
  4600  053B  085D               	movf	___lldiv@quotient+2,w
  4601  053C  00D5               	movwf	?___lldiv+2
  4602  053D  085C               	movf	___lldiv@quotient+1,w
  4603  053E  00D4               	movwf	?___lldiv+1
  4604  053F  085B               	movf	___lldiv@quotient,w
  4605  0540  00D3               	movwf	?___lldiv
  4606  0541  0008               	return
  4607  0542                     __end_of___lldiv:	
  4608                           
  4609                           	psect	text24
  4610  075E                     __ptext24:	
  4611 ;; *************** function _ADSample *****************
  4612 ;; Defined at:
  4613 ;;		line 224 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  ch              1    wreg     unsigned char 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  ch              1    4[COMMON] unsigned char 
  4618 ;;  i               1    5[COMMON] volatile unsigned char 
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      unsigned char 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2, status,0
  4623 ;; Tracked objects:
  4624 ;;		On entry : 300/100
  4625 ;;		On exit  : 300/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMMON   BANK0   BANK1
  4628 ;;      Params:         0       0       0
  4629 ;;      Locals:         2       0       0
  4630 ;;      Temps:          1       0       0
  4631 ;;      Totals:         3       0       0
  4632 ;;Total ram usage:        3 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    2
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_ADCRead
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _ADSample
  4644  075E                     _ADSample:	
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4648                           ;ADSample@ch stored from wreg
  4649  075E  00F7               	movwf	ADSample@ch
  4650                           
  4651                           ;ADC.c: 226: ADCON1 = 0x00;
  4652  075F  019F               	clrf	31	;volatile
  4653                           
  4654                           ;ADC.c: 227: ADCON0 = 0X41 | ( ch << 2);
  4655  0760  00F6               	movwf	??_ADSample
  4656  0761  3001               	movlw	1
  4657  0762  1003               	clrc
  4658  0763                     L19:	
  4659  0763  0DF6               	rlf	??_ADSample,f
  4660  0764  3EFF               	addlw	-1
  4661  0765  1003               	clrc
  4662  0766  1D03               	skipz
  4663  0767  2F63               	goto	L19
  4664  0768  0D76               	rlf	??_ADSample,w
  4665  0769  3841               	iorlw	65
  4666  076A  1283               	bcf	3,5	;RP0=0, select bank0
  4667  076B  009F               	movwf	31	;volatile
  4668  076C  0000               	nop	;# 
  4669  076D  0000               	nop	;# 
  4670                           
  4671                           ;ADC.c: 230: GODONE = 1;
  4672  076E  1283               	bcf	3,5	;RP0=0, select bank0
  4673  076F  1303               	bcf	3,6	;RP1=0, select bank0
  4674  0770  149F               	bsf	31,1	;volatile
  4675                           
  4676                           ;ADC.c: 231: volatile unsigned char i = 0;
  4677  0771  01F8               	clrf	ADSample@i	;volatile
  4678  0772                     l637:	
  4679                           ;ADC.c: 232: while(GODONE)
  4680                           
  4681  0772  1C9F               	btfss	31,1	;volatile
  4682  0773  3401               	retlw	1
  4683                           
  4684                           ;ADC.c: 233: {
  4685                           ;ADC.c: 234: if(0 == (--i))
  4686  0774  0BF8               	decfsz	ADSample@i,f	;volatile
  4687  0775  2F72               	goto	l637
  4688                           
  4689                           ;ADC.c: 235: return 0;
  4690  0776  3400               	retlw	0
  4691  0777                     __end_of_ADSample:	
  4692                           ;ADC.c: 236: }
  4693                           ;ADC.c: 237: return 1;
  4694                           
  4695                           
  4696                           	psect	text25
  4697  0711                     __ptext25:	
  4698 ;; *************** function _Isr_Timer *****************
  4699 ;; Defined at:
  4700 ;;		line 8 in file "C:\Users\Administrator\Desktop\project\K13-01\code\even.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;		None
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;		None
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  1    wreg      void 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 300/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1
  4714 ;;      Params:         0       0       0
  4715 ;;      Locals:         0       0       0
  4716 ;;      Temps:          3       0       0
  4717 ;;      Totals:         3       0       0
  4718 ;;Total ram usage:        3 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    1
  4721 ;; This function calls:
  4722 ;;		_LEDScan
  4723 ;; This function is called by:
  4724 ;;		Interrupt level 1
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           
  4729                           ;psect for function _Isr_Timer
  4730  0711                     _Isr_Timer:	
  4731                           
  4732                           ;even.c: 10: TMR2IF = 0;
  4733  0711  1283               	bcf	3,5	;RP0=0, select bank0
  4734  0712  1303               	bcf	3,6	;RP1=0, select bank0
  4735  0713  108C               	bcf	12,1	;volatile
  4736  0714  300A               	movlw	10
  4737                           
  4738                           ;even.c: 11: cnt2ms++;
  4739  0715  0ABE               	incf	_cnt2ms,f
  4740                           
  4741                           ;even.c: 12: cnt10ms++;
  4742  0716  0ABD               	incf	_cnt10ms,f
  4743                           
  4744                           ;even.c: 13: if(cnt2ms>=10)
  4745  0717  023E               	subwf	_cnt2ms,w
  4746  0718  1C03               	skipc
  4747  0719  2F1D               	goto	i1l6364
  4748                           
  4749                           ;even.c: 14: {
  4750                           ;even.c: 15: LEDScan();
  4751  071A  22BA               	fcall	_LEDScan
  4752                           
  4753                           ;even.c: 16: cnt2ms=0;
  4754  071B  01BE               	clrf	_cnt2ms
  4755                           
  4756                           ;even.c: 17: time2ms=1;
  4757  071C  1571               	bsf	_time2ms/(0+8),_time2ms& (0+7)
  4758  071D                     i1l6364:	
  4759                           
  4760                           ;even.c: 18: }
  4761                           ;even.c: 19: if(cnt10ms>=50)
  4762  071D  3032               	movlw	50
  4763  071E  023D               	subwf	_cnt10ms,w
  4764  071F  1C03               	skipc
  4765  0720  2F23               	goto	i1l1194
  4766                           
  4767                           ;even.c: 20: {
  4768                           ;even.c: 21: cnt10ms=0;
  4769  0721  01BD               	clrf	_cnt10ms
  4770                           
  4771                           ;even.c: 22: time10ms=1;
  4772  0722  14F1               	bsf	_time10ms/(0+8),_time10ms& (0+7)
  4773  0723                     i1l1194:	
  4774  0723  0875               	movf	??_Isr_Timer+2,w
  4775  0724  008A               	movwf	10
  4776  0725  0874               	movf	??_Isr_Timer+1,w
  4777  0726  0084               	movwf	4
  4778  0727  0E73               	swapf	??_Isr_Timer^(0+-128),w
  4779  0728  0083               	movwf	3
  4780  0729  0EFE               	swapf	126,f
  4781  072A  0E7E               	swapf	126,w
  4782  072B  0009               	retfie
  4783  072C                     __end_of_Isr_Timer:	
  4784                           
  4785                           	psect	intentry
  4786  0004                     __pintentry:	
  4787                           ;incstack = 0
  4788                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4789                           
  4790  0004                     interrupt_function:	
  4791  007E                     saved_w	set	btemp
  4792  0004  00FE               	movwf	btemp
  4793  0005  0E03               	swapf	3,w
  4794  0006  00F3               	movwf	??_Isr_Timer
  4795  0007  0804               	movf	4,w
  4796  0008  00F4               	movwf	??_Isr_Timer+1
  4797  0009  080A               	movf	10,w
  4798  000A  00F5               	movwf	??_Isr_Timer+2
  4799  000B  2F11               	ljmp	_Isr_Timer
  4800                           
  4801                           	psect	text26
  4802  02BA                     __ptext26:	
  4803 ;; *************** function _LEDScan *****************
  4804 ;; Defined at:
  4805 ;;		line 18 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;		None
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;		None
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  1    wreg      void 
  4812 ;; Registers used:
  4813 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 300/0
  4816 ;;		On exit  : 300/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1
  4819 ;;      Params:         0       0       0
  4820 ;;      Locals:         0       0       0
  4821 ;;      Temps:          0       0       0
  4822 ;;      Totals:         0       0       0
  4823 ;;Total ram usage:        0 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_Isr_Timer
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _LEDScan
  4834  02BA                     _LEDScan:	
  4835                           
  4836                           ;LED.c: 20: static unsigned char LEDScanIndex=0;
  4837                           ;LED.c: 22: TRISB5=1,WPUB5=0;
  4838                           
  4839                           ;incstack = 0
  4840                           ; Regs used in _LEDScan: [wreg-fsr0h+status,2+status,0]
  4841  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  4842  02BB  1686               	bsf	6,5	;volatile
  4843  02BC  1295               	bcf	21,5	;volatile
  4844                           
  4845                           ;LED.c: 23: TRISB4=1,WPUB4=0;
  4846  02BD  1606               	bsf	6,4	;volatile
  4847  02BE  1215               	bcf	21,4	;volatile
  4848                           
  4849                           ;LED.c: 24: TRISB3=1,WPUB3=0;
  4850  02BF  1586               	bsf	6,3	;volatile
  4851  02C0  1195               	bcf	21,3	;volatile
  4852                           
  4853                           ;LED.c: 25: TRISC3=1,WPUC3=0;
  4854  02C1  1587               	bsf	7,3	;volatile
  4855  02C2  1703               	bsf	3,6	;RP1=1, select bank3
  4856  02C3  118F               	bcf	15,3	;volatile
  4857                           
  4858                           ;LED.c: 26: TRISC2=1,WPUC2=0;
  4859  02C4  1303               	bcf	3,6	;RP1=0, select bank1
  4860  02C5  1507               	bsf	7,2	;volatile
  4861  02C6  1703               	bsf	3,6	;RP1=1, select bank3
  4862  02C7  110F               	bcf	15,2	;volatile
  4863  02C8  0000               	nop	;# 
  4864  02C9  0000               	nop	;# 
  4865                           
  4866                           ;LED.c: 29: switch(LEDScanIndex)
  4867  02CA  2B20               	goto	i1l6300
  4868  02CB                     i1l2997:	
  4869                           ;LED.c: 30: {
  4870                           ;LED.c: 31: case 0:
  4871                           
  4872                           
  4873                           ;LED.c: 32: if(LEDArrMap[0]&0x02)
  4874  02CB  1CE5               	btfss	_LEDArrMap,1
  4875  02CC  2ACE               	goto	i1l2998
  4876                           
  4877                           ;LED.c: 33: {
  4878                           ;LED.c: 34: TRISB4=0,WPUB4=0;RB4=0 ;
  4879  02CD  234F               	fcall	PL26	;call to abstracted procedure
  4880  02CE                     i1l2998:	
  4881                           
  4882                           ;LED.c: 35: }
  4883                           ;LED.c: 36: if(LEDArrMap[0]&0x04)
  4884  02CE  1D65               	btfss	_LEDArrMap,2
  4885  02CF  2AD1               	goto	i1l2999
  4886                           
  4887                           ;LED.c: 37: {
  4888                           ;LED.c: 38: TRISB3=0,WPUB3=0;RB3=0 ;
  4889  02D0  2349               	fcall	PL22	;call to abstracted procedure
  4890  02D1                     i1l2999:	
  4891                           
  4892                           ;LED.c: 39: }
  4893                           ;LED.c: 40: if(LEDArrMap[0]&0x08)
  4894  02D1  1DE5               	btfss	_LEDArrMap,3
  4895  02D2  2AD4               	goto	i1l3000
  4896                           
  4897                           ;LED.c: 41: {
  4898                           ;LED.c: 42: TRISC3=0,WPUC3=0;RC3=0 ;
  4899  02D3  233B               	fcall	PL14	;call to abstracted procedure
  4900  02D4                     i1l3000:	
  4901                           
  4902                           ;LED.c: 43: }
  4903                           ;LED.c: 44: if(LEDArrMap[0]&0x10)
  4904  02D4  1E65               	btfss	_LEDArrMap,4
  4905  02D5  2AD7               	goto	i1l3001
  4906                           
  4907                           ;LED.c: 45: {
  4908                           ;LED.c: 46: TRISC2=0,WPUC2=0;RC2=0 ;
  4909  02D6  2333               	fcall	PL12	;call to abstracted procedure
  4910  02D7                     i1l3001:	
  4911                           
  4912                           ;LED.c: 47: }
  4913                           ;LED.c: 48: TRISB5=0,WPUB5=0;RB5=1 ;
  4914  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  4915  02D8  1286               	bcf	6,5	;volatile
  4916  02D9  1295               	bcf	21,5	;volatile
  4917  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  4918  02DB  1686               	bsf	6,5	;volatile
  4919                           
  4920                           ;LED.c: 49: break;
  4921  02DC  2B2D               	goto	i1l6302
  4922  02DD                     i1l3003:	
  4923                           ;LED.c: 51: case 1:
  4924                           
  4925                           
  4926                           ;LED.c: 52: if(LEDArrMap[1]&0x01)
  4927  02DD  1C66               	btfss	_LEDArrMap+1,0
  4928  02DE  2AE0               	goto	i1l3004
  4929                           
  4930                           ;LED.c: 53: {
  4931                           ;LED.c: 54: TRISB5=0,WPUB5=0;RB5=0 ;
  4932  02DF  2343               	fcall	PL20	;call to abstracted procedure
  4933  02E0                     i1l3004:	
  4934                           
  4935                           ;LED.c: 55: }
  4936                           ;LED.c: 56: if(LEDArrMap[1]&0x04)
  4937  02E0  1D66               	btfss	_LEDArrMap+1,2
  4938  02E1  2AE3               	goto	i1l3005
  4939                           
  4940                           ;LED.c: 57: {
  4941                           ;LED.c: 58: TRISB3=0,WPUB3=0;RB3=0 ;
  4942  02E2  2349               	fcall	PL22	;call to abstracted procedure
  4943  02E3                     i1l3005:	
  4944                           
  4945                           ;LED.c: 59: }
  4946                           ;LED.c: 60: if(LEDArrMap[1]&0x08)
  4947  02E3  1DE6               	btfss	_LEDArrMap+1,3
  4948  02E4  2AE6               	goto	i1l3006
  4949                           
  4950                           ;LED.c: 61: {
  4951                           ;LED.c: 62: TRISC3=0,WPUC3=0;RC3=0 ;
  4952  02E5  233B               	fcall	PL14	;call to abstracted procedure
  4953  02E6                     i1l3006:	
  4954                           
  4955                           ;LED.c: 63: }
  4956                           ;LED.c: 64: if(LEDArrMap[1]&0x10)
  4957  02E6  1E66               	btfss	_LEDArrMap+1,4
  4958  02E7  2AE9               	goto	i1l3007
  4959                           
  4960                           ;LED.c: 65: {
  4961                           ;LED.c: 66: TRISC2=0,WPUC2=0;RC2=0 ;
  4962  02E8  2333               	fcall	PL12	;call to abstracted procedure
  4963  02E9                     i1l3007:	
  4964                           
  4965                           ;LED.c: 67: }
  4966                           ;LED.c: 68: TRISB4=0,WPUB4=0; RB4=1 ;
  4967  02E9  1683               	bsf	3,5	;RP0=1, select bank1
  4968  02EA  1206               	bcf	6,4	;volatile
  4969  02EB  1215               	bcf	21,4	;volatile
  4970  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  4971  02ED  1606               	bsf	6,4	;volatile
  4972                           
  4973                           ;LED.c: 69: break;
  4974  02EE  2B2D               	goto	i1l6302
  4975  02EF                     i1l3008:	
  4976                           ;LED.c: 71: case 2:
  4977                           
  4978                           
  4979                           ;LED.c: 72: if(LEDArrMap[2]&0x01)
  4980  02EF  1C67               	btfss	_LEDArrMap+2,0
  4981  02F0  2AF2               	goto	i1l3009
  4982                           
  4983                           ;LED.c: 73: {
  4984                           ;LED.c: 74: TRISB5=0,WPUB5=0;RB5=0 ;
  4985  02F1  2343               	fcall	PL20	;call to abstracted procedure
  4986  02F2                     i1l3009:	
  4987                           
  4988                           ;LED.c: 75: }
  4989                           ;LED.c: 76: if(LEDArrMap[2]&0x02)
  4990  02F2  1CE7               	btfss	_LEDArrMap+2,1
  4991  02F3  2AF5               	goto	i1l3010
  4992                           
  4993                           ;LED.c: 77: {
  4994                           ;LED.c: 78: TRISB4=0,WPUB4=0;RB4=0 ;
  4995  02F4  234F               	fcall	PL26	;call to abstracted procedure
  4996  02F5                     i1l3010:	
  4997                           
  4998                           ;LED.c: 79: }
  4999                           ;LED.c: 80: if(LEDArrMap[2]&0x08)
  5000  02F5  1DE7               	btfss	_LEDArrMap+2,3
  5001  02F6  2AF8               	goto	i1l3011
  5002                           
  5003                           ;LED.c: 81: {
  5004                           ;LED.c: 82: TRISC3=0,WPUC3=0;RC3=0 ;
  5005  02F7  233B               	fcall	PL14	;call to abstracted procedure
  5006  02F8                     i1l3011:	
  5007                           
  5008                           ;LED.c: 83: }
  5009                           ;LED.c: 84: if(LEDArrMap[2]&0x10)
  5010  02F8  1E67               	btfss	_LEDArrMap+2,4
  5011  02F9  2AFB               	goto	i1l3012
  5012                           
  5013                           ;LED.c: 85: {
  5014                           ;LED.c: 86: TRISC2=0,WPUC2=0;RC2=0 ;
  5015  02FA  2333               	fcall	PL12	;call to abstracted procedure
  5016  02FB                     i1l3012:	
  5017                           
  5018                           ;LED.c: 87: }
  5019                           ;LED.c: 88: TRISB3=0,WPUB3=0;RB3=1 ;
  5020  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  5021  02FC  1186               	bcf	6,3	;volatile
  5022  02FD  1195               	bcf	21,3	;volatile
  5023  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  5024  02FF  1586               	bsf	6,3	;volatile
  5025                           
  5026                           ;LED.c: 89: break;
  5027  0300  2B2D               	goto	i1l6302
  5028  0301                     i1l3013:	
  5029                           ;LED.c: 91: case 3:
  5030                           
  5031                           
  5032                           ;LED.c: 92: if(LEDArrMap[3]&0x01)
  5033  0301  1C68               	btfss	_LEDArrMap+3,0
  5034  0302  2B04               	goto	i1l3014
  5035                           
  5036                           ;LED.c: 93: {
  5037                           ;LED.c: 94: TRISB5=0,WPUB5=0;RB5=0 ;
  5038  0303  2343               	fcall	PL20	;call to abstracted procedure
  5039  0304                     i1l3014:	
  5040                           
  5041                           ;LED.c: 95: }
  5042                           ;LED.c: 96: if(LEDArrMap[3]&0x02)
  5043  0304  1CE8               	btfss	_LEDArrMap+3,1
  5044  0305  2B07               	goto	i1l3015
  5045                           
  5046                           ;LED.c: 97: {
  5047                           ;LED.c: 98: TRISB4=0,WPUB4=0;RB4=0 ;
  5048  0306  234F               	fcall	PL26	;call to abstracted procedure
  5049  0307                     i1l3015:	
  5050                           
  5051                           ;LED.c: 99: }
  5052                           ;LED.c: 100: if(LEDArrMap[3]&0x04)
  5053  0307  1D68               	btfss	_LEDArrMap+3,2
  5054  0308  2B0A               	goto	i1l3016
  5055                           
  5056                           ;LED.c: 101: {
  5057                           ;LED.c: 102: TRISB3=0,WPUB3=0;RB3=0 ;
  5058  0309  2349               	fcall	PL22	;call to abstracted procedure
  5059  030A                     i1l3016:	
  5060                           
  5061                           ;LED.c: 103: }
  5062                           ;LED.c: 104: TRISC3=0,WPUC3=0;RC3=1 ;
  5063  030A  1683               	bsf	3,5	;RP0=1, select bank1
  5064  030B  1187               	bcf	7,3	;volatile
  5065  030C  1703               	bsf	3,6	;RP1=1, select bank3
  5066  030D  118F               	bcf	15,3	;volatile
  5067  030E  1283               	bcf	3,5	;RP0=0, select bank0
  5068  030F  1303               	bcf	3,6	;RP1=0, select bank0
  5069  0310  1587               	bsf	7,3	;volatile
  5070                           
  5071                           ;LED.c: 105: break;
  5072  0311  2B2D               	goto	i1l6302
  5073  0312                     i1l3017:	
  5074                           ;LED.c: 107: case 4:
  5075                           
  5076                           
  5077                           ;LED.c: 108: if(LEDArrMap[4]&0x01)
  5078  0312  1C69               	btfss	_LEDArrMap+4,0
  5079  0313  2B15               	goto	i1l3018
  5080                           
  5081                           ;LED.c: 109: {
  5082                           ;LED.c: 110: TRISB5=0,WPUB5=0;RB5=0 ;
  5083  0314  2343               	fcall	PL20	;call to abstracted procedure
  5084  0315                     i1l3018:	
  5085                           
  5086                           ;LED.c: 111: }
  5087                           ;LED.c: 112: if(LEDArrMap[4]&0x04)
  5088  0315  1D69               	btfss	_LEDArrMap+4,2
  5089  0316  2B18               	goto	i1l3019
  5090                           
  5091                           ;LED.c: 113: {
  5092                           ;LED.c: 114: TRISB3=0,WPUB3=0;RB3=0 ;
  5093  0317  2349               	fcall	PL22	;call to abstracted procedure
  5094  0318                     i1l3019:	
  5095                           
  5096                           ;LED.c: 115: }
  5097                           ;LED.c: 116: TRISC2=0,WPUC2=0;RC2=1 ;
  5098  0318  1683               	bsf	3,5	;RP0=1, select bank1
  5099  0319  1107               	bcf	7,2	;volatile
  5100  031A  1703               	bsf	3,6	;RP1=1, select bank3
  5101  031B  110F               	bcf	15,2	;volatile
  5102  031C  1283               	bcf	3,5	;RP0=0, select bank0
  5103  031D  1303               	bcf	3,6	;RP1=0, select bank0
  5104  031E  1507               	bsf	7,2	;volatile
  5105                           
  5106                           ;LED.c: 117: }
  5107  031F  2B2D               	goto	i1l6302
  5108  0320                     i1l6300:	
  5109  0320  1283               	bcf	3,5	;RP0=0, select bank0
  5110  0321  1303               	bcf	3,6	;RP1=0, select bank0
  5111  0322  0839               	movf	LEDScan@LEDScanIndex,w
  5112                           
  5113                           ; Switch size 1, requested type "space"
  5114                           ; Number of cases is 5, Range of values is 0 to 4
  5115                           ; switch strategies available:
  5116                           ; Name         Instructions Cycles
  5117                           ; direct_byte           11     6 (fixed)
  5118                           ; simple_byte           16     9 (average)
  5119                           ; jumptable            260     6 (fixed)
  5120                           ;	Chosen strategy is direct_byte
  5121  0323  0084               	movwf	4
  5122  0324  3005               	movlw	5
  5123  0325  0204               	subwf	4,w
  5124  0326  1803               	skipnc
  5125  0327  2B2D               	goto	i1l6302
  5126  0328  3007               	movlw	high i1S7344
  5127  0329  008A               	movwf	10
  5128  032A  30D4               	movlw	low i1S7344
  5129  032B  0704               	addwf	4,w
  5130  032C  0082               	movwf	2
  5131  032D                     i1l6302:	
  5132  032D  3005               	movlw	5
  5133                           
  5134                           ;LED.c: 118: LEDScanIndex++;
  5135  032E  0AB9               	incf	LEDScan@LEDScanIndex,f
  5136                           
  5137                           ;LED.c: 119: if(LEDScanIndex>=5)
  5138  032F  0239               	subwf	LEDScan@LEDScanIndex,w
  5139  0330  1803               	btfsc	3,0
  5140                           
  5141                           ;LED.c: 120: {
  5142                           ;LED.c: 121: LEDScanIndex=0;
  5143  0331  01B9               	clrf	LEDScan@LEDScanIndex
  5144  0332  0008               	return
  5145  0333                     __end_of_LEDScan:	
  5146  007E                     btemp	set	126	;btemp
  5147  007E                     wtemp0	set	126
  5148  0333                     PL12:	
  5149  0333  1683               	bsf	3,5	;RP0=1, select bank1
  5150  0334  1107               	bcf	7,2	;volatile
  5151  0335  1703               	bsf	3,6	;RP1=1, select bank3
  5152  0336  110F               	bcf	15,2	;volatile
  5153  0337  1283               	bcf	3,5	;RP0=0, select bank0
  5154  0338  1303               	bcf	3,6	;RP1=0, select bank0
  5155  0339  1107               	bcf	7,2	;volatile
  5156  033A  0008               	return
  5157  033B                     __end_ofPL12:	
  5158  033B                     PL14:	
  5159  033B  1683               	bsf	3,5	;RP0=1, select bank1
  5160  033C  1187               	bcf	7,3	;volatile
  5161  033D  1703               	bsf	3,6	;RP1=1, select bank3
  5162  033E  118F               	bcf	15,3	;volatile
  5163  033F  1283               	bcf	3,5	;RP0=0, select bank0
  5164  0340  1303               	bcf	3,6	;RP1=0, select bank0
  5165  0341  1187               	bcf	7,3	;volatile
  5166  0342  0008               	return
  5167  0343                     __end_ofPL14:	
  5168  0343                     PL20:	
  5169  0343  1683               	bsf	3,5	;RP0=1, select bank1
  5170  0344  1286               	bcf	6,5	;volatile
  5171  0345  1295               	bcf	21,5	;volatile
  5172  0346  1283               	bcf	3,5	;RP0=0, select bank0
  5173  0347  1286               	bcf	6,5	;volatile
  5174  0348  0008               	return
  5175  0349                     __end_ofPL20:	
  5176  0349                     PL22:	
  5177  0349  1683               	bsf	3,5	;RP0=1, select bank1
  5178  034A  1186               	bcf	6,3	;volatile
  5179  034B  1195               	bcf	21,3	;volatile
  5180  034C  1283               	bcf	3,5	;RP0=0, select bank0
  5181  034D  1186               	bcf	6,3	;volatile
  5182  034E  0008               	return
  5183  034F                     __end_ofPL22:	
  5184  034F                     PL26:	
  5185  034F  1683               	bsf	3,5	;RP0=1, select bank1
  5186  0350  1206               	bcf	6,4	;volatile
  5187  0351  1215               	bcf	21,4	;volatile
  5188  0352  1283               	bcf	3,5	;RP0=0, select bank0
  5189  0353  1206               	bcf	6,4	;volatile
  5190  0354  0008               	return
  5191  0355                     __end_ofPL26:	
  5192                           
  5193                           	psect	swtext3
  5194  07D4                     __pswtext3:	
  5195  07D4                     i1S7344:	
  5196  07D4  2ACB               	ljmp	i1l2997
  5197  07D5  2ADD               	ljmp	i1l3003
  5198  07D6  2AEF               	ljmp	i1l3008
  5199  07D7  2B01               	ljmp	i1l3013
  5200  07D8  2B12               	ljmp	i1l3017


Data Sizes:
    Strings     0
    Constant    16
    Data        54
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     26      76
    BANK1            80      7      58

Pointer List with Targets:

    ADCRead@Val	PTR unsigned int  size(1) Largest target is 6
		 -> ADCVal(BANK0[6]), 


Critical Paths under _main in COMMON

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _WorkLedPro->___lbmod
    _USBLedPro->___lbmod
    _ADCRead->___lmul
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _DisplayPro->_USBLedPro
    _ADCPro->_ADCRead
    _ADCRead->___lldiv
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADCPro->_ADCRead

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3223
                              _Apply
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _Apply                                                0     0      0    3223
                             _ADCPro
                         _DisplayPro
                            _KeyScan
                              _Motor
                           _Sec1sPro
                        _SystemSleep
 ---------------------------------------------------------------------------------
 (2) _SystemSleep                                          0     0      0       0
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0       0
                           _GPIOInit
                          _TimerInit
 ---------------------------------------------------------------------------------
 (2) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sec1sPro                                             5     5      0     953
                                              3 BANK0      5     5      0
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Motor                                                0     0      0      52
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _KeyScan                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayPro                                           0     0      0     640
                        _DisplayIcon
                             _ErrPro
                            _LockPro
                          _USBLedPro
                         _WorkLedPro
 ---------------------------------------------------------------------------------
 (3) _WorkLedPro                                           2     2      0     268
                                              0 BANK0      2     2      0
                             ___bmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     224
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USBLedPro                                            4     4      0      44
                                              0 BANK0      4     4      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1      22
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1      22
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LockPro                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ErrPro                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DisplayIcon                                          7     5      2     328
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADCPro                                               0     0      0    1578
                            _ADCRead
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                             12    11      1    1578
                                             21 BANK0      5     4      1
                                              0 BANK1      7     7      0
                           _ADSample
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADSample                                             3     3      0      65
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _LEDScan
 ---------------------------------------------------------------------------------
 (6) _LEDScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apply
     _ADCPro
       _ADCRead
         _ADSample
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _DisplayPro
       _DisplayIcon
       _ErrPro
       _LockPro
       _USBLedPro
         ___lbdiv
         ___lbmod
       _WorkLedPro
         ___bmul
         ___lbdiv
         ___lbmod
     _KeyScan
     _Motor
       ___wmul
     _Sec1sPro
       ___bmul
       ___lwdiv
     _SystemSleep
       _SystemInit
         _GPIOInit
         _TimerInit
   _SystemInit
     _GPIOInit
     _TimerInit

 _Isr_Timer (ROOT)
   _LEDScan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      7      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       3       0       21.4%
CODE                 0      0       0       0        0.0%
DATA                 0      0      91       8        0.0%
ABS                  0      0      91       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Aug 25 16:07:55 2020

                      pc 0002           ___bmul@product 0077                       PL2 03BE  
                     PL4 029F                       PL6 03D0                       PL8 05ED  
                     fsr 0004      ___wmul@multiplicand 0078               _BatPercent 0044  
                    PL10 03D9                      PL20 0343                      PL12 0333  
                    PL30 04A5                      PL22 0349                      PL14 033B  
                    PL40 05FA                      PL32 0116                      PL24 049C  
                    PL16 06CF                      PL34 01E7                      PL26 034F  
                    PL18 01DC                      PL36 02B5                      PL28 0442  
                    PL38 06AF                      l630 0295                      l609 0197  
                    l637 0772                      l583 04E3                      l575 04C3  
                    _RA0 0028                      _RA1 0029                      _RA2 002A  
                    _RA3 002B                      _RA5 002D                      _RB3 0033  
                    _RB4 0034                      _RC2 003A                      _RB5 0035  
                    _RC3 003B                      _RB6 0036                      _RB7 0037  
                    _PR2 0092                      fsr0 0004          __end_of_ADCRead 029F  
                    indf 0000                     S7340 0001                     S7342 07DD  
        __end_of_LEDSeg1 078D          __end_of_LEDScan 0333                     l2410 0113  
                   l2404 00F4                     l2405 00F8                     l2407 0107  
                   l2408 010D                     l2409 010E                     l3059 037C  
                   l2380 0037                     l2381 0062                     l2383 0052  
                   l4223 03EE                     l3096 057F                     l2393 009C  
                   l4233 043B                     l2386 00FA                     l4226 0409  
                   l4251 0603                     l2387 009F                     l2379 0036  
                   l2396 00DD                     l4502 0702                     l2398 00D8  
                   l6112 00D1                     l6212 058C                     l7110 0397  
                   l6118 00ED                     l6214 058F                     l7122 03A8  
                   l7114 039A                     l6074 006D                     l6068 0060  
                   l7220 043E                     l7204 041A                     l7072 036F  
                   l7056 035F                     l6088 0092                     l7216 0434  
                   l6514 050E                     l7146 0458                     l7082 037A  
                   l7162 072E                     l7242 0691                     l5812 0548  
                   l7068 036D                     l7252 069C                     l6526 0539  
                   l6454 0619                     l5822 0552                     l7158 0499  
                   l7078 0378                     l7166 0736                     l6544 0260  
                   l6552 028D                     l6546 0268                     l5834 056F  
                   l5826 0569                     l6482 070F                     l6490 06DE  
                   l6810 0150                     l6802 0129                     l7258 06A1  
                   l6548 0272                     l6580 05E4                     l5828 056A  
                   l6468 06FC                     l5596 07AC                     l6740 0686  
                   l5668 07C3                     l7268 06A7                     l6750 04B6  
                   l6574 05C9                     l6566 05C5                     l5854 0582  
                   l6830 0177                     l6822 0166                     l6806 0134  
                   l7278 07DA                     l6760 04CE                     l6728 066F  
                   l6840 0186                     l6832 0179                     l6770 04E4  
                   l6746 04AC                     l6754 04BB                     l5882 075C  
                   l6498 06F2                     l6834 017B                     l6764 04D7  
                   l6748 04B1                     l6852 01AB                     l6844 0191  
                   l6766 04DA                     l5878 0759                     l6864 01C1  
                   l6786 04F7                     l6874 01D6                     l6794 011C  
                   l6876 01D9                     _ANS1 0C41                     _ANS2 0C42  
                   u3010 00AC                     u3020 00B2                     u3012 00AD  
                   _IOCB 0096                     u3110 00E3                     u3022 00B3  
                   u3120 00E9                     u3112 00E4                     u3122 00EA  
                   u2315 055F                     u5005 047A                     u5015 048F  
                   _PIE1 008C                     u2800 004A                     _PIE2 008D  
                   u2802 004B                     u5125 042B                     u4405 015F  
                   u2910 0078                     u2920 007E                     u2912 0079  
                   u4505 01BA                     u2922 007F                     u5075 0401  
                   u4275 0678                     u2790 0044                     _RBIE 005B  
                   u2792 0045                     _RBIF 0058                     u4385 01E5  
                   u3924 05F5                     u3845 0521                     u3925 05F3  
                   _PIR1 000C                     u3875 0219                     u4845 03C6  
                   u4995 0461                     _RBPU 040F                     _WPUA 018E  
                   _WPUB 0095                     _WPUC 018F                     _main 07D9  
                   btemp 007E                     start 000C        ___bmul@multiplier 0078  
        _VarPowerUpCount 003C     __size_of_SystemSleep 0040         __end_of_ADSample 0777  
        __end_of_KeyScan 0116          __end_of_LockPro 0585      SystemSleep@SleepCnt 002A  
             _LedIovFlag 038D         __end_of_GPIOInit 06CF      __end_of_DisplayIcon 05ED  
                  ?_main 0073          __end_of___lbdiv 0711          __end_of___lbmod 06F6  
        __end_of___lldiv 0542                    _T2CON 0012          __end_of___lwdiv 068B  
                  _ADcnt 0041                    _ADsum 0020                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _WPUA1 0C71  
                  _WPUA2 0C72                    _WPUB3 04AB                    _WPUC2 0C7A  
                  _WPUB4 04AC                    _WPUC3 0C7B                    _WPUB5 04AD  
                  _WPUB6 04AE                    _WPUB7 04AF                    _Apply 068B  
    ___lmul@multiplicand 004F                    _Motor 03E5               _DisplayPro 07B8  
    ErrPro@LedSwitchFlag 0380           __pbitbssCOMMON 0380                    pclath 000A  
                  status 0003                    wtemp0 007E       __size_of_USBLedPro 0054  
        ___lbdiv@divisor 0076          ___lbdiv@counter 0078          __initialization 000D  
       __end_of_Sec1sPro 01DC             __end_of_main 07DD               _CurrentCnt 0040  
              ??_ADCRead 0061               _LowBatFlag 038F                   ??_main 007B  
            _HideNumbArr 00C8                ??_LEDScan 0073             USBLedPro@cnt 0037  
                 ?_Apply 0073      LEDScan@LEDScanIndex 0039                   ?_Motor 0073  
           _SystemONFlag 0390                ADCRead@ch 00CF                   _ADCON0 001F  
                 _ADCON1 009F                   i1S7344 07D4                   _ADRESH 001E  
                 _ADRESL 009E                   _ADCVal 0045                   _ADCPro 04AB  
                 _GODONE 00F9                   i1l3000 02D4                   i1l3001 02D7  
                 i1l3010 02F5                   i1l3011 02F8                   i1l3003 02DD  
                 i1l3012 02FB                   i1l3004 02E0                   i1l3013 0301  
                 i1l3005 02E3                   i1l3014 0304                   i1l3006 02E6  
                 i1l3015 0307                   i1l3007 02E9                   i1l3016 030A  
                 i1l3008 02EF                   i1l3017 0312                   i1l3009 02F2  
                 i1l3018 0315                   i1l1194 0723                   i1l3019 0318  
                 i1l6300 0320                   i1l6302 032D                   i1l6364 071D  
                 i1l2997 02CB                   i1l2998 02CE                   i1l2999 02D1  
                 _INTCON 000B                   _OSCCON 008F                   _TMR2IF 0061  
                 _WDTCON 0105                   _TRISA1 0429                   _TRISA2 042A  
                 _TRISB3 0433                   _TRISB4 0434                   _TRISC2 043A  
                 _TRISB5 0435                   _TRISC3 043B                   _TRISB6 0436  
                 _TRISB7 0437               _TimeAddCnt 00D6               _TimeDecCnt 00D8  
              ??_KeyScan 0076                ??_LockPro 0076                   _KeyCnt 0028  
                 _ErrPro 0745       __size_of_Isr_Timer 001B              _DisplayIcon 05C5  
                 ___bmul 07AA                   ___lmul 05FF                   ___wmul 072C  
              ??___lbdiv 0077                ??___lbmod 0077                   _cnt2ms 003E  
              ??___lldiv 007A                ??___lwdiv 007A          ErrPro@SwitchCnt 002E  
      __end_of_USBLedPro 049C       __size_of_TimerInit 000E                ADSample@i 0078  
                 saved_w 007E              ?_DisplayPro 0073         ___lbdiv@dividend 0077  
              ?_ADSample 0073          ___lbmod@divisor 0076  __end_of__initialization 002E  
        ___lbmod@counter 0079                ?_GPIOInit 0073               _WorkLedPro 0355  
    ___bmul@multiplicand 0076            __end_of_Apply 06AF           __pcstackCOMMON 0073  
          __end_of_Motor 0442             __pidataBANK0 0000             __pidataBANK1 0632  
             __end_ofPL2 03D0               __end_ofPL4 02B5               __end_ofPL6 03D9  
             __end_ofPL8 05FA         ___lbdiv@quotient 0079         LockPro@SwitchCnt 0032  
     WorkLedPro@delaycnt 0033               _SystemInit 07C3                  ??_Apply 007B  
      __end_of_Isr_Timer 072C                  ??_Motor 007A                  ?_ADCPro 0073  
             ??_ADSample 0076                ?_Sec1sPro 0073               __pbssBANK0 0020  
             __pbssBANK1 00D6     LockPro@LedSwitchFlag 0381               ??_GPIOInit 0076  
      __end_of_TimerInit 07AA                  ?_ErrPro 0073               __pmaintext 07D9  
                ?___bmul 0076                  ?___lmul 004B               ADCRead@Val 0060  
    __size_of_DisplayPro 000B                  ?___wmul 0076               __pintentry 0004  
         ___lmul@product 0076                  _ADCRead 01ED                  _LEDSeg1 077D  
                _LEDSeg2 00A0                  _LEDScan 02BA    Sec1sPro@ActualPercent 003F  
                _USBFlag 038B                  _USBLink 0384          __size_of_ADCPro 004F  
             ??_Sec1sPro 004E               __stringtab 0777            ??_SystemSleep 0076  
                _KeyScan 0030                  _IovFlag 038E                  _LockPro 0542  
                _LockSta 002C              ?_WorkLedPro 0073          __size_of_ErrPro 0019  
                _NumbArr 00BE          __size_of___bmul 000E                  ___lbdiv 06F6  
        __size_of___lmul 0033                  ___lbmod 06DA                  _WorkCnt 0024  
                _WorkMin 0043                  ___lldiv 04FA          __size_of___wmul 0019  
                ___lwdiv 0661                  _cnt10ms 003D       Sec1sPro@PercentErr 0050  
                __ptext1 068B                  __ptext2 0585                  __ptext3 07C3  
                __ptext4 079C                  __ptext5 06B4                  __ptext6 011C  
                __ptext7 0661                  __ptext8 03E5                  __ptext9 072C  
         ADCRead@ad_temp 00D4              ?_SystemInit 0073                  _time2ms 038A  
              _LEDArrMap 0065                  clrloop0 07CD     end_of_initialization 002E  
          WorkLedPro@dir 0382            WorkLedPro@cnt 0034               ADSample@ch 0077  
        ___lldiv@divisor 0053          ___lldiv@counter 005F             ?_DisplayIcon 0076  
    __end_of_SystemSleep 05C5          DisplayIcon@Mask 004B         ___lbmod@dividend 0078  
    __size_of_WorkLedPro 0069             ??_DisplayPro 007B                _USBLedPro 0448  
              ErrPro@cnt 002F           __end_of_ADCPro 04FA  WorkLedPro@LedSwitchFlag 0383  
            ___lbmod@rem 007A        __size_of_ADSample 0019            LockPro@Ledcnt 0030  
      __size_of_GPIOInit 001B      __size_of_SystemInit 0009           __end_of_ErrPro 075E  
     __end_of_DisplayPro 07C3           __end_of___bmul 07B8           __end_of___lmul 0632  
         __end_of___wmul 0745                _OnOffFlag 0387              __end_ofPL10 03E5  
            __end_ofPL20 0349              __end_ofPL12 033B              __end_ofPL30 04AB  
            __end_ofPL22 034F              __end_ofPL14 0343              __end_ofPL40 05FF  
            __end_ofPL32 011C              __end_ofPL24 04A5              __end_ofPL16 06DA  
            __end_ofPL34 01ED              __end_ofPL26 0355              __end_ofPL18 01E7  
            __end_ofPL36 02BA              __end_ofPL28 0448              __end_ofPL38 06B4  
    start_initialization 000D               ?_USBLedPro 0073                 ??_ADCPro 007A  
              _Isr_Timer 0711        __size_of_Sec1sPro 00C0              _SystemSleep 0585  
               ??_ErrPro 0076                 ??___bmul 0077                _TimerInit 079C  
               ??___lmul 0076                 ??___wmul 007A               init_fetch0 078D  
            __pdataBANK0 0065              __pdataBANK1 00A0                 ?_ADCRead 0060  
               ?_LEDScan 0073                ___latbits 0000            __pcstackBANK0 004B  
          __pcstackBANK1 00CF               ?_Isr_Timer 0073           USBLedPro@index 0038  
               ?_KeyScan 0073                 ?_LockPro 0073             ??_WorkLedPro 004B  
       ___lwdiv@dividend 0078              ADCRead@AD_H 00D0               ?_TimerInit 0073  
            ADCRead@AD_L 00D2                 ?___lbdiv 0076                 ?___lbmod 0076  
               ?___lldiv 0053     __size_of_DisplayIcon 0028                 ?___lwdiv 0076  
              __pstrings 0777                __pswtext1 0001                __pswtext2 07DD  
              __pswtext3 07D4             ??_SystemInit 0076                 _ADCState 0042  
         __size_of_Apply 0024              ??_USBLedPro 004B           __size_of_Motor 005D  
     __end_of_WorkLedPro 03BE         ___lwdiv@quotient 004C                 _ADSample 075E  
   LockPro@LockSwitchCnt 0031        interrupt_function 0004           ___wmul@product 004B  
               _GPIOInit 06B4                clear_ram0 07CC           _OffHideNumbArr 00B0  
     __end_of_SystemInit 07CC         __size_of_ADCRead 00B2              __stringbase 077C  
      ___wmul@multiplier 0076   WorkLedPro@LedSwitchCnt 0036         __size_of_LEDScan 0079  
               _LedIndex 0026        ___lmul@multiplier 004B              ??_Isr_Timer 0073  
               _Sec1sCnt 003A                 _KeyInBuf 0385                 _Sec1sPro 011C  
               _KeyPress 0388                 _LockNumb 003B              _LEDWorkFlag 0386  
        WorkLedPro@index 0035         __size_of_KeyScan 00E6         __size_of_LockPro 0043  
            ??_TimerInit 0076         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lldiv 0048         __size_of___lwdiv 002A                 _WorkFlag 038C  
     __end_of__stringtab 077D          ___lwdiv@divisor 0076          ___lwdiv@counter 004B  
               __ptext10 0030                 __ptext11 07B8                 __ptext20 04AB  
               __ptext12 0355                 __ptext21 01ED                 __ptext13 07AA  
               __ptext22 05FF                 __ptext14 0448                 __ptext23 04FA  
               __ptext15 06DA                 __ptext24 075E                 __ptext16 06F6  
               __ptext25 0711                 __ptext17 0542                 __ptext26 02BA  
               __ptext18 0745                 __ptext19 05C5            __size_of_main 0004  
           ?_SystemSleep 0073                 _time10ms 0389      Sec1sPro@TempPercent 0051  
               init_ram0 0791                 intlevel1 0000         ___lldiv@dividend 0057  
              stringcode 0777             DisplayIcon@i 004D         ___lldiv@quotient 005B  
               stringdir 0777                 stringtab 0777         DisplayIcon@index 0076  
             _BatAddTime 006B            ??_DisplayIcon 0078               _BatDecTime 006A  
