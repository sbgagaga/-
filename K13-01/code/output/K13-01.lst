

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 21 17:20:23 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	swtext1,local,class=CONST,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	swtext2,local,class=CONST,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	intentry,global,class=CODE,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	swtext3,local,class=CONST,delta=2
    48                           	psect	pa_nodes0,global,class=CODE,delta=2
    49                           	dabs	1,0x7E,2
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC16F887 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataBANK0
    87  0000                     __pidataBANK0:	
    88                           
    89                           	psect	idataBANK1
    90  0593                     __pidataBANK1:	
    91                           
    92                           ;initializer for _LEDSeg2
    93  0593  3400               	retlw	0
    94  0594  3401               	retlw	1
    95  0595  3400               	retlw	0
    96  0596  3401               	retlw	1
    97  0597  3401               	retlw	1
    98  0598  3400               	retlw	0
    99  0599  3400               	retlw	0
   100  059A  3402               	retlw	2
   101  059B  3403               	retlw	3
   102  059C  3402               	retlw	2
   103  059D  3403               	retlw	3
   104  059E  3403               	retlw	3
   105  059F  3402               	retlw	2
   106  05A0  3402               	retlw	2
   107  05A1  3404               	retlw	4
   108  05A2  3404               	retlw	4
   109                           
   110                           ;initializer for _OffHideNumbArr
   111  05A3  3400               	retlw	0
   112  05A4  3400               	retlw	0
   113  05A5  3412               	retlw	18
   114  05A6  3400               	retlw	0
   115  05A7  345B               	retlw	91
   116  05A8  3400               	retlw	0
   117  05A9  347F               	retlw	127
   118  05AA  3400               	retlw	0
   119  05AB  347F               	retlw	127
   120  05AC  3409               	retlw	9
   121  05AD  34FF               	retlw	255
   122  05AE  342D               	retlw	45
   123  05AF  34FF               	retlw	255
   124  05B0  343F               	retlw	63
   125                           
   126                           ;initializer for _HideNumbArr
   127  05B1  3400               	retlw	0
   128  05B2  3440               	retlw	64
   129  05B3  3470               	retlw	112
   130  05B4  3478               	retlw	120
   131  05B5  347E               	retlw	126
   132  05B6  347F               	retlw	127
   133  05B7  343F               	retlw	63
   134  05B8  340F               	retlw	15
   135  05B9  3407               	retlw	7
   136  05BA  3401               	retlw	1
   137  05BB  3400               	retlw	0
   138                           
   139                           ;initializer for _NumbArr
   140  05BC  3477               	retlw	119
   141  05BD  3424               	retlw	36
   142  05BE  345D               	retlw	93
   143  05BF  346D               	retlw	109
   144  05C0  342E               	retlw	46
   145  05C1  346B               	retlw	107
   146  05C2  347B               	retlw	123
   147  05C3  3425               	retlw	37
   148  05C4  347F               	retlw	127
   149  05C5  342F               	retlw	47
   150                           
   151                           	psect	strings
   152  0700                     __pstrings:	
   153  0700                     stringtab:	
   154  0700                     __stringtab:	
   155  0700                     stringcode:	
   156                           ;	String table - string pointers are 1 byte each
   157                           
   158  0700                     stringdir:	
   159  0700  3007               	movlw	high stringdir
   160  0701  008A               	movwf	10
   161  0702  0804               	movf	4,w
   162  0703  0A84               	incf	4,f
   163  0704  0782               	addwf	2,f
   164  0705                     __stringbase:	
   165  0705  3400               	retlw	0
   166  0706                     __end_of__stringtab:	
   167  0706                     _LEDSeg1:	
   168  0706  3401               	retlw	1
   169  0707  3402               	retlw	2
   170  0708  3402               	retlw	2
   171  0709  3403               	retlw	3
   172  070A  3400               	retlw	0
   173  070B  3403               	retlw	3
   174  070C  3404               	retlw	4
   175  070D  3400               	retlw	0
   176  070E  3401               	retlw	1
   177  070F  3401               	retlw	1
   178  0710  3402               	retlw	2
   179  0711  3400               	retlw	0
   180  0712  3403               	retlw	3
   181  0713  3404               	retlw	4
   182  0714  3400               	retlw	0
   183  0715  3401               	retlw	1
   184  0716                     __end_of_LEDSeg1:	
   185  001F                     _ADCON0	set	31
   186  001E                     _ADRESH	set	30
   187  0012                     _T2CON	set	18
   188  000B                     _INTCON	set	11
   189  0007                     _PORTC	set	7
   190  0006                     _PORTB	set	6
   191  0005                     _PORTA	set	5
   192  00F9                     _GODONE	set	249
   193  0061                     _TMR2IF	set	97
   194  003B                     _RC3	set	59
   195  003A                     _RC2	set	58
   196  0035                     _RB5	set	53
   197  0034                     _RB4	set	52
   198  0033                     _RB3	set	51
   199  002F                     _RA7	set	47
   200  002E                     _RA6	set	46
   201  002D                     _RA5	set	45
   202  002B                     _RA3	set	43
   203  009F                     _ADCON1	set	159
   204  009E                     _ADRESL	set	158
   205  0095                     _WPUB	set	149
   206  0092                     _PR2	set	146
   207  008F                     _OSCCON	set	143
   208  008C                     _PIE1	set	140
   209  0087                     _TRISC	set	135
   210  0086                     _TRISB	set	134
   211  0085                     _TRISA	set	133
   212  04AD                     _WPUB5	set	1197
   213  04AC                     _WPUB4	set	1196
   214  04AB                     _WPUB3	set	1195
   215  043B                     _TRISC3	set	1083
   216  043A                     _TRISC2	set	1082
   217  0435                     _TRISB5	set	1077
   218  0434                     _TRISB4	set	1076
   219  0433                     _TRISB3	set	1075
   220  042F                     _TRISA7	set	1071
   221  042E                     _TRISA6	set	1070
   222  042A                     _TRISA2	set	1066
   223  0429                     _TRISA1	set	1065
   224  040F                     _RBPU	set	1039
   225  0105                     _WDTCON	set	261
   226  018F                     _WPUC	set	399
   227  018E                     _WPUA	set	398
   228  0C42                     _ANS2	set	3138
   229  0C41                     _ANS1	set	3137
   230  0C7B                     _WPUC3	set	3195
   231  0C7A                     _WPUC2	set	3194
   232  0C77                     _WPUA7	set	3191
   233  0C76                     _WPUA6	set	3190
   234  0C72                     _WPUA2	set	3186
   235  0C71                     _WPUA1	set	3185
   236                           
   237                           	psect	cinit
   238  000D                     start_initialization:	
   239                           ; #config settings
   240                           
   241  000D                     __initialization:	
   242  000D  30D3               	movlw	low (__pdataBANK1+51)
   243                           
   244                           ; Initialize objects allocated to BANK1
   245  000E  1383               	bcf	3,7	;select IRP bank0
   246  000F  00FD               	movwf	125
   247  0010  3005               	movlw	high __pidataBANK1
   248  0011  00FE               	movwf	126
   249  0012  3093               	movlw	low __pidataBANK1
   250  0013  00FF               	movwf	127
   251  0014  30A0               	movlw	low __pdataBANK1
   252  0015  0084               	movwf	4
   253  0016  272C               	fcall	init_ram0
   254                           
   255                           ;initializer for _LEDArrMap
   256  0017  30FF               	movlw	255
   257  0018  00E4               	movwf	__pdataBANK0& (0+127)
   258  0019  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   259  001A  30EF               	movlw	239
   260  001B  00E6               	movwf	(__pdataBANK0+2)& (0+127)
   261  001C  30FF               	movlw	255
   262  001D  00E7               	movwf	(__pdataBANK0+3)& (0+127)
   263  001E  00E8               	movwf	(__pdataBANK0+4)& (0+127)
   264                           
   265                           ;initializer for _BatDecTime
   266  001F  30D2               	movlw	210
   267  0020  00E9               	movwf	(__pdataBANK0+5)& (0+127)
   268                           
   269                           ;initializer for _BatAddTime
   270  0021  30F0               	movlw	240
   271  0022  00EA               	movwf	(__pdataBANK0+6)& (0+127)
   272                           
   273                           ; Clear objects allocated to BANK0
   274  0023  3020               	movlw	low __pbssBANK0
   275  0024  0084               	movwf	4
   276  0025  304A               	movlw	low (__pbssBANK0+42)
   277  0026  2767               	fcall	clear_ram0
   278                           
   279                           ; Clear objects allocated to COMMON
   280  0027  01FA               	clrf	__pbssCOMMON& (0+127)
   281                           
   282                           ; Clear objects allocated to BITCOMMON
   283  0028  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   284  0029  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   285  002A                     end_of_initialization:	
   286                           ;End of C runtime variable initialization code
   287                           
   288  002A                     __end_of__initialization:	
   289  002A  0183               	clrf	3
   290  002B  2F6F               	ljmp	_main	;jump to C main() function
   291                           
   292                           	psect	bitbssCOMMON
   293  0380                     __pbitbssCOMMON:	
   294  0380                     ErrPro@LedSwitchFlag:	
   295  0380                     	ds	1
   296  0381                     LockPro@LedSwitchFlag:	
   297  0381                     	ds	1
   298  0382                     WorkLedPro@dir:	
   299  0382                     	ds	1
   300  0383                     WorkLedPro@LedSwitchFlag:	
   301  0383                     	ds	1
   302  0384                     _USBLink:	
   303  0384                     	ds	1
   304  0385                     _KeyInBuf:	
   305  0385                     	ds	1
   306  0386                     _LEDWorkFlag:	
   307  0386                     	ds	1
   308  0387                     _OnOffFlag:	
   309  0387                     	ds	1
   310  0388                     _KeyPress:	
   311  0388                     	ds	1
   312  0389                     _time10ms:	
   313  0389                     	ds	1
   314  038A                     _time2ms:	
   315  038A                     	ds	1
   316  038B                     _WorkFlag:	
   317  038B                     	ds	1
   318  038C                     _USBFlag:	
   319  038C                     	ds	1
   320  038D                     _IovFlag:	
   321  038D                     	ds	1
   322  038E                     _LowBatFlag:	
   323  038E                     	ds	1
   324  038F                     _SystemONFlag:	
   325  038F                     	ds	1
   326                           
   327                           	psect	bssCOMMON
   328  007A                     __pbssCOMMON:	
   329  007A                     _WorkMin:	
   330  007A                     	ds	1
   331                           
   332                           	psect	bssBANK0
   333  0020                     __pbssBANK0:	
   334  0020                     _ADsum:	
   335  0020                     	ds	4
   336  0024                     _TimeAddCnt:	
   337  0024                     	ds	2
   338  0026                     _TimeDecCnt:	
   339  0026                     	ds	2
   340  0028                     _WorkCnt:	
   341  0028                     	ds	2
   342  002A                     _LedIndex:	
   343  002A                     	ds	2
   344  002C                     _KeyCnt:	
   345  002C                     	ds	2
   346  002E                     _LockSta:	
   347  002E                     	ds	2
   348  0030                     ErrPro@SwitchCnt:	
   349  0030                     	ds	1
   350  0031                     LockPro@Ledcnt:	
   351  0031                     	ds	1
   352  0032                     LockPro@LockSwitchCnt:	
   353  0032                     	ds	1
   354  0033                     LockPro@SwitchCnt:	
   355  0033                     	ds	1
   356  0034                     WorkLedPro@cnt:	
   357  0034                     	ds	1
   358  0035                     WorkLedPro@index:	
   359  0035                     	ds	1
   360  0036                     WorkLedPro@LedSwitchCnt:	
   361  0036                     	ds	1
   362  0037                     USBLedPro@cnt:	
   363  0037                     	ds	1
   364  0038                     USBLedPro@index:	
   365  0038                     	ds	1
   366  0039                     LEDScan@LEDScanIndex:	
   367  0039                     	ds	1
   368  003A                     _Sec1sCnt:	
   369  003A                     	ds	1
   370  003B                     _LockNumb:	
   371  003B                     	ds	1
   372  003C                     _VarPowerUpCount:	
   373  003C                     	ds	1
   374  003D                     _cnt10ms:	
   375  003D                     	ds	1
   376  003E                     _cnt2ms:	
   377  003E                     	ds	1
   378  003F                     Sec1sPro@ActualPercent:	
   379  003F                     	ds	1
   380  0040                     _CurrentCnt:	
   381  0040                     	ds	1
   382  0041                     _ADcnt:	
   383  0041                     	ds	1
   384  0042                     _ADCState:	
   385  0042                     	ds	1
   386  0043                     _BatPercent:	
   387  0043                     	ds	1
   388  0044                     _ADCVal:	
   389  0044                     	ds	6
   390                           
   391                           	psect	dataBANK0
   392  0064                     __pdataBANK0:	
   393  0064                     _LEDArrMap:	
   394  0064                     	ds	5
   395  0069                     _BatDecTime:	
   396  0069                     	ds	1
   397  006A                     _BatAddTime:	
   398  006A                     	ds	1
   399                           
   400                           	psect	dataBANK1
   401  00A0                     __pdataBANK1:	
   402  00A0                     _LEDSeg2:	
   403  00A0                     	ds	16
   404  00B0                     _OffHideNumbArr:	
   405  00B0                     	ds	14
   406  00BE                     _HideNumbArr:	
   407  00BE                     	ds	11
   408  00C9                     _NumbArr:	
   409  00C9                     	ds	10
   410                           
   411                           	psect	inittext
   412  0728                     init_fetch0:	
   413                           ;	Called with low address in FSR and high address in W
   414                           
   415  0728  087E               	movf	126,w
   416  0729  008A               	movwf	10
   417  072A  087F               	movf	127,w
   418  072B  0082               	movwf	2
   419  072C                     init_ram0:	
   420                           ;Called with:
   421                           ;	high address of idata address in btemp 
   422                           ;	low address of idata address in btemp+1 
   423                           ;	low address of data in FSR
   424                           ;	high address + 1 of data in btemp-1
   425                           
   426  072C  2728               	fcall	init_fetch0
   427  072D  0080               	movwf	0
   428  072E  0A84               	incf	4,f
   429  072F  0804               	movf	4,w
   430  0730  067D               	xorwf	125,w
   431  0731  1903               	btfsc	3,2
   432  0732  3400               	retlw	0
   433  0733  0AFF               	incf	127,f
   434  0734  1903               	btfsc	3,2
   435  0735  0AFE               	incf	126,f
   436  0736  2F2C               	goto	init_ram0
   437                           
   438                           	psect	clrtext
   439  0767                     clear_ram0:	
   440                           ;	Called with FSR containing the base address, and
   441                           ;	W with the last address+1
   442                           
   443  0767  0064               	clrwdt	;clear the watchdog before getting into this loop
   444  0768                     clrloop0:	
   445  0768  0180               	clrf	0	;clear RAM location pointed to by FSR
   446  0769  0A84               	incf	4,f	;increment pointer
   447  076A  0604               	xorwf	4,w	;XOR with final address
   448  076B  1903               	btfsc	3,2	;have we reached the end yet?
   449  076C  3400               	retlw	0	;all done for this memory range, return
   450  076D  0604               	xorwf	4,w	;XOR again to restore value
   451  076E  2F68               	goto	clrloop0	;do the next byte
   452                           
   453                           	psect	cstackBANK1
   454  00D3                     __pcstackBANK1:	
   455  00D3                     ADCRead@ch:	
   456                           
   457                           ; 1 bytes @ 0x0
   458  00D3                     	ds	1
   459  00D4                     ADCRead@AD_H:	
   460                           
   461                           ; 2 bytes @ 0x1
   462  00D4                     	ds	2
   463  00D6                     ADCRead@AD_L:	
   464                           
   465                           ; 2 bytes @ 0x3
   466  00D6                     	ds	2
   467  00D8                     ADCRead@ad_temp:	
   468                           
   469                           ; 2 bytes @ 0x5
   470  00D8                     	ds	2
   471                           
   472                           	psect	cstackCOMMON
   473  0072                     __pcstackCOMMON:	
   474  0072                     ?_ADSample:	
   475  0072                     ?_LEDScan:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0072                     ??_LEDScan:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0072                     ?_KeyScan:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0072                     ?_Motor:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0072                     ?_DisplayPro:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0072                     ?_SystemInit:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0072                     ?_GPIOInit:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0072                     ?_TimerInit:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0072                     ?_WorkLedPro:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0072                     ?_USBLedPro:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0072                     ?_LockPro:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0072                     ?_ErrPro:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0072                     ?_ADCPro:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0072                     ?_Sec1sPro:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0072                     ?_Isr_Timer:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0072                     ??_Isr_Timer:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0072                     ?_Apply:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0072                     ?_main:	
   527                           ; 1 bytes @ 0x0
   528                           
   529                           
   530                           ; 1 bytes @ 0x0
   531  0072                     	ds	3
   532  0075                     ??_ADSample:	
   533  0075                     ??_KeyScan:	
   534                           ; 1 bytes @ 0x3
   535                           
   536  0075                     ??_SystemInit:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0075                     ??_GPIOInit:	
   540                           ; 1 bytes @ 0x3
   541                           
   542  0075                     ??_TimerInit:	
   543                           ; 1 bytes @ 0x3
   544                           
   545  0075                     ??_LockPro:	
   546                           ; 1 bytes @ 0x3
   547                           
   548  0075                     ??_ErrPro:	
   549                           ; 1 bytes @ 0x3
   550                           
   551  0075                     ?_DisplayIcon:	
   552                           ; 1 bytes @ 0x3
   553                           
   554  0075                     ??___lmul:	
   555                           ; 1 bytes @ 0x3
   556                           
   557  0075                     ?___bmul:	
   558                           ; 1 bytes @ 0x3
   559                           
   560  0075                     ?___lbdiv:	
   561                           ; 1 bytes @ 0x3
   562                           
   563  0075                     ?___lbmod:	
   564                           ; 1 bytes @ 0x3
   565                           
   566  0075                     ?___wmul:	
   567                           ; 1 bytes @ 0x3
   568                           
   569  0075                     ?___lwdiv:	
   570                           ; 2 bytes @ 0x3
   571                           
   572  0075                     ___bmul@multiplicand:	
   573                           ; 2 bytes @ 0x3
   574                           
   575  0075                     ___lbdiv@divisor:	
   576                           ; 1 bytes @ 0x3
   577                           
   578  0075                     ___lbmod@divisor:	
   579                           ; 1 bytes @ 0x3
   580                           
   581  0075                     DisplayIcon@index:	
   582                           ; 1 bytes @ 0x3
   583                           
   584  0075                     ___wmul@multiplier:	
   585                           ; 2 bytes @ 0x3
   586                           
   587  0075                     ___lwdiv@divisor:	
   588                           ; 2 bytes @ 0x3
   589                           
   590  0075                     ___lmul@product:	
   591                           ; 2 bytes @ 0x3
   592                           
   593                           
   594                           ; 4 bytes @ 0x3
   595  0075                     	ds	1
   596  0076                     ??___bmul:	
   597  0076                     ??___lbdiv:	
   598                           ; 1 bytes @ 0x4
   599                           
   600  0076                     ??___lbmod:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0076                     ADSample@ch:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0076                     ___bmul@product:	
   607                           ; 1 bytes @ 0x4
   608                           
   609  0076                     ___lbdiv@dividend:	
   610                           ; 1 bytes @ 0x4
   611                           
   612                           
   613                           ; 1 bytes @ 0x4
   614  0076                     	ds	1
   615  0077                     ??_DisplayIcon:	
   616  0077                     ADSample@i:	
   617                           ; 1 bytes @ 0x5
   618                           
   619  0077                     ___bmul@multiplier:	
   620                           ; 1 bytes @ 0x5
   621                           
   622  0077                     ___lbdiv@counter:	
   623                           ; 1 bytes @ 0x5
   624                           
   625  0077                     ___lbmod@dividend:	
   626                           ; 1 bytes @ 0x5
   627                           
   628  0077                     ___wmul@multiplicand:	
   629                           ; 1 bytes @ 0x5
   630                           
   631  0077                     ___lwdiv@dividend:	
   632                           ; 2 bytes @ 0x5
   633                           
   634                           
   635                           ; 2 bytes @ 0x5
   636  0077                     	ds	1
   637  0078                     ___lbdiv@quotient:	
   638  0078                     ___lbmod@counter:	
   639                           ; 1 bytes @ 0x6
   640                           
   641                           
   642                           ; 1 bytes @ 0x6
   643  0078                     	ds	1
   644  0079                     ??_Motor:	
   645  0079                     ??_ADCPro:	
   646                           ; 1 bytes @ 0x7
   647                           
   648  0079                     ??___wmul:	
   649                           ; 1 bytes @ 0x7
   650                           
   651  0079                     ??___lldiv:	
   652                           ; 1 bytes @ 0x7
   653                           
   654  0079                     ??___lwdiv:	
   655                           ; 1 bytes @ 0x7
   656                           
   657  0079                     ___lbmod@rem:	
   658                           ; 1 bytes @ 0x7
   659                           
   660                           
   661                           ; 1 bytes @ 0x7
   662  0079                     	ds	1
   663  007A                     ??_DisplayPro:	
   664  007A                     ??_Apply:	
   665                           ; 1 bytes @ 0x8
   666                           
   667  007A                     ??_main:	
   668                           ; 1 bytes @ 0x8
   669                           
   670                           
   671                           	psect	cstackBANK0
   672  004A                     __pcstackBANK0:	
   673                           ; 1 bytes @ 0x8
   674                           
   675  004A                     ??_WorkLedPro:	
   676  004A                     ??_USBLedPro:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  004A                     ?___lmul:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  004A                     ___lwdiv@counter:	
   683                           ; 4 bytes @ 0x0
   684                           
   685  004A                     DisplayIcon@Mask:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  004A                     ___wmul@product:	
   689                           ; 2 bytes @ 0x0
   690                           
   691  004A                     ___lmul@multiplier:	
   692                           ; 2 bytes @ 0x0
   693                           
   694                           
   695                           ; 4 bytes @ 0x0
   696  004A                     	ds	1
   697  004B                     ___lwdiv@quotient:	
   698                           
   699                           ; 2 bytes @ 0x1
   700  004B                     	ds	1
   701  004C                     DisplayIcon@i:	
   702                           
   703                           ; 1 bytes @ 0x2
   704  004C                     	ds	1
   705  004D                     ??_Sec1sPro:	
   706                           
   707                           ; 1 bytes @ 0x3
   708  004D                     	ds	1
   709  004E                     ___lmul@multiplicand:	
   710                           
   711                           ; 4 bytes @ 0x4
   712  004E                     	ds	1
   713  004F                     Sec1sPro@PercentErr:	
   714                           
   715                           ; 1 bytes @ 0x5
   716  004F                     	ds	1
   717  0050                     Sec1sPro@TempPercent:	
   718                           
   719                           ; 2 bytes @ 0x6
   720  0050                     	ds	2
   721  0052                     ?___lldiv:	
   722  0052                     ___lldiv@divisor:	
   723                           ; 4 bytes @ 0x8
   724                           
   725                           
   726                           ; 4 bytes @ 0x8
   727  0052                     	ds	4
   728  0056                     ___lldiv@dividend:	
   729                           
   730                           ; 4 bytes @ 0xC
   731  0056                     	ds	4
   732  005A                     ___lldiv@quotient:	
   733                           
   734                           ; 4 bytes @ 0x10
   735  005A                     	ds	4
   736  005E                     ___lldiv@counter:	
   737                           
   738                           ; 1 bytes @ 0x14
   739  005E                     	ds	1
   740  005F                     ?_ADCRead:	
   741  005F                     ADCRead@Val:	
   742                           ; 1 bytes @ 0x15
   743                           
   744                           
   745                           ; 1 bytes @ 0x15
   746  005F                     	ds	1
   747  0060                     ??_ADCRead:	
   748                           
   749                           ; 1 bytes @ 0x16
   750  0060                     	ds	4
   751                           
   752                           	psect	maintext
   753  076F                     __pmaintext:	
   754 ;;
   755 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   756 ;;
   757 ;; *************** function _main *****************
   758 ;; Defined at:
   759 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K13-01\code\main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   768 ;; Tracked objects:
   769 ;;		On entry : B00/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1
   773 ;;      Params:         0       0       0
   774 ;;      Locals:         0       0       0
   775 ;;      Temps:          0       0       0
   776 ;;      Totals:         0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels required when called:    6
   779 ;; This function calls:
   780 ;;		_Apply
   781 ;;		_SystemInit
   782 ;; This function is called by:
   783 ;;		Startup code after reset
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _main
   789  076F                     _main:	
   790                           
   791                           ;main.c: 5: SystemInit();
   792                           
   793                           ;incstack = 0
   794                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   795  076F  275E               	fcall	_SystemInit
   796  0770                     l6933:	
   797                           
   798                           ;main.c: 7: {
   799                           ;main.c: 8: Apply();
   800  0770  264B               	fcall	_Apply
   801  0771  0064               	clrwdt	;# 
   802  0772  2F70               	goto	l6933
   803  0773                     __end_of_main:	
   804                           
   805                           	psect	text1
   806  075E                     __ptext1:	
   807 ;; *************** function _SystemInit *****************
   808 ;; Defined at:
   809 ;;		line 117 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;		None
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		wreg, status,2, status,0, pclath, cstack
   818 ;; Tracked objects:
   819 ;;		On entry : B00/0
   820 ;;		On exit  : 300/200
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1
   823 ;;      Params:         0       0       0
   824 ;;      Locals:         0       0       0
   825 ;;      Temps:          0       0       0
   826 ;;      Totals:         0       0       0
   827 ;;Total ram usage:        0 bytes
   828 ;; Hardware stack levels used:    1
   829 ;; Hardware stack levels required when called:    3
   830 ;; This function calls:
   831 ;;		_GPIOInit
   832 ;;		_TimerInit
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _SystemInit
   840  075E                     _SystemInit:	
   841                           
   842                           ;incstack = 0
   843                           ; Regs used in _SystemInit: [wreg+status,2+status,0+pclath+cstack]
   844  075E  0000               	nop	;# 
   845  075F  0064               	clrwdt	;# 
   846                           
   847                           ;K13-01.c: 121: GPIOInit();
   848  0760  2623               	fcall	_GPIOInit
   849                           
   850                           ;K13-01.c: 122: TimerInit();
   851  0761  2737               	fcall	_TimerInit
   852                           
   853                           ;K13-01.c: 123: WDTCON=0x01;
   854  0762  3001               	movlw	1
   855  0763  1283               	bcf	3,5	;RP0=0, select bank2
   856  0764  1703               	bsf	3,6	;RP1=1, select bank2
   857  0765  0085               	movwf	5	;volatile
   858  0766  0008               	return
   859  0767                     __end_of_SystemInit:	
   860                           
   861                           	psect	text2
   862  0737                     __ptext2:	
   863 ;; *************** function _TimerInit *****************
   864 ;; Defined at:
   865 ;;		line 157 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg
   874 ;; Tracked objects:
   875 ;;		On entry : 300/300
   876 ;;		On exit  : 300/100
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMMON   BANK0   BANK1
   879 ;;      Params:         0       0       0
   880 ;;      Locals:         0       0       0
   881 ;;      Temps:          0       0       0
   882 ;;      Totals:         0       0       0
   883 ;;Total ram usage:        0 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    2
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_SystemInit
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           
   894                           ;psect for function _TimerInit
   895  0737                     _TimerInit:	
   896                           
   897                           ;K13-01.c: 168: OSCCON=0X61;
   898                           
   899                           ;incstack = 0
   900                           ; Regs used in _TimerInit: [wreg]
   901  0737  3061               	movlw	97
   902  0738  1303               	bcf	3,6	;RP1=0, select bank1
   903  0739  008F               	movwf	15	;volatile
   904                           
   905                           ;K13-01.c: 169: INTCON=0B11000000;
   906  073A  30C0               	movlw	192
   907  073B  008B               	movwf	11	;volatile
   908                           
   909                           ;K13-01.c: 170: PIE1=0B00000010;
   910  073C  3002               	movlw	2
   911  073D  008C               	movwf	12	;volatile
   912                           
   913                           ;K13-01.c: 171: T2CON=0B00000100;
   914  073E  3004               	movlw	4
   915  073F  1283               	bcf	3,5	;RP0=0, select bank0
   916  0740  0092               	movwf	18	;volatile
   917                           
   918                           ;K13-01.c: 172: PR2 = 200;
   919  0741  30C8               	movlw	200
   920  0742  1683               	bsf	3,5	;RP0=1, select bank1
   921  0743  0092               	movwf	18	;volatile
   922  0744  0008               	return
   923  0745                     __end_of_TimerInit:	
   924                           
   925                           	psect	text3
   926  0623                     __ptext3:	
   927 ;; *************** function _GPIOInit *****************
   928 ;; Defined at:
   929 ;;		line 126 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;		None
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, status,2
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 300/300
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1
   943 ;;      Params:         0       0       0
   944 ;;      Locals:         0       0       0
   945 ;;      Temps:          0       0       0
   946 ;;      Totals:         0       0       0
   947 ;;Total ram usage:        0 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    2
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_SystemInit
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _GPIOInit
   959  0623                     _GPIOInit:	
   960                           
   961                           ;K13-01.c: 128: RBPU=0;
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _GPIOInit: [wreg+status,2]
   965  0623  1683               	bsf	3,5	;RP0=1, select bank1
   966  0624  1303               	bcf	3,6	;RP1=0, select bank1
   967  0625  1381               	bcf	1,7	;volatile
   968                           
   969                           ;K13-01.c: 130: TRISA =0X00;
   970  0626  0185               	clrf	5	;volatile
   971                           
   972                           ;K13-01.c: 131: TRISB =0X00;
   973  0627  0186               	clrf	6	;volatile
   974                           
   975                           ;K13-01.c: 132: TRISC =0X00;
   976  0628  0187               	clrf	7	;volatile
   977                           
   978                           ;K13-01.c: 136: WPUA =0XFF;
   979  0629  30FF               	movlw	255
   980  062A  1703               	bsf	3,6	;RP1=1, select bank3
   981  062B  008E               	movwf	14	;volatile
   982                           
   983                           ;K13-01.c: 137: WPUB =0XFF;
   984  062C  1303               	bcf	3,6	;RP1=0, select bank1
   985  062D  0095               	movwf	21	;volatile
   986                           
   987                           ;K13-01.c: 138: WPUC =0XFF;
   988  062E  1703               	bsf	3,6	;RP1=1, select bank3
   989  062F  008F               	movwf	15	;volatile
   990                           
   991                           ;K13-01.c: 142: PORTA = 0X80;
   992  0630  3080               	movlw	128
   993  0631  1283               	bcf	3,5	;RP0=0, select bank0
   994  0632  1303               	bcf	3,6	;RP1=0, select bank0
   995  0633  0085               	movwf	5	;volatile
   996                           
   997                           ;K13-01.c: 143: PORTB = 0X80;
   998  0634  0086               	movwf	6	;volatile
   999                           
  1000                           ;K13-01.c: 144: PORTC = 0;
  1001  0635  0187               	clrf	7	;volatile
  1002                           
  1003                           ;K13-01.c: 147: RA5 =1;
  1004  0636  1685               	bsf	5,5	;volatile
  1005                           
  1006                           ;K13-01.c: 148: RBPU=0;
  1007  0637  1683               	bsf	3,5	;RP0=1, select bank1
  1008  0638  1381               	bcf	1,7	;volatile
  1009                           
  1010                           ;K13-01.c: 149: TRISA6=1,WPUA6=1;
  1011  0639  1705               	bsf	5,6	;volatile
  1012  063A  1703               	bsf	3,6	;RP1=1, select bank3
  1013  063B  170E               	bsf	14,6	;volatile
  1014                           
  1015                           ;K13-01.c: 150: TRISA7=1,WPUA7=1;
  1016  063C  1303               	bcf	3,6	;RP1=0, select bank1
  1017  063D  1785               	bsf	5,7	;volatile
  1018  063E  1703               	bsf	3,6	;RP1=1, select bank3
  1019  063F  178E               	bsf	14,7	;volatile
  1020                           
  1021                           ;K13-01.c: 152: TRISA1=1,WPUA1=0; ANS1=1;
  1022  0640  1303               	bcf	3,6	;RP1=0, select bank1
  1023  0641  1485               	bsf	5,1	;volatile
  1024  0642  1703               	bsf	3,6	;RP1=1, select bank3
  1025  0643  108E               	bcf	14,1	;volatile
  1026  0644  1488               	bsf	8,1	;volatile
  1027                           
  1028                           ;K13-01.c: 153: TRISA2=1,WPUA2=0; ANS2=1;
  1029  0645  1303               	bcf	3,6	;RP1=0, select bank1
  1030  0646  1505               	bsf	5,2	;volatile
  1031  0647  1703               	bsf	3,6	;RP1=1, select bank3
  1032  0648  110E               	bcf	14,2	;volatile
  1033  0649  1508               	bsf	8,2	;volatile
  1034  064A  0008               	return
  1035  064B                     __end_of_GPIOInit:	
  1036                           
  1037                           	psect	text4
  1038  064B                     __ptext4:	
  1039 ;; *************** function _Apply *****************
  1040 ;; Defined at:
  1041 ;;		line 25 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;		None
  1044 ;; Auto vars:     Size  Location     Type
  1045 ;;		None
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/200
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0   BANK1
  1055 ;;      Params:         0       0       0
  1056 ;;      Locals:         0       0       0
  1057 ;;      Temps:          0       0       0
  1058 ;;      Totals:         0       0       0
  1059 ;;Total ram usage:        0 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    5
  1062 ;; This function calls:
  1063 ;;		_ADCPro
  1064 ;;		_DisplayPro
  1065 ;;		_KeyScan
  1066 ;;		_Motor
  1067 ;;		_Sec1sPro
  1068 ;; This function is called by:
  1069 ;;		_main
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           
  1074                           ;psect for function _Apply
  1075  064B                     _Apply:	
  1076                           
  1077                           ;K13-01.c: 27: if(time2ms)
  1078                           
  1079                           ;incstack = 0
  1080                           ; Regs used in _Apply: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1081  064B  1D71               	btfss	_time2ms/(0+8),_time2ms& (0+7)
  1082  064C  2E51               	goto	l6899
  1083                           
  1084                           ;K13-01.c: 28: {
  1085                           ;K13-01.c: 29: time2ms=0;
  1086  064D  1171               	bcf	_time2ms/(0+8),_time2ms& (0+7)
  1087                           
  1088                           ;K13-01.c: 30: if(SystemONFlag)
  1089  064E  1FF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1090  064F  2E51               	goto	l6899
  1091                           
  1092                           ;K13-01.c: 31: {
  1093                           ;K13-01.c: 32: KeyScan();
  1094  0650  202C               	fcall	_KeyScan
  1095  0651                     l6899:	
  1096                           
  1097                           ;K13-01.c: 33: }
  1098                           ;K13-01.c: 34: }
  1099                           ;K13-01.c: 35: if(time10ms)
  1100  0651  1CF1               	btfss	_time10ms/(0+8),_time10ms& (0+7)
  1101  0652  0008               	return
  1102                           
  1103                           ;K13-01.c: 36: {
  1104                           ;K13-01.c: 37: time10ms=0;
  1105  0653  10F1               	bcf	_time10ms/(0+8),_time10ms& (0+7)
  1106                           
  1107                           ;K13-01.c: 38: if(SystemONFlag==0&&VarPowerUpCount<100)
  1108  0654  1BF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1109  0655  2E5C               	goto	l6909
  1110  0656  266D               	fcall	PL32	;call to abstracted procedure
  1111  0657  1803               	skipnc
  1112  0658  2E5C               	goto	l6909
  1113                           
  1114                           ;K13-01.c: 39: {
  1115                           ;K13-01.c: 40: VarPowerUpCount++;
  1116  0659  0ABC               	incf	_VarPowerUpCount,f
  1117                           
  1118                           ;K13-01.c: 41: ADCPro();
  1119  065A  2481               	fcall	_ADCPro
  1120                           
  1121                           ;K13-01.c: 42: }
  1122  065B  2E61               	goto	l6915
  1123  065C                     l6909:	
  1124                           
  1125                           ;K13-01.c: 43: else if(VarPowerUpCount>=100)
  1126  065C  266D               	fcall	PL32	;call to abstracted procedure
  1127  065D  1C03               	skipc
  1128  065E  2E61               	goto	l6915
  1129                           
  1130                           ;K13-01.c: 44: {
  1131                           ;K13-01.c: 45: SystemONFlag=1;
  1132  065F  17F1               	bsf	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1133                           
  1134                           ;K13-01.c: 46: VarPowerUpCount=0;
  1135  0660  01BC               	clrf	_VarPowerUpCount
  1136  0661                     l6915:	
  1137                           
  1138                           ;K13-01.c: 47: }
  1139                           ;K13-01.c: 49: if(SystemONFlag)
  1140  0661  1FF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1141  0662  2E66               	goto	l6923
  1142                           
  1143                           ;K13-01.c: 50: {
  1144                           ;K13-01.c: 51: ADCPro();
  1145  0663  2481               	fcall	_ADCPro
  1146                           
  1147                           ;K13-01.c: 52: Motor();
  1148  0664  242B               	fcall	_Motor
  1149                           
  1150                           ;K13-01.c: 53: DisplayPro();
  1151  0665  2753               	fcall	_DisplayPro
  1152  0666                     l6923:	
  1153  0666  3064               	movlw	100
  1154                           
  1155                           ;K13-01.c: 57: }
  1156                           ;K13-01.c: 58: Sec1sCnt++;
  1157  0667  0ABA               	incf	_Sec1sCnt,f
  1158                           
  1159                           ;K13-01.c: 59: if(Sec1sCnt>=100)
  1160  0668  023A               	subwf	_Sec1sCnt,w
  1161  0669  1C03               	skipc
  1162  066A  0008               	return
  1163                           
  1164                           ;K13-01.c: 60: {
  1165                           ;K13-01.c: 61: Sec1sCnt=0;
  1166  066B  01BA               	clrf	_Sec1sCnt
  1167                           
  1168                           ;K13-01.c: 62: Sec1sPro();
  1169  066C  2918               	ljmp	l6581
  1170  066D                     __end_of_Apply:	
  1171  066D                     PL32:	
  1172  066D  3064               	movlw	100
  1173  066E  1283               	bcf	3,5	;RP0=0, select bank0
  1174  066F  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0670  023C               	subwf	_VarPowerUpCount,w
  1176  0671  0008               	return
  1177  0672                     __end_ofPL32:	
  1178                           
  1179                           	psect	text5
  1180  0118                     __ptext5:	
  1181 ;; *************** function _Sec1sPro *****************
  1182 ;; Defined at:
  1183 ;;		line 65 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;		None
  1186 ;; Auto vars:     Size  Location     Type
  1187 ;;  TempPercent     2    6[BANK0 ] unsigned int 
  1188 ;;  PercentErr      1    5[BANK0 ] unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0, pclath, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 300/0
  1195 ;;		On exit  : 300/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMMON   BANK0   BANK1
  1198 ;;      Params:         0       0       0
  1199 ;;      Locals:         0       3       0
  1200 ;;      Temps:          0       2       0
  1201 ;;      Totals:         0       5       0
  1202 ;;Total ram usage:        5 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    3
  1205 ;; This function calls:
  1206 ;;		___bmul
  1207 ;;		___lwdiv
  1208 ;; This function is called by:
  1209 ;;		_Apply
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           
  1214                           ;psect for function _Sec1sPro
  1215  0118                     _Sec1sPro:	
  1216  0118                     l6581:	
  1217                           ;incstack = 0
  1218                           ; Regs used in _Sec1sPro: [wreg+status,2+status,0+pclath+cstack]
  1219                           
  1220                           
  1221                           ;ADC.c: 69: unsigned int TempPercent=0;
  1222  0118  01D0               	clrf	Sec1sPro@TempPercent
  1223  0119  01D1               	clrf	Sec1sPro@TempPercent+1
  1224                           
  1225                           ;ADC.c: 72: if(USBFlag)
  1226  011A  1E71               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1227  011B  2977               	goto	l6621
  1228                           
  1229                           ;ADC.c: 73: {
  1230                           ;ADC.c: 74: if(ADCVal[2]<275)
  1231  011C  3001               	movlw	1
  1232  011D  0249               	subwf	_ADCVal+5,w
  1233  011E  3013               	movlw	19
  1234  011F  1903               	skipnz
  1235  0120  0248               	subwf	_ADCVal+4,w
  1236  0121  1803               	skipnc
  1237  0122  2925               	goto	l6589
  1238                           
  1239                           ;ADC.c: 75: {
  1240                           ;ADC.c: 76: TempPercent=0;
  1241  0123  01D0               	clrf	Sec1sPro@TempPercent
  1242  0124  292E               	goto	L1
  1243  0125                     l6589:	
  1244                           ;ADC.c: 77: }
  1245                           
  1246                           
  1247                           ;ADC.c: 78: else if(ADCVal[2]>350)
  1248  0125  3001               	movlw	1
  1249  0126  0249               	subwf	_ADCVal+5,w
  1250  0127  305F               	movlw	95
  1251  0128  1903               	skipnz
  1252  0129  0248               	subwf	_ADCVal+4,w
  1253  012A  1C03               	skipc
  1254  012B  2930               	goto	l6593
  1255                           
  1256                           ;ADC.c: 79: {
  1257                           ;ADC.c: 80: TempPercent=99;
  1258  012C  3063               	movlw	99
  1259  012D  00D0               	movwf	Sec1sPro@TempPercent
  1260  012E                     L1:	
  1261  012E  01D1               	clrf	Sec1sPro@TempPercent+1
  1262                           
  1263                           ;ADC.c: 81: }
  1264  012F  294C               	goto	l6597
  1265  0130                     l6593:	
  1266                           
  1267                           ;ADC.c: 82: else
  1268                           ;ADC.c: 83: {
  1269                           ;ADC.c: 84: TempPercent=ADCVal[2]-275;
  1270  0130  0849               	movf	_ADCVal+5,w
  1271  0131  00D1               	movwf	Sec1sPro@TempPercent+1
  1272  0132  0848               	movf	_ADCVal+4,w
  1273  0133  00D0               	movwf	Sec1sPro@TempPercent
  1274  0134  30ED               	movlw	237
  1275  0135  21E3               	fcall	PL26	;call to abstracted procedure
  1276                           
  1277                           ;ADC.c: 85: TempPercent=TempPercent*4/3;
  1278  0136  3003               	movlw	3
  1279  0137  00F5               	movwf	___lwdiv@divisor
  1280  0138  01F6               	clrf	___lwdiv@divisor+1
  1281  0139  0851               	movf	Sec1sPro@TempPercent+1,w
  1282  013A  00CE               	movwf	??_Sec1sPro+1
  1283  013B  0850               	movf	Sec1sPro@TempPercent,w
  1284  013C  00CD               	movwf	??_Sec1sPro
  1285  013D  1003               	clrc
  1286  013E  0DCD               	rlf	??_Sec1sPro,f
  1287  013F  0DCE               	rlf	??_Sec1sPro+1,f
  1288  0140  1003               	clrc
  1289  0141  0DCD               	rlf	??_Sec1sPro,f
  1290  0142  0DCE               	rlf	??_Sec1sPro+1,f
  1291  0143  084D               	movf	??_Sec1sPro,w
  1292  0144  00F7               	movwf	___lwdiv@dividend
  1293  0145  084E               	movf	??_Sec1sPro+1,w
  1294  0146  00F8               	movwf	___lwdiv@dividend+1
  1295  0147  25F9               	fcall	___lwdiv
  1296  0148  0876               	movf	?___lwdiv+1,w
  1297  0149  00D1               	movwf	Sec1sPro@TempPercent+1
  1298  014A  0875               	movf	?___lwdiv,w
  1299  014B  00D0               	movwf	Sec1sPro@TempPercent
  1300  014C                     l6597:	
  1301                           
  1302                           ;ADC.c: 86: }
  1303                           ;ADC.c: 87: if(ActualPercent>TempPercent)
  1304                           
  1305                           ;ADC.c: 88: {
  1306                           ;ADC.c: 89: if(ActualPercent)
  1307  014C  21D8               	fcall	PL16	;call to abstracted procedure
  1308  014D  1803               	skipnc
  1309  014E  2953               	goto	L4
  1310  014F  1903               	btfsc	3,2
  1311  0150  2962               	goto	l6609
  1312                           
  1313                           ;ADC.c: 90: {
  1314                           ;ADC.c: 91: ActualPercent--;
  1315  0151  03BF               	decf	Sec1sPro@ActualPercent,f
  1316  0152  2962               	goto	l6609
  1317  0153                     L4:	
  1318                           ;ADC.c: 94: else if(ActualPercent<TempPercent)
  1319                           
  1320  0153  00CD               	movwf	??_Sec1sPro
  1321  0154  01CE               	clrf	??_Sec1sPro+1
  1322  0155  0851               	movf	Sec1sPro@TempPercent+1,w
  1323  0156  024E               	subwf	??_Sec1sPro+1,w
  1324  0157  1D03               	skipz
  1325  0158  295B               	goto	u4285
  1326  0159  0850               	movf	Sec1sPro@TempPercent,w
  1327  015A  024D               	subwf	??_Sec1sPro,w
  1328  015B                     u4285:	
  1329  015B  1803               	skipnc
  1330  015C  2962               	goto	l6609
  1331                           
  1332                           ;ADC.c: 95: {
  1333                           ;ADC.c: 96: if(ActualPercent<99)
  1334  015D  3063               	movlw	99
  1335  015E  023F               	subwf	Sec1sPro@ActualPercent,w
  1336  015F  1803               	skipnc
  1337  0160  2962               	goto	l6609
  1338                           
  1339                           ;ADC.c: 97: {
  1340                           ;ADC.c: 98: ActualPercent++;
  1341  0161  0ABF               	incf	Sec1sPro@ActualPercent,f
  1342  0162                     l6609:	
  1343                           
  1344                           ;ADC.c: 99: }
  1345                           ;ADC.c: 100: }
  1346                           ;ADC.c: 101: if(ActualPercent>BatPercent)
  1347  0162  083F               	movf	Sec1sPro@ActualPercent,w
  1348  0163  0243               	subwf	_BatPercent,w
  1349  0164  1803               	skipnc
  1350  0165  2975               	goto	l6619
  1351                           
  1352                           ;ADC.c: 102: {
  1353                           ;ADC.c: 103: PercentErr=ActualPercent-BatPercent;
  1354  0166  0843               	movf	_BatPercent,w
  1355  0167  023F               	subwf	Sec1sPro@ActualPercent,w
  1356  0168  00CF               	movwf	Sec1sPro@PercentErr
  1357                           
  1358                           ;ADC.c: 104: if(PercentErr<5)
  1359  0169  3005               	movlw	5
  1360  016A  024F               	subwf	Sec1sPro@PercentErr,w
  1361  016B  1803               	skipnc
  1362  016C  2973               	goto	l6617
  1363                           
  1364                           ;ADC.c: 105: {
  1365                           ;ADC.c: 106: BatAddTime=90-15*PercentErr;
  1366  016D  30F1               	movlw	241
  1367  016E  00F5               	movwf	___bmul@multiplicand
  1368  016F  084F               	movf	Sec1sPro@PercentErr,w
  1369  0170  2745               	fcall	___bmul
  1370  0171  3E5A               	addlw	90
  1371  0172  2976               	goto	L2
  1372  0173                     l6617:	
  1373                           ;ADC.c: 107: }
  1374                           
  1375                           
  1376                           ;ADC.c: 108: else
  1377                           ;ADC.c: 109: {
  1378                           ;ADC.c: 110: BatAddTime=15;
  1379  0173  300F               	movlw	15
  1380  0174  2976               	goto	L2
  1381  0175                     l6619:	
  1382                           
  1383                           ;ADC.c: 113: else
  1384                           ;ADC.c: 114: {
  1385                           ;ADC.c: 115: BatAddTime=240;
  1386  0175  30F0               	movlw	240
  1387  0176                     L2:	
  1388  0176  00EA               	movwf	_BatAddTime
  1389  0177                     l6621:	
  1390                           
  1391                           ;ADC.c: 116: }
  1392                           ;ADC.c: 117: }
  1393                           ;ADC.c: 120: if(WorkFlag)
  1394  0177  1DF1               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1395  0178  29D5               	goto	l6663
  1396                           
  1397                           ;ADC.c: 121: {
  1398                           ;ADC.c: 122: if(ADCVal[2]<267)
  1399  0179  3001               	movlw	1
  1400  017A  0249               	subwf	_ADCVal+5,w
  1401  017B  300B               	movlw	11
  1402  017C  1903               	skipnz
  1403  017D  0248               	subwf	_ADCVal+4,w
  1404  017E  1803               	skipnc
  1405  017F  2982               	goto	l6627
  1406                           
  1407                           ;ADC.c: 123: {
  1408                           ;ADC.c: 124: TempPercent=0;
  1409  0180  01D0               	clrf	Sec1sPro@TempPercent
  1410  0181  298B               	goto	L3
  1411  0182                     l6627:	
  1412                           ;ADC.c: 125: }
  1413                           
  1414                           
  1415                           ;ADC.c: 126: else if(ADCVal[2]>333)
  1416  0182  3001               	movlw	1
  1417  0183  0249               	subwf	_ADCVal+5,w
  1418  0184  304E               	movlw	78
  1419  0185  1903               	skipnz
  1420  0186  0248               	subwf	_ADCVal+4,w
  1421  0187  1C03               	skipc
  1422  0188  298D               	goto	l6631
  1423                           
  1424                           ;ADC.c: 127: {
  1425                           ;ADC.c: 128: TempPercent=99;
  1426  0189  3063               	movlw	99
  1427  018A  00D0               	movwf	Sec1sPro@TempPercent
  1428  018B                     L3:	
  1429  018B  01D1               	clrf	Sec1sPro@TempPercent+1
  1430                           
  1431                           ;ADC.c: 129: }
  1432  018C  2993               	goto	l605
  1433  018D                     l6631:	
  1434                           
  1435                           ;ADC.c: 130: else
  1436                           ;ADC.c: 131: {
  1437                           ;ADC.c: 132: TempPercent=ADCVal[2]-267;
  1438  018D  0849               	movf	_ADCVal+5,w
  1439  018E  00D1               	movwf	Sec1sPro@TempPercent+1
  1440  018F  0848               	movf	_ADCVal+4,w
  1441  0190  00D0               	movwf	Sec1sPro@TempPercent
  1442  0191  30F5               	movlw	245
  1443  0192  21E3               	fcall	PL26	;call to abstracted procedure
  1444  0193                     l605:	
  1445                           
  1446                           ;ADC.c: 133: }
  1447                           ;ADC.c: 134: if(TempPercent>=33)
  1448  0193  3000               	movlw	0
  1449  0194  0251               	subwf	Sec1sPro@TempPercent+1,w
  1450  0195  3021               	movlw	33
  1451  0196  1903               	skipnz
  1452  0197  0250               	subwf	Sec1sPro@TempPercent,w
  1453  0198  1C03               	skipc
  1454  0199  29A7               	goto	l6639
  1455                           
  1456                           ;ADC.c: 135: {
  1457                           ;ADC.c: 136: TempPercent=33+(ADCVal[2]-300)*2;
  1458  019A  0849               	movf	_ADCVal+5,w
  1459  019B  00D1               	movwf	Sec1sPro@TempPercent+1
  1460  019C  0848               	movf	_ADCVal+4,w
  1461  019D  00D0               	movwf	Sec1sPro@TempPercent
  1462  019E  30C9               	movlw	201
  1463  019F  1003               	clrc
  1464  01A0  0DD0               	rlf	Sec1sPro@TempPercent,f
  1465  01A1  0DD1               	rlf	Sec1sPro@TempPercent+1,f
  1466  01A2  07D0               	addwf	Sec1sPro@TempPercent,f
  1467  01A3  1803               	skipnc
  1468  01A4  0AD1               	incf	Sec1sPro@TempPercent+1,f
  1469  01A5  30FD               	movlw	253
  1470  01A6  07D1               	addwf	Sec1sPro@TempPercent+1,f
  1471  01A7                     l6639:	
  1472                           
  1473                           ;ADC.c: 137: }
  1474                           ;ADC.c: 138: if(ActualPercent>TempPercent)
  1475                           
  1476                           ;ADC.c: 139: {
  1477                           ;ADC.c: 140: if(ActualPercent)
  1478  01A7  21D8               	fcall	PL16	;call to abstracted procedure
  1479  01A8  1803               	skipnc
  1480  01A9  29AE               	goto	L5
  1481  01AA  1903               	btfsc	3,2
  1482  01AB  29BD               	goto	l6651
  1483                           
  1484                           ;ADC.c: 141: {
  1485                           ;ADC.c: 142: ActualPercent--;
  1486  01AC  03BF               	decf	Sec1sPro@ActualPercent,f
  1487  01AD  29BD               	goto	l6651
  1488  01AE                     L5:	
  1489                           ;ADC.c: 145: else if(ActualPercent<TempPercent)
  1490                           
  1491  01AE  00CD               	movwf	??_Sec1sPro
  1492  01AF  01CE               	clrf	??_Sec1sPro+1
  1493  01B0  0851               	movf	Sec1sPro@TempPercent+1,w
  1494  01B1  024E               	subwf	??_Sec1sPro+1,w
  1495  01B2  1D03               	skipz
  1496  01B3  29B6               	goto	u4385
  1497  01B4  0850               	movf	Sec1sPro@TempPercent,w
  1498  01B5  024D               	subwf	??_Sec1sPro,w
  1499  01B6                     u4385:	
  1500  01B6  1803               	skipnc
  1501  01B7  29BD               	goto	l6651
  1502                           
  1503                           ;ADC.c: 146: {
  1504                           ;ADC.c: 147: if(ActualPercent<99)
  1505  01B8  3063               	movlw	99
  1506  01B9  023F               	subwf	Sec1sPro@ActualPercent,w
  1507  01BA  1803               	skipnc
  1508  01BB  29BD               	goto	l6651
  1509                           
  1510                           ;ADC.c: 148: {
  1511                           ;ADC.c: 149: ActualPercent++;
  1512  01BC  0ABF               	incf	Sec1sPro@ActualPercent,f
  1513  01BD                     l6651:	
  1514                           
  1515                           ;ADC.c: 150: }
  1516                           ;ADC.c: 151: }
  1517                           ;ADC.c: 152: if(ActualPercent<BatPercent)
  1518  01BD  0843               	movf	_BatPercent,w
  1519  01BE  023F               	subwf	Sec1sPro@ActualPercent,w
  1520  01BF  1803               	skipnc
  1521  01C0  29D5               	goto	l6663
  1522                           
  1523                           ;ADC.c: 153: {
  1524                           ;ADC.c: 154: PercentErr=BatPercent-ActualPercent;
  1525  01C1  083F               	movf	Sec1sPro@ActualPercent,w
  1526  01C2  0243               	subwf	_BatPercent,w
  1527  01C3  00CF               	movwf	Sec1sPro@PercentErr
  1528                           
  1529                           ;ADC.c: 155: if(PercentErr<5&&ActualPercent)
  1530  01C4  3005               	movlw	5
  1531  01C5  024F               	subwf	Sec1sPro@PercentErr,w
  1532  01C6  1803               	skipnc
  1533  01C7  29D2               	goto	l6661
  1534  01C8  083F               	movf	Sec1sPro@ActualPercent,w
  1535  01C9  1903               	btfsc	3,2
  1536  01CA  29D2               	goto	l6661
  1537                           
  1538                           ;ADC.c: 156: {
  1539                           ;ADC.c: 157: BatDecTime=75-15*PercentErr;
  1540  01CB  30F1               	movlw	241
  1541  01CC  00F5               	movwf	___bmul@multiplicand
  1542  01CD  084F               	movf	Sec1sPro@PercentErr,w
  1543  01CE  2745               	fcall	___bmul
  1544  01CF  3E4B               	addlw	75
  1545  01D0  00E9               	movwf	_BatDecTime
  1546                           
  1547                           ;ADC.c: 158: }
  1548  01D1  0008               	return
  1549  01D2                     l6661:	
  1550                           
  1551                           ;ADC.c: 159: else
  1552                           ;ADC.c: 160: {
  1553                           ;ADC.c: 161: BatDecTime=8;
  1554  01D2  3008               	movlw	8
  1555  01D3  00E9               	movwf	_BatDecTime
  1556  01D4  0008               	return
  1557  01D5                     l6663:	
  1558                           
  1559                           ;ADC.c: 164: else
  1560                           ;ADC.c: 165: {
  1561                           ;ADC.c: 166: BatDecTime=210;
  1562  01D5  30D2               	movlw	210
  1563  01D6  00E9               	movwf	_BatDecTime
  1564  01D7  0008               	return
  1565  01D8                     __end_of_Sec1sPro:	
  1566  01D8                     PL16:	
  1567  01D8  083F               	movf	Sec1sPro@ActualPercent,w
  1568  01D9  00CD               	movwf	??_Sec1sPro
  1569  01DA  01CE               	clrf	??_Sec1sPro+1
  1570  01DB  084E               	movf	??_Sec1sPro+1,w
  1571  01DC  0251               	subwf	Sec1sPro@TempPercent+1,w
  1572  01DD  1D03               	skipz
  1573  01DE  29E1               	goto	u4265
  1574  01DF  084D               	movf	??_Sec1sPro,w
  1575  01E0  0250               	subwf	Sec1sPro@TempPercent,w
  1576  01E1                     u4265:	
  1577  01E1  083F               	movf	Sec1sPro@ActualPercent,w
  1578  01E2  0008               	return
  1579  01E3                     __end_ofPL16:	
  1580  01E3                     PL26:	
  1581  01E3  07D0               	addwf	Sec1sPro@TempPercent,f
  1582  01E4  1803               	skipnc
  1583  01E5  0AD1               	incf	Sec1sPro@TempPercent+1,f
  1584  01E6  30FE               	movlw	254
  1585  01E7  07D1               	addwf	Sec1sPro@TempPercent+1,f
  1586  01E8  0008               	return
  1587  01E9                     __end_ofPL26:	
  1588                           
  1589                           	psect	text6
  1590  05F9                     __ptext6:	
  1591 ;; *************** function ___lwdiv *****************
  1592 ;; Defined at:
  1593 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  divisor         2    3[COMMON] unsigned int 
  1596 ;;  dividend        2    5[COMMON] unsigned int 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  quotient        2    1[BANK0 ] unsigned int 
  1599 ;;  counter         1    0[BANK0 ] unsigned char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  2    3[COMMON] unsigned int 
  1602 ;; Registers used:
  1603 ;;		wreg, status,2, status,0
  1604 ;; Tracked objects:
  1605 ;;		On entry : 300/0
  1606 ;;		On exit  : 300/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1
  1609 ;;      Params:         4       0       0
  1610 ;;      Locals:         0       3       0
  1611 ;;      Temps:          0       0       0
  1612 ;;      Totals:         4       3       0
  1613 ;;Total ram usage:        7 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    2
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_Sec1sPro
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function ___lwdiv
  1625  05F9                     ___lwdiv:	
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1629  05F9  01CB               	clrf	___lwdiv@quotient
  1630  05FA  01CC               	clrf	___lwdiv@quotient+1
  1631  05FB  0875               	movf	___lwdiv@divisor,w
  1632  05FC  0476               	iorwf	___lwdiv@divisor+1,w
  1633  05FD  1903               	btfsc	3,2
  1634  05FE  2E1E               	goto	l6533
  1635  05FF  01CA               	clrf	___lwdiv@counter
  1636  0600                     L6:	
  1637  0600  0ACA               	incf	___lwdiv@counter,f
  1638  0601  1BF6               	btfsc	___lwdiv@divisor+1,7
  1639  0602  2E07               	goto	l6521
  1640  0603  1003               	clrc
  1641  0604  0DF5               	rlf	___lwdiv@divisor,f
  1642  0605  0DF6               	rlf	___lwdiv@divisor+1,f
  1643  0606  2E00               	goto	L6
  1644  0607                     l6521:	
  1645  0607  1003               	clrc
  1646  0608  0DCB               	rlf	___lwdiv@quotient,f
  1647  0609  0DCC               	rlf	___lwdiv@quotient+1,f
  1648  060A  0876               	movf	___lwdiv@divisor+1,w
  1649  060B  0278               	subwf	___lwdiv@dividend+1,w
  1650  060C  1D03               	skipz
  1651  060D  2E10               	goto	u4155
  1652  060E  0875               	movf	___lwdiv@divisor,w
  1653  060F  0277               	subwf	___lwdiv@dividend,w
  1654  0610                     u4155:	
  1655  0610  1C03               	skipc
  1656  0611  2E1A               	goto	L7
  1657  0612  0875               	movf	___lwdiv@divisor,w
  1658  0613  02F7               	subwf	___lwdiv@dividend,f
  1659  0614  0876               	movf	___lwdiv@divisor+1,w
  1660  0615  1C03               	skipc
  1661  0616  03F8               	decf	___lwdiv@dividend+1,f
  1662  0617  02F8               	subwf	___lwdiv@dividend+1,f
  1663  0618  144B               	bsf	___lwdiv@quotient,0
  1664  0619  1003               	clrc
  1665  061A                     L7:	
  1666  061A  0CF6               	rrf	___lwdiv@divisor+1,f
  1667  061B  0CF5               	rrf	___lwdiv@divisor,f
  1668  061C  0BCA               	decfsz	___lwdiv@counter,f
  1669  061D  2E07               	goto	l6521
  1670  061E                     l6533:	
  1671  061E  084C               	movf	___lwdiv@quotient+1,w
  1672  061F  00F6               	movwf	?___lwdiv+1
  1673  0620  084B               	movf	___lwdiv@quotient,w
  1674  0621  00F5               	movwf	?___lwdiv
  1675  0622  0008               	return
  1676  0623                     __end_of___lwdiv:	
  1677                           
  1678                           	psect	text7
  1679  042B                     __ptext7:	
  1680 ;; *************** function _Motor *****************
  1681 ;; Defined at:
  1682 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;		None
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;		None
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  1    wreg      void 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, pclath, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 300/0
  1693 ;;		On exit  : 300/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1
  1696 ;;      Params:         0       0       0
  1697 ;;      Locals:         0       0       0
  1698 ;;      Temps:          0       0       0
  1699 ;;      Totals:         0       0       0
  1700 ;;Total ram usage:        0 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		___wmul
  1705 ;; This function is called by:
  1706 ;;		_Apply
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _Motor
  1712  042B                     _Motor:	
  1713                           
  1714                           ;Motor.c: 9: if(!WorkFlag)
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _Motor: [wreg+status,2+status,0+pclath+cstack]
  1718  042B  19F1               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1719  042C  2C33               	goto	l4208
  1720                           
  1721                           ;Motor.c: 10: {
  1722                           ;Motor.c: 11: RA3=0;
  1723  042D  1185               	bcf	5,3	;volatile
  1724                           
  1725                           ;Motor.c: 12: WorkCnt=0;
  1726  042E  01A8               	clrf	_WorkCnt
  1727  042F  01A9               	clrf	_WorkCnt+1
  1728                           
  1729                           ;Motor.c: 13: TimeDecCnt=0;
  1730  0430  01A6               	clrf	_TimeDecCnt
  1731  0431  01A7               	clrf	_TimeDecCnt+1
  1732                           
  1733                           ;Motor.c: 14: }
  1734  0432  2C5A               	goto	l6873
  1735  0433                     l4208:	
  1736                           
  1737                           ;Motor.c: 15: else if(WorkFlag&&!LockSta.LockFlag)
  1738  0433  19F1               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1739  0434  1B2E               	btfsc	_LockSta,6
  1740  0435  2C5A               	goto	l6873
  1741                           
  1742                           ;Motor.c: 16: {
  1743                           ;Motor.c: 17: RA3=1;
  1744  0436  1585               	bsf	5,3	;volatile
  1745                           
  1746                           ;Motor.c: 18: TimeDecCnt++;
  1747  0437  0AA6               	incf	_TimeDecCnt,f
  1748  0438  1903               	skipnz
  1749  0439  0AA7               	incf	_TimeDecCnt+1,f
  1750                           
  1751                           ;Motor.c: 19: if(TimeDecCnt>=BatDecTime*100)
  1752  043A  0869               	movf	_BatDecTime,w
  1753  043B  247B               	fcall	PL28	;call to abstracted procedure
  1754  043C  26C4               	fcall	___wmul
  1755  043D  0876               	movf	?___wmul+1,w
  1756  043E  0227               	subwf	_TimeDecCnt+1,w
  1757  043F  1D03               	skipz
  1758  0440  2C43               	goto	u4675
  1759  0441  0875               	movf	?___wmul,w
  1760  0442  0226               	subwf	_TimeDecCnt,w
  1761  0443                     u4675:	
  1762  0443  1C03               	skipc
  1763  0444  2C4A               	goto	l4211
  1764                           
  1765                           ;Motor.c: 20: {
  1766                           ;Motor.c: 21: TimeDecCnt=0;
  1767  0445  01A6               	clrf	_TimeDecCnt
  1768  0446  01A7               	clrf	_TimeDecCnt+1
  1769                           
  1770                           ;Motor.c: 22: if(BatPercent)
  1771  0447  0843               	movf	_BatPercent,w
  1772  0448  1D03               	btfss	3,2
  1773                           
  1774                           ;Motor.c: 23: {
  1775                           ;Motor.c: 24: BatPercent--;
  1776  0449  03C3               	decf	_BatPercent,f
  1777  044A                     l4211:	
  1778                           
  1779                           ;Motor.c: 25: }
  1780                           ;Motor.c: 26: }
  1781                           ;Motor.c: 27: WorkCnt++;
  1782  044A  0AA8               	incf	_WorkCnt,f
  1783  044B  1903               	skipnz
  1784  044C  0AA9               	incf	_WorkCnt+1,f
  1785                           
  1786                           ;Motor.c: 28: if(WorkCnt>=6000)
  1787  044D  3017               	movlw	23
  1788  044E  0229               	subwf	_WorkCnt+1,w
  1789  044F  3070               	movlw	112
  1790  0450  1903               	skipnz
  1791  0451  0228               	subwf	_WorkCnt,w
  1792  0452  1C03               	skipc
  1793  0453  2C5A               	goto	l6873
  1794  0454  3063               	movlw	99
  1795                           
  1796                           ;Motor.c: 29: {
  1797                           ;Motor.c: 30: WorkCnt=0;
  1798  0455  01A8               	clrf	_WorkCnt
  1799  0456  01A9               	clrf	_WorkCnt+1
  1800                           
  1801                           ;Motor.c: 31: if(WorkMin<99)
  1802  0457  027A               	subwf	_WorkMin,w
  1803  0458  1C03               	btfss	3,0
  1804                           
  1805                           ;Motor.c: 32: {
  1806                           ;Motor.c: 33: WorkMin++;
  1807  0459  0AFA               	incf	_WorkMin,f
  1808  045A                     l6873:	
  1809                           
  1810                           ;Motor.c: 34: }
  1811                           ;Motor.c: 35: }
  1812                           ;Motor.c: 36: }
  1813                           ;Motor.c: 37: if(USBFlag)
  1814  045A  1E71               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1815  045B  2C78               	goto	l6889
  1816                           
  1817                           ;Motor.c: 38: {
  1818                           ;Motor.c: 39: TimeAddCnt++;
  1819  045C  0AA4               	incf	_TimeAddCnt,f
  1820  045D  1903               	skipnz
  1821  045E  0AA5               	incf	_TimeAddCnt+1,f
  1822                           
  1823                           ;Motor.c: 40: if(TimeAddCnt>BatAddTime*100)
  1824  045F  086A               	movf	_BatAddTime,w
  1825  0460  247B               	fcall	PL28	;call to abstracted procedure
  1826  0461  26C4               	fcall	___wmul
  1827  0462  0825               	movf	_TimeAddCnt+1,w
  1828  0463  0276               	subwf	?___wmul+1,w
  1829  0464  1D03               	skipz
  1830  0465  2C68               	goto	u4725
  1831  0466  0824               	movf	_TimeAddCnt,w
  1832  0467  0275               	subwf	?___wmul,w
  1833  0468                     u4725:	
  1834  0468  1803               	skipnc
  1835  0469  2C70               	goto	l6885
  1836  046A  3063               	movlw	99
  1837                           
  1838                           ;Motor.c: 41: {
  1839                           ;Motor.c: 42: TimeAddCnt=0;
  1840  046B  01A4               	clrf	_TimeAddCnt
  1841  046C  01A5               	clrf	_TimeAddCnt+1
  1842                           
  1843                           ;Motor.c: 43: if(BatPercent<99)
  1844  046D  0243               	subwf	_BatPercent,w
  1845  046E  1C03               	btfss	3,0
  1846                           
  1847                           ;Motor.c: 44: {
  1848                           ;Motor.c: 45: BatPercent++;
  1849  046F  0AC3               	incf	_BatPercent,f
  1850  0470                     l6885:	
  1851                           
  1852                           ;Motor.c: 46: }
  1853                           ;Motor.c: 47: }
  1854                           ;Motor.c: 48: if(BatPercent<=250)
  1855  0470  30FB               	movlw	251
  1856  0471  0243               	subwf	_BatPercent,w
  1857  0472  1803               	skipnc
  1858  0473  2C76               	goto	l4218
  1859                           
  1860                           ;Motor.c: 49: {
  1861                           ;Motor.c: 50: RA5 =0;
  1862  0474  1285               	bcf	5,5	;volatile
  1863                           
  1864                           ;Motor.c: 51: }
  1865  0475  0008               	return
  1866  0476                     l4218:	
  1867                           
  1868                           ;Motor.c: 52: else
  1869                           ;Motor.c: 53: {
  1870                           ;Motor.c: 54: RA5 =1;
  1871  0476  1685               	bsf	5,5	;volatile
  1872  0477  0008               	return
  1873  0478                     l6889:	
  1874                           
  1875                           ;Motor.c: 57: else
  1876                           ;Motor.c: 58: {
  1877                           ;Motor.c: 59: TimeAddCnt=0;
  1878  0478  01A4               	clrf	_TimeAddCnt
  1879  0479  01A5               	clrf	_TimeAddCnt+1
  1880  047A  2C76               	goto	l4218
  1881  047B                     __end_of_Motor:	
  1882  047B                     PL28:	
  1883  047B  00F5               	movwf	___wmul@multiplier
  1884  047C  3064               	movlw	100
  1885  047D  01F6               	clrf	___wmul@multiplier+1
  1886  047E  00F7               	movwf	___wmul@multiplicand
  1887  047F  01F8               	clrf	___wmul@multiplicand+1
  1888  0480  0008               	return
  1889  0481                     __end_ofPL28:	
  1890                           
  1891                           	psect	text8
  1892  06C4                     __ptext8:	
  1893 ;; *************** function ___wmul *****************
  1894 ;; Defined at:
  1895 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul16.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  multiplier      2    3[COMMON] unsigned int 
  1898 ;;  multiplicand    2    5[COMMON] unsigned int 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  product         2    0[BANK0 ] unsigned int 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  2    3[COMMON] unsigned int 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0
  1905 ;; Tracked objects:
  1906 ;;		On entry : 300/0
  1907 ;;		On exit  : 300/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1
  1910 ;;      Params:         4       0       0
  1911 ;;      Locals:         0       2       0
  1912 ;;      Temps:          0       0       0
  1913 ;;      Totals:         4       2       0
  1914 ;;Total ram usage:        6 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    2
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_Motor
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function ___wmul
  1926  06C4                     ___wmul:	
  1927                           
  1928                           ;incstack = 0
  1929                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1930  06C4  01CA               	clrf	___wmul@product
  1931  06C5  01CB               	clrf	___wmul@product+1
  1932  06C6                     l6831:	
  1933  06C6  1C75               	btfss	___wmul@multiplier,0
  1934  06C7  2ECE               	goto	l6835
  1935  06C8  0877               	movf	___wmul@multiplicand,w
  1936  06C9  07CA               	addwf	___wmul@product,f
  1937  06CA  1803               	skipnc
  1938  06CB  0ACB               	incf	___wmul@product+1,f
  1939  06CC  0878               	movf	___wmul@multiplicand+1,w
  1940  06CD  07CB               	addwf	___wmul@product+1,f
  1941  06CE                     l6835:	
  1942  06CE  1003               	clrc
  1943  06CF  0DF7               	rlf	___wmul@multiplicand,f
  1944  06D0  0DF8               	rlf	___wmul@multiplicand+1,f
  1945  06D1  1003               	clrc
  1946  06D2  0CF6               	rrf	___wmul@multiplier+1,f
  1947  06D3  0CF5               	rrf	___wmul@multiplier,f
  1948  06D4  0875               	movf	___wmul@multiplier,w
  1949  06D5  0476               	iorwf	___wmul@multiplier+1,w
  1950  06D6  1D03               	btfss	3,2
  1951  06D7  2EC6               	goto	l6831
  1952  06D8  084B               	movf	___wmul@product+1,w
  1953  06D9  00F6               	movwf	?___wmul+1
  1954  06DA  084A               	movf	___wmul@product,w
  1955  06DB  00F5               	movwf	?___wmul
  1956  06DC  0008               	return
  1957  06DD                     __end_of___wmul:	
  1958                           
  1959                           	psect	text9
  1960  002C                     __ptext9:	
  1961 ;; *************** function _KeyScan *****************
  1962 ;; Defined at:
  1963 ;;		line 9 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Key.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, status,2, status,0
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/200
  1974 ;;		On exit  : 300/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMMON   BANK0   BANK1
  1977 ;;      Params:         0       0       0
  1978 ;;      Locals:         0       0       0
  1979 ;;      Temps:          1       0       0
  1980 ;;      Totals:         1       0       0
  1981 ;;Total ram usage:        1 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:    2
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_Apply
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _KeyScan
  1993  002C                     _KeyScan:	
  1994                           
  1995                           ;Key.c: 11: if(!RA6)
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  1999  002C  1283               	bcf	3,5	;RP0=0, select bank0
  2000  002D  1303               	bcf	3,6	;RP1=0, select bank0
  2001  002E  1B05               	btfsc	5,6	;volatile
  2002  002F  2832               	goto	l2373
  2003                           
  2004                           ;Key.c: 12: {
  2005                           ;Key.c: 13: KeyPress=1;
  2006  0030  1471               	bsf	_KeyPress/(0+8),_KeyPress& (0+7)
  2007                           
  2008                           ;Key.c: 14: }
  2009  0031  2833               	goto	l2374
  2010  0032                     l2373:	
  2011                           
  2012                           ;Key.c: 15: else
  2013                           ;Key.c: 16: {
  2014                           ;Key.c: 17: KeyPress=0;
  2015  0032  1071               	bcf	_KeyPress/(0+8),_KeyPress& (0+7)
  2016  0033                     l2374:	
  2017                           
  2018                           ;Key.c: 18: }
  2019                           ;Key.c: 20: if(KeyPress&&KeyCnt<10&&KeyInBuf==KeyPress&&(!LowBatFlag||USBFlag)&&!LockSta
      +                          .LockFlag)
  2020  0033  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2021  0034  2866               	goto	l2375
  2022  0035  3000               	movlw	0
  2023  0036  022D               	subwf	_KeyCnt+1,w
  2024  0037  300A               	movlw	10
  2025  0038  1903               	skipnz
  2026  0039  022C               	subwf	_KeyCnt,w
  2027  003A  1803               	skipnc
  2028  003B  2866               	goto	l2375
  2029  003C  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2030  003D  2840               	goto	u2810
  2031  003E  3001               	movlw	1
  2032  003F  2841               	goto	u2812
  2033  0040                     u2810:	
  2034  0040  3000               	movlw	0
  2035  0041                     u2812:	
  2036  0041  00F5               	movwf	??_KeyScan
  2037  0042  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2038  0043  2846               	goto	u2820
  2039  0044  3001               	movlw	1
  2040  0045  2847               	goto	u2822
  2041  0046                     u2820:	
  2042  0046  3000               	movlw	0
  2043  0047                     u2822:	
  2044  0047  0675               	xorwf	??_KeyScan,w
  2045  0048  1D03               	skipz
  2046  0049  2866               	goto	l2375
  2047  004A  1F71               	btfss	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  2048  004B  284E               	goto	l2377
  2049  004C  1E71               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2050  004D  2866               	goto	l2375
  2051  004E                     l2377:	
  2052  004E  1B2E               	btfsc	_LockSta,6
  2053  004F  2866               	goto	l2375
  2054                           
  2055                           ;Key.c: 21: {
  2056                           ;Key.c: 22: KeyCnt++;
  2057                           
  2058                           ;Key.c: 23: if(KeyCnt>=10)
  2059  0050  2112               	fcall	PL24	;call to abstracted procedure
  2060  0051  300A               	movlw	10
  2061  0052  1903               	skipnz
  2062  0053  022C               	subwf	_KeyCnt,w
  2063  0054  1C03               	skipc
  2064  0055  28FF               	goto	l2382
  2065                           
  2066                           ;Key.c: 24: {
  2067                           ;Key.c: 25: WorkFlag=~WorkFlag;
  2068  0056  3008               	movlw	(0+1) shl (_WorkFlag& (0+7))
  2069  0057  06F1               	xorwf	_WorkFlag/(0+8),f
  2070                           
  2071                           ;Key.c: 26: if(WorkFlag)
  2072  0058  1DF1               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2073  0059  285B               	goto	l2379
  2074                           
  2075                           ;Key.c: 27: {
  2076                           ;Key.c: 28: LEDWorkFlag=1;
  2077  005A  1770               	bsf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2078  005B                     l2379:	
  2079                           
  2080                           ;Key.c: 29: }
  2081                           ;Key.c: 30: if(!WorkFlag&&WorkMin!=0&&!USBFlag)
  2082  005B  19F1               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2083  005C  2863               	goto	l2380
  2084  005D  087A               	movf	_WorkMin,w
  2085  005E  1D03               	btfss	3,2
  2086  005F  1A71               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2087  0060  2863               	goto	l2380
  2088                           
  2089                           ;Key.c: 31: {
  2090                           ;Key.c: 32: OnOffFlag=1;
  2091  0061  17F0               	bsf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2092                           
  2093                           ;Key.c: 33: }
  2094  0062  28FF               	goto	l2382
  2095  0063                     l2380:	
  2096                           
  2097                           ;Key.c: 34: else
  2098                           ;Key.c: 35: {
  2099                           ;Key.c: 36: OnOffFlag=0;
  2100  0063  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2101                           
  2102                           ;Key.c: 37: WorkMin=0;
  2103  0064  01FA               	clrf	_WorkMin
  2104  0065  28FF               	goto	l2382
  2105  0066                     l2375:	
  2106                           
  2107                           ;Key.c: 41: else if(KeyPress&&(KeyCnt>=10||LockSta.LockFlag)&&KeyCnt<250&&KeyInBuf==KeyP
      +                          ress&&!USBFlag)
  2108  0066  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2109  0067  28A4               	goto	l2383
  2110  0068  3000               	movlw	0
  2111  0069  022D               	subwf	_KeyCnt+1,w
  2112  006A  300A               	movlw	10
  2113  006B  1903               	skipnz
  2114  006C  022C               	subwf	_KeyCnt,w
  2115  006D  1803               	skipnc
  2116  006E  2871               	goto	l5991
  2117  006F  1F2E               	btfss	_LockSta,6
  2118  0070  28A4               	goto	l2383
  2119  0071                     l5991:	
  2120  0071  3000               	movlw	0
  2121  0072  022D               	subwf	_KeyCnt+1,w
  2122  0073  30FA               	movlw	250
  2123  0074  1903               	skipnz
  2124  0075  022C               	subwf	_KeyCnt,w
  2125  0076  1803               	skipnc
  2126  0077  28A4               	goto	l2383
  2127  0078  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2128  0079  287C               	goto	u2960
  2129  007A  3001               	movlw	1
  2130  007B  287D               	goto	u2962
  2131  007C                     u2960:	
  2132  007C  3000               	movlw	0
  2133  007D                     u2962:	
  2134  007D  00F5               	movwf	??_KeyScan
  2135  007E  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2136  007F  2882               	goto	u2970
  2137  0080  3001               	movlw	1
  2138  0081  2883               	goto	u2972
  2139  0082                     u2970:	
  2140  0082  3000               	movlw	0
  2141  0083                     u2972:	
  2142  0083  0675               	xorwf	??_KeyScan,w
  2143  0084  1903               	btfsc	3,2
  2144  0085  1A71               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2145  0086  28A4               	goto	l2383
  2146                           
  2147                           ;Key.c: 42: {
  2148                           ;Key.c: 43: KeyCnt++;
  2149                           
  2150                           ;Key.c: 44: if(KeyCnt>=250||(LockSta.LockFlag&&KeyCnt>=10))
  2151  0087  2112               	fcall	PL24	;call to abstracted procedure
  2152  0088  30FA               	movlw	250
  2153  0089  1903               	skipnz
  2154  008A  022C               	subwf	_KeyCnt,w
  2155  008B  1803               	skipnc
  2156  008C  2896               	goto	l6005
  2157  008D  1F2E               	btfss	_LockSta,6
  2158  008E  28FF               	goto	l2382
  2159  008F  3000               	movlw	0
  2160  0090  022D               	subwf	_KeyCnt+1,w
  2161  0091  300A               	movlw	10
  2162  0092  1903               	skipnz
  2163  0093  022C               	subwf	_KeyCnt,w
  2164  0094  1C03               	skipc
  2165  0095  28FF               	goto	l2382
  2166  0096                     l6005:	
  2167                           
  2168                           ;Key.c: 45: {
  2169                           ;Key.c: 46: KeyCnt=250;
  2170  0096  30FA               	movlw	250
  2171  0097  00AC               	movwf	_KeyCnt
  2172  0098  3002               	movlw	2
  2173  0099  01AD               	clrf	_KeyCnt+1
  2174                           
  2175                           ;Key.c: 47: LockNumb=2;
  2176  009A  00BB               	movwf	_LockNumb
  2177                           
  2178                           ;Key.c: 48: if(!LockSta.LockFlag)
  2179  009B  1B2E               	btfsc	_LockSta,6
  2180  009C  28A0               	goto	l2389
  2181                           
  2182                           ;Key.c: 49: {
  2183                           ;Key.c: 50: LockSta.LockStart=1;
  2184  009D  142E               	bsf	_LockSta,0
  2185                           
  2186                           ;Key.c: 51: LockSta.UnlockEnd=0;
  2187  009E  12AE               	bcf	_LockSta,5
  2188                           
  2189                           ;Key.c: 52: }
  2190  009F  28A2               	goto	l2390
  2191  00A0                     l2389:	
  2192                           
  2193                           ;Key.c: 53: else
  2194                           ;Key.c: 54: {
  2195                           ;Key.c: 55: LockSta.UnlockStart=1;
  2196  00A0  15AE               	bsf	_LockSta,3
  2197                           
  2198                           ;Key.c: 56: LockSta.LockEnd=0;
  2199  00A1  112E               	bcf	_LockSta,2
  2200  00A2                     l2390:	
  2201                           
  2202                           ;Key.c: 57: }
  2203                           ;Key.c: 58: OnOffFlag=0;
  2204  00A2  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2205  00A3  28FF               	goto	l2382
  2206  00A4                     l2383:	
  2207                           
  2208                           ;Key.c: 61: else if(KeyPress&&KeyCnt>=250&&KeyInBuf==KeyPress&&!LockSta.LockEnd&&!LockSt
      +                          a.UnlockEnd)
  2209  00A4  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2210  00A5  28E2               	goto	l2392
  2211  00A6  3000               	movlw	0
  2212  00A7  022D               	subwf	_KeyCnt+1,w
  2213  00A8  30FA               	movlw	250
  2214  00A9  1903               	skipnz
  2215  00AA  022C               	subwf	_KeyCnt,w
  2216  00AB  1C03               	skipc
  2217  00AC  28E2               	goto	l2392
  2218  00AD  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2219  00AE  28B1               	goto	u3060
  2220  00AF  3001               	movlw	1
  2221  00B0  28B2               	goto	u3062
  2222  00B1                     u3060:	
  2223  00B1  3000               	movlw	0
  2224  00B2                     u3062:	
  2225  00B2  00F5               	movwf	??_KeyScan
  2226  00B3  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2227  00B4  28B7               	goto	u3070
  2228  00B5  3001               	movlw	1
  2229  00B6  28B8               	goto	u3072
  2230  00B7                     u3070:	
  2231  00B7  3000               	movlw	0
  2232  00B8                     u3072:	
  2233  00B8  0675               	xorwf	??_KeyScan,w
  2234  00B9  1903               	btfsc	3,2
  2235  00BA  192E               	btfsc	_LockSta,2
  2236  00BB  28E2               	goto	l2392
  2237  00BC  1AAE               	btfsc	_LockSta,5
  2238  00BD  28E2               	goto	l2392
  2239                           
  2240                           ;Key.c: 62: {
  2241                           ;Key.c: 63: KeyCnt++;
  2242  00BE  0AAC               	incf	_KeyCnt,f
  2243  00BF  1903               	skipnz
  2244  00C0  0AAD               	incf	_KeyCnt+1,f
  2245                           
  2246                           ;Key.c: 64: if(KeyCnt>=1750)
  2247  00C1  3006               	movlw	6
  2248  00C2  022D               	subwf	_KeyCnt+1,w
  2249  00C3  30D6               	movlw	214
  2250  00C4  1903               	skipnz
  2251  00C5  022C               	subwf	_KeyCnt,w
  2252  00C6  1C03               	skipc
  2253  00C7  28FF               	goto	l2382
  2254                           
  2255                           ;Key.c: 65: {
  2256                           ;Key.c: 66: KeyCnt=1750;
  2257  00C8  30D6               	movlw	214
  2258  00C9  00AC               	movwf	_KeyCnt
  2259  00CA  3006               	movlw	6
  2260  00CB  00AD               	movwf	_KeyCnt+1
  2261                           
  2262                           ;Key.c: 67: LockSta.LockFlag=!LockSta.LockFlag;
  2263  00CC  1003               	clrc
  2264  00CD  1F2E               	btfss	_LockSta,6
  2265  00CE  1403               	setc
  2266  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2267  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2268  00D1  1C03               	btfss	3,0
  2269  00D2  28D5               	goto	L8
  2270  00D3  172E               	bsf	_LockSta,6
  2271  00D4  28D6               	goto	l6027
  2272  00D5                     L8:	
  2273  00D5  132E               	bcf	_LockSta,6
  2274  00D6                     l6027:	
  2275                           
  2276                           ;Key.c: 68: if(LockSta.LockFlag)
  2277  00D6  1F2E               	btfss	_LockSta,6
  2278  00D7  28DD               	goto	l2394
  2279                           
  2280                           ;Key.c: 69: {
  2281                           ;Key.c: 70: LockSta.LockStart=0;
  2282  00D8  102E               	bcf	_LockSta,0
  2283                           
  2284                           ;Key.c: 71: LockSta.LockEnd=1;
  2285  00D9  152E               	bsf	_LockSta,2
  2286                           
  2287                           ;Key.c: 72: WorkFlag=0;
  2288  00DA  11F1               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2289                           
  2290                           ;Key.c: 73: LEDWorkFlag=0;
  2291  00DB  1370               	bcf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2292                           
  2293                           ;Key.c: 74: }
  2294  00DC  28FF               	goto	l2382
  2295  00DD                     l2394:	
  2296                           
  2297                           ;Key.c: 75: else
  2298                           ;Key.c: 76: {
  2299                           ;Key.c: 77: LockSta.UnlockStart=0;
  2300  00DD  11AE               	bcf	_LockSta,3
  2301                           
  2302                           ;Key.c: 78: LockSta.UnlockEnd=1;
  2303  00DE  16AE               	bsf	_LockSta,5
  2304                           
  2305                           ;Key.c: 79: WorkFlag=1;
  2306  00DF  15F1               	bsf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2307                           
  2308                           ;Key.c: 80: LEDWorkFlag=1;
  2309  00E0  1770               	bsf	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2310  00E1  28FF               	goto	l2382
  2311  00E2                     l2392:	
  2312                           
  2313                           ;Key.c: 84: else if(!KeyPress||KeyInBuf!=KeyPress)
  2314  00E2  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2315  00E3  28F2               	goto	l6033
  2316  00E4  1C71               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2317  00E5  28E8               	goto	u3160
  2318  00E6  3001               	movlw	1
  2319  00E7  28E9               	goto	u3162
  2320  00E8                     u3160:	
  2321  00E8  3000               	movlw	0
  2322  00E9                     u3162:	
  2323  00E9  00F5               	movwf	??_KeyScan
  2324  00EA  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2325  00EB  28EE               	goto	u3170
  2326  00EC  3001               	movlw	1
  2327  00ED  28EF               	goto	u3172
  2328  00EE                     u3170:	
  2329  00EE  3000               	movlw	0
  2330  00EF                     u3172:	
  2331  00EF  0675               	xorwf	??_KeyScan,w
  2332  00F0  1903               	skipnz
  2333  00F1  28FF               	goto	l2382
  2334  00F2                     l6033:	
  2335                           
  2336                           ;Key.c: 85: {
  2337                           ;Key.c: 86: KeyCnt=0;
  2338  00F2  01AC               	clrf	_KeyCnt
  2339  00F3  01AD               	clrf	_KeyCnt+1
  2340                           
  2341                           ;Key.c: 87: LockSta.UnlockEnd=0;
  2342  00F4  12AE               	bcf	_LockSta,5
  2343                           
  2344                           ;Key.c: 88: if(LockSta.LockEnd)
  2345  00F5  1D2E               	btfss	_LockSta,2
  2346  00F6  28F9               	goto	l2400
  2347                           
  2348                           ;Key.c: 89: {
  2349                           ;Key.c: 90: LockSta.LockEnd=0;
  2350  00F7  112E               	bcf	_LockSta,2
  2351                           
  2352                           ;Key.c: 91: LockSta.UnlockFail=1;
  2353  00F8  162E               	bsf	_LockSta,4
  2354  00F9                     l2400:	
  2355                           
  2356                           ;Key.c: 92: }
  2357                           ;Key.c: 93: if(LockSta.UnlockStart)
  2358  00F9  1DAE               	btfss	_LockSta,3
  2359  00FA  28FD               	goto	l2401
  2360                           
  2361                           ;Key.c: 94: {
  2362                           ;Key.c: 95: LockSta.UnlockStart=0;
  2363  00FB  11AE               	bcf	_LockSta,3
  2364                           
  2365                           ;Key.c: 96: LockSta.UnlockFail=1;
  2366  00FC  162E               	bsf	_LockSta,4
  2367  00FD                     l2401:	
  2368                           
  2369                           ;Key.c: 97: }
  2370                           ;Key.c: 98: if(LockSta.LockStart)
  2371  00FD  182E               	btfsc	_LockSta,0
  2372                           
  2373                           ;Key.c: 99: {
  2374                           ;Key.c: 100: LockSta.LockStart=0;
  2375  00FE  102E               	bcf	_LockSta,0
  2376  00FF                     l2382:	
  2377                           
  2378                           ;Key.c: 101: }
  2379                           ;Key.c: 102: }
  2380                           ;Key.c: 103: KeyInBuf=KeyPress;
  2381  00FF  12F0               	bcf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2382  0100  1871               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2383  0101  16F0               	bsf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2384                           
  2385                           ;Key.c: 105: if(!RA7)
  2386  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2387  0103  1303               	bcf	3,6	;RP1=0, select bank0
  2388  0104  1B85               	btfsc	5,7	;volatile
  2389  0105  2908               	goto	l2403
  2390                           
  2391                           ;Key.c: 106: {
  2392                           ;Key.c: 107: USBLink=1;
  2393  0106  1670               	bsf	_USBLink/(0+8),_USBLink& (0+7)
  2394                           
  2395                           ;Key.c: 108: }
  2396  0107  2909               	goto	l2404
  2397  0108                     l2403:	
  2398                           
  2399                           ;Key.c: 109: else
  2400                           ;Key.c: 110: {
  2401                           ;Key.c: 111: USBLink=0;
  2402  0108  1270               	bcf	_USBLink/(0+8),_USBLink& (0+7)
  2403  0109                     l2404:	
  2404                           
  2405                           ;Key.c: 112: }
  2406                           ;Key.c: 114: if(USBLink&&!IovFlag)
  2407  0109  1A70               	btfsc	_USBLink/(0+8),_USBLink& (0+7)
  2408  010A  1AF1               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2409  010B  290F               	goto	l2405
  2410                           
  2411                           ;Key.c: 115: {
  2412                           ;Key.c: 116: USBFlag=1;
  2413  010C  1671               	bsf	_USBFlag/(0+8),_USBFlag& (0+7)
  2414                           
  2415                           ;Key.c: 117: LockSta.LockFlag=0;
  2416  010D  132E               	bcf	_LockSta,6
  2417                           
  2418                           ;Key.c: 118: }
  2419  010E  0008               	return
  2420  010F                     l2405:	
  2421                           
  2422                           ;Key.c: 119: else if(!USBLink)
  2423  010F  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2424                           
  2425                           ;Key.c: 120: {
  2426                           ;Key.c: 121: USBFlag=0;
  2427  0110  1271               	bcf	_USBFlag/(0+8),_USBFlag& (0+7)
  2428  0111  0008               	return
  2429  0112                     __end_of_KeyScan:	
  2430  0112                     PL24:	
  2431  0112  0AAC               	incf	_KeyCnt,f
  2432  0113  1903               	skipnz
  2433  0114  0AAD               	incf	_KeyCnt+1,f
  2434  0115  3000               	movlw	0
  2435  0116  022D               	subwf	_KeyCnt+1,w
  2436  0117  0008               	return
  2437  0118                     __end_ofPL24:	
  2438                           
  2439                           	psect	text10
  2440  0753                     __ptext10:	
  2441 ;; *************** function _DisplayPro *****************
  2442 ;; Defined at:
  2443 ;;		line 144 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 300/0
  2454 ;;		On exit  : B00/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1
  2457 ;;      Params:         0       0       0
  2458 ;;      Locals:         0       0       0
  2459 ;;      Temps:          0       0       0
  2460 ;;      Totals:         0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    4
  2464 ;; This function calls:
  2465 ;;		_DisplayIcon
  2466 ;;		_ErrPro
  2467 ;;		_LockPro
  2468 ;;		_USBLedPro
  2469 ;;		_WorkLedPro
  2470 ;; This function is called by:
  2471 ;;		_Apply
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function _DisplayPro
  2477  0753                     _DisplayPro:	
  2478                           
  2479                           ;LED.c: 146: LedIndex=0;
  2480                           
  2481                           ;incstack = 0
  2482                           ; Regs used in _DisplayPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2483  0753  01AA               	clrf	_LedIndex
  2484  0754  01AB               	clrf	_LedIndex+1
  2485                           
  2486                           ;LED.c: 147: WorkLedPro();
  2487  0755  2351               	fcall	_WorkLedPro
  2488                           
  2489                           ;LED.c: 148: USBLedPro();
  2490  0756  23CC               	fcall	_USBLedPro
  2491                           
  2492                           ;LED.c: 149: LockPro();
  2493  0757  2515               	fcall	_LockPro
  2494                           
  2495                           ;LED.c: 150: ErrPro();
  2496  0758  2716               	fcall	_ErrPro
  2497                           
  2498                           ;LED.c: 151: DisplayIcon(LedIndex);
  2499  0759  082B               	movf	_LedIndex+1,w
  2500  075A  00F6               	movwf	DisplayIcon@index+1
  2501  075B  082A               	movf	_LedIndex,w
  2502  075C  00F5               	movwf	DisplayIcon@index
  2503  075D  2D59               	ljmp	l6371
  2504  075E                     __end_of_DisplayPro:	
  2505                           
  2506                           	psect	text11
  2507  0351                     __ptext11:	
  2508 ;; *************** function _WorkLedPro *****************
  2509 ;; Defined at:
  2510 ;;		line 192 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 300/0
  2521 ;;		On exit  : 300/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMMON   BANK0   BANK1
  2524 ;;      Params:         0       0       0
  2525 ;;      Locals:         0       0       0
  2526 ;;      Temps:          0       2       0
  2527 ;;      Totals:         0       2       0
  2528 ;;Total ram usage:        2 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    3
  2531 ;; This function calls:
  2532 ;;		___bmul
  2533 ;;		___lbdiv
  2534 ;;		___lbmod
  2535 ;; This function is called by:
  2536 ;;		_DisplayPro
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           
  2541                           ;psect for function _WorkLedPro
  2542  0351                     _WorkLedPro:	
  2543                           
  2544                           ;LED.c: 194: static char LedSwitchCnt=0;
  2545                           ;LED.c: 195: static bit LedSwitchFlag=0;
  2546                           ;LED.c: 196: static char index=0;
  2547                           ;LED.c: 197: static unsigned char cnt=0;
  2548                           ;LED.c: 198: static bit dir=0;
  2549                           ;LED.c: 199: if(LEDWorkFlag&&!OnOffFlag&&!LockSta.LockFlag&&!LockSta.LockStart&&(!USBFla
      +                          g||WorkFlag))
  2550                           
  2551                           ;incstack = 0
  2552                           ; Regs used in _WorkLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2553  0351  1B70               	btfsc	_LEDWorkFlag/(0+8),_LEDWorkFlag& (0+7)
  2554  0352  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2555  0353  2B75               	goto	l3050
  2556  0354  1F2E               	btfss	_LockSta,6
  2557  0355  182E               	btfsc	_LockSta,0
  2558  0356  2B75               	goto	l3050
  2559  0357  1E71               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2560  0358  2B5B               	goto	l6403
  2561  0359  1DF1               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2562  035A  2B75               	goto	l3050
  2563  035B                     l6403:	
  2564                           
  2565                           ;LED.c: 200: {
  2566                           ;LED.c: 201: if(BatPercent<=10&&WorkFlag)
  2567  035B  300B               	movlw	11
  2568  035C  0243               	subwf	_BatPercent,w
  2569  035D  1C03               	btfss	3,0
  2570  035E  1DF1               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2571  035F  2B69               	goto	l6415
  2572  0360  3050               	movlw	80
  2573                           
  2574                           ;LED.c: 202: {
  2575                           ;LED.c: 203: LedSwitchCnt++;
  2576  0361  0AB6               	incf	WorkLedPro@LedSwitchCnt,f
  2577                           
  2578                           ;LED.c: 204: if(LedSwitchCnt>=80)
  2579  0362  0236               	subwf	WorkLedPro@LedSwitchCnt,w
  2580  0363  1C03               	skipc
  2581  0364  2B6B               	goto	l6419
  2582  0365  3008               	movlw	(0+1) shl (WorkLedPro@LedSwitchFlag& (0+7))
  2583                           
  2584                           ;LED.c: 205: {
  2585                           ;LED.c: 206: LedSwitchCnt=0;
  2586  0366  01B6               	clrf	WorkLedPro@LedSwitchCnt
  2587                           
  2588                           ;LED.c: 207: LedSwitchFlag=!LedSwitchFlag;
  2589  0367  06F0               	xorwf	WorkLedPro@LedSwitchFlag/(0+8),f
  2590  0368  2B6B               	goto	l6419
  2591  0369                     l6415:	
  2592                           
  2593                           ;LED.c: 210: else
  2594                           ;LED.c: 211: {
  2595                           ;LED.c: 212: LedSwitchCnt=0;
  2596  0369  01B6               	clrf	WorkLedPro@LedSwitchCnt
  2597                           
  2598                           ;LED.c: 213: LedSwitchFlag=1;
  2599  036A  15F0               	bsf	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2600  036B                     l6419:	
  2601                           
  2602                           ;LED.c: 214: }
  2603                           ;LED.c: 215: if(LedSwitchFlag)
  2604  036B  1DF0               	btfss	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2605  036C  0008               	return
  2606                           
  2607                           ;LED.c: 216: {
  2608                           ;LED.c: 217: LedIndex=NumbArr[BatPercent/10];
  2609  036D  300A               	movlw	10
  2610  036E  00F5               	movwf	___lbdiv@divisor
  2611  036F  0843               	movf	_BatPercent,w
  2612  0370  268E               	fcall	___lbdiv
  2613                           
  2614                           ;LED.c: 218: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2615  0371  2421               	fcall	PL6	;call to abstracted procedure
  2616  0372  2672               	fcall	___lbmod
  2617  0373  23AF               	fcall	PL2	;call to abstracted procedure
  2618  0374  0008               	return
  2619  0375                     l3050:	
  2620                           
  2621                           ;LED.c: 221: else if(OnOffFlag)
  2622  0375  1FF0               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2623  0376  0008               	return
  2624  0377  3028               	movlw	40
  2625                           
  2626                           ;LED.c: 222: {
  2627                           ;LED.c: 223: cnt++;
  2628  0378  0AB4               	incf	WorkLedPro@cnt,f
  2629                           
  2630                           ;LED.c: 224: if(cnt>=40)
  2631  0379  0234               	subwf	WorkLedPro@cnt,w
  2632  037A  1C03               	skipc
  2633  037B  2B8A               	goto	l6447
  2634  037C  3007               	movlw	7
  2635                           
  2636                           ;LED.c: 225: {
  2637                           ;LED.c: 226: cnt=0;
  2638  037D  01B4               	clrf	WorkLedPro@cnt
  2639                           
  2640                           ;LED.c: 227: index++;
  2641  037E  0AB5               	incf	WorkLedPro@index,f
  2642                           
  2643                           ;LED.c: 228: if(index>=7)
  2644  037F  0235               	subwf	WorkLedPro@index,w
  2645  0380  1C03               	skipc
  2646  0381  2B8A               	goto	l6447
  2647                           
  2648                           ;LED.c: 229: {
  2649                           ;LED.c: 230: if(dir)
  2650  0382  1D70               	btfss	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2651  0383  2B87               	goto	l6443
  2652                           
  2653                           ;LED.c: 231: {
  2654                           ;LED.c: 232: OnOffFlag=0;
  2655  0384  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2656                           
  2657                           ;LED.c: 233: WorkMin=0;
  2658  0385  01FA               	clrf	_WorkMin
  2659  0386  0008               	return
  2660  0387                     l6443:	
  2661                           
  2662                           ;LED.c: 235: }
  2663                           ;LED.c: 236: dir=!dir;
  2664  0387  3004               	movlw	(0+1) shl (WorkLedPro@dir& (0+7))
  2665  0388  06F0               	xorwf	WorkLedPro@dir/(0+8),f
  2666                           
  2667                           ;LED.c: 237: index=0;
  2668  0389  01B5               	clrf	WorkLedPro@index
  2669  038A                     l6447:	
  2670                           
  2671                           ;LED.c: 238: }
  2672                           ;LED.c: 239: }
  2673                           ;LED.c: 240: if(!dir)
  2674  038A  1970               	btfsc	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2675  038B  2B98               	goto	l6455
  2676                           
  2677                           ;LED.c: 241: {
  2678                           ;LED.c: 242: LedIndex=NumbArr[BatPercent/10];
  2679  038C  300A               	movlw	10
  2680  038D  00F5               	movwf	___lbdiv@divisor
  2681  038E  0843               	movf	_BatPercent,w
  2682  038F  268E               	fcall	___lbdiv
  2683                           
  2684                           ;LED.c: 243: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2685  0390  2421               	fcall	PL6	;call to abstracted procedure
  2686  0391  2672               	fcall	___lbmod
  2687  0392  23AF               	fcall	PL2	;call to abstracted procedure
  2688                           
  2689                           ;LED.c: 244: LedIndex&=~OffHideNumbArr[index];
  2690  0393  1003               	clrc
  2691  0394  0D35               	rlf	WorkLedPro@index,w
  2692  0395  3EB0               	addlw	(low (_OffHideNumbArr| 0))& (0+255)
  2693  0396  0084               	movwf	4
  2694                           
  2695                           ;LED.c: 245: }
  2696  0397  2BC0               	ljmp	PL10	;call to abstracted procedure
  2697  0398                     l6455:	
  2698                           
  2699                           ;LED.c: 246: else
  2700                           ;LED.c: 247: {
  2701                           ;LED.c: 248: LedIndex=NumbArr[WorkMin/10];
  2702  0398  300A               	movlw	10
  2703  0399  00F5               	movwf	___lbdiv@divisor
  2704  039A  087A               	movf	_WorkMin,w
  2705  039B  268E               	fcall	___lbdiv
  2706  039C  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2707  039D  0084               	movwf	4
  2708  039E  1383               	bcf	3,7	;select IRP bank1
  2709  039F  0800               	movf	0,w
  2710  03A0  00AA               	movwf	_LedIndex
  2711  03A1  300A               	movlw	10
  2712  03A2  01AB               	clrf	_LedIndex+1
  2713                           
  2714                           ;LED.c: 249: LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
  2715  03A3  00F5               	movwf	___lbmod@divisor
  2716  03A4  087A               	movf	_WorkMin,w
  2717  03A5  2672               	fcall	___lbmod
  2718  03A6  23AF               	fcall	PL2	;call to abstracted procedure
  2719                           
  2720                           ;LED.c: 250: LedIndex&=~OffHideNumbArr[6-index];
  2721  03A7  30FE               	movlw	254
  2722  03A8  00F5               	movwf	___bmul@multiplicand
  2723  03A9  0835               	movf	WorkLedPro@index,w
  2724  03AA  2745               	fcall	___bmul
  2725  03AB  3EBC               	addlw	(low ((_OffHideNumbArr| 0+12)))& (0+255)
  2726  03AC  0084               	movwf	4
  2727  03AD  1383               	bcf	3,7	;select IRP bank1
  2728  03AE  2BC0               	ljmp	PL10	;call to abstracted procedure
  2729  03AF                     __end_of_WorkLedPro:	
  2730  03AF                     PL2:	
  2731  03AF  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2732  03B0  0084               	movwf	4
  2733  03B1  0800               	movf	0,w
  2734  03B2  00CA               	movwf	??_WorkLedPro
  2735  03B3  3007               	movlw	7
  2736  03B4  01CB               	clrf	??_WorkLedPro+1
  2737  03B5  00FF               	movwf	127
  2738  03B6                     u3955:	
  2739  03B6  1003               	clrc
  2740  03B7  0DCA               	rlf	??_WorkLedPro,f
  2741  03B8  0DCB               	rlf	??_WorkLedPro+1,f
  2742  03B9  0BFF               	decfsz	127,f
  2743  03BA  2BB6               	goto	u3955
  2744  03BB  084A               	movf	??_WorkLedPro,w
  2745  03BC  04AA               	iorwf	_LedIndex,f
  2746  03BD  084B               	movf	??_WorkLedPro+1,w
  2747  03BE  04AB               	iorwf	_LedIndex+1,f
  2748  03BF  0008               	return
  2749  03C0                     __end_ofPL2:	
  2750  03C0                     PL10:	
  2751  03C0  0800               	movf	0,w
  2752  03C1  00CA               	movwf	??_WorkLedPro
  2753  03C2  0A84               	incf	4,f
  2754  03C3  0800               	movf	0,w
  2755  03C4  00CB               	movwf	??_WorkLedPro+1
  2756  03C5  09CA               	comf	??_WorkLedPro,f
  2757  03C6  09CB               	comf	??_WorkLedPro+1,f
  2758  03C7  084A               	movf	??_WorkLedPro,w
  2759  03C8  05AA               	andwf	_LedIndex,f
  2760  03C9  084B               	movf	??_WorkLedPro+1,w
  2761  03CA  05AB               	andwf	_LedIndex+1,f
  2762  03CB  0008               	return
  2763  03CC                     __end_ofPL10:	
  2764                           
  2765                           	psect	text12
  2766  0745                     __ptext12:	
  2767 ;; *************** function ___bmul *****************
  2768 ;; Defined at:
  2769 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  multiplier      1    wreg     unsigned char 
  2772 ;;  multiplicand    1    3[COMMON] unsigned char 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  multiplier      1    5[COMMON] unsigned char 
  2775 ;;  product         1    4[COMMON] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      unsigned char 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0
  2780 ;; Tracked objects:
  2781 ;;		On entry : 300/0
  2782 ;;		On exit  : 300/0
  2783 ;;		Unchanged: 300/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1
  2785 ;;      Params:         1       0       0
  2786 ;;      Locals:         2       0       0
  2787 ;;      Temps:          0       0       0
  2788 ;;      Totals:         3       0       0
  2789 ;;Total ram usage:        3 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_Sec1sPro
  2796 ;;		_WorkLedPro
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function ___bmul
  2802  0745                     ___bmul:	
  2803                           
  2804                           ;incstack = 0
  2805                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2806                           ;___bmul@multiplier stored from wreg
  2807  0745  00F7               	movwf	___bmul@multiplier
  2808  0746  01F6               	clrf	___bmul@product
  2809  0747                     l5495:	
  2810  0747  0875               	movf	___bmul@multiplicand,w
  2811  0748  1877               	btfsc	___bmul@multiplier,0
  2812  0749  07F6               	addwf	___bmul@product,f
  2813  074A  1003               	clrc
  2814  074B  0DF5               	rlf	___bmul@multiplicand,f
  2815  074C  1003               	clrc
  2816  074D  0CF7               	rrf	___bmul@multiplier,f
  2817  074E  0877               	movf	___bmul@multiplier,w
  2818  074F  1D03               	btfss	3,2
  2819  0750  2F47               	goto	l5495
  2820  0751  0876               	movf	___bmul@product,w
  2821  0752  0008               	return
  2822  0753                     __end_of___bmul:	
  2823                           
  2824                           	psect	text13
  2825  03CC                     __ptext13:	
  2826 ;; *************** function _USBLedPro *****************
  2827 ;; Defined at:
  2828 ;;		line 154 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2837 ;; Tracked objects:
  2838 ;;		On entry : 300/0
  2839 ;;		On exit  : 300/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1
  2842 ;;      Params:         0       0       0
  2843 ;;      Locals:         0       0       0
  2844 ;;      Temps:          0       3       0
  2845 ;;      Totals:         0       3       0
  2846 ;;Total ram usage:        3 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    3
  2849 ;; This function calls:
  2850 ;;		___lbdiv
  2851 ;;		___lbmod
  2852 ;; This function is called by:
  2853 ;;		_DisplayPro
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           
  2858                           ;psect for function _USBLedPro
  2859  03CC                     _USBLedPro:	
  2860                           
  2861                           ;LED.c: 156: static unsigned char index=0;
  2862                           ;LED.c: 157: static unsigned char cnt=0;
  2863                           ;LED.c: 159: if(USBFlag&&!WorkFlag&&!OnOffFlag)
  2864                           
  2865                           ;incstack = 0
  2866                           ; Regs used in _USBLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2867  03CC  1A71               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2868  03CD  19F1               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2869  03CE  2C1E               	goto	l6493
  2870  03CF  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2871  03D0  2C1E               	goto	l6493
  2872  03D1  3028               	movlw	40
  2873                           
  2874                           ;LED.c: 160: {
  2875                           ;LED.c: 161: cnt++;
  2876  03D2  0AB7               	incf	USBLedPro@cnt,f
  2877                           
  2878                           ;LED.c: 162: if(cnt>=40)
  2879  03D3  0237               	subwf	USBLedPro@cnt,w
  2880  03D4  1C03               	skipc
  2881  03D5  2BDC               	goto	l6479
  2882  03D6  300B               	movlw	11
  2883                           
  2884                           ;LED.c: 163: {
  2885                           ;LED.c: 164: cnt=0;
  2886  03D7  01B7               	clrf	USBLedPro@cnt
  2887                           
  2888                           ;LED.c: 165: index++;
  2889  03D8  0AB8               	incf	USBLedPro@index,f
  2890                           
  2891                           ;LED.c: 166: if(index>=11)
  2892  03D9  0238               	subwf	USBLedPro@index,w
  2893  03DA  1803               	btfsc	3,0
  2894                           
  2895                           ;LED.c: 167: {
  2896                           ;LED.c: 168: index=0;
  2897  03DB  01B8               	clrf	USBLedPro@index
  2898  03DC                     l6479:	
  2899                           
  2900                           ;LED.c: 169: }
  2901                           ;LED.c: 170: }
  2902                           ;LED.c: 171: if(BatPercent<99)
  2903  03DC  3063               	movlw	99
  2904  03DD  0243               	subwf	_BatPercent,w
  2905                           
  2906                           ;LED.c: 172: {
  2907                           ;LED.c: 173: LedIndex=NumbArr[BatPercent/10];
  2908  03DE  300A               	movlw	10
  2909  03DF  1803               	skipnc
  2910  03E0  2C07               	goto	L9
  2911  03E1  00F5               	movwf	___lbdiv@divisor
  2912  03E2  0843               	movf	_BatPercent,w
  2913  03E3  268E               	fcall	___lbdiv
  2914                           
  2915                           ;LED.c: 174: LedIndex|=((unsigned int)NumbArr[BatPercent%10]&~HideNumbArr[index])<<7;
  2916  03E4  2421               	fcall	PL6	;call to abstracted procedure
  2917  03E5  2672               	fcall	___lbmod
  2918  03E6  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2919  03E7  0084               	movwf	4
  2920  03E8  0800               	movf	0,w
  2921  03E9  00CA               	movwf	??_USBLedPro
  2922  03EA  0838               	movf	USBLedPro@index,w
  2923  03EB  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2924  03EC  0084               	movwf	4
  2925  03ED  0900               	comf	0,w
  2926  03EE  054A               	andwf	??_USBLedPro,w
  2927  03EF  00CB               	movwf	??_USBLedPro+1
  2928  03F0  3007               	movlw	7
  2929  03F1  01CC               	clrf	??_USBLedPro+2
  2930  03F2  00FF               	movwf	127
  2931  03F3                     u4095:	
  2932  03F3  1003               	clrc
  2933  03F4  0DCB               	rlf	??_USBLedPro+1,f
  2934  03F5  0DCC               	rlf	??_USBLedPro+2,f
  2935  03F6  0BFF               	decfsz	127,f
  2936  03F7  2BF3               	goto	u4095
  2937  03F8  084B               	movf	??_USBLedPro+1,w
  2938  03F9  04AA               	iorwf	_LedIndex,f
  2939  03FA  084C               	movf	??_USBLedPro+2,w
  2940  03FB  04AB               	iorwf	_LedIndex+1,f
  2941                           
  2942                           ;LED.c: 175: LedIndex&=~HideNumbArr[index];
  2943  03FC  0838               	movf	USBLedPro@index,w
  2944  03FD  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2945  03FE  0084               	movwf	4
  2946  03FF  0900               	comf	0,w
  2947  0400  00CA               	movwf	??_USBLedPro
  2948  0401  01CB               	clrf	??_USBLedPro+1
  2949  0402  09CB               	comf	??_USBLedPro+1,f
  2950  0403  05AA               	andwf	_LedIndex,f
  2951  0404  084B               	movf	??_USBLedPro+1,w
  2952  0405  05AB               	andwf	_LedIndex+1,f
  2953                           
  2954                           ;LED.c: 176: }
  2955  0406  0008               	return
  2956  0407                     L9:	
  2957                           
  2958                           ;LED.c: 177: else
  2959                           ;LED.c: 178: {
  2960                           ;LED.c: 179: index=0;
  2961  0407  01B8               	clrf	USBLedPro@index
  2962                           
  2963                           ;LED.c: 180: LedIndex=NumbArr[BatPercent/10];
  2964  0408  00F5               	movwf	___lbdiv@divisor
  2965  0409  0843               	movf	_BatPercent,w
  2966  040A  268E               	fcall	___lbdiv
  2967                           
  2968                           ;LED.c: 181: LedIndex|=NumbArr[BatPercent%10]<<7;
  2969  040B  2421               	fcall	PL6	;call to abstracted procedure
  2970  040C  2672               	fcall	___lbmod
  2971  040D  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2972  040E  0084               	movwf	4
  2973  040F  0800               	movf	0,w
  2974  0410  00CA               	movwf	??_USBLedPro
  2975  0411  3007               	movlw	7
  2976  0412  01CB               	clrf	??_USBLedPro+1
  2977  0413  00FF               	movwf	127
  2978  0414                     u4105:	
  2979  0414  1003               	clrc
  2980  0415  0DCA               	rlf	??_USBLedPro,f
  2981  0416  0DCB               	rlf	??_USBLedPro+1,f
  2982  0417  0BFF               	decfsz	127,f
  2983  0418  2C14               	goto	u4105
  2984  0419  084A               	movf	??_USBLedPro,w
  2985  041A  04AA               	iorwf	_LedIndex,f
  2986  041B  084B               	movf	??_USBLedPro+1,w
  2987  041C  04AB               	iorwf	_LedIndex+1,f
  2988  041D  0008               	return
  2989  041E                     l6493:	
  2990                           
  2991                           ;LED.c: 185: else
  2992                           ;LED.c: 186: {
  2993                           ;LED.c: 187: index=0;
  2994  041E  01B8               	clrf	USBLedPro@index
  2995                           
  2996                           ;LED.c: 188: cnt=0;
  2997  041F  01B7               	clrf	USBLedPro@cnt
  2998  0420  0008               	return
  2999  0421                     __end_of_USBLedPro:	
  3000  0421                     PL6:	
  3001  0421  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  3002  0422  0084               	movwf	4
  3003  0423  1383               	bcf	3,7	;select IRP bank1
  3004  0424  0800               	movf	0,w
  3005  0425  00AA               	movwf	_LedIndex
  3006  0426  300A               	movlw	10
  3007  0427  01AB               	clrf	_LedIndex+1
  3008  0428  00F5               	movwf	___lbmod@divisor
  3009  0429  0843               	movf	_BatPercent,w
  3010  042A  0008               	return
  3011  042B                     __end_ofPL6:	
  3012                           
  3013                           	psect	text14
  3014  0672                     __ptext14:	
  3015 ;; *************** function ___lbmod *****************
  3016 ;; Defined at:
  3017 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  dividend        1    wreg     unsigned char 
  3020 ;;  divisor         1    3[COMMON] unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  dividend        1    5[COMMON] unsigned char 
  3023 ;;  rem             1    7[COMMON] unsigned char 
  3024 ;;  counter         1    6[COMMON] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      unsigned char 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0
  3029 ;; Tracked objects:
  3030 ;;		On entry : B00/0
  3031 ;;		On exit  : B00/0
  3032 ;;		Unchanged: B00/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1
  3034 ;;      Params:         1       0       0
  3035 ;;      Locals:         3       0       0
  3036 ;;      Temps:          1       0       0
  3037 ;;      Totals:         5       0       0
  3038 ;;Total ram usage:        5 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    2
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_WorkLedPro
  3045 ;;		_USBLedPro
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           
  3050                           ;psect for function ___lbmod
  3051  0672                     ___lbmod:	
  3052                           
  3053                           ;incstack = 0
  3054                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3055                           ;___lbmod@dividend stored from wreg
  3056  0672  00F7               	movwf	___lbmod@dividend
  3057  0673  3008               	movlw	8
  3058  0674  00F8               	movwf	___lbmod@counter
  3059  0675  01F9               	clrf	___lbmod@rem
  3060  0676                     l5535:	
  3061  0676  0877               	movf	___lbmod@dividend,w
  3062  0677  00F6               	movwf	??___lbmod
  3063  0678  3007               	movlw	7
  3064  0679  1003               	clrc
  3065  067A                     L10:	
  3066  067A  0CF6               	rrf	??___lbmod,f
  3067  067B  3EFF               	addlw	-1
  3068  067C  1003               	clrc
  3069  067D  1D03               	skipz
  3070  067E  2E7A               	goto	L10
  3071  067F  0D79               	rlf	___lbmod@rem,w
  3072  0680  0476               	iorwf	??___lbmod,w
  3073  0681  00F9               	movwf	___lbmod@rem
  3074  0682  1003               	clrc
  3075  0683  0DF7               	rlf	___lbmod@dividend,f
  3076  0684  0875               	movf	___lbmod@divisor,w
  3077  0685  0279               	subwf	___lbmod@rem,w
  3078  0686  1C03               	skipc
  3079  0687  2E8A               	goto	l5543
  3080  0688  0875               	movf	___lbmod@divisor,w
  3081  0689  02F9               	subwf	___lbmod@rem,f
  3082  068A                     l5543:	
  3083  068A  0BF8               	decfsz	___lbmod@counter,f
  3084  068B  2E76               	goto	l5535
  3085  068C  0879               	movf	___lbmod@rem,w
  3086  068D  0008               	return
  3087  068E                     __end_of___lbmod:	
  3088                           
  3089                           	psect	text15
  3090  068E                     __ptext15:	
  3091 ;; *************** function ___lbdiv *****************
  3092 ;; Defined at:
  3093 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  dividend        1    wreg     unsigned char 
  3096 ;;  divisor         1    3[COMMON] unsigned char 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  dividend        1    4[COMMON] unsigned char 
  3099 ;;  quotient        1    6[COMMON] unsigned char 
  3100 ;;  counter         1    5[COMMON] unsigned char 
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      unsigned char 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2, status,0
  3105 ;; Tracked objects:
  3106 ;;		On entry : 300/0
  3107 ;;		On exit  : 300/0
  3108 ;;		Unchanged: 300/0
  3109 ;; Data sizes:     COMMON   BANK0   BANK1
  3110 ;;      Params:         1       0       0
  3111 ;;      Locals:         3       0       0
  3112 ;;      Temps:          0       0       0
  3113 ;;      Totals:         4       0       0
  3114 ;;Total ram usage:        4 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    2
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_WorkLedPro
  3121 ;;		_USBLedPro
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           
  3126                           ;psect for function ___lbdiv
  3127  068E                     ___lbdiv:	
  3128                           
  3129                           ;incstack = 0
  3130                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3131                           ;___lbdiv@dividend stored from wreg
  3132  068E  00F6               	movwf	___lbdiv@dividend
  3133  068F  01F8               	clrf	___lbdiv@quotient
  3134  0690  0875               	movf	___lbdiv@divisor,w
  3135  0691  1903               	btfsc	3,2
  3136  0692  2EA7               	goto	l5527
  3137  0693  01F7               	clrf	___lbdiv@counter
  3138  0694                     l5513:	
  3139  0694  0AF7               	incf	___lbdiv@counter,f
  3140  0695  1BF5               	btfsc	___lbdiv@divisor,7
  3141  0696  2E9A               	goto	l4487
  3142  0697  1003               	clrc
  3143  0698  0DF5               	rlf	___lbdiv@divisor,f
  3144  0699  2E94               	goto	l5513
  3145  069A                     l4487:	
  3146  069A  1003               	clrc
  3147  069B  0DF8               	rlf	___lbdiv@quotient,f
  3148  069C  0875               	movf	___lbdiv@divisor,w
  3149  069D  0276               	subwf	___lbdiv@dividend,w
  3150  069E  1C03               	skipc
  3151  069F  2EA4               	goto	L11
  3152  06A0  0875               	movf	___lbdiv@divisor,w
  3153  06A1  02F6               	subwf	___lbdiv@dividend,f
  3154  06A2  1478               	bsf	___lbdiv@quotient,0
  3155  06A3  1003               	clrc
  3156  06A4                     L11:	
  3157  06A4  0CF5               	rrf	___lbdiv@divisor,f
  3158  06A5  0BF7               	decfsz	___lbdiv@counter,f
  3159  06A6  2E9A               	goto	l4487
  3160  06A7                     l5527:	
  3161  06A7  0878               	movf	___lbdiv@quotient,w
  3162  06A8  0008               	return
  3163  06A9                     __end_of___lbdiv:	
  3164                           
  3165                           	psect	text16
  3166  0515                     __ptext16:	
  3167 ;; *************** function _LockPro *****************
  3168 ;; Defined at:
  3169 ;;		line 255 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3178 ;; Tracked objects:
  3179 ;;		On entry : 300/0
  3180 ;;		On exit  : 300/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMMON   BANK0   BANK1
  3183 ;;      Params:         0       0       0
  3184 ;;      Locals:         0       0       0
  3185 ;;      Temps:          2       0       0
  3186 ;;      Totals:         2       0       0
  3187 ;;Total ram usage:        2 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    2
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_DisplayPro
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           
  3198                           ;psect for function _LockPro
  3199  0515                     _LockPro:	
  3200                           
  3201                           ;LED.c: 257: static unsigned char SwitchCnt=0,LockSwitchCnt=0;
  3202                           ;LED.c: 258: static unsigned char Ledcnt=0;
  3203                           ;LED.c: 259: static bit LedSwitchFlag=0;
  3204                           ;LED.c: 260: if(!USBFlag)
  3205                           
  3206                           ;incstack = 0
  3207                           ; Regs used in _LockPro: [wreg-fsr0h+status,2+status,0+btemp+1]
  3208  0515  1A71               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3209  0516  0008               	return
  3210                           
  3211                           ;LED.c: 261: {
  3212                           ;LED.c: 262: if(LockSta.LockStart||LockSta.UnlockStart)
  3213  0517  182E               	btfsc	_LockSta,0
  3214  0518  2D1B               	goto	l5741
  3215  0519  1DAE               	btfss	_LockSta,3
  3216  051A  2D3D               	goto	l5755
  3217  051B                     l5741:	
  3218  051B  3064               	movlw	100
  3219                           
  3220                           ;LED.c: 263: {
  3221                           ;LED.c: 264: SwitchCnt++;
  3222  051C  0AB3               	incf	LockPro@SwitchCnt,f
  3223                           
  3224                           ;LED.c: 265: if(SwitchCnt>=100)
  3225  051D  0233               	subwf	LockPro@SwitchCnt,w
  3226  051E  1C03               	skipc
  3227  051F  2D25               	goto	l5751
  3228                           
  3229                           ;LED.c: 266: {
  3230                           ;LED.c: 267: SwitchCnt=0;
  3231  0520  01B3               	clrf	LockPro@SwitchCnt
  3232                           
  3233                           ;LED.c: 268: if(LockNumb>0)
  3234  0521  083B               	movf	_LockNumb,w
  3235  0522  1903               	btfsc	3,2
  3236  0523  2D25               	goto	l5751
  3237                           
  3238                           ;LED.c: 269: {
  3239                           ;LED.c: 270: LockNumb--;
  3240  0524  03BB               	decf	_LockNumb,f
  3241  0525                     l5751:	
  3242                           
  3243                           ;LED.c: 271: }
  3244                           ;LED.c: 272: }
  3245                           ;LED.c: 273: LedIndex=NumbArr[0];
  3246  0525  1683               	bsf	3,5	;RP0=1, select bank1
  3247  0526  0849               	movf	_NumbArr^(0+128),w
  3248  0527  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0528  00AA               	movwf	_LedIndex
  3250  0529  01AB               	clrf	_LedIndex+1
  3251                           
  3252                           ;LED.c: 274: LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
  3253  052A  083B               	movf	_LockNumb,w
  3254  052B  3ECA               	addlw	(low ((_NumbArr| 0+1)))& (0+255)
  3255  052C  0084               	movwf	4
  3256  052D  1383               	bcf	3,7	;select IRP bank1
  3257  052E  0800               	movf	0,w
  3258  052F  00F5               	movwf	??_LockPro
  3259  0530  3007               	movlw	7
  3260  0531  01F6               	clrf	??_LockPro+1
  3261  0532  00FF               	movwf	127
  3262  0533                     u2365:	
  3263  0533  1003               	clrc
  3264  0534  0DF5               	rlf	??_LockPro,f
  3265  0535  0DF6               	rlf	??_LockPro+1,f
  3266  0536  0BFF               	decfsz	127,f
  3267  0537  2D33               	goto	u2365
  3268  0538  0875               	movf	??_LockPro,w
  3269  0539  04AA               	iorwf	_LedIndex,f
  3270  053A  0876               	movf	??_LockPro+1,w
  3271  053B  04AB               	iorwf	_LedIndex+1,f
  3272                           
  3273                           ;LED.c: 275: }
  3274  053C  2D3E               	goto	l5757
  3275  053D                     l5755:	
  3276                           
  3277                           ;LED.c: 276: else
  3278                           ;LED.c: 277: {
  3279                           ;LED.c: 278: SwitchCnt=0;
  3280  053D  01B3               	clrf	LockPro@SwitchCnt
  3281  053E                     l5757:	
  3282                           
  3283                           ;LED.c: 279: }
  3284                           ;LED.c: 280: if(LockSta.LockEnd||LockSta.UnlockFail||LockSta.UnlockStart)
  3285  053E  1D2E               	btfss	_LockSta,2
  3286  053F  1A2E               	btfsc	_LockSta,4
  3287  0540  2D43               	goto	l5763
  3288  0541  1DAE               	btfss	_LockSta,3
  3289  0542  2D56               	goto	l5783
  3290  0543                     l5763:	
  3291  0543  3023               	movlw	35
  3292                           
  3293                           ;LED.c: 281: {
  3294                           ;LED.c: 282: LockSwitchCnt++;
  3295  0544  0AB2               	incf	LockPro@LockSwitchCnt,f
  3296                           
  3297                           ;LED.c: 283: if(LockSwitchCnt>=35)
  3298  0545  0232               	subwf	LockPro@LockSwitchCnt,w
  3299  0546  1C03               	skipc
  3300  0547  2D53               	goto	l3085
  3301  0548  3002               	movlw	(0+1) shl (LockPro@LedSwitchFlag& (0+7))
  3302                           
  3303                           ;LED.c: 284: {
  3304                           ;LED.c: 285: LockSwitchCnt=0;
  3305  0549  01B2               	clrf	LockPro@LockSwitchCnt
  3306                           
  3307                           ;LED.c: 286: LedSwitchFlag=!LedSwitchFlag;
  3308  054A  06F0               	xorwf	LockPro@LedSwitchFlag/(0+8),f
  3309                           
  3310                           ;LED.c: 287: if(!LedSwitchFlag&&LockSta.UnlockFail)
  3311  054B  1CF0               	btfss	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3312  054C  1E2E               	btfss	_LockSta,4
  3313  054D  2D53               	goto	l3085
  3314  054E  3003               	movlw	3
  3315                           
  3316                           ;LED.c: 288: {
  3317                           ;LED.c: 289: Ledcnt++;
  3318  054F  0AB1               	incf	LockPro@Ledcnt,f
  3319                           
  3320                           ;LED.c: 290: if(Ledcnt>=3)
  3321  0550  0231               	subwf	LockPro@Ledcnt,w
  3322  0551  1803               	btfsc	3,0
  3323                           
  3324                           ;LED.c: 291: {
  3325                           ;LED.c: 292: LockSta.UnlockFail=0;
  3326  0552  122E               	bcf	_LockSta,4
  3327  0553                     l3085:	
  3328                           
  3329                           ;LED.c: 293: }
  3330                           ;LED.c: 294: }
  3331                           ;LED.c: 295: }
  3332                           ;LED.c: 296: if(LedSwitchFlag)
  3333  0553  18F0               	btfsc	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3334                           
  3335                           ;LED.c: 297: {
  3336                           ;LED.c: 298: LedIndex|=0x8000;
  3337  0554  17AB               	bsf	_LedIndex+1,7
  3338  0555  0008               	return
  3339  0556                     l5783:	
  3340                           
  3341                           ;LED.c: 301: else
  3342                           ;LED.c: 302: {
  3343                           ;LED.c: 303: Ledcnt=0;
  3344  0556  01B1               	clrf	LockPro@Ledcnt
  3345                           
  3346                           ;LED.c: 304: LockSwitchCnt=0;
  3347  0557  01B2               	clrf	LockPro@LockSwitchCnt
  3348  0558  0008               	return
  3349  0559                     __end_of_LockPro:	
  3350                           
  3351                           	psect	text17
  3352  0716                     __ptext17:	
  3353 ;; *************** function _ErrPro *****************
  3354 ;; Defined at:
  3355 ;;		line 309 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;		None
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;		None
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  1    wreg      void 
  3362 ;; Registers used:
  3363 ;;		wreg, status,2, status,0
  3364 ;; Tracked objects:
  3365 ;;		On entry : 300/0
  3366 ;;		On exit  : 300/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMMON   BANK0   BANK1
  3369 ;;      Params:         0       0       0
  3370 ;;      Locals:         0       0       0
  3371 ;;      Temps:          0       0       0
  3372 ;;      Totals:         0       0       0
  3373 ;;Total ram usage:        0 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    2
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_DisplayPro
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           
  3384                           ;psect for function _ErrPro
  3385  0716                     _ErrPro:	
  3386                           
  3387                           ;LED.c: 311: static unsigned char SwitchCnt=0;
  3388                           ;LED.c: 312: static bit LedSwitchFlag=0;
  3389                           ;LED.c: 313: if(IovFlag)
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _ErrPro: [wreg+status,2+status,0]
  3393  0716  1EF1               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  3394  0717  2F26               	goto	l5799
  3395  0718  3023               	movlw	35
  3396                           
  3397                           ;LED.c: 314: {
  3398                           ;LED.c: 315: SwitchCnt++;
  3399  0719  0AB0               	incf	ErrPro@SwitchCnt,f
  3400                           
  3401                           ;LED.c: 316: if(SwitchCnt>=35)
  3402  071A  0230               	subwf	ErrPro@SwitchCnt,w
  3403  071B  1C03               	skipc
  3404  071C  2F20               	goto	l5795
  3405  071D  3001               	movlw	(0+1) shl (ErrPro@LedSwitchFlag& (0+7))
  3406                           
  3407                           ;LED.c: 317: {
  3408                           ;LED.c: 318: SwitchCnt=0;
  3409  071E  01B0               	clrf	ErrPro@SwitchCnt
  3410                           
  3411                           ;LED.c: 319: LedSwitchFlag=!LedSwitchFlag;
  3412  071F  06F0               	xorwf	ErrPro@LedSwitchFlag/(0+8),f
  3413  0720                     l5795:	
  3414                           
  3415                           ;LED.c: 321: }
  3416                           ;LED.c: 322: if(LedSwitchFlag)
  3417  0720  1C70               	btfss	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3418  0721  0008               	return
  3419                           
  3420                           ;LED.c: 323: {
  3421                           ;LED.c: 324: LedIndex=0x4000;
  3422  0722  3040               	movlw	64
  3423  0723  01AA               	clrf	_LedIndex
  3424  0724  00AB               	movwf	_LedIndex+1
  3425  0725  0008               	return
  3426  0726                     l5799:	
  3427                           
  3428                           ;LED.c: 327: else
  3429                           ;LED.c: 328: {
  3430                           ;LED.c: 329: SwitchCnt=0;
  3431  0726  01B0               	clrf	ErrPro@SwitchCnt
  3432  0727  0008               	return
  3433  0728                     __end_of_ErrPro:	
  3434                           
  3435                           	psect	text18
  3436  0559                     __ptext18:	
  3437 ;; *************** function _DisplayIcon *****************
  3438 ;; Defined at:
  3439 ;;		line 124 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  index           2    3[COMMON] unsigned int 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  Mask            2    0[BANK0 ] unsigned int 
  3444 ;;  i               1    2[BANK0 ] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3449 ;; Tracked objects:
  3450 ;;		On entry : 300/0
  3451 ;;		On exit  : B00/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1
  3454 ;;      Params:         2       0       0
  3455 ;;      Locals:         0       3       0
  3456 ;;      Temps:          2       0       0
  3457 ;;      Totals:         4       3       0
  3458 ;;Total ram usage:        7 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    2
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_DisplayPro
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _DisplayIcon
  3470  0559                     _DisplayIcon:	
  3471  0559                     l6371:	
  3472                           ;incstack = 0
  3473                           ; Regs used in _DisplayIcon: [wreg-fsr0h+status,2+status,0+pclath]
  3474                           
  3475                           
  3476                           ;LED.c: 127: unsigned int Mask=0x01;
  3477  0559  01CA               	clrf	DisplayIcon@Mask
  3478  055A  0ACA               	incf	DisplayIcon@Mask,f
  3479  055B  01CB               	clrf	DisplayIcon@Mask+1
  3480                           
  3481                           ;LED.c: 129: for(i=0;i<16;i++)
  3482  055C  01CC               	clrf	DisplayIcon@i
  3483  055D                     l6379:	
  3484                           
  3485                           ;LED.c: 130: {
  3486                           ;LED.c: 131: if(index&Mask)
  3487  055D  084A               	movf	DisplayIcon@Mask,w
  3488  055E  0575               	andwf	DisplayIcon@index,w
  3489  055F  00F7               	movwf	??_DisplayIcon
  3490  0560  084B               	movf	DisplayIcon@Mask+1,w
  3491  0561  0576               	andwf	DisplayIcon@index+1,w
  3492  0562  00F8               	movwf	??_DisplayIcon+1
  3493  0563  0477               	iorwf	??_DisplayIcon,w
  3494                           
  3495                           ;LED.c: 132: {
  3496                           ;LED.c: 133: LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
  3497  0564  3001               	movlw	1
  3498  0565  00F7               	movwf	??_DisplayIcon
  3499  0566  1903               	btfsc	3,2
  3500  0567  2D70               	goto	L12
  3501  0568  2581               	fcall	PL8	;call to abstracted procedure
  3502  0569  258E               	fcall	PL34	;call to abstracted procedure
  3503  056A  2700               	fcall	stringdir
  3504  056B  3E64               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3505  056C  0084               	movwf	4
  3506  056D  0878               	movf	??_DisplayIcon+1,w
  3507  056E  0480               	iorwf	0,f
  3508                           
  3509                           ;LED.c: 134: }
  3510  056F  2D78               	goto	l6385
  3511  0570                     L12:	
  3512                           ;LED.c: 135: else
  3513                           ;LED.c: 136: {
  3514                           ;LED.c: 137: LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
  3515                           
  3516  0570  2581               	fcall	PL8	;call to abstracted procedure
  3517  0571  3AFF               	xorlw	255
  3518  0572  258E               	fcall	PL34	;call to abstracted procedure
  3519  0573  2700               	fcall	stringdir
  3520  0574  3E64               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3521  0575  0084               	movwf	4
  3522  0576  0878               	movf	??_DisplayIcon+1,w
  3523  0577  0580               	andwf	0,f
  3524  0578                     l6385:	
  3525  0578  3010               	movlw	16
  3526                           
  3527                           ;LED.c: 138: }
  3528                           ;LED.c: 140: Mask<<=1;
  3529  0579  1003               	clrc
  3530  057A  0DCA               	rlf	DisplayIcon@Mask,f
  3531  057B  0DCB               	rlf	DisplayIcon@Mask+1,f
  3532  057C  0ACC               	incf	DisplayIcon@i,f
  3533  057D  024C               	subwf	DisplayIcon@i,w
  3534  057E  1803               	btfsc	3,0
  3535  057F  0008               	return
  3536  0580  2D5D               	goto	l6379
  3537  0581                     __end_of_DisplayIcon:	
  3538  0581                     PL8:	
  3539  0581  084C               	movf	DisplayIcon@i,w
  3540  0582  3EA0               	addlw	(low (_LEDSeg2| 0))& (0+255)
  3541  0583  0084               	movwf	4
  3542  0584  1383               	bcf	3,7	;select IRP bank1
  3543  0585  0A00               	incf	0,w
  3544  0586  2D89               	goto	u3824
  3545  0587                     u3825:	
  3546  0587  1003               	clrc
  3547  0588  0DF7               	rlf	??_DisplayIcon,f
  3548  0589                     u3824:	
  3549  0589  3EFF               	addlw	-1
  3550  058A  1D03               	skipz
  3551  058B  2D87               	goto	u3825
  3552  058C  0877               	movf	??_DisplayIcon,w
  3553  058D  0008               	return
  3554  058E                     __end_ofPL8:	
  3555  058E                     PL34:	
  3556  058E  00F8               	movwf	??_DisplayIcon+1
  3557  058F  084C               	movf	DisplayIcon@i,w
  3558  0590  3E01               	addlw	low ((_LEDSeg1-__stringbase)| (0+32768))
  3559  0591  0084               	movwf	4
  3560  0592  0008               	return
  3561  0593                     __end_ofPL34:	
  3562                           
  3563                           	psect	text19
  3564  0481                     __ptext19:	
  3565 ;; *************** function _ADCPro *****************
  3566 ;; Defined at:
  3567 ;;		line 10 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;		None
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;		None
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3576 ;; Tracked objects:
  3577 ;;		On entry : 300/0
  3578 ;;		On exit  : 300/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMMON   BANK0   BANK1
  3581 ;;      Params:         0       0       0
  3582 ;;      Locals:         0       0       0
  3583 ;;      Temps:          0       0       0
  3584 ;;      Totals:         0       0       0
  3585 ;;Total ram usage:        0 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    4
  3588 ;; This function calls:
  3589 ;;		_ADCRead
  3590 ;; This function is called by:
  3591 ;;		_Apply
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _ADCPro
  3597  0481                     _ADCPro:	
  3598                           
  3599                           ;ADC.c: 12: switch (ADCState)
  3600                           
  3601                           ;incstack = 0
  3602                           ; Regs used in _ADCPro: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3603  0481  2C91               	goto	l6547
  3604  0482                     l6539:	
  3605                           
  3606                           ;ADC.c: 15: ADCRead(0b00001111,ADCVal);
  3607  0482  3044               	movlw	(low (_ADCVal| 0))& (0+255)
  3608  0483  00DF               	movwf	ADCRead@Val
  3609  0484  300F               	movlw	15
  3610  0485  21E9               	fcall	_ADCRead
  3611                           
  3612                           ;ADC.c: 16: break;
  3613  0486  2C99               	goto	l571
  3614  0487                     l6541:	
  3615                           
  3616                           ;ADC.c: 19: ADCRead(0b00000010,ADCVal+1);
  3617  0487  3046               	movlw	(low ((_ADCVal| 0+2)))& (0+255)
  3618  0488  00DF               	movwf	ADCRead@Val
  3619  0489  3002               	movlw	2
  3620  048A  21E9               	fcall	_ADCRead
  3621                           
  3622                           ;ADC.c: 20: break;
  3623  048B  2C99               	goto	l571
  3624  048C                     l6543:	
  3625                           
  3626                           ;ADC.c: 23: ADCRead(0b00000001,ADCVal+2);
  3627  048C  3048               	movlw	(low ((_ADCVal| 0+4)))& (0+255)
  3628  048D  00DF               	movwf	ADCRead@Val
  3629  048E  3001               	movlw	1
  3630  048F  21E9               	fcall	_ADCRead
  3631                           
  3632                           ;ADC.c: 24: break;
  3633  0490  2C99               	goto	l571
  3634  0491                     l6547:	
  3635                           
  3636                           ; Switch size 1, requested type "space"
  3637                           ; Number of cases is 3, Range of values is 0 to 2
  3638                           ; switch strategies available:
  3639                           ; Name         Instructions Cycles
  3640                           ; direct_byte            9     6 (fixed)
  3641                           ; simple_byte           10     6 (average)
  3642                           ; jumptable            260     6 (fixed)
  3643                           ;	Chosen strategy is direct_byte
  3644  0491  22B1               	fcall	PL30	;call to abstracted procedure
  3645  0492  1803               	skipnc
  3646  0493  2C99               	goto	l571
  3647  0494  3000               	movlw	high S6995
  3648  0495  008A               	movwf	10
  3649  0496  3001               	movlw	low S6995
  3650  0497  0704               	addwf	4,w
  3651  0498  0082               	movwf	2
  3652  0499                     l571:	
  3653                           
  3654                           ;ADC.c: 26: if(SystemONFlag==0)
  3655  0499  1BF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  3656  049A  2CB0               	goto	l6559
  3657                           
  3658                           ;ADC.c: 27: {
  3659                           ;ADC.c: 28: if(ADCVal[2]<267)
  3660  049B  3001               	movlw	1
  3661  049C  0249               	subwf	_ADCVal+5,w
  3662  049D  300B               	movlw	11
  3663  049E  1903               	skipnz
  3664  049F  0248               	subwf	_ADCVal+4,w
  3665  04A0  1803               	skipnc
  3666  04A1  2CA4               	goto	l6553
  3667                           
  3668                           ;ADC.c: 29: {
  3669                           ;ADC.c: 30: BatPercent=0;
  3670  04A2  01C3               	clrf	_BatPercent
  3671                           
  3672                           ;ADC.c: 31: }
  3673  04A3  2CB0               	goto	l6559
  3674  04A4                     l6553:	
  3675                           
  3676                           ;ADC.c: 32: else if(ADCVal[2]>350)
  3677  04A4  3001               	movlw	1
  3678  04A5  0249               	subwf	_ADCVal+5,w
  3679  04A6  305F               	movlw	95
  3680  04A7  1903               	skipnz
  3681  04A8  0248               	subwf	_ADCVal+4,w
  3682  04A9  1C03               	skipc
  3683  04AA  2CAD               	goto	l6557
  3684                           
  3685                           ;ADC.c: 33: {
  3686                           ;ADC.c: 34: BatPercent=99;
  3687  04AB  3063               	movlw	99
  3688  04AC  2CAF               	goto	L13
  3689  04AD                     l6557:	
  3690                           ;ADC.c: 35: }
  3691                           
  3692                           
  3693                           ;ADC.c: 36: else
  3694                           ;ADC.c: 37: {
  3695                           ;ADC.c: 38: BatPercent=ADCVal[2]-250;
  3696  04AD  0848               	movf	_ADCVal+4,w
  3697  04AE  3E06               	addlw	6
  3698  04AF                     L13:	
  3699  04AF  00C3               	movwf	_BatPercent
  3700  04B0                     l6559:	
  3701                           
  3702                           ;ADC.c: 39: }
  3703                           ;ADC.c: 40: }
  3704                           ;ADC.c: 41: if(ADCVal[2]<250)
  3705  04B0  3000               	movlw	0
  3706  04B1  0249               	subwf	_ADCVal+5,w
  3707  04B2  30FA               	movlw	250
  3708  04B3  1903               	skipnz
  3709  04B4  0248               	subwf	_ADCVal+4,w
  3710  04B5  1803               	skipnc
  3711  04B6  2CB9               	goto	l579
  3712                           
  3713                           ;ADC.c: 42: {
  3714                           ;ADC.c: 43: LowBatFlag=1;
  3715  04B7  1771               	bsf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  3716                           
  3717                           ;ADC.c: 44: }
  3718  04B8  2CBA               	goto	l6563
  3719  04B9                     l579:	
  3720                           
  3721                           ;ADC.c: 45: else
  3722                           ;ADC.c: 46: {
  3723                           ;ADC.c: 47: LowBatFlag=0;
  3724  04B9  1371               	bcf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  3725  04BA                     l6563:	
  3726                           
  3727                           ;ADC.c: 48: }
  3728                           ;ADC.c: 49: if(ADCVal[1]>58)
  3729  04BA  3000               	movlw	0
  3730  04BB  0247               	subwf	_ADCVal+3,w
  3731  04BC  303B               	movlw	59
  3732  04BD  1903               	skipnz
  3733  04BE  0246               	subwf	_ADCVal+2,w
  3734  04BF  1C03               	skipc
  3735  04C0  2CCA               	goto	l6573
  3736  04C1  30C8               	movlw	200
  3737                           
  3738                           ;ADC.c: 50: {
  3739                           ;ADC.c: 51: CurrentCnt++;
  3740  04C2  0AC0               	incf	_CurrentCnt,f
  3741                           
  3742                           ;ADC.c: 52: if(CurrentCnt>=200)
  3743  04C3  0240               	subwf	_CurrentCnt,w
  3744  04C4  1C03               	skipc
  3745  04C5  0008               	return
  3746                           
  3747                           ;ADC.c: 53: {
  3748                           ;ADC.c: 54: CurrentCnt=200;
  3749  04C6  30C8               	movlw	200
  3750  04C7  00C0               	movwf	_CurrentCnt
  3751                           
  3752                           ;ADC.c: 55: IovFlag=1;
  3753  04C8  16F1               	bsf	_IovFlag/(0+8),_IovFlag& (0+7)
  3754  04C9  0008               	return
  3755  04CA                     l6573:	
  3756                           
  3757                           ;ADC.c: 58: else
  3758                           ;ADC.c: 59: {
  3759                           ;ADC.c: 60: CurrentCnt=0;
  3760  04CA  01C0               	clrf	_CurrentCnt
  3761                           
  3762                           ;ADC.c: 61: IovFlag=0;
  3763  04CB  12F1               	bcf	_IovFlag/(0+8),_IovFlag& (0+7)
  3764  04CC  0008               	return
  3765  04CD                     __end_of_ADCPro:	
  3766                           
  3767                           	psect	swtext1
  3768  0001                     __pswtext1:	
  3769  0001                     S6995:	
  3770  0001  2C82               	ljmp	l6539
  3771  0002  2C87               	ljmp	l6541
  3772  0003  2C8C               	ljmp	l6543
  3773                           
  3774                           	psect	text20
  3775  01E9                     __ptext20:	
  3776 ;; *************** function _ADCRead *****************
  3777 ;; Defined at:
  3778 ;;		line 175 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  ch              1    wreg     unsigned char 
  3781 ;;  Val             1   21[BANK0 ] PTR unsigned int 
  3782 ;;		 -> ADCVal(6), 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  ch              1    0[BANK1 ] unsigned char 
  3785 ;;  ad_temp         2    5[BANK1 ] unsigned int 
  3786 ;;  AD_L            2    3[BANK1 ] unsigned int 
  3787 ;;  AD_H            2    1[BANK1 ] unsigned int 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  1    wreg      void 
  3790 ;; Registers used:
  3791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 300/0
  3794 ;;		On exit  : 300/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMMON   BANK0   BANK1
  3797 ;;      Params:         0       1       0
  3798 ;;      Locals:         0       0       7
  3799 ;;      Temps:          0       4       0
  3800 ;;      Totals:         0       5       7
  3801 ;;Total ram usage:       12 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    3
  3804 ;; This function calls:
  3805 ;;		_ADSample
  3806 ;;		___lldiv
  3807 ;;		___lmul
  3808 ;; This function is called by:
  3809 ;;		_ADCPro
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813                           
  3814                           ;psect for function _ADCRead
  3815  01E9                     _ADCRead:	
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3819                           ;ADCRead@ch stored from wreg
  3820  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  3821  01EA  00D3               	movwf	ADCRead@ch^(0+128)
  3822                           
  3823                           ;ADC.c: 177: unsigned int ad_temp,AD_H,AD_L;
  3824                           ;ADC.c: 179: if(ADSample(ch))
  3825  01EB  26DD               	fcall	_ADSample
  3826  01EC  3A00               	xorlw	0
  3827  01ED  1903               	skipnz
  3828  01EE  0008               	return
  3829                           
  3830                           ;ADC.c: 180: {
  3831                           ;ADC.c: 181: AD_H=ADRESH;
  3832  01EF  081E               	movf	30,w	;volatile
  3833  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  3834  01F1  00D4               	movwf	ADCRead@AD_H^(0+128)
  3835  01F2  01D5               	clrf	(ADCRead@AD_H+1)^(0+128)
  3836                           
  3837                           ;ADC.c: 182: AD_L=ADRESL;
  3838  01F3  081E               	movf	30,w	;volatile
  3839  01F4  00D6               	movwf	ADCRead@AD_L^(0+128)
  3840  01F5  01D7               	clrf	(ADCRead@AD_L+1)^(0+128)
  3841                           
  3842                           ;ADC.c: 183: ad_temp=(AD_H<<4)|(AD_L>>4);
  3843  01F6  0855               	movf	(ADCRead@AD_H+1)^(0+128),w
  3844  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  3845  01F8  00E1               	movwf	??_ADCRead+1
  3846  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  3847  01FA  0854               	movf	ADCRead@AD_H^(0+128),w
  3848  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  3849  01FC  00E0               	movwf	??_ADCRead
  3850  01FD  30F0               	movlw	240
  3851  01FE  0EE0               	swapf	??_ADCRead,f
  3852  01FF  0EE1               	swapf	??_ADCRead+1,f
  3853  0200  05E1               	andwf	??_ADCRead+1,f
  3854  0201  0860               	movf	??_ADCRead,w
  3855  0202  390F               	andlw	15
  3856  0203  04E1               	iorwf	??_ADCRead+1,f
  3857  0204  30F0               	movlw	240
  3858  0205  05E0               	andwf	??_ADCRead,f
  3859  0206  0860               	movf	??_ADCRead,w
  3860  0207  1683               	bsf	3,5	;RP0=1, select bank1
  3861  0208  00D8               	movwf	ADCRead@ad_temp^(0+128)
  3862  0209  1283               	bcf	3,5	;RP0=0, select bank0
  3863  020A  0861               	movf	??_ADCRead+1,w
  3864  020B  1683               	bsf	3,5	;RP0=1, select bank1
  3865  020C  00D9               	movwf	(ADCRead@ad_temp+1)^(0+128)
  3866  020D  0857               	movf	(ADCRead@AD_L+1)^(0+128),w
  3867  020E  1283               	bcf	3,5	;RP0=0, select bank0
  3868  020F  00E1               	movwf	??_ADCRead+1
  3869  0210  1683               	bsf	3,5	;RP0=1, select bank1
  3870  0211  0856               	movf	ADCRead@AD_L^(0+128),w
  3871  0212  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0213  00E0               	movwf	??_ADCRead
  3873  0214  3004               	movlw	4
  3874  0215                     u3775:	
  3875  0215  1003               	clrc
  3876  0216  0CE1               	rrf	??_ADCRead+1,f
  3877  0217  0CE0               	rrf	??_ADCRead,f
  3878  0218  3EFF               	addlw	-1
  3879  0219  1D03               	skipz
  3880  021A  2A15               	goto	u3775
  3881  021B  0860               	movf	??_ADCRead,w
  3882  021C  1683               	bsf	3,5	;RP0=1, select bank1
  3883  021D  04D8               	iorwf	ADCRead@ad_temp^(0+128),f
  3884  021E  1283               	bcf	3,5	;RP0=0, select bank0
  3885  021F  0861               	movf	??_ADCRead+1,w
  3886  0220  1683               	bsf	3,5	;RP0=1, select bank1
  3887  0221  04D9               	iorwf	(ADCRead@ad_temp+1)^(0+128),f
  3888                           
  3889                           ;ADC.c: 184: ADsum += ad_temp;
  3890  0222  0858               	movf	ADCRead@ad_temp^(0+128),w
  3891  0223  1283               	bcf	3,5	;RP0=0, select bank0
  3892  0224  00E0               	movwf	??_ADCRead
  3893  0225  1683               	bsf	3,5	;RP0=1, select bank1
  3894  0226  0859               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3895  0227  1283               	bcf	3,5	;RP0=0, select bank0
  3896  0228  00E1               	movwf	??_ADCRead+1
  3897  0229  01E2               	clrf	??_ADCRead+2
  3898  022A  01E3               	clrf	??_ADCRead+3
  3899  022B  0860               	movf	??_ADCRead,w
  3900  022C  07A0               	addwf	_ADsum,f
  3901  022D  0861               	movf	??_ADCRead+1,w
  3902  022E  1103               	clrz
  3903  022F  1803               	skipnc
  3904  0230  3E01               	addlw	1
  3905  0231  1D03               	btfss	3,2
  3906  0232  07A1               	addwf	_ADsum+1,f
  3907  0233  0862               	movf	??_ADCRead+2,w
  3908  0234  1103               	clrz
  3909  0235  1803               	skipnc
  3910  0236  3E01               	addlw	1
  3911  0237  1D03               	btfss	3,2
  3912  0238  07A2               	addwf	_ADsum+2,f
  3913  0239  0863               	movf	??_ADCRead+3,w
  3914  023A  1103               	clrz
  3915  023B  1803               	skipnc
  3916  023C  3E01               	addlw	1
  3917  023D  1D03               	btfss	3,2
  3918  023E  07A3               	addwf	_ADsum+3,f
  3919  023F  300A               	movlw	10
  3920                           
  3921                           ;ADC.c: 185: ADcnt++;
  3922  0240  0AC1               	incf	_ADcnt,f
  3923                           
  3924                           ;ADC.c: 186: if(ADcnt >= 10)
  3925  0241  0241               	subwf	_ADcnt,w
  3926  0242  1C03               	skipc
  3927  0243  0008               	return
  3928  0244  300A               	movlw	10
  3929                           
  3930                           ;ADC.c: 187: {
  3931                           ;ADC.c: 188: ADcnt = 0;
  3932  0245  01C1               	clrf	_ADcnt
  3933                           
  3934                           ;ADC.c: 189: ADsum /=10;
  3935  0246  00D2               	movwf	___lldiv@divisor
  3936  0247  01D3               	clrf	___lldiv@divisor+1
  3937  0248  01D4               	clrf	___lldiv@divisor+2
  3938  0249  01D5               	clrf	___lldiv@divisor+3
  3939  024A  0823               	movf	_ADsum+3,w
  3940  024B  00D9               	movwf	___lldiv@dividend+3
  3941  024C  0822               	movf	_ADsum+2,w
  3942  024D  00D8               	movwf	___lldiv@dividend+2
  3943  024E  0821               	movf	_ADsum+1,w
  3944  024F  00D7               	movwf	___lldiv@dividend+1
  3945  0250  0820               	movf	_ADsum,w
  3946  0251  00D6               	movwf	___lldiv@dividend
  3947  0252  24CD               	fcall	___lldiv
  3948  0253  0855               	movf	?___lldiv+3,w
  3949  0254  00A3               	movwf	_ADsum+3
  3950  0255  0854               	movf	?___lldiv+2,w
  3951  0256  00A2               	movwf	_ADsum+2
  3952  0257  0853               	movf	?___lldiv+1,w
  3953  0258  00A1               	movwf	_ADsum+1
  3954  0259  0852               	movf	?___lldiv,w
  3955  025A  00A0               	movwf	_ADsum
  3956                           
  3957                           ;ADC.c: 190: switch (ADCState)
  3958  025B  2A89               	goto	l6357
  3959  025C                     l6349:	
  3960                           
  3961                           ;ADC.c: 193: *Val=ADsum;
  3962  025C  085F               	movf	ADCRead@Val,w
  3963  025D  0084               	movwf	4
  3964  025E  0820               	movf	_ADsum,w
  3965  025F  1383               	bcf	3,7	;select IRP bank0
  3966  0260  0080               	movwf	0
  3967  0261  0A84               	incf	4,f
  3968  0262  0821               	movf	_ADsum+1,w
  3969  0263  2A87               	goto	L15
  3970  0264                     l6351:	
  3971                           ;ADC.c: 194: break;
  3972                           
  3973                           
  3974                           ;ADC.c: 197: *Val=ADsum*1000/(*(Val-1));
  3975  0264  085F               	movf	ADCRead@Val,w
  3976  0265  3EFE               	addlw	-2
  3977  0266  229B               	fcall	PL4	;call to abstracted procedure
  3978  0267  3003               	movlw	3
  3979  0268  01D1               	clrf	___lmul@multiplicand+3
  3980  0269  01D0               	clrf	___lmul@multiplicand+2
  3981  026A  00CF               	movwf	___lmul@multiplicand+1
  3982  026B  30E8               	movlw	232
  3983  026C  00CE               	movwf	___lmul@multiplicand
  3984  026D  2A76               	goto	L16
  3985  026E                     l6353:	
  3986                           ;ADC.c: 198: break;
  3987                           
  3988                           
  3989                           ;ADC.c: 201: *Val=ADsum*100/(*(Val-2));
  3990  026E  085F               	movf	ADCRead@Val,w
  3991  026F  3EFC               	addlw	-4
  3992  0270  229B               	fcall	PL4	;call to abstracted procedure
  3993  0271  3064               	movlw	100
  3994  0272  00CE               	movwf	___lmul@multiplicand
  3995  0273  01CF               	clrf	___lmul@multiplicand+1
  3996  0274  01D0               	clrf	___lmul@multiplicand+2
  3997  0275  01D1               	clrf	___lmul@multiplicand+3
  3998  0276                     L16:	
  3999  0276  25C6               	fcall	___lmul
  4000  0277  084D               	movf	?___lmul+3,w
  4001  0278  00D9               	movwf	___lldiv@dividend+3
  4002  0279  084C               	movf	?___lmul+2,w
  4003  027A  00D8               	movwf	___lldiv@dividend+2
  4004  027B  084B               	movf	?___lmul+1,w
  4005  027C  00D7               	movwf	___lldiv@dividend+1
  4006  027D  084A               	movf	?___lmul,w
  4007  027E  00D6               	movwf	___lldiv@dividend
  4008  027F  24CD               	fcall	___lldiv
  4009  0280  085F               	movf	ADCRead@Val,w
  4010  0281  0084               	movwf	4
  4011  0282  0852               	movf	?___lldiv,w
  4012  0283  1383               	bcf	3,7	;select IRP bank0
  4013  0284  0080               	movwf	0
  4014  0285  0A84               	incf	4,f
  4015  0286  0853               	movf	?___lldiv+1,w
  4016  0287                     L15:	
  4017  0287  0080               	movwf	0
  4018                           
  4019                           ;ADC.c: 202: break;
  4020  0288  2A91               	goto	l626
  4021  0289                     l6357:	
  4022                           
  4023                           ; Switch size 1, requested type "space"
  4024                           ; Number of cases is 3, Range of values is 0 to 2
  4025                           ; switch strategies available:
  4026                           ; Name         Instructions Cycles
  4027                           ; direct_byte            9     6 (fixed)
  4028                           ; simple_byte           10     6 (average)
  4029                           ; jumptable            260     6 (fixed)
  4030                           ;	Chosen strategy is direct_byte
  4031  0289  22B1               	fcall	PL30	;call to abstracted procedure
  4032  028A  1803               	skipnc
  4033  028B  2A91               	goto	l626
  4034  028C  3006               	movlw	high S6997
  4035  028D  008A               	movwf	10
  4036  028E  30FB               	movlw	low S6997
  4037  028F  0704               	addwf	4,w
  4038  0290  0082               	movwf	2
  4039  0291                     l626:	
  4040  0291  3003               	movlw	3
  4041                           
  4042                           ;ADC.c: 204: ADsum = 0;
  4043  0292  01A0               	clrf	_ADsum
  4044  0293  01A1               	clrf	_ADsum+1
  4045  0294  01A2               	clrf	_ADsum+2
  4046  0295  01A3               	clrf	_ADsum+3
  4047                           
  4048                           ;ADC.c: 205: ADCState++;
  4049  0296  0AC2               	incf	_ADCState,f
  4050                           
  4051                           ;ADC.c: 206: if(ADCState>=3)
  4052  0297  0242               	subwf	_ADCState,w
  4053  0298  1803               	btfsc	3,0
  4054                           
  4055                           ;ADC.c: 207: {
  4056                           ;ADC.c: 208: ADCState=0;
  4057  0299  01C2               	clrf	_ADCState
  4058  029A  0008               	return
  4059  029B                     __end_of_ADCRead:	
  4060  029B                     PL4:	
  4061  029B  0084               	movwf	4
  4062  029C  1383               	bcf	3,7	;select IRP bank0
  4063  029D  0800               	movf	0,w
  4064  029E  00E0               	movwf	??_ADCRead
  4065  029F  0A84               	incf	4,f
  4066  02A0  0800               	movf	0,w
  4067  02A1  00E1               	movwf	??_ADCRead+1
  4068  02A2  0860               	movf	??_ADCRead,w
  4069  02A3  00D2               	movwf	___lldiv@divisor
  4070  02A4  0861               	movf	??_ADCRead+1,w
  4071  02A5  00D3               	movwf	___lldiv@divisor+1
  4072  02A6  01D4               	clrf	___lldiv@divisor+2
  4073  02A7  01D5               	clrf	___lldiv@divisor+3
  4074  02A8  0823               	movf	_ADsum+3,w
  4075  02A9  00CD               	movwf	___lmul@multiplier+3
  4076  02AA  0822               	movf	_ADsum+2,w
  4077  02AB  00CC               	movwf	___lmul@multiplier+2
  4078  02AC  0821               	movf	_ADsum+1,w
  4079  02AD  00CB               	movwf	___lmul@multiplier+1
  4080  02AE  0820               	movf	_ADsum,w
  4081  02AF  00CA               	movwf	___lmul@multiplier
  4082  02B0  0008               	return
  4083  02B1                     __end_ofPL4:	
  4084  02B1                     PL30:	
  4085  02B1  0842               	movf	_ADCState,w
  4086  02B2  0084               	movwf	4
  4087  02B3  3003               	movlw	3
  4088  02B4  0204               	subwf	4,w
  4089  02B5  0008               	return
  4090  02B6                     __end_ofPL30:	
  4091                           
  4092                           	psect	swtext2
  4093  06FB                     __pswtext2:	
  4094  06FB                     S6997:	
  4095  06FB  2A5C               	ljmp	l6349
  4096  06FC  2A64               	ljmp	l6351
  4097  06FD  2A6E               	ljmp	l6353
  4098                           
  4099                           	psect	text21
  4100  05C6                     __ptext21:	
  4101 ;; *************** function ___lmul *****************
  4102 ;; Defined at:
  4103 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4106 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;  product         4    3[COMMON] unsigned long 
  4109 ;; Return value:  Size  Location     Type
  4110 ;;                  4    0[BANK0 ] unsigned long 
  4111 ;; Registers used:
  4112 ;;		wreg, status,2, status,0
  4113 ;; Tracked objects:
  4114 ;;		On entry : B00/0
  4115 ;;		On exit  : B00/0
  4116 ;;		Unchanged: 800/0
  4117 ;; Data sizes:     COMMON   BANK0   BANK1
  4118 ;;      Params:         0       8       0
  4119 ;;      Locals:         4       0       0
  4120 ;;      Temps:          0       0       0
  4121 ;;      Totals:         4       8       0
  4122 ;;Total ram usage:       12 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    2
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_ADCRead
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           
  4133                           ;psect for function ___lmul
  4134  05C6                     ___lmul:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4138  05C6  01F5               	clrf	___lmul@product
  4139  05C7  01F6               	clrf	___lmul@product+1
  4140  05C8  01F7               	clrf	___lmul@product+2
  4141  05C9  01F8               	clrf	___lmul@product+3
  4142  05CA                     l4236:	
  4143  05CA  1C4A               	btfss	___lmul@multiplier,0
  4144  05CB  2DE0               	goto	l6301
  4145  05CC  084E               	movf	___lmul@multiplicand,w
  4146  05CD  07F5               	addwf	___lmul@product,f
  4147  05CE  084F               	movf	___lmul@multiplicand+1,w
  4148  05CF  1103               	clrz
  4149  05D0  1803               	skipnc
  4150  05D1  3E01               	addlw	1
  4151  05D2  1D03               	btfss	3,2
  4152  05D3  07F6               	addwf	___lmul@product+1,f
  4153  05D4  0850               	movf	___lmul@multiplicand+2,w
  4154  05D5  1103               	clrz
  4155  05D6  1803               	skipnc
  4156  05D7  3E01               	addlw	1
  4157  05D8  1D03               	btfss	3,2
  4158  05D9  07F7               	addwf	___lmul@product+2,f
  4159  05DA  0851               	movf	___lmul@multiplicand+3,w
  4160  05DB  1103               	clrz
  4161  05DC  1803               	skipnc
  4162  05DD  3E01               	addlw	1
  4163  05DE  1D03               	btfss	3,2
  4164  05DF  07F8               	addwf	___lmul@product+3,f
  4165  05E0                     l6301:	
  4166  05E0  1003               	clrc
  4167  05E1  0DCE               	rlf	___lmul@multiplicand,f
  4168  05E2  0DCF               	rlf	___lmul@multiplicand+1,f
  4169  05E3  0DD0               	rlf	___lmul@multiplicand+2,f
  4170  05E4  0DD1               	rlf	___lmul@multiplicand+3,f
  4171  05E5  1003               	clrc
  4172  05E6  0CCD               	rrf	___lmul@multiplier+3,f
  4173  05E7  0CCC               	rrf	___lmul@multiplier+2,f
  4174  05E8  0CCB               	rrf	___lmul@multiplier+1,f
  4175  05E9  0CCA               	rrf	___lmul@multiplier,f
  4176  05EA  084D               	movf	___lmul@multiplier+3,w
  4177  05EB  044C               	iorwf	___lmul@multiplier+2,w
  4178  05EC  044B               	iorwf	___lmul@multiplier+1,w
  4179  05ED  044A               	iorwf	___lmul@multiplier,w
  4180  05EE  1D03               	skipz
  4181  05EF  2DCA               	goto	l4236
  4182  05F0  0878               	movf	___lmul@product+3,w
  4183  05F1  00CD               	movwf	?___lmul+3
  4184  05F2  0877               	movf	___lmul@product+2,w
  4185  05F3  00CC               	movwf	?___lmul+2
  4186  05F4  0876               	movf	___lmul@product+1,w
  4187  05F5  00CB               	movwf	?___lmul+1
  4188  05F6  0875               	movf	___lmul@product,w
  4189  05F7  00CA               	movwf	?___lmul
  4190  05F8  0008               	return
  4191  05F9                     __end_of___lmul:	
  4192                           
  4193                           	psect	text22
  4194  04CD                     __ptext22:	
  4195 ;; *************** function ___lldiv *****************
  4196 ;; Defined at:
  4197 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  divisor         4    8[BANK0 ] unsigned long 
  4200 ;;  dividend        4   12[BANK0 ] unsigned long 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  quotient        4   16[BANK0 ] unsigned long 
  4203 ;;  counter         1   20[BANK0 ] unsigned char 
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  4    8[BANK0 ] unsigned long 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2, status,0
  4208 ;; Tracked objects:
  4209 ;;		On entry : 300/0
  4210 ;;		On exit  : 300/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMMON   BANK0   BANK1
  4213 ;;      Params:         0       8       0
  4214 ;;      Locals:         0       5       0
  4215 ;;      Temps:          0       0       0
  4216 ;;      Totals:         0      13       0
  4217 ;;Total ram usage:       13 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    2
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_ADCRead
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function ___lldiv
  4229  04CD                     ___lldiv:	
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4233  04CD  01DA               	clrf	___lldiv@quotient
  4234  04CE  01DB               	clrf	___lldiv@quotient+1
  4235  04CF  01DC               	clrf	___lldiv@quotient+2
  4236  04D0  01DD               	clrf	___lldiv@quotient+3
  4237  04D1  0855               	movf	___lldiv@divisor+3,w
  4238  04D2  0454               	iorwf	___lldiv@divisor+2,w
  4239  04D3  0453               	iorwf	___lldiv@divisor+1,w
  4240  04D4  0452               	iorwf	___lldiv@divisor,w
  4241  04D5  1903               	skipnz
  4242  04D6  2D0C               	goto	l6331
  4243  04D7  01DE               	clrf	___lldiv@counter
  4244  04D8                     L17:	
  4245  04D8  0ADE               	incf	___lldiv@counter,f
  4246  04D9  1BD5               	btfsc	___lldiv@divisor+3,7
  4247  04DA  2CE1               	goto	l6319
  4248  04DB  1003               	clrc
  4249  04DC  0DD2               	rlf	___lldiv@divisor,f
  4250  04DD  0DD3               	rlf	___lldiv@divisor+1,f
  4251  04DE  0DD4               	rlf	___lldiv@divisor+2,f
  4252  04DF  0DD5               	rlf	___lldiv@divisor+3,f
  4253  04E0  2CD8               	goto	L17
  4254  04E1                     l6319:	
  4255  04E1  1003               	clrc
  4256  04E2  0DDA               	rlf	___lldiv@quotient,f
  4257  04E3  0DDB               	rlf	___lldiv@quotient+1,f
  4258  04E4  0DDC               	rlf	___lldiv@quotient+2,f
  4259  04E5  0DDD               	rlf	___lldiv@quotient+3,f
  4260  04E6  0855               	movf	___lldiv@divisor+3,w
  4261  04E7  0259               	subwf	___lldiv@dividend+3,w
  4262  04E8  1D03               	skipz
  4263  04E9  2CF4               	goto	u3745
  4264  04EA  0854               	movf	___lldiv@divisor+2,w
  4265  04EB  0258               	subwf	___lldiv@dividend+2,w
  4266  04EC  1D03               	skipz
  4267  04ED  2CF4               	goto	u3745
  4268  04EE  0853               	movf	___lldiv@divisor+1,w
  4269  04EF  0257               	subwf	___lldiv@dividend+1,w
  4270  04F0  1D03               	skipz
  4271  04F1  2CF4               	goto	u3745
  4272  04F2  0852               	movf	___lldiv@divisor,w
  4273  04F3  0256               	subwf	___lldiv@dividend,w
  4274  04F4                     u3745:	
  4275  04F4  1C03               	skipc
  4276  04F5  2D06               	goto	L18
  4277  04F6  0852               	movf	___lldiv@divisor,w
  4278  04F7  02D6               	subwf	___lldiv@dividend,f
  4279  04F8  0853               	movf	___lldiv@divisor+1,w
  4280  04F9  1C03               	skipc
  4281  04FA  0F53               	incfsz	___lldiv@divisor+1,w
  4282  04FB  02D7               	subwf	___lldiv@dividend+1,f
  4283  04FC  0854               	movf	___lldiv@divisor+2,w
  4284  04FD  1C03               	skipc
  4285  04FE  0F54               	incfsz	___lldiv@divisor+2,w
  4286  04FF  02D8               	subwf	___lldiv@dividend+2,f
  4287  0500  0855               	movf	___lldiv@divisor+3,w
  4288  0501  1C03               	skipc
  4289  0502  0F55               	incfsz	___lldiv@divisor+3,w
  4290  0503  02D9               	subwf	___lldiv@dividend+3,f
  4291  0504  145A               	bsf	___lldiv@quotient,0
  4292  0505  1003               	clrc
  4293  0506                     L18:	
  4294  0506  0CD5               	rrf	___lldiv@divisor+3,f
  4295  0507  0CD4               	rrf	___lldiv@divisor+2,f
  4296  0508  0CD3               	rrf	___lldiv@divisor+1,f
  4297  0509  0CD2               	rrf	___lldiv@divisor,f
  4298  050A  0BDE               	decfsz	___lldiv@counter,f
  4299  050B  2CE1               	goto	l6319
  4300  050C                     l6331:	
  4301  050C  085D               	movf	___lldiv@quotient+3,w
  4302  050D  00D5               	movwf	?___lldiv+3
  4303  050E  085C               	movf	___lldiv@quotient+2,w
  4304  050F  00D4               	movwf	?___lldiv+2
  4305  0510  085B               	movf	___lldiv@quotient+1,w
  4306  0511  00D3               	movwf	?___lldiv+1
  4307  0512  085A               	movf	___lldiv@quotient,w
  4308  0513  00D2               	movwf	?___lldiv
  4309  0514  0008               	return
  4310  0515                     __end_of___lldiv:	
  4311                           
  4312                           	psect	text23
  4313  06DD                     __ptext23:	
  4314 ;; *************** function _ADSample *****************
  4315 ;; Defined at:
  4316 ;;		line 221 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  ch              1    wreg     unsigned char 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;  ch              1    4[COMMON] unsigned char 
  4321 ;;  i               1    5[COMMON] volatile unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      unsigned char 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 300/100
  4328 ;;		On exit  : 300/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMMON   BANK0   BANK1
  4331 ;;      Params:         0       0       0
  4332 ;;      Locals:         2       0       0
  4333 ;;      Temps:          1       0       0
  4334 ;;      Totals:         3       0       0
  4335 ;;Total ram usage:        3 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    2
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_ADCRead
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           
  4346                           ;psect for function _ADSample
  4347  06DD                     _ADSample:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4351                           ;ADSample@ch stored from wreg
  4352  06DD  00F6               	movwf	ADSample@ch
  4353                           
  4354                           ;ADC.c: 223: ADCON1 = 0x00;
  4355  06DE  019F               	clrf	31	;volatile
  4356                           
  4357                           ;ADC.c: 224: ADCON0 = 0X41 | ( ch << 2);
  4358  06DF  00F5               	movwf	??_ADSample
  4359  06E0  3001               	movlw	1
  4360  06E1  1003               	clrc
  4361  06E2                     L19:	
  4362  06E2  0DF5               	rlf	??_ADSample,f
  4363  06E3  3EFF               	addlw	-1
  4364  06E4  1003               	clrc
  4365  06E5  1D03               	skipz
  4366  06E6  2EE2               	goto	L19
  4367  06E7  0D75               	rlf	??_ADSample,w
  4368  06E8  3841               	iorlw	65
  4369  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  4370  06EA  009F               	movwf	31	;volatile
  4371  06EB  0000               	nop	;# 
  4372  06EC  0000               	nop	;# 
  4373                           
  4374                           ;ADC.c: 227: GODONE = 1;
  4375  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  4376  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  4377  06EF  149F               	bsf	31,1	;volatile
  4378                           
  4379                           ;ADC.c: 228: volatile unsigned char i = 0;
  4380  06F0  01F7               	clrf	ADSample@i	;volatile
  4381  06F1                     l633:	
  4382                           ;ADC.c: 229: while(GODONE)
  4383                           
  4384  06F1  1C9F               	btfss	31,1	;volatile
  4385  06F2  3401               	retlw	1
  4386                           
  4387                           ;ADC.c: 230: {
  4388                           ;ADC.c: 231: if(0 == (--i))
  4389  06F3  0BF7               	decfsz	ADSample@i,f	;volatile
  4390  06F4  2EF1               	goto	l633
  4391                           
  4392                           ;ADC.c: 232: return 0;
  4393  06F5  3400               	retlw	0
  4394  06F6                     __end_of_ADSample:	
  4395                           ;ADC.c: 233: }
  4396                           ;ADC.c: 234: return 1;
  4397                           
  4398                           
  4399                           	psect	text24
  4400  06A9                     __ptext24:	
  4401 ;; *************** function _Isr_Timer *****************
  4402 ;; Defined at:
  4403 ;;		line 8 in file "C:\Users\Administrator\Desktop\project\K13-01\code\even.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;		None
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;		None
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  1    wreg      void 
  4410 ;; Registers used:
  4411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 300/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMMON   BANK0   BANK1
  4417 ;;      Params:         0       0       0
  4418 ;;      Locals:         0       0       0
  4419 ;;      Temps:          3       0       0
  4420 ;;      Totals:         3       0       0
  4421 ;;Total ram usage:        3 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    1
  4424 ;; This function calls:
  4425 ;;		_LEDScan
  4426 ;; This function is called by:
  4427 ;;		Interrupt level 1
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           
  4432                           ;psect for function _Isr_Timer
  4433  06A9                     _Isr_Timer:	
  4434                           
  4435                           ;even.c: 10: TMR2IF = 0;
  4436  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  4437  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  4438  06AB  108C               	bcf	12,1	;volatile
  4439  06AC  300A               	movlw	10
  4440                           
  4441                           ;even.c: 11: cnt2ms++;
  4442  06AD  0ABE               	incf	_cnt2ms,f
  4443                           
  4444                           ;even.c: 12: cnt10ms++;
  4445  06AE  0ABD               	incf	_cnt10ms,f
  4446                           
  4447                           ;even.c: 13: if(cnt2ms>=10)
  4448  06AF  023E               	subwf	_cnt2ms,w
  4449  06B0  1C03               	skipc
  4450  06B1  2EB5               	goto	i1l6211
  4451                           
  4452                           ;even.c: 14: {
  4453                           ;even.c: 15: LEDScan();
  4454  06B2  22B6               	fcall	_LEDScan
  4455                           
  4456                           ;even.c: 16: cnt2ms=0;
  4457  06B3  01BE               	clrf	_cnt2ms
  4458                           
  4459                           ;even.c: 17: time2ms=1;
  4460  06B4  1571               	bsf	_time2ms/(0+8),_time2ms& (0+7)
  4461  06B5                     i1l6211:	
  4462                           
  4463                           ;even.c: 18: }
  4464                           ;even.c: 19: if(cnt10ms>=50)
  4465  06B5  3032               	movlw	50
  4466  06B6  023D               	subwf	_cnt10ms,w
  4467  06B7  1C03               	skipc
  4468  06B8  2EBB               	goto	i1l1190
  4469                           
  4470                           ;even.c: 20: {
  4471                           ;even.c: 21: cnt10ms=0;
  4472  06B9  01BD               	clrf	_cnt10ms
  4473                           
  4474                           ;even.c: 22: time10ms=1;
  4475  06BA  14F1               	bsf	_time10ms/(0+8),_time10ms& (0+7)
  4476  06BB                     i1l1190:	
  4477  06BB  0874               	movf	??_Isr_Timer+2,w
  4478  06BC  008A               	movwf	10
  4479  06BD  0873               	movf	??_Isr_Timer+1,w
  4480  06BE  0084               	movwf	4
  4481  06BF  0E72               	swapf	??_Isr_Timer^(0+-128),w
  4482  06C0  0083               	movwf	3
  4483  06C1  0EFE               	swapf	126,f
  4484  06C2  0E7E               	swapf	126,w
  4485  06C3  0009               	retfie
  4486  06C4                     __end_of_Isr_Timer:	
  4487                           
  4488                           	psect	intentry
  4489  0004                     __pintentry:	
  4490                           ;incstack = 0
  4491                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4492                           
  4493  0004                     interrupt_function:	
  4494  007E                     saved_w	set	btemp
  4495  0004  00FE               	movwf	btemp
  4496  0005  0E03               	swapf	3,w
  4497  0006  00F2               	movwf	??_Isr_Timer
  4498  0007  0804               	movf	4,w
  4499  0008  00F3               	movwf	??_Isr_Timer+1
  4500  0009  080A               	movf	10,w
  4501  000A  00F4               	movwf	??_Isr_Timer+2
  4502  000B  2EA9               	ljmp	_Isr_Timer
  4503                           
  4504                           	psect	text25
  4505  02B6                     __ptext25:	
  4506 ;; *************** function _LEDScan *****************
  4507 ;; Defined at:
  4508 ;;		line 17 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4517 ;; Tracked objects:
  4518 ;;		On entry : 300/0
  4519 ;;		On exit  : 300/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1
  4522 ;;      Params:         0       0       0
  4523 ;;      Locals:         0       0       0
  4524 ;;      Temps:          0       0       0
  4525 ;;      Totals:         0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; This function calls:
  4529 ;;		Nothing
  4530 ;; This function is called by:
  4531 ;;		_Isr_Timer
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _LEDScan
  4537  02B6                     _LEDScan:	
  4538                           
  4539                           ;LED.c: 19: static unsigned char LEDScanIndex=0;
  4540                           ;LED.c: 21: TRISB5=1,WPUB5=0;
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _LEDScan: [wreg-fsr0h+status,2+status,0]
  4544  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  4545  02B7  1686               	bsf	6,5	;volatile
  4546  02B8  1295               	bcf	21,5	;volatile
  4547                           
  4548                           ;LED.c: 22: TRISB4=1,WPUB4=0;
  4549  02B9  1606               	bsf	6,4	;volatile
  4550  02BA  1215               	bcf	21,4	;volatile
  4551                           
  4552                           ;LED.c: 23: TRISB3=1,WPUB3=0;
  4553  02BB  1586               	bsf	6,3	;volatile
  4554  02BC  1195               	bcf	21,3	;volatile
  4555                           
  4556                           ;LED.c: 24: TRISC3=1,WPUC3=0;
  4557  02BD  1587               	bsf	7,3	;volatile
  4558  02BE  1703               	bsf	3,6	;RP1=1, select bank3
  4559  02BF  118F               	bcf	15,3	;volatile
  4560                           
  4561                           ;LED.c: 25: TRISC2=1,WPUC2=0;
  4562  02C0  1303               	bcf	3,6	;RP1=0, select bank1
  4563  02C1  1507               	bsf	7,2	;volatile
  4564  02C2  1703               	bsf	3,6	;RP1=1, select bank3
  4565  02C3  110F               	bcf	15,2	;volatile
  4566  02C4  0000               	nop	;# 
  4567  02C5  0000               	nop	;# 
  4568                           
  4569                           ;LED.c: 28: switch(LEDScanIndex)
  4570  02C6  2B1C               	goto	i1l6149
  4571  02C7                     i1l2990:	
  4572                           ;LED.c: 29: {
  4573                           ;LED.c: 30: case 0:
  4574                           
  4575                           
  4576                           ;LED.c: 31: if(LEDArrMap[0]&0x02)
  4577  02C7  1CE4               	btfss	_LEDArrMap,1
  4578  02C8  2ACA               	goto	i1l2991
  4579                           
  4580                           ;LED.c: 32: {
  4581                           ;LED.c: 33: TRISB4=0,WPUB4=0;RB4=0 ;
  4582  02C9  234B               	fcall	PL22	;call to abstracted procedure
  4583  02CA                     i1l2991:	
  4584                           
  4585                           ;LED.c: 34: }
  4586                           ;LED.c: 35: if(LEDArrMap[0]&0x04)
  4587  02CA  1D64               	btfss	_LEDArrMap,2
  4588  02CB  2ACD               	goto	i1l2992
  4589                           
  4590                           ;LED.c: 36: {
  4591                           ;LED.c: 37: TRISB3=0,WPUB3=0;RB3=0 ;
  4592  02CC  2345               	fcall	PL20	;call to abstracted procedure
  4593  02CD                     i1l2992:	
  4594                           
  4595                           ;LED.c: 38: }
  4596                           ;LED.c: 39: if(LEDArrMap[0]&0x08)
  4597  02CD  1DE4               	btfss	_LEDArrMap,3
  4598  02CE  2AD0               	goto	i1l2993
  4599                           
  4600                           ;LED.c: 40: {
  4601                           ;LED.c: 41: TRISC3=0,WPUC3=0;RC3=0 ;
  4602  02CF  2337               	fcall	PL14	;call to abstracted procedure
  4603  02D0                     i1l2993:	
  4604                           
  4605                           ;LED.c: 42: }
  4606                           ;LED.c: 43: if(LEDArrMap[0]&0x10)
  4607  02D0  1E64               	btfss	_LEDArrMap,4
  4608  02D1  2AD3               	goto	i1l2994
  4609                           
  4610                           ;LED.c: 44: {
  4611                           ;LED.c: 45: TRISC2=0,WPUC2=0;RC2=0 ;
  4612  02D2  232F               	fcall	PL12	;call to abstracted procedure
  4613  02D3                     i1l2994:	
  4614                           
  4615                           ;LED.c: 46: }
  4616                           ;LED.c: 47: TRISB5=0,WPUB5=0;RB5=1 ;
  4617  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  4618  02D4  1286               	bcf	6,5	;volatile
  4619  02D5  1295               	bcf	21,5	;volatile
  4620  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  4621  02D7  1686               	bsf	6,5	;volatile
  4622                           
  4623                           ;LED.c: 48: break;
  4624  02D8  2B29               	goto	i1l6151
  4625  02D9                     i1l2996:	
  4626                           ;LED.c: 50: case 1:
  4627                           
  4628                           
  4629                           ;LED.c: 51: if(LEDArrMap[1]&0x01)
  4630  02D9  1C65               	btfss	_LEDArrMap+1,0
  4631  02DA  2ADC               	goto	i1l2997
  4632                           
  4633                           ;LED.c: 52: {
  4634                           ;LED.c: 53: TRISB5=0,WPUB5=0;RB5=0 ;
  4635  02DB  233F               	fcall	PL18	;call to abstracted procedure
  4636  02DC                     i1l2997:	
  4637                           
  4638                           ;LED.c: 54: }
  4639                           ;LED.c: 55: if(LEDArrMap[1]&0x04)
  4640  02DC  1D65               	btfss	_LEDArrMap+1,2
  4641  02DD  2ADF               	goto	i1l2998
  4642                           
  4643                           ;LED.c: 56: {
  4644                           ;LED.c: 57: TRISB3=0,WPUB3=0;RB3=0 ;
  4645  02DE  2345               	fcall	PL20	;call to abstracted procedure
  4646  02DF                     i1l2998:	
  4647                           
  4648                           ;LED.c: 58: }
  4649                           ;LED.c: 59: if(LEDArrMap[1]&0x08)
  4650  02DF  1DE5               	btfss	_LEDArrMap+1,3
  4651  02E0  2AE2               	goto	i1l2999
  4652                           
  4653                           ;LED.c: 60: {
  4654                           ;LED.c: 61: TRISC3=0,WPUC3=0;RC3=0 ;
  4655  02E1  2337               	fcall	PL14	;call to abstracted procedure
  4656  02E2                     i1l2999:	
  4657                           
  4658                           ;LED.c: 62: }
  4659                           ;LED.c: 63: if(LEDArrMap[1]&0x10)
  4660  02E2  1E65               	btfss	_LEDArrMap+1,4
  4661  02E3  2AE5               	goto	i1l3000
  4662                           
  4663                           ;LED.c: 64: {
  4664                           ;LED.c: 65: TRISC2=0,WPUC2=0;RC2=0 ;
  4665  02E4  232F               	fcall	PL12	;call to abstracted procedure
  4666  02E5                     i1l3000:	
  4667                           
  4668                           ;LED.c: 66: }
  4669                           ;LED.c: 67: TRISB4=0,WPUB4=0; RB4=1 ;
  4670  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  4671  02E6  1206               	bcf	6,4	;volatile
  4672  02E7  1215               	bcf	21,4	;volatile
  4673  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  4674  02E9  1606               	bsf	6,4	;volatile
  4675                           
  4676                           ;LED.c: 68: break;
  4677  02EA  2B29               	goto	i1l6151
  4678  02EB                     i1l3001:	
  4679                           ;LED.c: 70: case 2:
  4680                           
  4681                           
  4682                           ;LED.c: 71: if(LEDArrMap[2]&0x01)
  4683  02EB  1C66               	btfss	_LEDArrMap+2,0
  4684  02EC  2AEE               	goto	i1l3002
  4685                           
  4686                           ;LED.c: 72: {
  4687                           ;LED.c: 73: TRISB5=0,WPUB5=0;RB5=0 ;
  4688  02ED  233F               	fcall	PL18	;call to abstracted procedure
  4689  02EE                     i1l3002:	
  4690                           
  4691                           ;LED.c: 74: }
  4692                           ;LED.c: 75: if(LEDArrMap[2]&0x02)
  4693  02EE  1CE6               	btfss	_LEDArrMap+2,1
  4694  02EF  2AF1               	goto	i1l3003
  4695                           
  4696                           ;LED.c: 76: {
  4697                           ;LED.c: 77: TRISB4=0,WPUB4=0;RB4=0 ;
  4698  02F0  234B               	fcall	PL22	;call to abstracted procedure
  4699  02F1                     i1l3003:	
  4700                           
  4701                           ;LED.c: 78: }
  4702                           ;LED.c: 79: if(LEDArrMap[2]&0x08)
  4703  02F1  1DE6               	btfss	_LEDArrMap+2,3
  4704  02F2  2AF4               	goto	i1l3004
  4705                           
  4706                           ;LED.c: 80: {
  4707                           ;LED.c: 81: TRISC3=0,WPUC3=0;RC3=0 ;
  4708  02F3  2337               	fcall	PL14	;call to abstracted procedure
  4709  02F4                     i1l3004:	
  4710                           
  4711                           ;LED.c: 82: }
  4712                           ;LED.c: 83: if(LEDArrMap[2]&0x10)
  4713  02F4  1E66               	btfss	_LEDArrMap+2,4
  4714  02F5  2AF7               	goto	i1l3005
  4715                           
  4716                           ;LED.c: 84: {
  4717                           ;LED.c: 85: TRISC2=0,WPUC2=0;RC2=0 ;
  4718  02F6  232F               	fcall	PL12	;call to abstracted procedure
  4719  02F7                     i1l3005:	
  4720                           
  4721                           ;LED.c: 86: }
  4722                           ;LED.c: 87: TRISB3=0,WPUB3=0;RB3=1 ;
  4723  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  4724  02F8  1186               	bcf	6,3	;volatile
  4725  02F9  1195               	bcf	21,3	;volatile
  4726  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  4727  02FB  1586               	bsf	6,3	;volatile
  4728                           
  4729                           ;LED.c: 88: break;
  4730  02FC  2B29               	goto	i1l6151
  4731  02FD                     i1l3006:	
  4732                           ;LED.c: 90: case 3:
  4733                           
  4734                           
  4735                           ;LED.c: 91: if(LEDArrMap[3]&0x01)
  4736  02FD  1C67               	btfss	_LEDArrMap+3,0
  4737  02FE  2B00               	goto	i1l3007
  4738                           
  4739                           ;LED.c: 92: {
  4740                           ;LED.c: 93: TRISB5=0,WPUB5=0;RB5=0 ;
  4741  02FF  233F               	fcall	PL18	;call to abstracted procedure
  4742  0300                     i1l3007:	
  4743                           
  4744                           ;LED.c: 94: }
  4745                           ;LED.c: 95: if(LEDArrMap[3]&0x02)
  4746  0300  1CE7               	btfss	_LEDArrMap+3,1
  4747  0301  2B03               	goto	i1l3008
  4748                           
  4749                           ;LED.c: 96: {
  4750                           ;LED.c: 97: TRISB4=0,WPUB4=0;RB4=0 ;
  4751  0302  234B               	fcall	PL22	;call to abstracted procedure
  4752  0303                     i1l3008:	
  4753                           
  4754                           ;LED.c: 98: }
  4755                           ;LED.c: 99: if(LEDArrMap[3]&0x04)
  4756  0303  1D67               	btfss	_LEDArrMap+3,2
  4757  0304  2B06               	goto	i1l3009
  4758                           
  4759                           ;LED.c: 100: {
  4760                           ;LED.c: 101: TRISB3=0,WPUB3=0;RB3=0 ;
  4761  0305  2345               	fcall	PL20	;call to abstracted procedure
  4762  0306                     i1l3009:	
  4763                           
  4764                           ;LED.c: 102: }
  4765                           ;LED.c: 103: TRISC3=0,WPUC3=0;RC3=1 ;
  4766  0306  1683               	bsf	3,5	;RP0=1, select bank1
  4767  0307  1187               	bcf	7,3	;volatile
  4768  0308  1703               	bsf	3,6	;RP1=1, select bank3
  4769  0309  118F               	bcf	15,3	;volatile
  4770  030A  1283               	bcf	3,5	;RP0=0, select bank0
  4771  030B  1303               	bcf	3,6	;RP1=0, select bank0
  4772  030C  1587               	bsf	7,3	;volatile
  4773                           
  4774                           ;LED.c: 104: break;
  4775  030D  2B29               	goto	i1l6151
  4776  030E                     i1l3010:	
  4777                           ;LED.c: 106: case 4:
  4778                           
  4779                           
  4780                           ;LED.c: 107: if(LEDArrMap[4]&0x01)
  4781  030E  1C68               	btfss	_LEDArrMap+4,0
  4782  030F  2B11               	goto	i1l3011
  4783                           
  4784                           ;LED.c: 108: {
  4785                           ;LED.c: 109: TRISB5=0,WPUB5=0;RB5=0 ;
  4786  0310  233F               	fcall	PL18	;call to abstracted procedure
  4787  0311                     i1l3011:	
  4788                           
  4789                           ;LED.c: 110: }
  4790                           ;LED.c: 111: if(LEDArrMap[4]&0x04)
  4791  0311  1D68               	btfss	_LEDArrMap+4,2
  4792  0312  2B14               	goto	i1l3012
  4793                           
  4794                           ;LED.c: 112: {
  4795                           ;LED.c: 113: TRISB3=0,WPUB3=0;RB3=0 ;
  4796  0313  2345               	fcall	PL20	;call to abstracted procedure
  4797  0314                     i1l3012:	
  4798                           
  4799                           ;LED.c: 114: }
  4800                           ;LED.c: 115: TRISC2=0,WPUC2=0;RC2=1 ;
  4801  0314  1683               	bsf	3,5	;RP0=1, select bank1
  4802  0315  1107               	bcf	7,2	;volatile
  4803  0316  1703               	bsf	3,6	;RP1=1, select bank3
  4804  0317  110F               	bcf	15,2	;volatile
  4805  0318  1283               	bcf	3,5	;RP0=0, select bank0
  4806  0319  1303               	bcf	3,6	;RP1=0, select bank0
  4807  031A  1507               	bsf	7,2	;volatile
  4808                           
  4809                           ;LED.c: 116: }
  4810  031B  2B29               	goto	i1l6151
  4811  031C                     i1l6149:	
  4812  031C  1283               	bcf	3,5	;RP0=0, select bank0
  4813  031D  1303               	bcf	3,6	;RP1=0, select bank0
  4814  031E  0839               	movf	LEDScan@LEDScanIndex,w
  4815                           
  4816                           ; Switch size 1, requested type "space"
  4817                           ; Number of cases is 5, Range of values is 0 to 4
  4818                           ; switch strategies available:
  4819                           ; Name         Instructions Cycles
  4820                           ; direct_byte           11     6 (fixed)
  4821                           ; simple_byte           16     9 (average)
  4822                           ; jumptable            260     6 (fixed)
  4823                           ;	Chosen strategy is direct_byte
  4824  031F  0084               	movwf	4
  4825  0320  3005               	movlw	5
  4826  0321  0204               	subwf	4,w
  4827  0322  1803               	skipnc
  4828  0323  2B29               	goto	i1l6151
  4829  0324  3006               	movlw	high i1S6999
  4830  0325  008A               	movwf	10
  4831  0326  30F6               	movlw	low i1S6999
  4832  0327  0704               	addwf	4,w
  4833  0328  0082               	movwf	2
  4834  0329                     i1l6151:	
  4835  0329  3005               	movlw	5
  4836                           
  4837                           ;LED.c: 117: LEDScanIndex++;
  4838  032A  0AB9               	incf	LEDScan@LEDScanIndex,f
  4839                           
  4840                           ;LED.c: 118: if(LEDScanIndex>=5)
  4841  032B  0239               	subwf	LEDScan@LEDScanIndex,w
  4842  032C  1803               	btfsc	3,0
  4843                           
  4844                           ;LED.c: 119: {
  4845                           ;LED.c: 120: LEDScanIndex=0;
  4846  032D  01B9               	clrf	LEDScan@LEDScanIndex
  4847  032E  0008               	return
  4848  032F                     __end_of_LEDScan:	
  4849  007E                     btemp	set	126	;btemp
  4850  007E                     wtemp0	set	126
  4851  032F                     PL12:	
  4852  032F  1683               	bsf	3,5	;RP0=1, select bank1
  4853  0330  1107               	bcf	7,2	;volatile
  4854  0331  1703               	bsf	3,6	;RP1=1, select bank3
  4855  0332  110F               	bcf	15,2	;volatile
  4856  0333  1283               	bcf	3,5	;RP0=0, select bank0
  4857  0334  1303               	bcf	3,6	;RP1=0, select bank0
  4858  0335  1107               	bcf	7,2	;volatile
  4859  0336  0008               	return
  4860  0337                     __end_ofPL12:	
  4861  0337                     PL14:	
  4862  0337  1683               	bsf	3,5	;RP0=1, select bank1
  4863  0338  1187               	bcf	7,3	;volatile
  4864  0339  1703               	bsf	3,6	;RP1=1, select bank3
  4865  033A  118F               	bcf	15,3	;volatile
  4866  033B  1283               	bcf	3,5	;RP0=0, select bank0
  4867  033C  1303               	bcf	3,6	;RP1=0, select bank0
  4868  033D  1187               	bcf	7,3	;volatile
  4869  033E  0008               	return
  4870  033F                     __end_ofPL14:	
  4871  033F                     PL18:	
  4872  033F  1683               	bsf	3,5	;RP0=1, select bank1
  4873  0340  1286               	bcf	6,5	;volatile
  4874  0341  1295               	bcf	21,5	;volatile
  4875  0342  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0343  1286               	bcf	6,5	;volatile
  4877  0344  0008               	return
  4878  0345                     __end_ofPL18:	
  4879  0345                     PL20:	
  4880  0345  1683               	bsf	3,5	;RP0=1, select bank1
  4881  0346  1186               	bcf	6,3	;volatile
  4882  0347  1195               	bcf	21,3	;volatile
  4883  0348  1283               	bcf	3,5	;RP0=0, select bank0
  4884  0349  1186               	bcf	6,3	;volatile
  4885  034A  0008               	return
  4886  034B                     __end_ofPL20:	
  4887  034B                     PL22:	
  4888  034B  1683               	bsf	3,5	;RP0=1, select bank1
  4889  034C  1206               	bcf	6,4	;volatile
  4890  034D  1215               	bcf	21,4	;volatile
  4891  034E  1283               	bcf	3,5	;RP0=0, select bank0
  4892  034F  1206               	bcf	6,4	;volatile
  4893  0350  0008               	return
  4894  0351                     __end_ofPL22:	
  4895                           
  4896                           	psect	swtext3
  4897  06F6                     __pswtext3:	
  4898  06F6                     i1S6999:	
  4899  06F6  2AC7               	ljmp	i1l2990
  4900  06F7  2AD9               	ljmp	i1l2996
  4901  06F8  2AEB               	ljmp	i1l3001
  4902  06F9  2AFD               	ljmp	i1l3006
  4903  06FA  2B0E               	ljmp	i1l3010


Data Sizes:
    Strings     0
    Constant    16
    Data        58
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     26      75
    BANK1            80      7      58

Pointer List with Targets:

    ADCRead@Val	PTR unsigned int  size(1) Largest target is 6
		 -> ADCVal(BANK0[6]), 


Critical Paths under _main in COMMON

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _WorkLedPro->___lbmod
    _USBLedPro->___lbmod
    _ADCRead->___lmul
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _DisplayPro->_DisplayIcon
    _DisplayPro->_USBLedPro
    _ADCPro->_ADCRead
    _ADCRead->___lldiv
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADCPro->_ADCRead

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4005
                              _Apply
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0       0
                           _GPIOInit
                          _TimerInit
 ---------------------------------------------------------------------------------
 (2) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Apply                                                0     0      0    4005
                             _ADCPro
                         _DisplayPro
                            _KeyScan
                              _Motor
                           _Sec1sPro
 ---------------------------------------------------------------------------------
 (2) _Sec1sPro                                             5     5      0     953
                                              3 BANK0      5     5      0
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Motor                                                0     0      0      52
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _KeyScan                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayPro                                           0     0      0    1422
                        _DisplayIcon
                             _ErrPro
                            _LockPro
                          _USBLedPro
                         _WorkLedPro
 ---------------------------------------------------------------------------------
 (3) _WorkLedPro                                           2     2      0     659
                                              0 BANK0      2     2      0
                             ___bmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     224
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USBLedPro                                            3     3      0     435
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     216
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     219
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LockPro                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ErrPro                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DisplayIcon                                          7     5      2     328
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADCPro                                               0     0      0    1578
                            _ADCRead
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                             12    11      1    1578
                                             21 BANK0      5     4      1
                                              0 BANK1      7     7      0
                           _ADSample
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADSample                                             3     3      0      65
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _LEDScan
 ---------------------------------------------------------------------------------
 (6) _LEDScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apply
     _ADCPro
       _ADCRead
         _ADSample
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _DisplayPro
       _DisplayIcon
       _ErrPro
       _LockPro
       _USBLedPro
         ___lbdiv
         ___lbmod
       _WorkLedPro
         ___bmul
         ___lbdiv
         ___lbmod
     _KeyScan
     _Motor
       ___wmul
     _Sec1sPro
       ___bmul
       ___lwdiv
   _SystemInit
     _GPIOInit
     _TimerInit

 _Isr_Timer (ROOT)
   _LEDScan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      7      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      90       8        0.0%
ABS                  0      0      90       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 21 17:20:23 2020

                      pc 0002           ___bmul@product 0076                       PL2 03AF  
                     PL4 029B                       PL6 0421                       PL8 0581  
                     fsr 0004      ___wmul@multiplicand 0077               _BatPercent 0043  
                    PL10 03C0                      PL20 0345                      PL12 032F  
                    PL30 02B1                      PL22 034B                      PL14 0337  
                    PL32 066D                      PL24 0112                      PL16 01D8  
                    PL34 058E                      PL26 01E3                      PL18 033F  
                    PL28 047B                      l605 0193                      l633 06F1  
                    l626 0291                      l571 0499                      l579 04B9  
                    _RA3 002B                      _RA5 002D                      _RB3 0033  
                    _RA6 002E                      _RB4 0034                      _RC2 003A  
                    _RA7 002F                      _RB5 0035                      _RC3 003B  
                    _PR2 0092                      fsr0 0004          __end_of_ADCRead 029B  
                    indf 0000                     S6995 0001                     S6997 06FB  
        __end_of_LEDSeg1 0716          __end_of_LEDScan 032F                     l2400 00F9  
                   l2401 00FD                     l3050 0375                     l2403 0108  
                   l2404 0109                     l2405 010F                     l4211 044A  
                   l2380 0063                     l3085 0553                     l2373 0032  
                   l2390 00A2                     l2382 00FF                     l2374 0033  
                   l2383 00A4                     l2375 0066                     l2392 00E2  
                   l4208 0433                     l2377 004E                     l2394 00DD  
                   l4218 0476                     l2379 005B                     l4236 05CA  
                   l2389 00A0                     l6005 0096                     l6033 00F2  
                   l6027 00D6                     l6301 05E0                     l5513 0694  
                   l6331 050C                     l6403 035B                     l6319 04E1  
                   l6351 0264                     l4487 069A                     l5527 06A7  
                   l5543 068A                     l5535 0676                     l6415 0369  
                   l6353 026E                     l6521 0607                     l6371 0559  
                   l6443 0387                     l6419 036B                     l6349 025C  
                   l6357 0289                     l6541 0487                     l5741 051B  
                   l6533 061E                     l6621 0177                     l6543 048C  
                   l5751 0525                     l5495 0747                     l6455 0398  
                   l6447 038A                     l6631 018D                     l6553 04A4  
                   l6385 0578                     l6617 0173                     l6609 0162  
                   l6563 04BA                     l6539 0482                     l6547 0491  
                   l6379 055D                     l5763 0543                     l5755 053D  
                   l6651 01BD                     l6627 0182                     l6619 0175  
                   l6573 04CA                     l6557 04AD                     l5757 053E  
                   l6493 041E                     l6661 01D2                     l6581 0118  
                   l6559 04B0                     l5783 0556                     l6479 03DC  
                   l6831 06C6                     l6639 01A7                     l6663 01D5  
                   l6593 0130                     l5795 0720                     l6835 06CE  
                   l6923 0666                     l6915 0661                     l6597 014C  
                   l6589 0125                     l6909 065C                     l6933 0770  
                   l5799 0726                     l5991 0071                     l6873 045A  
                   l6885 0470                     l6889 0478                     l6899 0651  
                   _ANS1 0C41                     _ANS2 0C42                     u3060 00B1  
                   u3070 00B7                     u3062 00B2                     u3160 00E8  
                   u3072 00B8                     u4105 0414                     u3170 00EE  
                   u3162 00E9                     u3172 00EF                     u2365 0533  
                   _PIE1 008C                     u2810 0040                     u4155 0610  
                   u2820 0046                     u2812 0041                     u2822 0047  
                   u4095 03F3                     u4265 01E1                     u4285 015B  
                   u3824 0589                     u2960 007C                     u3745 04F4  
                   u3825 0587                     u4385 01B6                     u2970 0082  
                   u2962 007D                     u2972 0083                     u4725 0468  
                   u3775 0215                     u3955 03B6                     u4675 0443  
                   _RBPU 040F                     _WPUA 018E                     _WPUB 0095  
                   _WPUC 018F                     _main 076F                     btemp 007E  
                   start 000C        ___bmul@multiplier 0077          _VarPowerUpCount 003C  
       __end_of_ADSample 06F6          __end_of_KeyScan 0112          __end_of_LockPro 0559  
       __end_of_GPIOInit 064B      __end_of_DisplayIcon 0581                    ?_main 0072  
        __end_of___lbdiv 06A9          __end_of___lbmod 068E          __end_of___lldiv 0515  
                  _T2CON 0012          __end_of___lwdiv 0623                    _ADcnt 0041  
                  _ADsum 0020                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _WPUA1 0C71                    _WPUA2 0C72  
                  _WPUB3 04AB                    _WPUA6 0C76                    _WPUC2 0C7A  
                  _WPUB4 04AC                    _WPUA7 0C77                    _WPUC3 0C7B  
                  _WPUB5 04AD                    _Apply 064B      ___lmul@multiplicand 004E  
                  _Motor 042B               _DisplayPro 0753      ErrPro@LedSwitchFlag 0380  
         __pbitbssCOMMON 0380                    pclath 000A                    status 0003  
                  wtemp0 007E       __size_of_USBLedPro 0055          ___lbdiv@divisor 0075  
        ___lbdiv@counter 0077          __initialization 000D         __end_of_Sec1sPro 01D8  
           __end_of_main 0773               _CurrentCnt 0040                ??_ADCRead 0060  
             _LowBatFlag 038E                   ??_main 007A              _HideNumbArr 00BE  
              ??_LEDScan 0072             USBLedPro@cnt 0037                   ?_Apply 0072  
    LEDScan@LEDScanIndex 0039                   ?_Motor 0072             _SystemONFlag 038F  
              ADCRead@ch 00D3                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _ADCVal 0044  
                 _ADCPro 0481                   i1S6999 06F6                   _GODONE 00F9  
                 i1l3000 02E5                   i1l3001 02EB                   i1l3010 030E  
                 i1l3002 02EE                   i1l3011 0311                   i1l3003 02F1  
                 i1l3012 0314                   i1l3004 02F4                   i1l3005 02F7  
                 i1l3006 02FD                   i1l1190 06BB                   i1l3007 0300  
                 i1l3008 0303                   i1l3009 0306                   i1l6211 06B5  
                 i1l6151 0329                   i1l6149 031C                   i1l2990 02C7  
                 i1l2991 02CA                   i1l2992 02CD                   i1l2993 02D0  
                 i1l2994 02D3                   i1l2996 02D9                   i1l2997 02DC  
                 i1l2998 02DF                   i1l2999 02E2                   _INTCON 000B  
                 _OSCCON 008F                   _TMR2IF 0061                   _WDTCON 0105  
                 _TRISA1 0429                   _TRISA2 042A                   _TRISB3 0433  
                 _TRISA6 042E                   _TRISB4 0434                   _TRISC2 043A  
                 _TRISA7 042F                   _TRISB5 0435                   _TRISC3 043B  
             _TimeAddCnt 0024               _TimeDecCnt 0026                ??_KeyScan 0075  
              ??_LockPro 0075                   _KeyCnt 002C                   _ErrPro 0716  
     __size_of_Isr_Timer 001B              _DisplayIcon 0559                   ___bmul 0745  
                 ___lmul 05C6                   ___wmul 06C4                ??___lbdiv 0076  
              ??___lbmod 0076                   _cnt2ms 003E                ??___lldiv 0079  
              ??___lwdiv 0079          ErrPro@SwitchCnt 0030        __end_of_USBLedPro 0421  
     __size_of_TimerInit 000E                ADSample@i 0077                   saved_w 007E  
            ?_DisplayPro 0072         ___lbdiv@dividend 0076                ?_ADSample 0072  
        ___lbmod@divisor 0075  __end_of__initialization 002A          ___lbmod@counter 0078  
              ?_GPIOInit 0072               _WorkLedPro 0351      ___bmul@multiplicand 0075  
          __end_of_Apply 066D           __pcstackCOMMON 0072            __end_of_Motor 047B  
           __pidataBANK0 0000             __pidataBANK1 0593               __end_ofPL2 03C0  
             __end_ofPL4 02B1               __end_ofPL6 042B               __end_ofPL8 058E  
       ___lbdiv@quotient 0078         LockPro@SwitchCnt 0033               _SystemInit 075E  
                ??_Apply 007A        __end_of_Isr_Timer 06C4                  ??_Motor 0079  
                ?_ADCPro 0072               ??_ADSample 0075                ?_Sec1sPro 0072  
             __pbssBANK0 0020     LockPro@LedSwitchFlag 0381               ??_GPIOInit 0075  
      __end_of_TimerInit 0745                  ?_ErrPro 0072               __pmaintext 076F  
                ?___bmul 0075                  ?___lmul 004A               ADCRead@Val 005F  
    __size_of_DisplayPro 000B                  ?___wmul 0075               __pintentry 0004  
         ___lmul@product 0075                  _ADCRead 01E9                  _LEDSeg1 0706  
                _LEDSeg2 00A0                  _LEDScan 02B6    Sec1sPro@ActualPercent 003F  
                _USBFlag 038C                  _USBLink 0384          __size_of_ADCPro 004C  
             ??_Sec1sPro 004D               __stringtab 0700                  _KeyScan 002C  
                _IovFlag 038D                  _LockPro 0515                  _LockSta 002E  
            ?_WorkLedPro 0072          __size_of_ErrPro 0012                  _NumbArr 00C9  
        __size_of___bmul 000E                  ___lbdiv 068E          __size_of___lmul 0033  
                ___lbmod 0672                  _WorkCnt 0028                  _WorkMin 007A  
                ___lldiv 04CD          __size_of___wmul 0019                  ___lwdiv 05F9  
                _cnt10ms 003D       Sec1sPro@PercentErr 004F                  __ptext1 075E  
                __ptext2 0737                  __ptext3 0623                  __ptext4 064B  
                __ptext5 0118                  __ptext6 05F9                  __ptext7 042B  
                __ptext8 06C4                  __ptext9 002C           ADCRead@ad_temp 00D8  
            ?_SystemInit 0072                  _time2ms 038A                _LEDArrMap 0064  
                clrloop0 0768     end_of_initialization 002A            WorkLedPro@dir 0382  
          WorkLedPro@cnt 0034               ADSample@ch 0076          ___lldiv@divisor 0052  
        ___lldiv@counter 005E             ?_DisplayIcon 0075          DisplayIcon@Mask 004A  
       ___lbmod@dividend 0077      __size_of_WorkLedPro 005E             ??_DisplayPro 007A  
              _USBLedPro 03CC           __end_of_ADCPro 04CD  WorkLedPro@LedSwitchFlag 0383  
            ___lbmod@rem 0079        __size_of_ADSample 0019            LockPro@Ledcnt 0031  
      __size_of_GPIOInit 0028      __size_of_SystemInit 0009           __end_of_ErrPro 0728  
     __end_of_DisplayPro 075E           __end_of___bmul 0753           __end_of___lmul 05F9  
         __end_of___wmul 06DD                _OnOffFlag 0387              __end_ofPL10 03CC  
            __end_ofPL20 034B              __end_ofPL12 0337              __end_ofPL30 02B6  
            __end_ofPL22 0351              __end_ofPL14 033F              __end_ofPL32 0672  
            __end_ofPL24 0118              __end_ofPL16 01E3              __end_ofPL34 0593  
            __end_ofPL26 01E9              __end_ofPL18 0345              __end_ofPL28 0481  
    start_initialization 000D               ?_USBLedPro 0072                 ??_ADCPro 0079  
              _Isr_Timer 06A9        __size_of_Sec1sPro 00C0                 ??_ErrPro 0075  
               ??___bmul 0076                _TimerInit 0737                 ??___lmul 0075  
               ??___wmul 0079               init_fetch0 0728              __pdataBANK0 0064  
            __pdataBANK1 00A0                 ?_ADCRead 005F                 ?_LEDScan 0072  
            __pbssCOMMON 007A                ___latbits 0000            __pcstackBANK0 004A  
          __pcstackBANK1 00D3               ?_Isr_Timer 0072           USBLedPro@index 0038  
               ?_KeyScan 0072                 ?_LockPro 0072             ??_WorkLedPro 004A  
       ___lwdiv@dividend 0077              ADCRead@AD_H 00D4               ?_TimerInit 0072  
            ADCRead@AD_L 00D6                 ?___lbdiv 0075                 ?___lbmod 0075  
               ?___lldiv 0052     __size_of_DisplayIcon 0028                 ?___lwdiv 0075  
              __pstrings 0700                __pswtext1 0001                __pswtext2 06FB  
              __pswtext3 06F6             ??_SystemInit 0075                 _ADCState 0042  
         __size_of_Apply 0022              ??_USBLedPro 004A           __size_of_Motor 0050  
     __end_of_WorkLedPro 03AF         ___lwdiv@quotient 004B                 _ADSample 06DD  
   LockPro@LockSwitchCnt 0032        interrupt_function 0004           ___wmul@product 004A  
               _GPIOInit 0623                clear_ram0 0767           _OffHideNumbArr 00B0  
     __end_of_SystemInit 0767         __size_of_ADCRead 00B2              __stringbase 0705  
      ___wmul@multiplier 0075   WorkLedPro@LedSwitchCnt 0036         __size_of_LEDScan 0079  
               _LedIndex 002A        ___lmul@multiplier 004A              ??_Isr_Timer 0072  
               _Sec1sCnt 003A                 _KeyInBuf 0385                 _Sec1sPro 0118  
               _KeyPress 0388                 _LockNumb 003B              _LEDWorkFlag 0386  
        WorkLedPro@index 0035         __size_of_KeyScan 00E6         __size_of_LockPro 0044  
            ??_TimerInit 0075         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lldiv 0048         __size_of___lwdiv 002A                 _WorkFlag 038B  
     __end_of__stringtab 0706          ___lwdiv@divisor 0075          ___lwdiv@counter 004A  
               __ptext10 0753                 __ptext11 0351                 __ptext20 01E9  
               __ptext12 0745                 __ptext21 05C6                 __ptext13 03CC  
               __ptext22 04CD                 __ptext14 0672                 __ptext23 06DD  
               __ptext15 068E                 __ptext24 06A9                 __ptext16 0515  
               __ptext25 02B6                 __ptext17 0716                 __ptext18 0559  
               __ptext19 0481            __size_of_main 0004                 _time10ms 0389  
    Sec1sPro@TempPercent 0050                 init_ram0 072C                 intlevel1 0000  
       ___lldiv@dividend 0056                stringcode 0700             DisplayIcon@i 004C  
       ___lldiv@quotient 005A                 stringdir 0700                 stringtab 0700  
       DisplayIcon@index 0075               _BatAddTime 006A            ??_DisplayIcon 0077  
             _BatDecTime 0069  
