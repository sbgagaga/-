

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Thu Aug 13 15:50:44 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	swtext2,local,class=CONST,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	intentry,global,class=CODE,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	swtext3,local,class=CONST,delta=2
    47                           	psect	pa_nodes0,global,class=CODE,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.45
    51                           ; Generated 16/11/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataBANK1
    86  05E9                     __pidataBANK1:	
    87                           
    88                           ;initializer for _LEDSeg2
    89  05E9  3400               	retlw	0
    90  05EA  3401               	retlw	1
    91  05EB  3400               	retlw	0
    92  05EC  3401               	retlw	1
    93  05ED  3401               	retlw	1
    94  05EE  3400               	retlw	0
    95  05EF  3400               	retlw	0
    96  05F0  3402               	retlw	2
    97  05F1  3403               	retlw	3
    98  05F2  3402               	retlw	2
    99  05F3  3403               	retlw	3
   100  05F4  3403               	retlw	3
   101  05F5  3402               	retlw	2
   102  05F6  3402               	retlw	2
   103  05F7  3404               	retlw	4
   104  05F8  3404               	retlw	4
   105                           
   106                           ;initializer for _OffHideNumbArr
   107  05F9  3400               	retlw	0
   108  05FA  3400               	retlw	0
   109  05FB  3412               	retlw	18
   110  05FC  3400               	retlw	0
   111  05FD  345B               	retlw	91
   112  05FE  3400               	retlw	0
   113  05FF  347F               	retlw	127
   114  0600  3400               	retlw	0
   115  0601  347F               	retlw	127
   116  0602  3409               	retlw	9
   117  0603  34FF               	retlw	255
   118  0604  342D               	retlw	45
   119  0605  34FF               	retlw	255
   120  0606  343F               	retlw	63
   121                           
   122                           ;initializer for _HideNumbArr
   123  0607  3400               	retlw	0
   124  0608  3440               	retlw	64
   125  0609  3470               	retlw	112
   126  060A  3478               	retlw	120
   127  060B  347E               	retlw	126
   128  060C  347F               	retlw	127
   129  060D  343F               	retlw	63
   130  060E  340F               	retlw	15
   131  060F  3407               	retlw	7
   132  0610  3401               	retlw	1
   133  0611  3400               	retlw	0
   134                           
   135                           ;initializer for _NumbArr
   136  0612  3477               	retlw	119
   137  0613  3424               	retlw	36
   138  0614  345D               	retlw	93
   139  0615  346D               	retlw	109
   140  0616  342E               	retlw	46
   141  0617  346B               	retlw	107
   142  0618  347B               	retlw	123
   143  0619  3425               	retlw	37
   144  061A  347F               	retlw	127
   145  061B  342F               	retlw	47
   146                           
   147                           	psect	strings
   148  074C                     __pstrings:	
   149  074C                     stringtab:	
   150  074C                     __stringtab:	
   151  074C                     stringcode:	
   152                           ;	String table - string pointers are 1 byte each
   153                           
   154  074C                     stringdir:	
   155  074C  3007               	movlw	high stringdir
   156  074D  008A               	movwf	10
   157  074E  0804               	movf	4,w
   158  074F  0A84               	incf	4,f
   159  0750  0782               	addwf	2,f
   160  0751                     __stringbase:	
   161  0751  3400               	retlw	0
   162  0752                     __end_of__stringtab:	
   163  0752                     _LEDSeg1:	
   164  0752  3401               	retlw	1
   165  0753  3402               	retlw	2
   166  0754  3402               	retlw	2
   167  0755  3403               	retlw	3
   168  0756  3400               	retlw	0
   169  0757  3403               	retlw	3
   170  0758  3404               	retlw	4
   171  0759  3400               	retlw	0
   172  075A  3401               	retlw	1
   173  075B  3401               	retlw	1
   174  075C  3402               	retlw	2
   175  075D  3400               	retlw	0
   176  075E  3403               	retlw	3
   177  075F  3404               	retlw	4
   178  0760  3400               	retlw	0
   179  0761  3401               	retlw	1
   180  0762                     __end_of_LEDSeg1:	
   181  001F                     _ADCON0	set	31
   182  001E                     _ADRESH	set	30
   183  0012                     _T2CON	set	18
   184  000B                     _INTCON	set	11
   185  0007                     _PORTC	set	7
   186  0006                     _PORTB	set	6
   187  0005                     _PORTA	set	5
   188  00F9                     _GODONE	set	249
   189  0061                     _TMR2IF	set	97
   190  003B                     _RC3	set	59
   191  003A                     _RC2	set	58
   192  0035                     _RB5	set	53
   193  0034                     _RB4	set	52
   194  0033                     _RB3	set	51
   195  002F                     _RA7	set	47
   196  002E                     _RA6	set	46
   197  002D                     _RA5	set	45
   198  009F                     _ADCON1	set	159
   199  009E                     _ADRESL	set	158
   200  0095                     _WPUB	set	149
   201  0092                     _PR2	set	146
   202  008F                     _OSCCON	set	143
   203  008C                     _PIE1	set	140
   204  0087                     _TRISC	set	135
   205  0086                     _TRISB	set	134
   206  0085                     _TRISA	set	133
   207  04AD                     _WPUB5	set	1197
   208  04AC                     _WPUB4	set	1196
   209  04AB                     _WPUB3	set	1195
   210  043B                     _TRISC3	set	1083
   211  043A                     _TRISC2	set	1082
   212  0435                     _TRISB5	set	1077
   213  0434                     _TRISB4	set	1076
   214  0433                     _TRISB3	set	1075
   215  042F                     _TRISA7	set	1071
   216  042E                     _TRISA6	set	1070
   217  042A                     _TRISA2	set	1066
   218  0429                     _TRISA1	set	1065
   219  040F                     _RBPU	set	1039
   220  0105                     _WDTCON	set	261
   221  018F                     _WPUC	set	399
   222  018E                     _WPUA	set	398
   223  0C42                     _ANS2	set	3138
   224  0C41                     _ANS1	set	3137
   225  0C7B                     _WPUC3	set	3195
   226  0C7A                     _WPUC2	set	3194
   227  0C77                     _WPUA7	set	3191
   228  0C76                     _WPUA6	set	3190
   229  0C72                     _WPUA2	set	3186
   230  0C71                     _WPUA1	set	3185
   231                           
   232                           	psect	cinit
   233  000D                     start_initialization:	
   234                           ; #config settings
   235                           
   236  000D                     __initialization:	
   237  000D  30D3               	movlw	low (__pdataBANK1+51)
   238                           
   239                           ; Initialize objects allocated to BANK1
   240  000E  1383               	bcf	3,7	;select IRP bank0
   241  000F  00FD               	movwf	125
   242  0010  3005               	movlw	high __pidataBANK1
   243  0011  00FE               	movwf	126
   244  0012  30E9               	movlw	low __pidataBANK1
   245  0013  00FF               	movwf	127
   246  0014  30A0               	movlw	low __pdataBANK1
   247  0015  0084               	movwf	4
   248  0016  277C               	fcall	init_ram0
   249                           
   250                           ; Clear objects allocated to BANK1
   251  0017  30D3               	movlw	low __pbssBANK1
   252  0018  0084               	movwf	4
   253  0019  30DB               	movlw	low (__pbssBANK1+8)
   254  001A  27B9               	fcall	clear_ram0
   255                           
   256                           ; Clear objects allocated to BANK0
   257  001B  3020               	movlw	low __pbssBANK0
   258  001C  0084               	movwf	4
   259  001D  304D               	movlw	low (__pbssBANK0+45)
   260  001E  27B9               	fcall	clear_ram0
   261                           
   262                           ; Clear objects allocated to COMMON
   263  001F  01FA               	clrf	__pbssCOMMON& (0+127)
   264                           
   265                           ; Clear objects allocated to BITCOMMON
   266  0020  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   267  0021  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   268  0022                     end_of_initialization:	
   269                           ;End of C runtime variable initialization code
   270                           
   271  0022                     __end_of__initialization:	
   272  0022  0183               	clrf	3
   273  0023  2FC6               	ljmp	_main	;jump to C main() function
   274                           
   275                           	psect	bitbssCOMMON
   276  0380                     __pbitbssCOMMON:	
   277  0380                     ErrPro@LedSwitchFlag:	
   278  0380                     	ds	1
   279  0381                     LockPro@LedSwitchFlag:	
   280  0381                     	ds	1
   281  0382                     WorkLedPro@dir:	
   282  0382                     	ds	1
   283  0383                     WorkLedPro@LedSwitchFlag:	
   284  0383                     	ds	1
   285  0384                     _USBLink:	
   286  0384                     	ds	1
   287  0385                     _KeyPress:	
   288  0385                     	ds	1
   289  0386                     _KeyInBuf:	
   290  0386                     	ds	1
   291  0387                     _OnOffFlag:	
   292  0387                     	ds	1
   293  0388                     _time10ms:	
   294  0388                     	ds	1
   295  0389                     _time2ms:	
   296  0389                     	ds	1
   297  038A                     _WorkFlag:	
   298  038A                     	ds	1
   299  038B                     _USBFlag:	
   300  038B                     	ds	1
   301  038C                     _IovFlag:	
   302  038C                     	ds	1
   303  038D                     _SystemONFlag:	
   304  038D                     	ds	1
   305                           
   306                           	psect	bssCOMMON
   307  007A                     __pbssCOMMON:	
   308  007A                     _WorkMin:	
   309  007A                     	ds	1
   310                           
   311                           	psect	bssBANK0
   312  0020                     __pbssBANK0:	
   313  0020                     _LEDArrMap:	
   314  0020                     	ds	5
   315  0025                     _ADsum:	
   316  0025                     	ds	4
   317  0029                     _KeyCnt:	
   318  0029                     	ds	2
   319  002B                     _LockSta:	
   320  002B                     	ds	2
   321  002D                     _ADCMin:	
   322  002D                     	ds	2
   323  002F                     _ADCMax:	
   324  002F                     	ds	2
   325  0031                     ErrPro@SwitchCnt:	
   326  0031                     	ds	1
   327  0032                     LockPro@Ledcnt:	
   328  0032                     	ds	1
   329  0033                     LockPro@LockSwitchCnt:	
   330  0033                     	ds	1
   331  0034                     LockPro@SwitchCnt:	
   332  0034                     	ds	1
   333  0035                     WorkLedPro@cnt:	
   334  0035                     	ds	1
   335  0036                     WorkLedPro@index:	
   336  0036                     	ds	1
   337  0037                     WorkLedPro@LedSwitchCnt:	
   338  0037                     	ds	1
   339  0038                     USBLedPro@cnt:	
   340  0038                     	ds	1
   341  0039                     USBLedPro@index:	
   342  0039                     	ds	1
   343  003A                     LEDScan@LEDScanIndex:	
   344  003A                     	ds	1
   345  003B                     _Sec1sCnt:	
   346  003B                     	ds	1
   347  003C                     _LockNumb:	
   348  003C                     	ds	1
   349  003D                     _VarPowerUpCount:	
   350  003D                     	ds	1
   351  003E                     _cnt10ms:	
   352  003E                     	ds	1
   353  003F                     _cnt2ms:	
   354  003F                     	ds	1
   355  0040                     Sec1sPro@ActualPercent:	
   356  0040                     	ds	1
   357  0041                     _CurrentCnt:	
   358  0041                     	ds	1
   359  0042                     _ADcnt:	
   360  0042                     	ds	1
   361  0043                     _ADCState:	
   362  0043                     	ds	1
   363  0044                     _BatDecTime:	
   364  0044                     	ds	1
   365  0045                     _BatAddTime:	
   366  0045                     	ds	1
   367  0046                     _BatPercent:	
   368  0046                     	ds	1
   369  0047                     _ADCVal:	
   370  0047                     	ds	6
   371                           
   372                           	psect	bssBANK1
   373  00D3                     __pbssBANK1:	
   374  00D3                     _TimeAddCnt:	
   375  00D3                     	ds	2
   376  00D5                     _TimeDecCnt:	
   377  00D5                     	ds	2
   378  00D7                     _WorkCnt:	
   379  00D7                     	ds	2
   380  00D9                     _LedIndex:	
   381  00D9                     	ds	2
   382                           
   383                           	psect	dataBANK1
   384  00A0                     __pdataBANK1:	
   385  00A0                     _LEDSeg2:	
   386  00A0                     	ds	16
   387  00B0                     _OffHideNumbArr:	
   388  00B0                     	ds	14
   389  00BE                     _HideNumbArr:	
   390  00BE                     	ds	11
   391  00C9                     _NumbArr:	
   392  00C9                     	ds	10
   393                           
   394                           	psect	inittext
   395  0778                     init_fetch0:	
   396                           ;	Called with low address in FSR and high address in W
   397                           
   398  0778  087E               	movf	126,w
   399  0779  008A               	movwf	10
   400  077A  087F               	movf	127,w
   401  077B  0082               	movwf	2
   402  077C                     init_ram0:	
   403                           ;Called with:
   404                           ;	high address of idata address in btemp 
   405                           ;	low address of idata address in btemp+1 
   406                           ;	low address of data in FSR
   407                           ;	high address + 1 of data in btemp-1
   408                           
   409  077C  2778               	fcall	init_fetch0
   410  077D  0080               	movwf	0
   411  077E  0A84               	incf	4,f
   412  077F  0804               	movf	4,w
   413  0780  067D               	xorwf	125,w
   414  0781  1903               	btfsc	3,2
   415  0782  3400               	retlw	0
   416  0783  0AFF               	incf	127,f
   417  0784  1903               	btfsc	3,2
   418  0785  0AFE               	incf	126,f
   419  0786  2F7C               	goto	init_ram0
   420                           
   421                           	psect	clrtext
   422  07B9                     clear_ram0:	
   423                           ;	Called with FSR containing the base address, and
   424                           ;	W with the last address+1
   425                           
   426  07B9  0064               	clrwdt	;clear the watchdog before getting into this loop
   427  07BA                     clrloop0:	
   428  07BA  0180               	clrf	0	;clear RAM location pointed to by FSR
   429  07BB  0A84               	incf	4,f	;increment pointer
   430  07BC  0604               	xorwf	4,w	;XOR with final address
   431  07BD  1903               	btfsc	3,2	;have we reached the end yet?
   432  07BE  3400               	retlw	0	;all done for this memory range, return
   433  07BF  0604               	xorwf	4,w	;XOR again to restore value
   434  07C0  2FBA               	goto	clrloop0	;do the next byte
   435                           
   436                           	psect	cstackBANK1
   437  00DB                     __pcstackBANK1:	
   438  00DB                     ADCRead@ch:	
   439                           
   440                           ; 1 bytes @ 0x0
   441  00DB                     	ds	1
   442  00DC                     ADCRead@AD_H:	
   443                           
   444                           ; 2 bytes @ 0x1
   445  00DC                     	ds	2
   446  00DE                     ADCRead@AD_L:	
   447                           
   448                           ; 2 bytes @ 0x3
   449  00DE                     	ds	2
   450  00E0                     ADCRead@ad_temp:	
   451                           
   452                           ; 2 bytes @ 0x5
   453  00E0                     	ds	2
   454                           
   455                           	psect	cstackCOMMON
   456  0072                     __pcstackCOMMON:	
   457  0072                     ?_ADSample:	
   458  0072                     ?_LEDScan:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0072                     ??_LEDScan:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0072                     ?_KeyScan:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0072                     ?_Motor:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0072                     ?_DisplayPro:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0072                     ?_SystemInit:	
   474                           ; 1 bytes @ 0x0
   475                           
   476  0072                     ?_GPIOInit:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0072                     ?_TimerInit:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0072                     ?_WorkLedPro:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0072                     ?_USBLedPro:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0072                     ?_LockPro:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0072                     ?_ErrPro:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0072                     ?_ADCPro:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0072                     ?_Sec1sPro:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0072                     ?_Isr_Timer:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0072                     ??_Isr_Timer:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0072                     ?_Apply:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0072                     ?_main:	
   510                           ; 1 bytes @ 0x0
   511                           
   512                           
   513                           ; 1 bytes @ 0x0
   514  0072                     	ds	3
   515  0075                     ??_ADSample:	
   516  0075                     ??_KeyScan:	
   517                           ; 1 bytes @ 0x3
   518                           
   519  0075                     ??_SystemInit:	
   520                           ; 1 bytes @ 0x3
   521                           
   522  0075                     ??_GPIOInit:	
   523                           ; 1 bytes @ 0x3
   524                           
   525  0075                     ??_TimerInit:	
   526                           ; 1 bytes @ 0x3
   527                           
   528  0075                     ??_LockPro:	
   529                           ; 1 bytes @ 0x3
   530                           
   531  0075                     ??_ErrPro:	
   532                           ; 1 bytes @ 0x3
   533                           
   534  0075                     ?_DisplayIcon:	
   535                           ; 1 bytes @ 0x3
   536                           
   537  0075                     ??___lmul:	
   538                           ; 1 bytes @ 0x3
   539                           
   540  0075                     ?___bmul:	
   541                           ; 1 bytes @ 0x3
   542                           
   543  0075                     ?___lbdiv:	
   544                           ; 1 bytes @ 0x3
   545                           
   546  0075                     ?___lbmod:	
   547                           ; 1 bytes @ 0x3
   548                           
   549  0075                     ?___wmul:	
   550                           ; 1 bytes @ 0x3
   551                           
   552  0075                     ?___lwdiv:	
   553                           ; 2 bytes @ 0x3
   554                           
   555  0075                     ___bmul@multiplicand:	
   556                           ; 2 bytes @ 0x3
   557                           
   558  0075                     ___lbdiv@divisor:	
   559                           ; 1 bytes @ 0x3
   560                           
   561  0075                     ___lbmod@divisor:	
   562                           ; 1 bytes @ 0x3
   563                           
   564  0075                     DisplayIcon@index:	
   565                           ; 1 bytes @ 0x3
   566                           
   567  0075                     ___wmul@multiplier:	
   568                           ; 2 bytes @ 0x3
   569                           
   570  0075                     ___lwdiv@divisor:	
   571                           ; 2 bytes @ 0x3
   572                           
   573  0075                     ___lmul@product:	
   574                           ; 2 bytes @ 0x3
   575                           
   576                           
   577                           ; 4 bytes @ 0x3
   578  0075                     	ds	1
   579  0076                     ??___bmul:	
   580  0076                     ??___lbdiv:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0076                     ??___lbmod:	
   584                           ; 1 bytes @ 0x4
   585                           
   586  0076                     ADSample@ch:	
   587                           ; 1 bytes @ 0x4
   588                           
   589  0076                     ___bmul@product:	
   590                           ; 1 bytes @ 0x4
   591                           
   592  0076                     ___lbdiv@dividend:	
   593                           ; 1 bytes @ 0x4
   594                           
   595                           
   596                           ; 1 bytes @ 0x4
   597  0076                     	ds	1
   598  0077                     ??_DisplayIcon:	
   599  0077                     ADSample@i:	
   600                           ; 1 bytes @ 0x5
   601                           
   602  0077                     ___bmul@multiplier:	
   603                           ; 1 bytes @ 0x5
   604                           
   605  0077                     ___lbdiv@counter:	
   606                           ; 1 bytes @ 0x5
   607                           
   608  0077                     ___lbmod@dividend:	
   609                           ; 1 bytes @ 0x5
   610                           
   611  0077                     ___wmul@multiplicand:	
   612                           ; 1 bytes @ 0x5
   613                           
   614  0077                     ___lwdiv@dividend:	
   615                           ; 2 bytes @ 0x5
   616                           
   617                           
   618                           ; 2 bytes @ 0x5
   619  0077                     	ds	1
   620  0078                     ___lbdiv@quotient:	
   621  0078                     ___lbmod@counter:	
   622                           ; 1 bytes @ 0x6
   623                           
   624                           
   625                           ; 1 bytes @ 0x6
   626  0078                     	ds	1
   627  0079                     ??_Motor:	
   628  0079                     ??_ADCPro:	
   629                           ; 1 bytes @ 0x7
   630                           
   631  0079                     ??___wmul:	
   632                           ; 1 bytes @ 0x7
   633                           
   634  0079                     ??___lldiv:	
   635                           ; 1 bytes @ 0x7
   636                           
   637  0079                     ??___lwdiv:	
   638                           ; 1 bytes @ 0x7
   639                           
   640  0079                     ___lbmod@rem:	
   641                           ; 1 bytes @ 0x7
   642                           
   643                           
   644                           ; 1 bytes @ 0x7
   645  0079                     	ds	1
   646  007A                     ??_DisplayPro:	
   647  007A                     ??_Apply:	
   648                           ; 1 bytes @ 0x8
   649                           
   650  007A                     ??_main:	
   651                           ; 1 bytes @ 0x8
   652                           
   653                           
   654                           	psect	cstackBANK0
   655  004D                     __pcstackBANK0:	
   656                           ; 1 bytes @ 0x8
   657                           
   658  004D                     ??_WorkLedPro:	
   659  004D                     ??_USBLedPro:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  004D                     ?___lmul:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  004D                     ___lwdiv@counter:	
   666                           ; 4 bytes @ 0x0
   667                           
   668  004D                     DisplayIcon@Mask:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  004D                     ___wmul@product:	
   672                           ; 2 bytes @ 0x0
   673                           
   674  004D                     ___lmul@multiplier:	
   675                           ; 2 bytes @ 0x0
   676                           
   677                           
   678                           ; 4 bytes @ 0x0
   679  004D                     	ds	1
   680  004E                     ___lwdiv@quotient:	
   681                           
   682                           ; 2 bytes @ 0x1
   683  004E                     	ds	1
   684  004F                     DisplayIcon@i:	
   685                           
   686                           ; 1 bytes @ 0x2
   687  004F                     	ds	1
   688  0050                     ??_Sec1sPro:	
   689                           
   690                           ; 1 bytes @ 0x3
   691  0050                     	ds	1
   692  0051                     ___lmul@multiplicand:	
   693                           
   694                           ; 4 bytes @ 0x4
   695  0051                     	ds	1
   696  0052                     Sec1sPro@PercentErr:	
   697                           
   698                           ; 1 bytes @ 0x5
   699  0052                     	ds	1
   700  0053                     Sec1sPro@TempPercent:	
   701                           
   702                           ; 2 bytes @ 0x6
   703  0053                     	ds	2
   704  0055                     ?___lldiv:	
   705  0055                     ___lldiv@divisor:	
   706                           ; 4 bytes @ 0x8
   707                           
   708                           
   709                           ; 4 bytes @ 0x8
   710  0055                     	ds	4
   711  0059                     ___lldiv@dividend:	
   712                           
   713                           ; 4 bytes @ 0xC
   714  0059                     	ds	4
   715  005D                     ___lldiv@quotient:	
   716                           
   717                           ; 4 bytes @ 0x10
   718  005D                     	ds	4
   719  0061                     ___lldiv@counter:	
   720                           
   721                           ; 1 bytes @ 0x14
   722  0061                     	ds	1
   723  0062                     ?_ADCRead:	
   724  0062                     ADCRead@Val:	
   725                           ; 1 bytes @ 0x15
   726                           
   727                           
   728                           ; 1 bytes @ 0x15
   729  0062                     	ds	1
   730  0063                     ??_ADCRead:	
   731                           
   732                           ; 1 bytes @ 0x16
   733  0063                     	ds	8
   734                           
   735                           	psect	maintext
   736  07C6                     __pmaintext:	
   737 ;;
   738 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   739 ;;
   740 ;; *************** function _main *****************
   741 ;; Defined at:
   742 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K13-01\code\main.c"
   743 ;; Parameters:    Size  Location     Type
   744 ;;		None
   745 ;; Auto vars:     Size  Location     Type
   746 ;;		None
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : B00/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1
   756 ;;      Params:         0       0       0
   757 ;;      Locals:         0       0       0
   758 ;;      Temps:          0       0       0
   759 ;;      Totals:         0       0       0
   760 ;;Total ram usage:        0 bytes
   761 ;; Hardware stack levels required when called:    6
   762 ;; This function calls:
   763 ;;		_Apply
   764 ;;		_SystemInit
   765 ;; This function is called by:
   766 ;;		Startup code after reset
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           
   771                           ;psect for function _main
   772  07C6                     _main:	
   773                           
   774                           ;main.c: 5: SystemInit();
   775                           
   776                           ;incstack = 0
   777                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   778  07C6  27B0               	fcall	_SystemInit
   779  07C7                     l6914:	
   780                           
   781                           ;main.c: 7: {
   782                           ;main.c: 8: Apply();
   783  07C7  26A1               	fcall	_Apply
   784  07C8  0064               	clrwdt	;# 
   785  07C9  2FC7               	goto	l6914
   786  07CA                     __end_of_main:	
   787                           
   788                           	psect	text1
   789  07B0                     __ptext1:	
   790 ;; *************** function _SystemInit *****************
   791 ;; Defined at:
   792 ;;		line 113 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, status,2, status,0, pclath, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : B00/0
   803 ;;		On exit  : 300/200
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMMON   BANK0   BANK1
   806 ;;      Params:         0       0       0
   807 ;;      Locals:         0       0       0
   808 ;;      Temps:          0       0       0
   809 ;;      Totals:         0       0       0
   810 ;;Total ram usage:        0 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    3
   813 ;; This function calls:
   814 ;;		_GPIOInit
   815 ;;		_TimerInit
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           
   822                           ;psect for function _SystemInit
   823  07B0                     _SystemInit:	
   824                           
   825                           ;incstack = 0
   826                           ; Regs used in _SystemInit: [wreg+status,2+status,0+pclath+cstack]
   827  07B0  0000               	nop	;# 
   828  07B1  0064               	clrwdt	;# 
   829                           
   830                           ;K13-01.c: 117: GPIOInit();
   831  07B2  2679               	fcall	_GPIOInit
   832                           
   833                           ;K13-01.c: 118: TimerInit();
   834  07B3  2787               	fcall	_TimerInit
   835                           
   836                           ;K13-01.c: 119: WDTCON=0x01;
   837  07B4  3001               	movlw	1
   838  07B5  1283               	bcf	3,5	;RP0=0, select bank2
   839  07B6  1703               	bsf	3,6	;RP1=1, select bank2
   840  07B7  0085               	movwf	5	;volatile
   841  07B8  0008               	return
   842  07B9                     __end_of_SystemInit:	
   843                           
   844                           	psect	text2
   845  0787                     __ptext2:	
   846 ;; *************** function _TimerInit *****************
   847 ;; Defined at:
   848 ;;		line 153 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg
   857 ;; Tracked objects:
   858 ;;		On entry : 300/300
   859 ;;		On exit  : 300/100
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMMON   BANK0   BANK1
   862 ;;      Params:         0       0       0
   863 ;;      Locals:         0       0       0
   864 ;;      Temps:          0       0       0
   865 ;;      Totals:         0       0       0
   866 ;;Total ram usage:        0 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:    2
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_SystemInit
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           
   877                           ;psect for function _TimerInit
   878  0787                     _TimerInit:	
   879                           
   880                           ;K13-01.c: 164: OSCCON=0X61;
   881                           
   882                           ;incstack = 0
   883                           ; Regs used in _TimerInit: [wreg]
   884  0787  3061               	movlw	97
   885  0788  1303               	bcf	3,6	;RP1=0, select bank1
   886  0789  008F               	movwf	15	;volatile
   887                           
   888                           ;K13-01.c: 165: INTCON=0B11000000;
   889  078A  30C0               	movlw	192
   890  078B  008B               	movwf	11	;volatile
   891                           
   892                           ;K13-01.c: 166: PIE1=0B00000010;
   893  078C  3002               	movlw	2
   894  078D  008C               	movwf	12	;volatile
   895                           
   896                           ;K13-01.c: 167: T2CON=0B00000100;
   897  078E  3004               	movlw	4
   898  078F  1283               	bcf	3,5	;RP0=0, select bank0
   899  0790  0092               	movwf	18	;volatile
   900                           
   901                           ;K13-01.c: 168: PR2 = 200;
   902  0791  30C8               	movlw	200
   903  0792  1683               	bsf	3,5	;RP0=1, select bank1
   904  0793  0092               	movwf	18	;volatile
   905  0794  0008               	return
   906  0795                     __end_of_TimerInit:	
   907                           
   908                           	psect	text3
   909  0679                     __ptext3:	
   910 ;; *************** function _GPIOInit *****************
   911 ;; Defined at:
   912 ;;		line 122 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;		None
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      void 
   919 ;; Registers used:
   920 ;;		wreg, status,2
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 300/300
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1
   926 ;;      Params:         0       0       0
   927 ;;      Locals:         0       0       0
   928 ;;      Temps:          0       0       0
   929 ;;      Totals:         0       0       0
   930 ;;Total ram usage:        0 bytes
   931 ;; Hardware stack levels used:    1
   932 ;; Hardware stack levels required when called:    2
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_SystemInit
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function _GPIOInit
   942  0679                     _GPIOInit:	
   943                           
   944                           ;K13-01.c: 124: RBPU=0;
   945                           
   946                           ;incstack = 0
   947                           ; Regs used in _GPIOInit: [wreg+status,2]
   948  0679  1683               	bsf	3,5	;RP0=1, select bank1
   949  067A  1303               	bcf	3,6	;RP1=0, select bank1
   950  067B  1381               	bcf	1,7	;volatile
   951                           
   952                           ;K13-01.c: 126: TRISA =0X00;
   953  067C  0185               	clrf	5	;volatile
   954                           
   955                           ;K13-01.c: 127: TRISB =0X00;
   956  067D  0186               	clrf	6	;volatile
   957                           
   958                           ;K13-01.c: 128: TRISC =0X00;
   959  067E  0187               	clrf	7	;volatile
   960                           
   961                           ;K13-01.c: 132: WPUA =0XFF;
   962  067F  30FF               	movlw	255
   963  0680  1703               	bsf	3,6	;RP1=1, select bank3
   964  0681  008E               	movwf	14	;volatile
   965                           
   966                           ;K13-01.c: 133: WPUB =0XFF;
   967  0682  1303               	bcf	3,6	;RP1=0, select bank1
   968  0683  0095               	movwf	21	;volatile
   969                           
   970                           ;K13-01.c: 134: WPUC =0XFF;
   971  0684  1703               	bsf	3,6	;RP1=1, select bank3
   972  0685  008F               	movwf	15	;volatile
   973                           
   974                           ;K13-01.c: 138: PORTA = 0X80;
   975  0686  3080               	movlw	128
   976  0687  1283               	bcf	3,5	;RP0=0, select bank0
   977  0688  1303               	bcf	3,6	;RP1=0, select bank0
   978  0689  0085               	movwf	5	;volatile
   979                           
   980                           ;K13-01.c: 139: PORTB = 0X80;
   981  068A  0086               	movwf	6	;volatile
   982                           
   983                           ;K13-01.c: 140: PORTC = 0;
   984  068B  0187               	clrf	7	;volatile
   985                           
   986                           ;K13-01.c: 143: RA5 =1;
   987  068C  1685               	bsf	5,5	;volatile
   988                           
   989                           ;K13-01.c: 144: RBPU=0;
   990  068D  1683               	bsf	3,5	;RP0=1, select bank1
   991  068E  1381               	bcf	1,7	;volatile
   992                           
   993                           ;K13-01.c: 145: TRISA6=1,WPUA6=1;
   994  068F  1705               	bsf	5,6	;volatile
   995  0690  1703               	bsf	3,6	;RP1=1, select bank3
   996  0691  170E               	bsf	14,6	;volatile
   997                           
   998                           ;K13-01.c: 146: TRISA7=1,WPUA7=1;
   999  0692  1303               	bcf	3,6	;RP1=0, select bank1
  1000  0693  1785               	bsf	5,7	;volatile
  1001  0694  1703               	bsf	3,6	;RP1=1, select bank3
  1002  0695  178E               	bsf	14,7	;volatile
  1003                           
  1004                           ;K13-01.c: 148: TRISA1=1,WPUA1=0; ANS1=1;
  1005  0696  1303               	bcf	3,6	;RP1=0, select bank1
  1006  0697  1485               	bsf	5,1	;volatile
  1007  0698  1703               	bsf	3,6	;RP1=1, select bank3
  1008  0699  108E               	bcf	14,1	;volatile
  1009  069A  1488               	bsf	8,1	;volatile
  1010                           
  1011                           ;K13-01.c: 149: TRISA2=1,WPUA2=0; ANS2=1;
  1012  069B  1303               	bcf	3,6	;RP1=0, select bank1
  1013  069C  1505               	bsf	5,2	;volatile
  1014  069D  1703               	bsf	3,6	;RP1=1, select bank3
  1015  069E  110E               	bcf	14,2	;volatile
  1016  069F  1508               	bsf	8,2	;volatile
  1017  06A0  0008               	return
  1018  06A1                     __end_of_GPIOInit:	
  1019                           
  1020                           	psect	text4
  1021  06A1                     __ptext4:	
  1022 ;; *************** function _Apply *****************
  1023 ;; Defined at:
  1024 ;;		line 24 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;		None
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;		None
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/200
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1
  1038 ;;      Params:         0       0       0
  1039 ;;      Locals:         0       0       0
  1040 ;;      Temps:          0       0       0
  1041 ;;      Totals:         0       0       0
  1042 ;;Total ram usage:        0 bytes
  1043 ;; Hardware stack levels used:    1
  1044 ;; Hardware stack levels required when called:    5
  1045 ;; This function calls:
  1046 ;;		_ADCPro
  1047 ;;		_DisplayPro
  1048 ;;		_KeyScan
  1049 ;;		_Motor
  1050 ;;		_Sec1sPro
  1051 ;; This function is called by:
  1052 ;;		_main
  1053 ;; This function uses a non-reentrant model
  1054 ;;
  1055                           
  1056                           
  1057                           ;psect for function _Apply
  1058  06A1                     _Apply:	
  1059                           
  1060                           ;K13-01.c: 26: if(time2ms)
  1061                           
  1062                           ;incstack = 0
  1063                           ; Regs used in _Apply: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1064  06A1  1CF1               	btfss	_time2ms/(0+8),_time2ms& (0+7)
  1065  06A2  2EA7               	goto	l6880
  1066                           
  1067                           ;K13-01.c: 27: {
  1068                           ;K13-01.c: 28: time2ms=0;
  1069  06A3  10F1               	bcf	_time2ms/(0+8),_time2ms& (0+7)
  1070                           
  1071                           ;K13-01.c: 29: if(SystemONFlag)
  1072  06A4  1EF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1073  06A5  2EA7               	goto	l6880
  1074                           
  1075                           ;K13-01.c: 30: {
  1076                           ;K13-01.c: 31: KeyScan();
  1077  06A6  213A               	fcall	_KeyScan
  1078  06A7                     l6880:	
  1079                           
  1080                           ;K13-01.c: 32: }
  1081                           ;K13-01.c: 33: }
  1082                           ;K13-01.c: 34: if(time10ms)
  1083  06A7  1C71               	btfss	_time10ms/(0+8),_time10ms& (0+7)
  1084  06A8  0008               	return
  1085                           
  1086                           ;K13-01.c: 35: {
  1087                           ;K13-01.c: 36: time10ms=0;
  1088  06A9  1071               	bcf	_time10ms/(0+8),_time10ms& (0+7)
  1089                           
  1090                           ;K13-01.c: 37: if(SystemONFlag==0&&VarPowerUpCount<100)
  1091  06AA  1AF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1092  06AB  2EB2               	goto	l6890
  1093  06AC  26C3               	fcall	PL38	;call to abstracted procedure
  1094  06AD  1803               	skipnc
  1095  06AE  2EB2               	goto	l6890
  1096                           
  1097                           ;K13-01.c: 38: {
  1098                           ;K13-01.c: 39: VarPowerUpCount++;
  1099  06AF  0ABD               	incf	_VarPowerUpCount,f
  1100                           
  1101                           ;K13-01.c: 40: ADCPro();
  1102  06B0  256C               	fcall	_ADCPro
  1103                           
  1104                           ;K13-01.c: 41: }
  1105  06B1  2EB7               	goto	l6896
  1106  06B2                     l6890:	
  1107                           
  1108                           ;K13-01.c: 42: else if(VarPowerUpCount>=100)
  1109  06B2  26C3               	fcall	PL38	;call to abstracted procedure
  1110  06B3  1C03               	skipc
  1111  06B4  2EB7               	goto	l6896
  1112                           
  1113                           ;K13-01.c: 43: {
  1114                           ;K13-01.c: 44: SystemONFlag=1;
  1115  06B5  16F1               	bsf	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1116                           
  1117                           ;K13-01.c: 45: VarPowerUpCount=0;
  1118  06B6  01BD               	clrf	_VarPowerUpCount
  1119  06B7                     l6896:	
  1120                           
  1121                           ;K13-01.c: 46: }
  1122                           ;K13-01.c: 48: if(SystemONFlag)
  1123  06B7  1EF1               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  1124  06B8  2EBC               	goto	l6904
  1125                           
  1126                           ;K13-01.c: 49: {
  1127                           ;K13-01.c: 50: ADCPro();
  1128  06B9  256C               	fcall	_ADCPro
  1129                           
  1130                           ;K13-01.c: 51: Motor();
  1131  06BA  2476               	fcall	_Motor
  1132                           
  1133                           ;K13-01.c: 52: DisplayPro();
  1134  06BB  27A3               	fcall	_DisplayPro
  1135  06BC                     l6904:	
  1136  06BC  3064               	movlw	100
  1137                           
  1138                           ;K13-01.c: 54: }
  1139                           ;K13-01.c: 55: Sec1sCnt++;
  1140  06BD  0ABB               	incf	_Sec1sCnt,f
  1141                           
  1142                           ;K13-01.c: 56: if(Sec1sCnt>=100)
  1143  06BE  023B               	subwf	_Sec1sCnt,w
  1144  06BF  1C03               	skipc
  1145  06C0  0008               	return
  1146                           
  1147                           ;K13-01.c: 57: {
  1148                           ;K13-01.c: 58: Sec1sCnt=0;
  1149  06C1  01BB               	clrf	_Sec1sCnt
  1150                           
  1151                           ;K13-01.c: 59: Sec1sPro();
  1152  06C2  2A11               	ljmp	l6570
  1153  06C3                     __end_of_Apply:	
  1154  06C3                     PL38:	
  1155  06C3  3064               	movlw	100
  1156  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1157  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1158  06C6  023D               	subwf	_VarPowerUpCount,w
  1159  06C7  0008               	return
  1160  06C8                     __end_ofPL38:	
  1161                           
  1162                           	psect	text5
  1163  0211                     __ptext5:	
  1164 ;; *************** function _Sec1sPro *****************
  1165 ;; Defined at:
  1166 ;;		line 66 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;		None
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  TempPercent     2    6[BANK0 ] unsigned int 
  1171 ;;  PercentErr      1    5[BANK0 ] unsigned char 
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg, status,2, status,0, pclath, cstack
  1176 ;; Tracked objects:
  1177 ;;		On entry : 300/0
  1178 ;;		On exit  : 300/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1
  1181 ;;      Params:         0       0       0
  1182 ;;      Locals:         0       3       0
  1183 ;;      Temps:          0       2       0
  1184 ;;      Totals:         0       5       0
  1185 ;;Total ram usage:        5 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; Hardware stack levels required when called:    3
  1188 ;; This function calls:
  1189 ;;		___bmul
  1190 ;;		___lwdiv
  1191 ;; This function is called by:
  1192 ;;		_Apply
  1193 ;; This function uses a non-reentrant model
  1194 ;;
  1195                           
  1196                           
  1197                           ;psect for function _Sec1sPro
  1198  0211                     _Sec1sPro:	
  1199  0211                     l6570:	
  1200                           ;incstack = 0
  1201                           ; Regs used in _Sec1sPro: [wreg+status,2+status,0+pclath+cstack]
  1202                           
  1203                           
  1204                           ;ADC.c: 70: unsigned int TempPercent=0;
  1205  0211  01D3               	clrf	Sec1sPro@TempPercent
  1206  0212  01D4               	clrf	Sec1sPro@TempPercent+1
  1207                           
  1208                           ;ADC.c: 73: if(USBFlag)
  1209  0213  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1210  0214  2A70               	goto	l6610
  1211                           
  1212                           ;ADC.c: 74: {
  1213                           ;ADC.c: 75: if(ADCVal[2]<275)
  1214  0215  3001               	movlw	1
  1215  0216  024C               	subwf	_ADCVal+5,w
  1216  0217  3013               	movlw	19
  1217  0218  1903               	skipnz
  1218  0219  024B               	subwf	_ADCVal+4,w
  1219  021A  1803               	skipnc
  1220  021B  2A1E               	goto	l6578
  1221                           
  1222                           ;ADC.c: 76: {
  1223                           ;ADC.c: 77: TempPercent=0;
  1224  021C  01D3               	clrf	Sec1sPro@TempPercent
  1225  021D  2A27               	goto	L1
  1226  021E                     l6578:	
  1227                           ;ADC.c: 78: }
  1228                           
  1229                           
  1230                           ;ADC.c: 79: else if(ADCVal[2]>350)
  1231  021E  3001               	movlw	1
  1232  021F  024C               	subwf	_ADCVal+5,w
  1233  0220  305F               	movlw	95
  1234  0221  1903               	skipnz
  1235  0222  024B               	subwf	_ADCVal+4,w
  1236  0223  1C03               	skipc
  1237  0224  2A29               	goto	l6582
  1238                           
  1239                           ;ADC.c: 80: {
  1240                           ;ADC.c: 81: TempPercent=99;
  1241  0225  3063               	movlw	99
  1242  0226  00D3               	movwf	Sec1sPro@TempPercent
  1243  0227                     L1:	
  1244  0227  01D4               	clrf	Sec1sPro@TempPercent+1
  1245                           
  1246                           ;ADC.c: 82: }
  1247  0228  2A45               	goto	l6586
  1248  0229                     l6582:	
  1249                           
  1250                           ;ADC.c: 83: else
  1251                           ;ADC.c: 84: {
  1252                           ;ADC.c: 85: TempPercent=ADCVal[2]-275;
  1253  0229  084C               	movf	_ADCVal+5,w
  1254  022A  00D4               	movwf	Sec1sPro@TempPercent+1
  1255  022B  084B               	movf	_ADCVal+4,w
  1256  022C  00D3               	movwf	Sec1sPro@TempPercent
  1257  022D  30ED               	movlw	237
  1258  022E  22DC               	fcall	PL26	;call to abstracted procedure
  1259                           
  1260                           ;ADC.c: 86: TempPercent=TempPercent*4/3;
  1261  022F  3003               	movlw	3
  1262  0230  00F5               	movwf	___lwdiv@divisor
  1263  0231  01F6               	clrf	___lwdiv@divisor+1
  1264  0232  0854               	movf	Sec1sPro@TempPercent+1,w
  1265  0233  00D1               	movwf	??_Sec1sPro+1
  1266  0234  0853               	movf	Sec1sPro@TempPercent,w
  1267  0235  00D0               	movwf	??_Sec1sPro
  1268  0236  1003               	clrc
  1269  0237  0DD0               	rlf	??_Sec1sPro,f
  1270  0238  0DD1               	rlf	??_Sec1sPro+1,f
  1271  0239  1003               	clrc
  1272  023A  0DD0               	rlf	??_Sec1sPro,f
  1273  023B  0DD1               	rlf	??_Sec1sPro+1,f
  1274  023C  0850               	movf	??_Sec1sPro,w
  1275  023D  00F7               	movwf	___lwdiv@dividend
  1276  023E  0851               	movf	??_Sec1sPro+1,w
  1277  023F  00F8               	movwf	___lwdiv@dividend+1
  1278  0240  264F               	fcall	___lwdiv
  1279  0241  0876               	movf	?___lwdiv+1,w
  1280  0242  00D4               	movwf	Sec1sPro@TempPercent+1
  1281  0243  0875               	movf	?___lwdiv,w
  1282  0244  00D3               	movwf	Sec1sPro@TempPercent
  1283  0245                     l6586:	
  1284                           
  1285                           ;ADC.c: 87: }
  1286                           ;ADC.c: 88: if(ActualPercent>TempPercent)
  1287                           
  1288                           ;ADC.c: 89: {
  1289                           ;ADC.c: 90: if(ActualPercent)
  1290  0245  22D1               	fcall	PL18	;call to abstracted procedure
  1291  0246  1803               	skipnc
  1292  0247  2A4C               	goto	L4
  1293  0248  1903               	btfsc	3,2
  1294  0249  2A5B               	goto	l6598
  1295                           
  1296                           ;ADC.c: 91: {
  1297                           ;ADC.c: 92: ActualPercent--;
  1298  024A  03C0               	decf	Sec1sPro@ActualPercent,f
  1299  024B  2A5B               	goto	l6598
  1300  024C                     L4:	
  1301                           ;ADC.c: 95: else if(ActualPercent<TempPercent)
  1302                           
  1303  024C  00D0               	movwf	??_Sec1sPro
  1304  024D  01D1               	clrf	??_Sec1sPro+1
  1305  024E  0854               	movf	Sec1sPro@TempPercent+1,w
  1306  024F  0251               	subwf	??_Sec1sPro+1,w
  1307  0250  1D03               	skipz
  1308  0251  2A54               	goto	u4215
  1309  0252  0853               	movf	Sec1sPro@TempPercent,w
  1310  0253  0250               	subwf	??_Sec1sPro,w
  1311  0254                     u4215:	
  1312  0254  1803               	skipnc
  1313  0255  2A5B               	goto	l6598
  1314                           
  1315                           ;ADC.c: 96: {
  1316                           ;ADC.c: 97: if(ActualPercent<99)
  1317  0256  3063               	movlw	99
  1318  0257  0240               	subwf	Sec1sPro@ActualPercent,w
  1319  0258  1803               	skipnc
  1320  0259  2A5B               	goto	l6598
  1321                           
  1322                           ;ADC.c: 98: {
  1323                           ;ADC.c: 99: ActualPercent++;
  1324  025A  0AC0               	incf	Sec1sPro@ActualPercent,f
  1325  025B                     l6598:	
  1326                           
  1327                           ;ADC.c: 100: }
  1328                           ;ADC.c: 101: }
  1329                           ;ADC.c: 102: if(ActualPercent>BatPercent)
  1330  025B  0840               	movf	Sec1sPro@ActualPercent,w
  1331  025C  0246               	subwf	_BatPercent,w
  1332  025D  1803               	skipnc
  1333  025E  2A6E               	goto	l6608
  1334                           
  1335                           ;ADC.c: 103: {
  1336                           ;ADC.c: 104: PercentErr=ActualPercent-BatPercent;
  1337  025F  0846               	movf	_BatPercent,w
  1338  0260  0240               	subwf	Sec1sPro@ActualPercent,w
  1339  0261  00D2               	movwf	Sec1sPro@PercentErr
  1340                           
  1341                           ;ADC.c: 105: if(PercentErr<5)
  1342  0262  3005               	movlw	5
  1343  0263  0252               	subwf	Sec1sPro@PercentErr,w
  1344  0264  1803               	skipnc
  1345  0265  2A6C               	goto	l6606
  1346                           
  1347                           ;ADC.c: 106: {
  1348                           ;ADC.c: 107: BatAddTime=90-15*PercentErr;
  1349  0266  30F1               	movlw	241
  1350  0267  00F5               	movwf	___bmul@multiplicand
  1351  0268  0852               	movf	Sec1sPro@PercentErr,w
  1352  0269  2795               	fcall	___bmul
  1353  026A  3E5A               	addlw	90
  1354  026B  2A6F               	goto	L2
  1355  026C                     l6606:	
  1356                           ;ADC.c: 108: }
  1357                           
  1358                           
  1359                           ;ADC.c: 109: else
  1360                           ;ADC.c: 110: {
  1361                           ;ADC.c: 111: BatAddTime=15;
  1362  026C  300F               	movlw	15
  1363  026D  2A6F               	goto	L2
  1364  026E                     l6608:	
  1365                           
  1366                           ;ADC.c: 114: else
  1367                           ;ADC.c: 115: {
  1368                           ;ADC.c: 116: BatAddTime=240;
  1369  026E  30F0               	movlw	240
  1370  026F                     L2:	
  1371  026F  00C5               	movwf	_BatAddTime
  1372  0270                     l6610:	
  1373                           
  1374                           ;ADC.c: 117: }
  1375                           ;ADC.c: 118: }
  1376                           ;ADC.c: 121: if(WorkFlag)
  1377  0270  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1378  0271  2ACE               	goto	l6652
  1379                           
  1380                           ;ADC.c: 122: {
  1381                           ;ADC.c: 123: if(ADCVal[2]<267)
  1382  0272  3001               	movlw	1
  1383  0273  024C               	subwf	_ADCVal+5,w
  1384  0274  300B               	movlw	11
  1385  0275  1903               	skipnz
  1386  0276  024B               	subwf	_ADCVal+4,w
  1387  0277  1803               	skipnc
  1388  0278  2A7B               	goto	l6616
  1389                           
  1390                           ;ADC.c: 124: {
  1391                           ;ADC.c: 125: TempPercent=0;
  1392  0279  01D3               	clrf	Sec1sPro@TempPercent
  1393  027A  2A84               	goto	L3
  1394  027B                     l6616:	
  1395                           ;ADC.c: 126: }
  1396                           
  1397                           
  1398                           ;ADC.c: 127: else if(ADCVal[2]>333)
  1399  027B  3001               	movlw	1
  1400  027C  024C               	subwf	_ADCVal+5,w
  1401  027D  304E               	movlw	78
  1402  027E  1903               	skipnz
  1403  027F  024B               	subwf	_ADCVal+4,w
  1404  0280  1C03               	skipc
  1405  0281  2A86               	goto	l6620
  1406                           
  1407                           ;ADC.c: 128: {
  1408                           ;ADC.c: 129: TempPercent=99;
  1409  0282  3063               	movlw	99
  1410  0283  00D3               	movwf	Sec1sPro@TempPercent
  1411  0284                     L3:	
  1412  0284  01D4               	clrf	Sec1sPro@TempPercent+1
  1413                           
  1414                           ;ADC.c: 130: }
  1415  0285  2A8C               	goto	l609
  1416  0286                     l6620:	
  1417                           
  1418                           ;ADC.c: 131: else
  1419                           ;ADC.c: 132: {
  1420                           ;ADC.c: 133: TempPercent=ADCVal[2]-267;
  1421  0286  084C               	movf	_ADCVal+5,w
  1422  0287  00D4               	movwf	Sec1sPro@TempPercent+1
  1423  0288  084B               	movf	_ADCVal+4,w
  1424  0289  00D3               	movwf	Sec1sPro@TempPercent
  1425  028A  30F5               	movlw	245
  1426  028B  22DC               	fcall	PL26	;call to abstracted procedure
  1427  028C                     l609:	
  1428                           
  1429                           ;ADC.c: 134: }
  1430                           ;ADC.c: 135: if(TempPercent>=33)
  1431  028C  3000               	movlw	0
  1432  028D  0254               	subwf	Sec1sPro@TempPercent+1,w
  1433  028E  3021               	movlw	33
  1434  028F  1903               	skipnz
  1435  0290  0253               	subwf	Sec1sPro@TempPercent,w
  1436  0291  1C03               	skipc
  1437  0292  2AA0               	goto	l6628
  1438                           
  1439                           ;ADC.c: 136: {
  1440                           ;ADC.c: 137: TempPercent=33+(ADCVal[2]-300)*2;
  1441  0293  084C               	movf	_ADCVal+5,w
  1442  0294  00D4               	movwf	Sec1sPro@TempPercent+1
  1443  0295  084B               	movf	_ADCVal+4,w
  1444  0296  00D3               	movwf	Sec1sPro@TempPercent
  1445  0297  30C9               	movlw	201
  1446  0298  1003               	clrc
  1447  0299  0DD3               	rlf	Sec1sPro@TempPercent,f
  1448  029A  0DD4               	rlf	Sec1sPro@TempPercent+1,f
  1449  029B  07D3               	addwf	Sec1sPro@TempPercent,f
  1450  029C  1803               	skipnc
  1451  029D  0AD4               	incf	Sec1sPro@TempPercent+1,f
  1452  029E  30FD               	movlw	253
  1453  029F  07D4               	addwf	Sec1sPro@TempPercent+1,f
  1454  02A0                     l6628:	
  1455                           
  1456                           ;ADC.c: 138: }
  1457                           ;ADC.c: 139: if(ActualPercent>TempPercent)
  1458                           
  1459                           ;ADC.c: 140: {
  1460                           ;ADC.c: 141: if(ActualPercent)
  1461  02A0  22D1               	fcall	PL18	;call to abstracted procedure
  1462  02A1  1803               	skipnc
  1463  02A2  2AA7               	goto	L5
  1464  02A3  1903               	btfsc	3,2
  1465  02A4  2AB6               	goto	l6640
  1466                           
  1467                           ;ADC.c: 142: {
  1468                           ;ADC.c: 143: ActualPercent--;
  1469  02A5  03C0               	decf	Sec1sPro@ActualPercent,f
  1470  02A6  2AB6               	goto	l6640
  1471  02A7                     L5:	
  1472                           ;ADC.c: 146: else if(ActualPercent<TempPercent)
  1473                           
  1474  02A7  00D0               	movwf	??_Sec1sPro
  1475  02A8  01D1               	clrf	??_Sec1sPro+1
  1476  02A9  0854               	movf	Sec1sPro@TempPercent+1,w
  1477  02AA  0251               	subwf	??_Sec1sPro+1,w
  1478  02AB  1D03               	skipz
  1479  02AC  2AAF               	goto	u4315
  1480  02AD  0853               	movf	Sec1sPro@TempPercent,w
  1481  02AE  0250               	subwf	??_Sec1sPro,w
  1482  02AF                     u4315:	
  1483  02AF  1803               	skipnc
  1484  02B0  2AB6               	goto	l6640
  1485                           
  1486                           ;ADC.c: 147: {
  1487                           ;ADC.c: 148: if(ActualPercent<99)
  1488  02B1  3063               	movlw	99
  1489  02B2  0240               	subwf	Sec1sPro@ActualPercent,w
  1490  02B3  1803               	skipnc
  1491  02B4  2AB6               	goto	l6640
  1492                           
  1493                           ;ADC.c: 149: {
  1494                           ;ADC.c: 150: ActualPercent++;
  1495  02B5  0AC0               	incf	Sec1sPro@ActualPercent,f
  1496  02B6                     l6640:	
  1497                           
  1498                           ;ADC.c: 151: }
  1499                           ;ADC.c: 152: }
  1500                           ;ADC.c: 153: if(ActualPercent<BatPercent)
  1501  02B6  0846               	movf	_BatPercent,w
  1502  02B7  0240               	subwf	Sec1sPro@ActualPercent,w
  1503  02B8  1803               	skipnc
  1504  02B9  2ACE               	goto	l6652
  1505                           
  1506                           ;ADC.c: 154: {
  1507                           ;ADC.c: 155: PercentErr=BatPercent-ActualPercent;
  1508  02BA  0840               	movf	Sec1sPro@ActualPercent,w
  1509  02BB  0246               	subwf	_BatPercent,w
  1510  02BC  00D2               	movwf	Sec1sPro@PercentErr
  1511                           
  1512                           ;ADC.c: 156: if(PercentErr<5&&ActualPercent)
  1513  02BD  3005               	movlw	5
  1514  02BE  0252               	subwf	Sec1sPro@PercentErr,w
  1515  02BF  1803               	skipnc
  1516  02C0  2ACB               	goto	l6650
  1517  02C1  0840               	movf	Sec1sPro@ActualPercent,w
  1518  02C2  1903               	btfsc	3,2
  1519  02C3  2ACB               	goto	l6650
  1520                           
  1521                           ;ADC.c: 157: {
  1522                           ;ADC.c: 158: BatDecTime=75-15*PercentErr;
  1523  02C4  30F1               	movlw	241
  1524  02C5  00F5               	movwf	___bmul@multiplicand
  1525  02C6  0852               	movf	Sec1sPro@PercentErr,w
  1526  02C7  2795               	fcall	___bmul
  1527  02C8  3E4B               	addlw	75
  1528  02C9  00C4               	movwf	_BatDecTime
  1529                           
  1530                           ;ADC.c: 159: }
  1531  02CA  0008               	return
  1532  02CB                     l6650:	
  1533                           
  1534                           ;ADC.c: 160: else
  1535                           ;ADC.c: 161: {
  1536                           ;ADC.c: 162: BatDecTime=8;
  1537  02CB  3008               	movlw	8
  1538  02CC  00C4               	movwf	_BatDecTime
  1539  02CD  0008               	return
  1540  02CE                     l6652:	
  1541                           
  1542                           ;ADC.c: 165: else
  1543                           ;ADC.c: 166: {
  1544                           ;ADC.c: 167: BatDecTime=210;
  1545  02CE  30D2               	movlw	210
  1546  02CF  00C4               	movwf	_BatDecTime
  1547  02D0  0008               	return
  1548  02D1                     __end_of_Sec1sPro:	
  1549  02D1                     PL18:	
  1550  02D1  0840               	movf	Sec1sPro@ActualPercent,w
  1551  02D2  00D0               	movwf	??_Sec1sPro
  1552  02D3  01D1               	clrf	??_Sec1sPro+1
  1553  02D4  0851               	movf	??_Sec1sPro+1,w
  1554  02D5  0254               	subwf	Sec1sPro@TempPercent+1,w
  1555  02D6  1D03               	skipz
  1556  02D7  2ADA               	goto	u4195
  1557  02D8  0850               	movf	??_Sec1sPro,w
  1558  02D9  0253               	subwf	Sec1sPro@TempPercent,w
  1559  02DA                     u4195:	
  1560  02DA  0840               	movf	Sec1sPro@ActualPercent,w
  1561  02DB  0008               	return
  1562  02DC                     __end_ofPL18:	
  1563  02DC                     PL26:	
  1564  02DC  07D3               	addwf	Sec1sPro@TempPercent,f
  1565  02DD  1803               	skipnc
  1566  02DE  0AD4               	incf	Sec1sPro@TempPercent+1,f
  1567  02DF  30FE               	movlw	254
  1568  02E0  07D4               	addwf	Sec1sPro@TempPercent+1,f
  1569  02E1  0008               	return
  1570  02E2                     __end_ofPL26:	
  1571                           
  1572                           	psect	text6
  1573  064F                     __ptext6:	
  1574 ;; *************** function ___lwdiv *****************
  1575 ;; Defined at:
  1576 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  divisor         2    3[COMMON] unsigned int 
  1579 ;;  dividend        2    5[COMMON] unsigned int 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  quotient        2    1[BANK0 ] unsigned int 
  1582 ;;  counter         1    0[BANK0 ] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  2    3[COMMON] unsigned int 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0
  1587 ;; Tracked objects:
  1588 ;;		On entry : 300/0
  1589 ;;		On exit  : 300/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1
  1592 ;;      Params:         4       0       0
  1593 ;;      Locals:         0       3       0
  1594 ;;      Temps:          0       0       0
  1595 ;;      Totals:         4       3       0
  1596 ;;Total ram usage:        7 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    2
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_Sec1sPro
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function ___lwdiv
  1608  064F                     ___lwdiv:	
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1612  064F  01CE               	clrf	___lwdiv@quotient
  1613  0650  01CF               	clrf	___lwdiv@quotient+1
  1614  0651  0875               	movf	___lwdiv@divisor,w
  1615  0652  0476               	iorwf	___lwdiv@divisor+1,w
  1616  0653  1903               	btfsc	3,2
  1617  0654  2E74               	goto	l6522
  1618  0655  01CD               	clrf	___lwdiv@counter
  1619  0656                     L6:	
  1620  0656  0ACD               	incf	___lwdiv@counter,f
  1621  0657  1BF6               	btfsc	___lwdiv@divisor+1,7
  1622  0658  2E5D               	goto	l6510
  1623  0659  1003               	clrc
  1624  065A  0DF5               	rlf	___lwdiv@divisor,f
  1625  065B  0DF6               	rlf	___lwdiv@divisor+1,f
  1626  065C  2E56               	goto	L6
  1627  065D                     l6510:	
  1628  065D  1003               	clrc
  1629  065E  0DCE               	rlf	___lwdiv@quotient,f
  1630  065F  0DCF               	rlf	___lwdiv@quotient+1,f
  1631  0660  0876               	movf	___lwdiv@divisor+1,w
  1632  0661  0278               	subwf	___lwdiv@dividend+1,w
  1633  0662  1D03               	skipz
  1634  0663  2E66               	goto	u4095
  1635  0664  0875               	movf	___lwdiv@divisor,w
  1636  0665  0277               	subwf	___lwdiv@dividend,w
  1637  0666                     u4095:	
  1638  0666  1C03               	skipc
  1639  0667  2E70               	goto	L7
  1640  0668  0875               	movf	___lwdiv@divisor,w
  1641  0669  02F7               	subwf	___lwdiv@dividend,f
  1642  066A  0876               	movf	___lwdiv@divisor+1,w
  1643  066B  1C03               	skipc
  1644  066C  03F8               	decf	___lwdiv@dividend+1,f
  1645  066D  02F8               	subwf	___lwdiv@dividend+1,f
  1646  066E  144E               	bsf	___lwdiv@quotient,0
  1647  066F  1003               	clrc
  1648  0670                     L7:	
  1649  0670  0CF6               	rrf	___lwdiv@divisor+1,f
  1650  0671  0CF5               	rrf	___lwdiv@divisor,f
  1651  0672  0BCD               	decfsz	___lwdiv@counter,f
  1652  0673  2E5D               	goto	l6510
  1653  0674                     l6522:	
  1654  0674  084F               	movf	___lwdiv@quotient+1,w
  1655  0675  00F6               	movwf	?___lwdiv+1
  1656  0676  084E               	movf	___lwdiv@quotient,w
  1657  0677  00F5               	movwf	?___lwdiv
  1658  0678  0008               	return
  1659  0679                     __end_of___lwdiv:	
  1660                           
  1661                           	psect	text7
  1662  0476                     __ptext7:	
  1663 ;; *************** function _Motor *****************
  1664 ;; Defined at:
  1665 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, pclath, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 300/0
  1676 ;;		On exit  : 300/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMMON   BANK0   BANK1
  1679 ;;      Params:         0       0       0
  1680 ;;      Locals:         0       0       0
  1681 ;;      Temps:          0       0       0
  1682 ;;      Totals:         0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    3
  1686 ;; This function calls:
  1687 ;;		___wmul
  1688 ;; This function is called by:
  1689 ;;		_Apply
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           
  1694                           ;psect for function _Motor
  1695  0476                     _Motor:	
  1696                           
  1697                           ;Motor.c: 9: if(!WorkFlag)
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _Motor: [wreg+status,2+status,0+pclath+cstack]
  1701  0476  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1702  0477  2C7E               	goto	l4199
  1703                           
  1704                           ;Motor.c: 10: {
  1705                           ;Motor.c: 12: WorkCnt=0;
  1706  0478  1683               	bsf	3,5	;RP0=1, select bank1
  1707  0479  01D7               	clrf	_WorkCnt^(0+128)
  1708  047A  01D8               	clrf	(_WorkCnt+1)^(0+128)
  1709                           
  1710                           ;Motor.c: 13: TimeDecCnt=0;
  1711  047B  01D5               	clrf	_TimeDecCnt^(0+128)
  1712  047C  01D6               	clrf	(_TimeDecCnt+1)^(0+128)
  1713                           
  1714                           ;Motor.c: 14: }
  1715  047D  2CA9               	goto	l6854
  1716  047E                     l4199:	
  1717                           
  1718                           ;Motor.c: 15: else if(WorkFlag&&!LockSta.LockFlag)
  1719  047E  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1720  047F  1B2B               	btfsc	_LockSta,6
  1721  0480  2CA9               	goto	l6854
  1722                           
  1723                           ;Motor.c: 16: {
  1724                           ;Motor.c: 18: TimeDecCnt++;
  1725  0481  1683               	bsf	3,5	;RP0=1, select bank1
  1726  0482  0AD5               	incf	_TimeDecCnt^(0+128),f
  1727  0483  1903               	skipnz
  1728  0484  0AD6               	incf	(_TimeDecCnt+1)^(0+128),f
  1729                           
  1730                           ;Motor.c: 19: if(TimeDecCnt>=BatDecTime*100)
  1731  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1732  0486  0844               	movf	_BatDecTime,w
  1733  0487  24D1               	fcall	PL28	;call to abstracted procedure
  1734  0488  271A               	fcall	___wmul
  1735  0489  0876               	movf	?___wmul+1,w
  1736  048A  1683               	bsf	3,5	;RP0=1, select bank1
  1737  048B  0256               	subwf	(_TimeDecCnt+1)^(0+128),w
  1738  048C  1D03               	skipz
  1739  048D  2C90               	goto	u4605
  1740  048E  0875               	movf	?___wmul,w
  1741  048F  0255               	subwf	_TimeDecCnt^(0+128),w
  1742  0490                     u4605:	
  1743  0490  1C03               	skipc
  1744  0491  2C98               	goto	l4202
  1745                           
  1746                           ;Motor.c: 20: {
  1747                           ;Motor.c: 21: TimeDecCnt=0;
  1748  0492  01D5               	clrf	_TimeDecCnt^(0+128)
  1749  0493  01D6               	clrf	(_TimeDecCnt+1)^(0+128)
  1750                           
  1751                           ;Motor.c: 22: if(BatPercent)
  1752  0494  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0495  0846               	movf	_BatPercent,w
  1754  0496  1D03               	btfss	3,2
  1755                           
  1756                           ;Motor.c: 23: {
  1757                           ;Motor.c: 24: BatPercent--;
  1758  0497  03C6               	decf	_BatPercent,f
  1759  0498                     l4202:	
  1760                           
  1761                           ;Motor.c: 25: }
  1762                           ;Motor.c: 26: }
  1763                           ;Motor.c: 27: WorkCnt++;
  1764  0498  1683               	bsf	3,5	;RP0=1, select bank1
  1765  0499  0AD7               	incf	_WorkCnt^(0+128),f
  1766  049A  1903               	skipnz
  1767  049B  0AD8               	incf	(_WorkCnt+1)^(0+128),f
  1768                           
  1769                           ;Motor.c: 28: if(WorkCnt>=6000)
  1770  049C  3017               	movlw	23
  1771  049D  0258               	subwf	(_WorkCnt+1)^(0+128),w
  1772  049E  3070               	movlw	112
  1773  049F  1903               	skipnz
  1774  04A0  0257               	subwf	_WorkCnt^(0+128),w
  1775  04A1  1C03               	skipc
  1776  04A2  2CA9               	goto	l6854
  1777  04A3  3063               	movlw	99
  1778                           
  1779                           ;Motor.c: 29: {
  1780                           ;Motor.c: 30: WorkCnt=0;
  1781  04A4  01D7               	clrf	_WorkCnt^(0+128)
  1782  04A5  01D8               	clrf	(_WorkCnt+1)^(0+128)
  1783                           
  1784                           ;Motor.c: 31: if(WorkMin<99)
  1785  04A6  027A               	subwf	_WorkMin,w
  1786  04A7  1C03               	btfss	3,0
  1787                           
  1788                           ;Motor.c: 32: {
  1789                           ;Motor.c: 33: WorkMin++;
  1790  04A8  0AFA               	incf	_WorkMin,f
  1791  04A9                     l6854:	
  1792                           
  1793                           ;Motor.c: 34: }
  1794                           ;Motor.c: 35: }
  1795                           ;Motor.c: 36: }
  1796                           ;Motor.c: 37: if(USBFlag)
  1797  04A9  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1798  04AA  2CCD               	goto	l6870
  1799                           
  1800                           ;Motor.c: 38: {
  1801                           ;Motor.c: 39: TimeAddCnt++;
  1802  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  1803  04AC  0AD3               	incf	_TimeAddCnt^(0+128),f
  1804  04AD  1903               	skipnz
  1805  04AE  0AD4               	incf	(_TimeAddCnt+1)^(0+128),f
  1806                           
  1807                           ;Motor.c: 40: if(TimeAddCnt>BatAddTime*100)
  1808  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1809  04B0  0845               	movf	_BatAddTime,w
  1810  04B1  24D1               	fcall	PL28	;call to abstracted procedure
  1811  04B2  271A               	fcall	___wmul
  1812  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  1813  04B4  0854               	movf	(_TimeAddCnt+1)^(0+128),w
  1814  04B5  0276               	subwf	?___wmul+1,w
  1815  04B6  1D03               	skipz
  1816  04B7  2CBA               	goto	u4655
  1817  04B8  0853               	movf	_TimeAddCnt^(0+128),w
  1818  04B9  0275               	subwf	?___wmul,w
  1819  04BA                     u4655:	
  1820  04BA  1803               	skipnc
  1821  04BB  2CC3               	goto	l6866
  1822  04BC  3063               	movlw	99
  1823                           
  1824                           ;Motor.c: 41: {
  1825                           ;Motor.c: 42: TimeAddCnt=0;
  1826  04BD  01D3               	clrf	_TimeAddCnt^(0+128)
  1827  04BE  01D4               	clrf	(_TimeAddCnt+1)^(0+128)
  1828                           
  1829                           ;Motor.c: 43: if(BatPercent<99)
  1830  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  1831  04C0  0246               	subwf	_BatPercent,w
  1832  04C1  1C03               	btfss	3,0
  1833                           
  1834                           ;Motor.c: 44: {
  1835                           ;Motor.c: 45: BatPercent++;
  1836  04C2  0AC6               	incf	_BatPercent,f
  1837  04C3                     l6866:	
  1838                           
  1839                           ;Motor.c: 46: }
  1840                           ;Motor.c: 47: }
  1841                           ;Motor.c: 48: if(BatPercent<=250)
  1842  04C3  30FB               	movlw	251
  1843  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1844  04C5  0246               	subwf	_BatPercent,w
  1845  04C6  1803               	skipnc
  1846  04C7  2CCA               	goto	l4209
  1847                           
  1848                           ;Motor.c: 49: {
  1849                           ;Motor.c: 50: RA5 =0;
  1850  04C8  1285               	bcf	5,5	;volatile
  1851                           
  1852                           ;Motor.c: 51: }
  1853  04C9  0008               	return
  1854  04CA                     l4209:	
  1855                           
  1856                           ;Motor.c: 52: else
  1857                           ;Motor.c: 53: {
  1858                           ;Motor.c: 54: RA5 =1;
  1859  04CA  1283               	bcf	3,5	;RP0=0, select bank0
  1860  04CB  1685               	bsf	5,5	;volatile
  1861  04CC  0008               	return
  1862  04CD                     l6870:	
  1863                           
  1864                           ;Motor.c: 57: else
  1865                           ;Motor.c: 58: {
  1866                           ;Motor.c: 59: TimeAddCnt=0;
  1867  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  1868  04CE  01D3               	clrf	_TimeAddCnt^(0+128)
  1869  04CF  01D4               	clrf	(_TimeAddCnt+1)^(0+128)
  1870  04D0  2CCA               	goto	l4209
  1871  04D1                     __end_of_Motor:	
  1872  04D1                     PL28:	
  1873  04D1  00F5               	movwf	___wmul@multiplier
  1874  04D2  3064               	movlw	100
  1875  04D3  01F6               	clrf	___wmul@multiplier+1
  1876  04D4  00F7               	movwf	___wmul@multiplicand
  1877  04D5  01F8               	clrf	___wmul@multiplicand+1
  1878  04D6  0008               	return
  1879  04D7                     __end_ofPL28:	
  1880                           
  1881                           	psect	text8
  1882  071A                     __ptext8:	
  1883 ;; *************** function ___wmul *****************
  1884 ;; Defined at:
  1885 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul16.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  multiplier      2    3[COMMON] unsigned int 
  1888 ;;  multiplicand    2    5[COMMON] unsigned int 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  product         2    0[BANK0 ] unsigned int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2    3[COMMON] unsigned int 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 300/0
  1897 ;;		On exit  : 300/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1
  1900 ;;      Params:         4       0       0
  1901 ;;      Locals:         0       2       0
  1902 ;;      Temps:          0       0       0
  1903 ;;      Totals:         4       2       0
  1904 ;;Total ram usage:        6 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    2
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_Motor
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function ___wmul
  1916  071A                     ___wmul:	
  1917                           
  1918                           ;incstack = 0
  1919                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1920  071A  01CD               	clrf	___wmul@product
  1921  071B  01CE               	clrf	___wmul@product+1
  1922  071C                     l6816:	
  1923  071C  1C75               	btfss	___wmul@multiplier,0
  1924  071D  2F24               	goto	l6820
  1925  071E  0877               	movf	___wmul@multiplicand,w
  1926  071F  07CD               	addwf	___wmul@product,f
  1927  0720  1803               	skipnc
  1928  0721  0ACE               	incf	___wmul@product+1,f
  1929  0722  0878               	movf	___wmul@multiplicand+1,w
  1930  0723  07CE               	addwf	___wmul@product+1,f
  1931  0724                     l6820:	
  1932  0724  1003               	clrc
  1933  0725  0DF7               	rlf	___wmul@multiplicand,f
  1934  0726  0DF8               	rlf	___wmul@multiplicand+1,f
  1935  0727  1003               	clrc
  1936  0728  0CF6               	rrf	___wmul@multiplier+1,f
  1937  0729  0CF5               	rrf	___wmul@multiplier,f
  1938  072A  0875               	movf	___wmul@multiplier,w
  1939  072B  0476               	iorwf	___wmul@multiplier+1,w
  1940  072C  1D03               	btfss	3,2
  1941  072D  2F1C               	goto	l6816
  1942  072E  084E               	movf	___wmul@product+1,w
  1943  072F  00F6               	movwf	?___wmul+1
  1944  0730  084D               	movf	___wmul@product,w
  1945  0731  00F5               	movwf	?___wmul
  1946  0732  0008               	return
  1947  0733                     __end_of___wmul:	
  1948                           
  1949                           	psect	text9
  1950  013A                     __ptext9:	
  1951 ;; *************** function _KeyScan *****************
  1952 ;; Defined at:
  1953 ;;		line 9 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Key.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;		None
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/200
  1964 ;;		On exit  : 300/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1
  1967 ;;      Params:         0       0       0
  1968 ;;      Locals:         0       0       0
  1969 ;;      Temps:          1       0       0
  1970 ;;      Totals:         1       0       0
  1971 ;;Total ram usage:        1 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    2
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_Apply
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _KeyScan
  1983  013A                     _KeyScan:	
  1984                           
  1985                           ;Key.c: 11: if(!RA6)
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  1989  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1990  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1991  013C  1B05               	btfsc	5,6	;volatile
  1992  013D  2940               	goto	l2371
  1993                           
  1994                           ;Key.c: 12: {
  1995                           ;Key.c: 13: KeyPress=1;
  1996  013E  16F0               	bsf	_KeyPress/(0+8),_KeyPress& (0+7)
  1997                           
  1998                           ;Key.c: 14: }
  1999  013F  2941               	goto	l2372
  2000  0140                     l2371:	
  2001                           
  2002                           ;Key.c: 15: else
  2003                           ;Key.c: 16: {
  2004                           ;Key.c: 17: KeyPress=0;
  2005  0140  12F0               	bcf	_KeyPress/(0+8),_KeyPress& (0+7)
  2006  0141                     l2372:	
  2007                           
  2008                           ;Key.c: 18: }
  2009                           ;Key.c: 20: if(KeyPress&&KeyCnt<10&&KeyInBuf==KeyPress&&!IovFlag)
  2010  0141  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2011  0142  296E               	goto	l2373
  2012  0143  3000               	movlw	0
  2013  0144  022A               	subwf	_KeyCnt+1,w
  2014  0145  300A               	movlw	10
  2015  0146  1903               	skipnz
  2016  0147  0229               	subwf	_KeyCnt,w
  2017  0148  1803               	skipnc
  2018  0149  296E               	goto	l2373
  2019  014A  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2020  014B  294E               	goto	u2770
  2021  014C  3001               	movlw	1
  2022  014D  294F               	goto	u2772
  2023  014E                     u2770:	
  2024  014E  3000               	movlw	0
  2025  014F                     u2772:	
  2026  014F  00F5               	movwf	??_KeyScan
  2027  0150  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2028  0151  2954               	goto	u2780
  2029  0152  3001               	movlw	1
  2030  0153  2955               	goto	u2782
  2031  0154                     u2780:	
  2032  0154  3000               	movlw	0
  2033  0155                     u2782:	
  2034  0155  0675               	xorwf	??_KeyScan,w
  2035  0156  1903               	btfsc	3,2
  2036  0157  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2037  0158  296E               	goto	l2373
  2038                           
  2039                           ;Key.c: 21: {
  2040                           ;Key.c: 22: KeyCnt++;
  2041                           
  2042                           ;Key.c: 23: if(KeyCnt>=10)
  2043  0159  220B               	fcall	PL32	;call to abstracted procedure
  2044  015A  300A               	movlw	10
  2045  015B  1903               	skipnz
  2046  015C  0229               	subwf	_KeyCnt,w
  2047  015D  1C03               	skipc
  2048  015E  29F8               	goto	l2377
  2049                           
  2050                           ;Key.c: 24: {
  2051                           ;Key.c: 25: WorkFlag=~WorkFlag;
  2052  015F  3004               	movlw	(0+1) shl (_WorkFlag& (0+7))
  2053  0160  06F1               	xorwf	_WorkFlag/(0+8),f
  2054                           
  2055                           ;Key.c: 26: if(!WorkFlag&&WorkMin&&!USBFlag&&!LockSta.LockFlag)
  2056  0161  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2057  0162  296B               	goto	l2375
  2058  0163  087A               	movf	_WorkMin,w
  2059  0164  1D03               	btfss	3,2
  2060  0165  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2061  0166  296B               	goto	l2375
  2062  0167  1B2B               	btfsc	_LockSta,6
  2063  0168  296B               	goto	l2375
  2064                           
  2065                           ;Key.c: 27: {
  2066                           ;Key.c: 28: OnOffFlag=1;
  2067  0169  17F0               	bsf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2068                           
  2069                           ;Key.c: 29: }
  2070  016A  29F8               	goto	l2377
  2071  016B                     l2375:	
  2072                           
  2073                           ;Key.c: 30: else
  2074                           ;Key.c: 31: {
  2075                           ;Key.c: 32: OnOffFlag=0;
  2076  016B  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2077                           
  2078                           ;Key.c: 33: WorkMin=0;
  2079  016C  01FA               	clrf	_WorkMin
  2080  016D  29F8               	goto	l2377
  2081  016E                     l2373:	
  2082                           
  2083                           ;Key.c: 37: else if(KeyPress&&KeyCnt>=10&&KeyCnt<250&&KeyInBuf==KeyPress&&!USBFlag)
  2084  016E  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2085  016F  299E               	goto	l2378
  2086  0170  3000               	movlw	0
  2087  0171  022A               	subwf	_KeyCnt+1,w
  2088  0172  300A               	movlw	10
  2089  0173  1903               	skipnz
  2090  0174  0229               	subwf	_KeyCnt,w
  2091  0175  1C03               	skipc
  2092  0176  299E               	goto	l2378
  2093  0177  3000               	movlw	0
  2094  0178  022A               	subwf	_KeyCnt+1,w
  2095  0179  30FA               	movlw	250
  2096  017A  1903               	skipnz
  2097  017B  0229               	subwf	_KeyCnt,w
  2098  017C  1803               	skipnc
  2099  017D  299E               	goto	l2378
  2100  017E  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2101  017F  2982               	goto	u2890
  2102  0180  3001               	movlw	1
  2103  0181  2983               	goto	u2892
  2104  0182                     u2890:	
  2105  0182  3000               	movlw	0
  2106  0183                     u2892:	
  2107  0183  00F5               	movwf	??_KeyScan
  2108  0184  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2109  0185  2988               	goto	u2900
  2110  0186  3001               	movlw	1
  2111  0187  2989               	goto	u2902
  2112  0188                     u2900:	
  2113  0188  3000               	movlw	0
  2114  0189                     u2902:	
  2115  0189  0675               	xorwf	??_KeyScan,w
  2116  018A  1903               	btfsc	3,2
  2117  018B  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2118  018C  299E               	goto	l2378
  2119                           
  2120                           ;Key.c: 38: {
  2121                           ;Key.c: 39: KeyCnt++;
  2122                           
  2123                           ;Key.c: 40: if(KeyCnt>=250)
  2124  018D  220B               	fcall	PL32	;call to abstracted procedure
  2125  018E  30FA               	movlw	250
  2126  018F  1903               	skipnz
  2127  0190  0229               	subwf	_KeyCnt,w
  2128  0191  1C03               	skipc
  2129  0192  29F8               	goto	l2377
  2130                           
  2131                           ;Key.c: 41: {
  2132                           ;Key.c: 42: LockNumb=2;
  2133  0193  3002               	movlw	2
  2134  0194  00BC               	movwf	_LockNumb
  2135                           
  2136                           ;Key.c: 43: if(!LockSta.LockFlag)
  2137  0195  1B2B               	btfsc	_LockSta,6
  2138  0196  299A               	goto	l2380
  2139                           
  2140                           ;Key.c: 44: {
  2141                           ;Key.c: 45: LockSta.LockStart=1;
  2142  0197  142B               	bsf	_LockSta,0
  2143                           
  2144                           ;Key.c: 46: LockSta.UnlockEnd=0;
  2145  0198  12AB               	bcf	_LockSta,5
  2146                           
  2147                           ;Key.c: 47: }
  2148  0199  299C               	goto	l2381
  2149  019A                     l2380:	
  2150                           
  2151                           ;Key.c: 48: else
  2152                           ;Key.c: 49: {
  2153                           ;Key.c: 50: LockSta.UnlockStart=1;
  2154  019A  15AB               	bsf	_LockSta,3
  2155                           
  2156                           ;Key.c: 51: LockSta.LockEnd=0;
  2157  019B  112B               	bcf	_LockSta,2
  2158  019C                     l2381:	
  2159                           
  2160                           ;Key.c: 52: }
  2161                           ;Key.c: 53: OnOffFlag=0;
  2162  019C  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2163  019D  29F8               	goto	l2377
  2164  019E                     l2378:	
  2165                           
  2166                           ;Key.c: 56: else if(KeyPress&&KeyCnt>=250&&KeyInBuf==KeyPress&&!LockSta.LockEnd&&!LockSt
      +                          a.UnlockEnd)
  2167  019E  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2168  019F  29DA               	goto	l2383
  2169  01A0  3000               	movlw	0
  2170  01A1  022A               	subwf	_KeyCnt+1,w
  2171  01A2  30FA               	movlw	250
  2172  01A3  1903               	skipnz
  2173  01A4  0229               	subwf	_KeyCnt,w
  2174  01A5  1C03               	skipc
  2175  01A6  29DA               	goto	l2383
  2176  01A7  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2177  01A8  29AB               	goto	u2970
  2178  01A9  3001               	movlw	1
  2179  01AA  29AC               	goto	u2972
  2180  01AB                     u2970:	
  2181  01AB  3000               	movlw	0
  2182  01AC                     u2972:	
  2183  01AC  00F5               	movwf	??_KeyScan
  2184  01AD  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2185  01AE  29B1               	goto	u2980
  2186  01AF  3001               	movlw	1
  2187  01B0  29B2               	goto	u2982
  2188  01B1                     u2980:	
  2189  01B1  3000               	movlw	0
  2190  01B2                     u2982:	
  2191  01B2  0675               	xorwf	??_KeyScan,w
  2192  01B3  1903               	btfsc	3,2
  2193  01B4  192B               	btfsc	_LockSta,2
  2194  01B5  29DA               	goto	l2383
  2195  01B6  1AAB               	btfsc	_LockSta,5
  2196  01B7  29DA               	goto	l2383
  2197                           
  2198                           ;Key.c: 57: {
  2199                           ;Key.c: 58: KeyCnt++;
  2200  01B8  0AA9               	incf	_KeyCnt,f
  2201  01B9  1903               	skipnz
  2202  01BA  0AAA               	incf	_KeyCnt+1,f
  2203                           
  2204                           ;Key.c: 59: if(KeyCnt>=1750)
  2205  01BB  3006               	movlw	6
  2206  01BC  022A               	subwf	_KeyCnt+1,w
  2207  01BD  30D6               	movlw	214
  2208  01BE  1903               	skipnz
  2209  01BF  0229               	subwf	_KeyCnt,w
  2210  01C0  1C03               	skipc
  2211  01C1  29F8               	goto	l2377
  2212                           
  2213                           ;Key.c: 60: {
  2214                           ;Key.c: 61: KeyCnt=1750;
  2215  01C2  30D6               	movlw	214
  2216  01C3  00A9               	movwf	_KeyCnt
  2217  01C4  3006               	movlw	6
  2218  01C5  00AA               	movwf	_KeyCnt+1
  2219                           
  2220                           ;Key.c: 62: LockSta.LockFlag=!LockSta.LockFlag;
  2221  01C6  1003               	clrc
  2222  01C7  1F2B               	btfss	_LockSta,6
  2223  01C8  1403               	setc
  2224  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  2225  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  2226  01CB  1C03               	btfss	3,0
  2227  01CC  29CF               	goto	L8
  2228  01CD  172B               	bsf	_LockSta,6
  2229  01CE  29D0               	goto	l6014
  2230  01CF                     L8:	
  2231  01CF  132B               	bcf	_LockSta,6
  2232  01D0                     l6014:	
  2233                           
  2234                           ;Key.c: 63: if(LockSta.LockFlag)
  2235  01D0  1F2B               	btfss	_LockSta,6
  2236  01D1  29D6               	goto	l2385
  2237                           
  2238                           ;Key.c: 64: {
  2239                           ;Key.c: 65: LockSta.LockStart=0;
  2240  01D2  102B               	bcf	_LockSta,0
  2241                           
  2242                           ;Key.c: 66: LockSta.LockEnd=1;
  2243  01D3  152B               	bsf	_LockSta,2
  2244                           
  2245                           ;Key.c: 67: WorkFlag=0;
  2246  01D4  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2247                           
  2248                           ;Key.c: 68: }
  2249  01D5  29F8               	goto	l2377
  2250  01D6                     l2385:	
  2251                           
  2252                           ;Key.c: 69: else
  2253                           ;Key.c: 70: {
  2254                           ;Key.c: 71: LockSta.UnlockStart=0;
  2255  01D6  11AB               	bcf	_LockSta,3
  2256                           
  2257                           ;Key.c: 72: LockSta.UnlockEnd=1;
  2258  01D7  16AB               	bsf	_LockSta,5
  2259                           
  2260                           ;Key.c: 73: WorkFlag=1;
  2261  01D8  1571               	bsf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2262  01D9  29F8               	goto	l2377
  2263  01DA                     l2383:	
  2264                           
  2265                           ;Key.c: 77: else if(!KeyPress||KeyInBuf!=KeyPress)
  2266  01DA  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2267  01DB  29EA               	goto	l6020
  2268  01DC  1EF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2269  01DD  29E0               	goto	u3070
  2270  01DE  3001               	movlw	1
  2271  01DF  29E1               	goto	u3072
  2272  01E0                     u3070:	
  2273  01E0  3000               	movlw	0
  2274  01E1                     u3072:	
  2275  01E1  00F5               	movwf	??_KeyScan
  2276  01E2  1F70               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2277  01E3  29E6               	goto	u3080
  2278  01E4  3001               	movlw	1
  2279  01E5  29E7               	goto	u3082
  2280  01E6                     u3080:	
  2281  01E6  3000               	movlw	0
  2282  01E7                     u3082:	
  2283  01E7  0675               	xorwf	??_KeyScan,w
  2284  01E8  1903               	skipnz
  2285  01E9  29F8               	goto	l2377
  2286  01EA                     l6020:	
  2287                           
  2288                           ;Key.c: 78: {
  2289                           ;Key.c: 79: KeyCnt=0;
  2290  01EA  01A9               	clrf	_KeyCnt
  2291  01EB  01AA               	clrf	_KeyCnt+1
  2292                           
  2293                           ;Key.c: 80: LockSta.UnlockEnd=0;
  2294  01EC  12AB               	bcf	_LockSta,5
  2295                           
  2296                           ;Key.c: 81: if((LockSta.LockFlag&&WorkFlag)||LockSta.UnlockStart)
  2297  01ED  1F2B               	btfss	_LockSta,6
  2298  01EE  29F1               	goto	l2395
  2299  01EF  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2300  01F0  29F3               	goto	l2393
  2301  01F1                     l2395:	
  2302  01F1  1DAB               	btfss	_LockSta,3
  2303  01F2  29F6               	goto	l2391
  2304  01F3                     l2393:	
  2305                           
  2306                           ;Key.c: 82: {
  2307                           ;Key.c: 83: LockSta.UnlockStart=0;
  2308  01F3  11AB               	bcf	_LockSta,3
  2309                           
  2310                           ;Key.c: 84: LockSta.UnlockFail=1;
  2311  01F4  162B               	bsf	_LockSta,4
  2312                           
  2313                           ;Key.c: 85: WorkFlag=0;
  2314  01F5  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2315  01F6                     l2391:	
  2316                           
  2317                           ;Key.c: 86: }
  2318                           ;Key.c: 87: if(LockSta.LockStart)
  2319  01F6  182B               	btfsc	_LockSta,0
  2320                           
  2321                           ;Key.c: 88: {
  2322                           ;Key.c: 89: LockSta.LockStart=0;
  2323  01F7  102B               	bcf	_LockSta,0
  2324  01F8                     l2377:	
  2325                           
  2326                           ;Key.c: 90: }
  2327                           ;Key.c: 91: }
  2328                           ;Key.c: 92: KeyInBuf=KeyPress;
  2329  01F8  1370               	bcf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2330  01F9  1AF0               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2331  01FA  1770               	bsf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2332                           
  2333                           ;Key.c: 94: if(!RA7)
  2334  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2335  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2336  01FD  1B85               	btfsc	5,7	;volatile
  2337  01FE  2A01               	goto	l2397
  2338                           
  2339                           ;Key.c: 95: {
  2340                           ;Key.c: 96: USBLink=1;
  2341  01FF  1670               	bsf	_USBLink/(0+8),_USBLink& (0+7)
  2342                           
  2343                           ;Key.c: 97: }
  2344  0200  2A02               	goto	l2398
  2345  0201                     l2397:	
  2346                           
  2347                           ;Key.c: 98: else
  2348                           ;Key.c: 99: {
  2349                           ;Key.c: 100: USBLink=0;
  2350  0201  1270               	bcf	_USBLink/(0+8),_USBLink& (0+7)
  2351  0202                     l2398:	
  2352                           
  2353                           ;Key.c: 101: }
  2354                           ;Key.c: 103: if(USBLink&&!IovFlag)
  2355  0202  1A70               	btfsc	_USBLink/(0+8),_USBLink& (0+7)
  2356  0203  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2357  0204  2A08               	goto	l2399
  2358                           
  2359                           ;Key.c: 104: {
  2360                           ;Key.c: 105: USBFlag=1;
  2361  0205  15F1               	bsf	_USBFlag/(0+8),_USBFlag& (0+7)
  2362                           
  2363                           ;Key.c: 106: LockSta.LockFlag=0;
  2364  0206  132B               	bcf	_LockSta,6
  2365                           
  2366                           ;Key.c: 107: }
  2367  0207  0008               	return
  2368  0208                     l2399:	
  2369                           
  2370                           ;Key.c: 108: else if(!USBLink)
  2371  0208  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2372                           
  2373                           ;Key.c: 109: {
  2374                           ;Key.c: 110: USBFlag=0;
  2375  0209  11F1               	bcf	_USBFlag/(0+8),_USBFlag& (0+7)
  2376  020A  0008               	return
  2377  020B                     __end_of_KeyScan:	
  2378  020B                     PL32:	
  2379  020B  0AA9               	incf	_KeyCnt,f
  2380  020C  1903               	skipnz
  2381  020D  0AAA               	incf	_KeyCnt+1,f
  2382  020E  3000               	movlw	0
  2383  020F  022A               	subwf	_KeyCnt+1,w
  2384  0210  0008               	return
  2385  0211                     __end_ofPL32:	
  2386                           
  2387                           	psect	text10
  2388  07A3                     __ptext10:	
  2389 ;; *************** function _DisplayPro *****************
  2390 ;; Defined at:
  2391 ;;		line 144 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 300/0
  2402 ;;		On exit  : B00/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMMON   BANK0   BANK1
  2405 ;;      Params:         0       0       0
  2406 ;;      Locals:         0       0       0
  2407 ;;      Temps:          0       0       0
  2408 ;;      Totals:         0       0       0
  2409 ;;Total ram usage:        0 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    4
  2412 ;; This function calls:
  2413 ;;		_DisplayIcon
  2414 ;;		_ErrPro
  2415 ;;		_LockPro
  2416 ;;		_USBLedPro
  2417 ;;		_WorkLedPro
  2418 ;; This function is called by:
  2419 ;;		_Apply
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           
  2424                           ;psect for function _DisplayPro
  2425  07A3                     _DisplayPro:	
  2426                           
  2427                           ;LED.c: 146: LedIndex=0;
  2428                           
  2429                           ;incstack = 0
  2430                           ; Regs used in _DisplayPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2431  07A3  1683               	bsf	3,5	;RP0=1, select bank1
  2432  07A4  01D9               	clrf	_LedIndex^(0+128)
  2433  07A5  01DA               	clrf	(_LedIndex+1)^(0+128)
  2434                           
  2435                           ;LED.c: 147: WorkLedPro();
  2436  07A6  237D               	fcall	_WorkLedPro
  2437                           
  2438                           ;LED.c: 148: USBLedPro();
  2439  07A7  2409               	fcall	_USBLedPro
  2440                           
  2441                           ;LED.c: 149: LockPro();
  2442  07A8  24D7               	fcall	_LockPro
  2443                           
  2444                           ;LED.c: 150: ErrPro();
  2445  07A9  2762               	fcall	_ErrPro
  2446                           
  2447                           ;LED.c: 151: DisplayIcon(LedIndex);
  2448  07AA  1683               	bsf	3,5	;RP0=1, select bank1
  2449  07AB  085A               	movf	(_LedIndex+1)^(0+128),w
  2450  07AC  00F6               	movwf	DisplayIcon@index+1
  2451  07AD  0859               	movf	_LedIndex^(0+128),w
  2452  07AE  00F5               	movwf	DisplayIcon@index
  2453  07AF  2DAE               	ljmp	l6366
  2454  07B0                     __end_of_DisplayPro:	
  2455                           
  2456                           	psect	text11
  2457  037D                     __ptext11:	
  2458 ;; *************** function _WorkLedPro *****************
  2459 ;; Defined at:
  2460 ;;		line 192 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 300/100
  2471 ;;		On exit  : 200/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1
  2474 ;;      Params:         0       0       0
  2475 ;;      Locals:         0       0       0
  2476 ;;      Temps:          0       2       0
  2477 ;;      Totals:         0       2       0
  2478 ;;Total ram usage:        2 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    3
  2481 ;; This function calls:
  2482 ;;		___bmul
  2483 ;;		___lbdiv
  2484 ;;		___lbmod
  2485 ;; This function is called by:
  2486 ;;		_DisplayPro
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           
  2491                           ;psect for function _WorkLedPro
  2492  037D                     _WorkLedPro:	
  2493                           
  2494                           ;LED.c: 194: static char LedSwitchCnt=0;
  2495                           ;LED.c: 195: static bit LedSwitchFlag=0;
  2496                           ;LED.c: 196: static char index=0;
  2497                           ;LED.c: 197: static unsigned char cnt=0;
  2498                           ;LED.c: 198: static bit dir=0;
  2499                           ;LED.c: 199: if(WorkFlag&&!LockSta.LockStart&&!OnOffFlag&&!LockSta.LockFlag)
  2500                           
  2501                           ;incstack = 0
  2502                           ; Regs used in _WorkLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2503  037D  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2504  037E  2BA7               	goto	l3042
  2505  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2506  0380  1C2B               	btfss	_LockSta,0
  2507  0381  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2508  0382  2BA7               	goto	l3042
  2509  0383  1B2B               	btfsc	_LockSta,6
  2510  0384  2BA7               	goto	l3042
  2511                           
  2512                           ;LED.c: 200: {
  2513                           ;LED.c: 201: if(BatPercent<=10)
  2514  0385  300B               	movlw	11
  2515  0386  0246               	subwf	_BatPercent,w
  2516  0387  1803               	skipnc
  2517  0388  2B92               	goto	l6404
  2518  0389  3028               	movlw	40
  2519                           
  2520                           ;LED.c: 202: {
  2521                           ;LED.c: 203: LedSwitchCnt++;
  2522  038A  0AB7               	incf	WorkLedPro@LedSwitchCnt,f
  2523                           
  2524                           ;LED.c: 204: if(LedSwitchCnt>=40)
  2525  038B  0237               	subwf	WorkLedPro@LedSwitchCnt,w
  2526  038C  1C03               	skipc
  2527  038D  2B94               	goto	l6408
  2528  038E  3008               	movlw	(0+1) shl (WorkLedPro@LedSwitchFlag& (0+7))
  2529                           
  2530                           ;LED.c: 205: {
  2531                           ;LED.c: 206: LedSwitchCnt=0;
  2532  038F  01B7               	clrf	WorkLedPro@LedSwitchCnt
  2533                           
  2534                           ;LED.c: 207: LedSwitchFlag=!LedSwitchFlag;
  2535  0390  06F0               	xorwf	WorkLedPro@LedSwitchFlag/(0+8),f
  2536  0391  2B94               	goto	l6408
  2537  0392                     l6404:	
  2538                           
  2539                           ;LED.c: 210: else
  2540                           ;LED.c: 211: {
  2541                           ;LED.c: 212: LedSwitchCnt=0;
  2542  0392  01B7               	clrf	WorkLedPro@LedSwitchCnt
  2543                           
  2544                           ;LED.c: 213: LedSwitchFlag=1;
  2545  0393  15F0               	bsf	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2546  0394                     l6408:	
  2547                           
  2548                           ;LED.c: 214: }
  2549                           ;LED.c: 215: if(LedSwitchFlag)
  2550  0394  1DF0               	btfss	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2551  0395  0008               	return
  2552                           
  2553                           ;LED.c: 216: {
  2554                           ;LED.c: 217: LedIndex|=NumbArr[BatPercent/10];
  2555  0396  300A               	movlw	10
  2556  0397  00F5               	movwf	___lbdiv@divisor
  2557  0398  0846               	movf	_BatPercent,w
  2558  0399  26E4               	fcall	___lbdiv
  2559  039A  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2560  039B  0084               	movwf	4
  2561  039C  1383               	bcf	3,7	;select IRP bank1
  2562  039D  0800               	movf	0,w
  2563  039E  1683               	bsf	3,5	;RP0=1, select bank1
  2564  039F  04D9               	iorwf	_LedIndex^(0+128),f
  2565                           
  2566                           ;LED.c: 218: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2567  03A0  300A               	movlw	10
  2568  03A1  00F5               	movwf	___lbmod@divisor
  2569  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2570  03A3  0846               	movf	_BatPercent,w
  2571  03A4  26C8               	fcall	___lbmod
  2572  03A5  23E5               	fcall	PL2	;call to abstracted procedure
  2573  03A6  0008               	return
  2574  03A7                     l3042:	
  2575                           
  2576                           ;LED.c: 221: else if(OnOffFlag)
  2577  03A7  1FF0               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2578  03A8  0008               	return
  2579  03A9  3028               	movlw	40
  2580                           
  2581                           ;LED.c: 222: {
  2582                           ;LED.c: 223: cnt++;
  2583  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2584  03AB  0AB5               	incf	WorkLedPro@cnt,f
  2585                           
  2586                           ;LED.c: 224: if(cnt>=40)
  2587  03AC  0235               	subwf	WorkLedPro@cnt,w
  2588  03AD  1C03               	skipc
  2589  03AE  2BBD               	goto	l6436
  2590  03AF  3007               	movlw	7
  2591                           
  2592                           ;LED.c: 225: {
  2593                           ;LED.c: 226: cnt=0;
  2594  03B0  01B5               	clrf	WorkLedPro@cnt
  2595                           
  2596                           ;LED.c: 227: index++;
  2597  03B1  0AB6               	incf	WorkLedPro@index,f
  2598                           
  2599                           ;LED.c: 228: if(index>=7)
  2600  03B2  0236               	subwf	WorkLedPro@index,w
  2601  03B3  1C03               	skipc
  2602  03B4  2BBD               	goto	l6436
  2603                           
  2604                           ;LED.c: 229: {
  2605                           ;LED.c: 230: if(dir)
  2606  03B5  1D70               	btfss	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2607  03B6  2BBA               	goto	l6432
  2608                           
  2609                           ;LED.c: 231: {
  2610                           ;LED.c: 232: OnOffFlag=0;
  2611  03B7  13F0               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2612                           
  2613                           ;LED.c: 233: WorkMin=0;
  2614  03B8  01FA               	clrf	_WorkMin
  2615  03B9  0008               	return
  2616  03BA                     l6432:	
  2617                           
  2618                           ;LED.c: 235: }
  2619                           ;LED.c: 236: dir=!dir;
  2620  03BA  3004               	movlw	(0+1) shl (WorkLedPro@dir& (0+7))
  2621  03BB  06F0               	xorwf	WorkLedPro@dir/(0+8),f
  2622                           
  2623                           ;LED.c: 237: index=0;
  2624  03BC  01B6               	clrf	WorkLedPro@index
  2625  03BD                     l6436:	
  2626                           
  2627                           ;LED.c: 238: }
  2628                           ;LED.c: 239: }
  2629                           ;LED.c: 240: if(!dir)
  2630  03BD  1970               	btfsc	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2631  03BE  2BCC               	goto	l6444
  2632                           
  2633                           ;LED.c: 241: {
  2634                           ;LED.c: 242: LedIndex=NumbArr[BatPercent/10];
  2635  03BF  300A               	movlw	10
  2636  03C0  00F5               	movwf	___lbdiv@divisor
  2637  03C1  0846               	movf	_BatPercent,w
  2638  03C2  26E4               	fcall	___lbdiv
  2639                           
  2640                           ;LED.c: 243: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2641  03C3  2464               	fcall	PL6	;call to abstracted procedure
  2642  03C4  26C8               	fcall	___lbmod
  2643  03C5  23E5               	fcall	PL2	;call to abstracted procedure
  2644                           
  2645                           ;LED.c: 244: LedIndex&=~OffHideNumbArr[index];
  2646  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  2647  03C7  1003               	clrc
  2648  03C8  0D36               	rlf	WorkLedPro@index,w
  2649  03C9  3EB0               	addlw	(low (_OffHideNumbArr| 0))& (0+255)
  2650  03CA  0084               	movwf	4
  2651                           
  2652                           ;LED.c: 245: }
  2653  03CB  2BFA               	ljmp	PL10	;call to abstracted procedure
  2654  03CC                     l6444:	
  2655                           
  2656                           ;LED.c: 246: else
  2657                           ;LED.c: 247: {
  2658                           ;LED.c: 248: LedIndex=NumbArr[WorkMin/10];
  2659  03CC  300A               	movlw	10
  2660  03CD  00F5               	movwf	___lbdiv@divisor
  2661  03CE  087A               	movf	_WorkMin,w
  2662  03CF  26E4               	fcall	___lbdiv
  2663  03D0  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2664  03D1  0084               	movwf	4
  2665  03D2  1383               	bcf	3,7	;select IRP bank1
  2666  03D3  0800               	movf	0,w
  2667  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  2668  03D5  00D9               	movwf	_LedIndex^(0+128)
  2669  03D6  300A               	movlw	10
  2670  03D7  01DA               	clrf	(_LedIndex+1)^(0+128)
  2671                           
  2672                           ;LED.c: 249: LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
  2673  03D8  00F5               	movwf	___lbmod@divisor
  2674  03D9  087A               	movf	_WorkMin,w
  2675  03DA  26C8               	fcall	___lbmod
  2676  03DB  23E5               	fcall	PL2	;call to abstracted procedure
  2677                           
  2678                           ;LED.c: 250: LedIndex&=~OffHideNumbArr[6-index];
  2679  03DC  30FE               	movlw	254
  2680  03DD  00F5               	movwf	___bmul@multiplicand
  2681  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2682  03DF  0836               	movf	WorkLedPro@index,w
  2683  03E0  2795               	fcall	___bmul
  2684  03E1  3EBC               	addlw	(low ((_OffHideNumbArr| 0+12)))& (0+255)
  2685  03E2  0084               	movwf	4
  2686  03E3  1383               	bcf	3,7	;select IRP bank1
  2687  03E4  2BFA               	ljmp	PL10	;call to abstracted procedure
  2688  03E5                     __end_of_WorkLedPro:	
  2689  03E5                     PL2:	
  2690  03E5  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2691  03E6  0084               	movwf	4
  2692  03E7  0800               	movf	0,w
  2693  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2694  03E9  00CD               	movwf	??_WorkLedPro
  2695  03EA  3007               	movlw	7
  2696  03EB  01CE               	clrf	??_WorkLedPro+1
  2697  03EC  00FF               	movwf	127
  2698  03ED                     u3895:	
  2699  03ED  1003               	clrc
  2700  03EE  0DCD               	rlf	??_WorkLedPro,f
  2701  03EF  0DCE               	rlf	??_WorkLedPro+1,f
  2702  03F0  0BFF               	decfsz	127,f
  2703  03F1  2BED               	goto	u3895
  2704  03F2  084D               	movf	??_WorkLedPro,w
  2705  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2706  03F4  04D9               	iorwf	_LedIndex^(0+128),f
  2707  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2708  03F6  084E               	movf	??_WorkLedPro+1,w
  2709  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2710  03F8  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2711  03F9  0008               	return
  2712  03FA                     __end_ofPL2:	
  2713  03FA                     PL10:	
  2714  03FA  0800               	movf	0,w
  2715  03FB  00CD               	movwf	??_WorkLedPro
  2716  03FC  0A84               	incf	4,f
  2717  03FD  0800               	movf	0,w
  2718  03FE  00CE               	movwf	??_WorkLedPro+1
  2719  03FF  09CD               	comf	??_WorkLedPro,f
  2720  0400  09CE               	comf	??_WorkLedPro+1,f
  2721  0401  084D               	movf	??_WorkLedPro,w
  2722  0402  1683               	bsf	3,5	;RP0=1, select bank1
  2723  0403  05D9               	andwf	_LedIndex^(0+128),f
  2724  0404  1283               	bcf	3,5	;RP0=0, select bank0
  2725  0405  084E               	movf	??_WorkLedPro+1,w
  2726  0406  1683               	bsf	3,5	;RP0=1, select bank1
  2727  0407  05DA               	andwf	(_LedIndex+1)^(0+128),f
  2728  0408  0008               	return
  2729  0409                     __end_ofPL10:	
  2730                           
  2731                           	psect	text12
  2732  0795                     __ptext12:	
  2733 ;; *************** function ___bmul *****************
  2734 ;; Defined at:
  2735 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  multiplier      1    wreg     unsigned char 
  2738 ;;  multiplicand    1    3[COMMON] unsigned char 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  multiplier      1    5[COMMON] unsigned char 
  2741 ;;  product         1    4[COMMON] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  1    wreg      unsigned char 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 300/0
  2748 ;;		On exit  : 300/0
  2749 ;;		Unchanged: 300/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1
  2751 ;;      Params:         1       0       0
  2752 ;;      Locals:         2       0       0
  2753 ;;      Temps:          0       0       0
  2754 ;;      Totals:         3       0       0
  2755 ;;Total ram usage:        3 bytes
  2756 ;; Hardware stack levels used:    1
  2757 ;; Hardware stack levels required when called:    2
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_Sec1sPro
  2762 ;;		_WorkLedPro
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function ___bmul
  2768  0795                     ___bmul:	
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2772                           ;___bmul@multiplier stored from wreg
  2773  0795  00F7               	movwf	___bmul@multiplier
  2774  0796  01F6               	clrf	___bmul@product
  2775  0797                     l5482:	
  2776  0797  0875               	movf	___bmul@multiplicand,w
  2777  0798  1877               	btfsc	___bmul@multiplier,0
  2778  0799  07F6               	addwf	___bmul@product,f
  2779  079A  1003               	clrc
  2780  079B  0DF5               	rlf	___bmul@multiplicand,f
  2781  079C  1003               	clrc
  2782  079D  0CF7               	rrf	___bmul@multiplier,f
  2783  079E  0877               	movf	___bmul@multiplier,w
  2784  079F  1D03               	btfss	3,2
  2785  07A0  2F97               	goto	l5482
  2786  07A1  0876               	movf	___bmul@product,w
  2787  07A2  0008               	return
  2788  07A3                     __end_of___bmul:	
  2789                           
  2790                           	psect	text13
  2791  0409                     __ptext13:	
  2792 ;; *************** function _USBLedPro *****************
  2793 ;; Defined at:
  2794 ;;		line 154 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;		None
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;		None
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  1    wreg      void 
  2801 ;; Registers used:
  2802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2803 ;; Tracked objects:
  2804 ;;		On entry : 200/100
  2805 ;;		On exit  : 200/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMMON   BANK0   BANK1
  2808 ;;      Params:         0       0       0
  2809 ;;      Locals:         0       0       0
  2810 ;;      Temps:          0       3       0
  2811 ;;      Totals:         0       3       0
  2812 ;;Total ram usage:        3 bytes
  2813 ;; Hardware stack levels used:    1
  2814 ;; Hardware stack levels required when called:    3
  2815 ;; This function calls:
  2816 ;;		___lbdiv
  2817 ;;		___lbmod
  2818 ;; This function is called by:
  2819 ;;		_DisplayPro
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           
  2824                           ;psect for function _USBLedPro
  2825  0409                     _USBLedPro:	
  2826                           
  2827                           ;LED.c: 156: static unsigned char index=0;
  2828                           ;LED.c: 157: static unsigned char cnt=0;
  2829                           ;LED.c: 159: if(USBFlag&&!WorkFlag&&!OnOffFlag)
  2830                           
  2831                           ;incstack = 0
  2832                           ; Regs used in _USBLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2833  0409  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2834  040A  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2835  040B  2C60               	goto	l6482
  2836  040C  1BF0               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2837  040D  2C60               	goto	l6482
  2838  040E  3028               	movlw	40
  2839                           
  2840                           ;LED.c: 160: {
  2841                           ;LED.c: 161: cnt++;
  2842  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2843  0410  0AB8               	incf	USBLedPro@cnt,f
  2844                           
  2845                           ;LED.c: 162: if(cnt>=40)
  2846  0411  0238               	subwf	USBLedPro@cnt,w
  2847  0412  1C03               	skipc
  2848  0413  2C1A               	goto	l6468
  2849  0414  300B               	movlw	11
  2850                           
  2851                           ;LED.c: 163: {
  2852                           ;LED.c: 164: cnt=0;
  2853  0415  01B8               	clrf	USBLedPro@cnt
  2854                           
  2855                           ;LED.c: 165: index++;
  2856  0416  0AB9               	incf	USBLedPro@index,f
  2857                           
  2858                           ;LED.c: 166: if(index>=11)
  2859  0417  0239               	subwf	USBLedPro@index,w
  2860  0418  1803               	btfsc	3,0
  2861                           
  2862                           ;LED.c: 167: {
  2863                           ;LED.c: 168: index=0;
  2864  0419  01B9               	clrf	USBLedPro@index
  2865  041A                     l6468:	
  2866                           
  2867                           ;LED.c: 169: }
  2868                           ;LED.c: 170: }
  2869                           ;LED.c: 171: if(BatPercent<99)
  2870  041A  3063               	movlw	99
  2871  041B  0246               	subwf	_BatPercent,w
  2872                           
  2873                           ;LED.c: 172: {
  2874                           ;LED.c: 173: LedIndex=NumbArr[BatPercent/10];
  2875  041C  300A               	movlw	10
  2876  041D  1803               	skipnc
  2877  041E  2C49               	goto	L9
  2878  041F  00F5               	movwf	___lbdiv@divisor
  2879  0420  0846               	movf	_BatPercent,w
  2880  0421  26E4               	fcall	___lbdiv
  2881                           
  2882                           ;LED.c: 174: LedIndex|=((unsigned int)NumbArr[BatPercent%10]&~HideNumbArr[index])<<7;
  2883  0422  2464               	fcall	PL6	;call to abstracted procedure
  2884  0423  26C8               	fcall	___lbmod
  2885  0424  2470               	fcall	PL30	;call to abstracted procedure
  2886  0425  0839               	movf	USBLedPro@index,w
  2887  0426  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2888  0427  0084               	movwf	4
  2889  0428  0900               	comf	0,w
  2890  0429  054D               	andwf	??_USBLedPro,w
  2891  042A  00CE               	movwf	??_USBLedPro+1
  2892  042B  3007               	movlw	7
  2893  042C  01CF               	clrf	??_USBLedPro+2
  2894  042D  00FF               	movwf	127
  2895  042E                     u4035:	
  2896  042E  1003               	clrc
  2897  042F  0DCE               	rlf	??_USBLedPro+1,f
  2898  0430  0DCF               	rlf	??_USBLedPro+2,f
  2899  0431  0BFF               	decfsz	127,f
  2900  0432  2C2E               	goto	u4035
  2901  0433  084E               	movf	??_USBLedPro+1,w
  2902  0434  1683               	bsf	3,5	;RP0=1, select bank1
  2903  0435  04D9               	iorwf	_LedIndex^(0+128),f
  2904  0436  1283               	bcf	3,5	;RP0=0, select bank0
  2905  0437  084F               	movf	??_USBLedPro+2,w
  2906  0438  1683               	bsf	3,5	;RP0=1, select bank1
  2907  0439  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2908                           
  2909                           ;LED.c: 175: LedIndex&=~HideNumbArr[index];
  2910  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2911  043B  0839               	movf	USBLedPro@index,w
  2912  043C  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  2913  043D  0084               	movwf	4
  2914  043E  0900               	comf	0,w
  2915  043F  00CD               	movwf	??_USBLedPro
  2916  0440  01CE               	clrf	??_USBLedPro+1
  2917  0441  09CE               	comf	??_USBLedPro+1,f
  2918  0442  1683               	bsf	3,5	;RP0=1, select bank1
  2919  0443  05D9               	andwf	_LedIndex^(0+128),f
  2920  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0445  084E               	movf	??_USBLedPro+1,w
  2922  0446  1683               	bsf	3,5	;RP0=1, select bank1
  2923  0447  05DA               	andwf	(_LedIndex+1)^(0+128),f
  2924                           
  2925                           ;LED.c: 176: }
  2926  0448  0008               	return
  2927  0449                     L9:	
  2928                           
  2929                           ;LED.c: 177: else
  2930                           ;LED.c: 178: {
  2931                           ;LED.c: 179: index=0;
  2932  0449  01B9               	clrf	USBLedPro@index
  2933                           
  2934                           ;LED.c: 180: LedIndex=NumbArr[BatPercent/10];
  2935  044A  00F5               	movwf	___lbdiv@divisor
  2936  044B  0846               	movf	_BatPercent,w
  2937  044C  26E4               	fcall	___lbdiv
  2938                           
  2939                           ;LED.c: 181: LedIndex|=NumbArr[BatPercent%10]<<7;
  2940  044D  2464               	fcall	PL6	;call to abstracted procedure
  2941  044E  26C8               	fcall	___lbmod
  2942  044F  2470               	fcall	PL30	;call to abstracted procedure
  2943  0450  3007               	movlw	7
  2944  0451  01CE               	clrf	??_USBLedPro+1
  2945  0452  00FF               	movwf	127
  2946  0453                     u4045:	
  2947  0453  1003               	clrc
  2948  0454  0DCD               	rlf	??_USBLedPro,f
  2949  0455  0DCE               	rlf	??_USBLedPro+1,f
  2950  0456  0BFF               	decfsz	127,f
  2951  0457  2C53               	goto	u4045
  2952  0458  084D               	movf	??_USBLedPro,w
  2953  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2954  045A  04D9               	iorwf	_LedIndex^(0+128),f
  2955  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2956  045C  084E               	movf	??_USBLedPro+1,w
  2957  045D  1683               	bsf	3,5	;RP0=1, select bank1
  2958  045E  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  2959  045F  0008               	return
  2960  0460                     l6482:	
  2961                           
  2962                           ;LED.c: 185: else
  2963                           ;LED.c: 186: {
  2964                           ;LED.c: 187: index=0;
  2965  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2966  0461  01B9               	clrf	USBLedPro@index
  2967                           
  2968                           ;LED.c: 188: cnt=0;
  2969  0462  01B8               	clrf	USBLedPro@cnt
  2970  0463  0008               	return
  2971  0464                     __end_of_USBLedPro:	
  2972  0464                     PL6:	
  2973  0464  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2974  0465  0084               	movwf	4
  2975  0466  1383               	bcf	3,7	;select IRP bank1
  2976  0467  0800               	movf	0,w
  2977  0468  1683               	bsf	3,5	;RP0=1, select bank1
  2978  0469  00D9               	movwf	_LedIndex^(0+128)
  2979  046A  300A               	movlw	10
  2980  046B  01DA               	clrf	(_LedIndex+1)^(0+128)
  2981  046C  00F5               	movwf	___lbmod@divisor
  2982  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2983  046E  0846               	movf	_BatPercent,w
  2984  046F  0008               	return
  2985  0470                     __end_ofPL6:	
  2986  0470                     PL30:	
  2987  0470  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2988  0471  0084               	movwf	4
  2989  0472  0800               	movf	0,w
  2990  0473  1283               	bcf	3,5	;RP0=0, select bank0
  2991  0474  00CD               	movwf	??_USBLedPro
  2992  0475  0008               	return
  2993  0476                     __end_ofPL30:	
  2994                           
  2995                           	psect	text14
  2996  06C8                     __ptext14:	
  2997 ;; *************** function ___lbmod *****************
  2998 ;; Defined at:
  2999 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  dividend        1    wreg     unsigned char 
  3002 ;;  divisor         1    3[COMMON] unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  dividend        1    5[COMMON] unsigned char 
  3005 ;;  rem             1    7[COMMON] unsigned char 
  3006 ;;  counter         1    6[COMMON] unsigned char 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      unsigned char 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0
  3011 ;; Tracked objects:
  3012 ;;		On entry : A00/0
  3013 ;;		On exit  : A00/0
  3014 ;;		Unchanged: A00/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1
  3016 ;;      Params:         1       0       0
  3017 ;;      Locals:         3       0       0
  3018 ;;      Temps:          1       0       0
  3019 ;;      Totals:         5       0       0
  3020 ;;Total ram usage:        5 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    2
  3023 ;; This function calls:
  3024 ;;		Nothing
  3025 ;; This function is called by:
  3026 ;;		_WorkLedPro
  3027 ;;		_USBLedPro
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function ___lbmod
  3033  06C8                     ___lbmod:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3037                           ;___lbmod@dividend stored from wreg
  3038  06C8  00F7               	movwf	___lbmod@dividend
  3039  06C9  3008               	movlw	8
  3040  06CA  00F8               	movwf	___lbmod@counter
  3041  06CB  01F9               	clrf	___lbmod@rem
  3042  06CC                     l5522:	
  3043  06CC  0877               	movf	___lbmod@dividend,w
  3044  06CD  00F6               	movwf	??___lbmod
  3045  06CE  3007               	movlw	7
  3046  06CF  1003               	clrc
  3047  06D0                     L10:	
  3048  06D0  0CF6               	rrf	??___lbmod,f
  3049  06D1  3EFF               	addlw	-1
  3050  06D2  1003               	clrc
  3051  06D3  1D03               	skipz
  3052  06D4  2ED0               	goto	L10
  3053  06D5  0D79               	rlf	___lbmod@rem,w
  3054  06D6  0476               	iorwf	??___lbmod,w
  3055  06D7  00F9               	movwf	___lbmod@rem
  3056  06D8  1003               	clrc
  3057  06D9  0DF7               	rlf	___lbmod@dividend,f
  3058  06DA  0875               	movf	___lbmod@divisor,w
  3059  06DB  0279               	subwf	___lbmod@rem,w
  3060  06DC  1C03               	skipc
  3061  06DD  2EE0               	goto	l5530
  3062  06DE  0875               	movf	___lbmod@divisor,w
  3063  06DF  02F9               	subwf	___lbmod@rem,f
  3064  06E0                     l5530:	
  3065  06E0  0BF8               	decfsz	___lbmod@counter,f
  3066  06E1  2ECC               	goto	l5522
  3067  06E2  0879               	movf	___lbmod@rem,w
  3068  06E3  0008               	return
  3069  06E4                     __end_of___lbmod:	
  3070                           
  3071                           	psect	text15
  3072  06E4                     __ptext15:	
  3073 ;; *************** function ___lbdiv *****************
  3074 ;; Defined at:
  3075 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  dividend        1    wreg     unsigned char 
  3078 ;;  divisor         1    3[COMMON] unsigned char 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  dividend        1    4[COMMON] unsigned char 
  3081 ;;  quotient        1    6[COMMON] unsigned char 
  3082 ;;  counter         1    5[COMMON] unsigned char 
  3083 ;; Return value:  Size  Location     Type
  3084 ;;                  1    wreg      unsigned char 
  3085 ;; Registers used:
  3086 ;;		wreg, status,2, status,0
  3087 ;; Tracked objects:
  3088 ;;		On entry : 300/0
  3089 ;;		On exit  : 300/0
  3090 ;;		Unchanged: 300/0
  3091 ;; Data sizes:     COMMON   BANK0   BANK1
  3092 ;;      Params:         1       0       0
  3093 ;;      Locals:         3       0       0
  3094 ;;      Temps:          0       0       0
  3095 ;;      Totals:         4       0       0
  3096 ;;Total ram usage:        4 bytes
  3097 ;; Hardware stack levels used:    1
  3098 ;; Hardware stack levels required when called:    2
  3099 ;; This function calls:
  3100 ;;		Nothing
  3101 ;; This function is called by:
  3102 ;;		_WorkLedPro
  3103 ;;		_USBLedPro
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           
  3108                           ;psect for function ___lbdiv
  3109  06E4                     ___lbdiv:	
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3113                           ;___lbdiv@dividend stored from wreg
  3114  06E4  00F6               	movwf	___lbdiv@dividend
  3115  06E5  01F8               	clrf	___lbdiv@quotient
  3116  06E6  0875               	movf	___lbdiv@divisor,w
  3117  06E7  1903               	btfsc	3,2
  3118  06E8  2EFD               	goto	l5514
  3119  06E9  01F7               	clrf	___lbdiv@counter
  3120  06EA                     l5500:	
  3121  06EA  0AF7               	incf	___lbdiv@counter,f
  3122  06EB  1BF5               	btfsc	___lbdiv@divisor,7
  3123  06EC  2EF0               	goto	l4478
  3124  06ED  1003               	clrc
  3125  06EE  0DF5               	rlf	___lbdiv@divisor,f
  3126  06EF  2EEA               	goto	l5500
  3127  06F0                     l4478:	
  3128  06F0  1003               	clrc
  3129  06F1  0DF8               	rlf	___lbdiv@quotient,f
  3130  06F2  0875               	movf	___lbdiv@divisor,w
  3131  06F3  0276               	subwf	___lbdiv@dividend,w
  3132  06F4  1C03               	skipc
  3133  06F5  2EFA               	goto	L11
  3134  06F6  0875               	movf	___lbdiv@divisor,w
  3135  06F7  02F6               	subwf	___lbdiv@dividend,f
  3136  06F8  1478               	bsf	___lbdiv@quotient,0
  3137  06F9  1003               	clrc
  3138  06FA                     L11:	
  3139  06FA  0CF5               	rrf	___lbdiv@divisor,f
  3140  06FB  0BF7               	decfsz	___lbdiv@counter,f
  3141  06FC  2EF0               	goto	l4478
  3142  06FD                     l5514:	
  3143  06FD  0878               	movf	___lbdiv@quotient,w
  3144  06FE  0008               	return
  3145  06FF                     __end_of___lbdiv:	
  3146                           
  3147                           	psect	text16
  3148  04D7                     __ptext16:	
  3149 ;; *************** function _LockPro *****************
  3150 ;; Defined at:
  3151 ;;		line 255 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;                  1    wreg      void 
  3158 ;; Registers used:
  3159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3160 ;; Tracked objects:
  3161 ;;		On entry : 200/100
  3162 ;;		On exit  : 200/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1
  3165 ;;      Params:         0       0       0
  3166 ;;      Locals:         0       0       0
  3167 ;;      Temps:          2       0       0
  3168 ;;      Totals:         2       0       0
  3169 ;;Total ram usage:        2 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    2
  3172 ;; This function calls:
  3173 ;;		Nothing
  3174 ;; This function is called by:
  3175 ;;		_DisplayPro
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _LockPro
  3181  04D7                     _LockPro:	
  3182                           
  3183                           ;LED.c: 257: static unsigned char SwitchCnt=0,LockSwitchCnt=0;
  3184                           ;LED.c: 258: static unsigned char Ledcnt=0;
  3185                           ;LED.c: 259: static bit LedSwitchFlag=0;
  3186                           ;LED.c: 260: if(!USBFlag)
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _LockPro: [wreg-fsr0h+status,2+status,0+btemp+1]
  3190  04D7  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3191  04D8  0008               	return
  3192                           
  3193                           ;LED.c: 261: {
  3194                           ;LED.c: 262: if(LockSta.LockStart||LockSta.UnlockStart)
  3195  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3196  04DA  182B               	btfsc	_LockSta,0
  3197  04DB  2CDE               	goto	l5736
  3198  04DC  1DAB               	btfss	_LockSta,3
  3199  04DD  2D06               	goto	l5754
  3200  04DE                     l5736:	
  3201  04DE  3064               	movlw	100
  3202                           
  3203                           ;LED.c: 263: {
  3204                           ;LED.c: 264: SwitchCnt++;
  3205  04DF  0AB4               	incf	LockPro@SwitchCnt,f
  3206                           
  3207                           ;LED.c: 265: if(SwitchCnt>=100)
  3208  04E0  0234               	subwf	LockPro@SwitchCnt,w
  3209  04E1  1C03               	skipc
  3210  04E2  2CE8               	goto	l5746
  3211                           
  3212                           ;LED.c: 266: {
  3213                           ;LED.c: 267: SwitchCnt=0;
  3214  04E3  01B4               	clrf	LockPro@SwitchCnt
  3215                           
  3216                           ;LED.c: 268: if(LockNumb>0)
  3217  04E4  083C               	movf	_LockNumb,w
  3218  04E5  1903               	btfsc	3,2
  3219  04E6  2CE8               	goto	l5746
  3220                           
  3221                           ;LED.c: 269: {
  3222                           ;LED.c: 270: LockNumb--;
  3223  04E7  03BC               	decf	_LockNumb,f
  3224  04E8                     l5746:	
  3225                           
  3226                           ;LED.c: 271: }
  3227                           ;LED.c: 272: }
  3228                           ;LED.c: 273: LedIndex=NumbArr[0];
  3229  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  3230  04E9  0849               	movf	_NumbArr^(0+128),w
  3231  04EA  00D9               	movwf	_LedIndex^(0+128)
  3232  04EB  01DA               	clrf	(_LedIndex+1)^(0+128)
  3233                           
  3234                           ;LED.c: 274: LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
  3235  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  3236  04ED  083C               	movf	_LockNumb,w
  3237  04EE  3ECA               	addlw	(low ((_NumbArr| 0+1)))& (0+255)
  3238  04EF  0084               	movwf	4
  3239  04F0  1383               	bcf	3,7	;select IRP bank1
  3240  04F1  0800               	movf	0,w
  3241  04F2  00F5               	movwf	??_LockPro
  3242  04F3  3007               	movlw	7
  3243  04F4  01F6               	clrf	??_LockPro+1
  3244  04F5  00FF               	movwf	127
  3245  04F6                     u2345:	
  3246  04F6  1003               	clrc
  3247  04F7  0DF5               	rlf	??_LockPro,f
  3248  04F8  0DF6               	rlf	??_LockPro+1,f
  3249  04F9  0BFF               	decfsz	127,f
  3250  04FA  2CF6               	goto	u2345
  3251  04FB  0875               	movf	??_LockPro,w
  3252  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  3253  04FD  04D9               	iorwf	_LedIndex^(0+128),f
  3254  04FE  0876               	movf	??_LockPro+1,w
  3255  04FF  04DA               	iorwf	(_LedIndex+1)^(0+128),f
  3256                           
  3257                           ;LED.c: 275: if(LockSta.UnlockStart)
  3258  0500  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0501  1DAB               	btfss	_LockSta,3
  3260  0502  2D07               	goto	l5756
  3261                           
  3262                           ;LED.c: 276: {
  3263                           ;LED.c: 277: LedIndex|=0x8000;
  3264  0503  1683               	bsf	3,5	;RP0=1, select bank1
  3265  0504  17DA               	bsf	(_LedIndex^(0+128)+1),7
  3266  0505  2D07               	goto	l5756
  3267  0506                     l5754:	
  3268                           
  3269                           ;LED.c: 280: else
  3270                           ;LED.c: 281: {
  3271                           ;LED.c: 282: SwitchCnt=0;
  3272  0506  01B4               	clrf	LockPro@SwitchCnt
  3273  0507                     l5756:	
  3274                           
  3275                           ;LED.c: 283: }
  3276                           ;LED.c: 284: if(LockSta.LockEnd||LockSta.UnlockFail)
  3277  0507  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0508  192B               	btfsc	_LockSta,2
  3279  0509  2D0C               	goto	l5760
  3280  050A  1E2B               	btfss	_LockSta,4
  3281  050B  2D21               	goto	l5778
  3282  050C                     l5760:	
  3283  050C  3023               	movlw	35
  3284                           
  3285                           ;LED.c: 285: {
  3286                           ;LED.c: 286: LockSwitchCnt++;
  3287  050D  0AB3               	incf	LockPro@LockSwitchCnt,f
  3288                           
  3289                           ;LED.c: 287: if(LockSwitchCnt>=35)
  3290  050E  0233               	subwf	LockPro@LockSwitchCnt,w
  3291  050F  1C03               	skipc
  3292  0510  2D1D               	goto	l3076
  3293  0511  3002               	movlw	(0+1) shl (LockPro@LedSwitchFlag& (0+7))
  3294                           
  3295                           ;LED.c: 288: {
  3296                           ;LED.c: 289: LockSwitchCnt=0;
  3297  0512  01B3               	clrf	LockPro@LockSwitchCnt
  3298                           
  3299                           ;LED.c: 290: LedSwitchFlag=!LedSwitchFlag;
  3300  0513  06F0               	xorwf	LockPro@LedSwitchFlag/(0+8),f
  3301                           
  3302                           ;LED.c: 291: if(!LedSwitchFlag)
  3303  0514  18F0               	btfsc	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3304  0515  2D1D               	goto	l3076
  3305  0516  3004               	movlw	4
  3306                           
  3307                           ;LED.c: 292: {
  3308                           ;LED.c: 293: Ledcnt++;
  3309  0517  0AB2               	incf	LockPro@Ledcnt,f
  3310                           
  3311                           ;LED.c: 294: if(Ledcnt>=4)
  3312  0518  0232               	subwf	LockPro@Ledcnt,w
  3313  0519  1C03               	skipc
  3314  051A  2D1D               	goto	l3076
  3315                           
  3316                           ;LED.c: 295: {
  3317                           ;LED.c: 296: LockSta.LockEnd=0;
  3318  051B  112B               	bcf	_LockSta,2
  3319                           
  3320                           ;LED.c: 297: LockSta.UnlockFail=0;
  3321  051C  122B               	bcf	_LockSta,4
  3322  051D                     l3076:	
  3323                           
  3324                           ;LED.c: 298: }
  3325                           ;LED.c: 299: }
  3326                           ;LED.c: 300: }
  3327                           ;LED.c: 301: if(LedSwitchFlag)
  3328  051D  1CF0               	btfss	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3329  051E  0008               	return
  3330                           
  3331                           ;LED.c: 302: {
  3332                           ;LED.c: 303: LedIndex=0x8000;
  3333  051F  3080               	movlw	128
  3334  0520  2F74               	ljmp	PL34	;call to abstracted procedure
  3335  0521                     l5778:	
  3336                           
  3337                           ;LED.c: 306: else
  3338                           ;LED.c: 307: {
  3339                           ;LED.c: 308: Ledcnt=0;
  3340  0521  01B2               	clrf	LockPro@Ledcnt
  3341                           
  3342                           ;LED.c: 309: LockSwitchCnt=0;
  3343  0522  01B3               	clrf	LockPro@LockSwitchCnt
  3344  0523  0008               	return
  3345  0524                     __end_of_LockPro:	
  3346                           
  3347                           	psect	text17
  3348  0762                     __ptext17:	
  3349 ;; *************** function _ErrPro *****************
  3350 ;; Defined at:
  3351 ;;		line 314 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2, status,0
  3360 ;; Tracked objects:
  3361 ;;		On entry : 200/100
  3362 ;;		On exit  : 200/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1
  3365 ;;      Params:         0       0       0
  3366 ;;      Locals:         0       0       0
  3367 ;;      Temps:          0       0       0
  3368 ;;      Totals:         0       0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    2
  3372 ;; This function calls:
  3373 ;;		Nothing
  3374 ;; This function is called by:
  3375 ;;		_DisplayPro
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           
  3380                           ;psect for function _ErrPro
  3381  0762                     _ErrPro:	
  3382                           
  3383                           ;LED.c: 316: static unsigned char SwitchCnt=0;
  3384                           ;LED.c: 317: static bit LedSwitchFlag=0;
  3385                           ;LED.c: 318: if(IovFlag)
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in _ErrPro: [wreg+status,2+status,0]
  3389  0762  1E71               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  3390  0763  2F71               	goto	l5794
  3391  0764  3023               	movlw	35
  3392                           
  3393                           ;LED.c: 319: {
  3394                           ;LED.c: 320: SwitchCnt++;
  3395  0765  1283               	bcf	3,5	;RP0=0, select bank0
  3396  0766  0AB1               	incf	ErrPro@SwitchCnt,f
  3397                           
  3398                           ;LED.c: 321: if(SwitchCnt>=35)
  3399  0767  0231               	subwf	ErrPro@SwitchCnt,w
  3400  0768  1C03               	skipc
  3401  0769  2F6D               	goto	l5790
  3402  076A  3001               	movlw	(0+1) shl (ErrPro@LedSwitchFlag& (0+7))
  3403                           
  3404                           ;LED.c: 322: {
  3405                           ;LED.c: 323: SwitchCnt=0;
  3406  076B  01B1               	clrf	ErrPro@SwitchCnt
  3407                           
  3408                           ;LED.c: 324: LedSwitchFlag=!LedSwitchFlag;
  3409  076C  06F0               	xorwf	ErrPro@LedSwitchFlag/(0+8),f
  3410  076D                     l5790:	
  3411                           
  3412                           ;LED.c: 326: }
  3413                           ;LED.c: 327: if(LedSwitchFlag)
  3414  076D  1C70               	btfss	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3415  076E  0008               	return
  3416                           
  3417                           ;LED.c: 328: {
  3418                           ;LED.c: 329: LedIndex=0x4000;
  3419  076F  3040               	movlw	64
  3420  0770  2F74               	ljmp	PL34	;call to abstracted procedure
  3421  0771                     l5794:	
  3422                           
  3423                           ;LED.c: 332: else
  3424                           ;LED.c: 333: {
  3425                           ;LED.c: 334: SwitchCnt=0;
  3426  0771  1283               	bcf	3,5	;RP0=0, select bank0
  3427  0772  01B1               	clrf	ErrPro@SwitchCnt
  3428  0773  0008               	return
  3429  0774                     __end_of_ErrPro:	
  3430  0774                     PL34:	
  3431  0774  1683               	bsf	3,5	;RP0=1, select bank1
  3432  0775  01D9               	clrf	_LedIndex^(0+128)
  3433  0776  00DA               	movwf	(_LedIndex^(0+128)+1)
  3434  0777  0008               	return
  3435  0778                     __end_ofPL34:	
  3436                           
  3437                           	psect	text18
  3438  05AE                     __ptext18:	
  3439 ;; *************** function _DisplayIcon *****************
  3440 ;; Defined at:
  3441 ;;		line 124 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  index           2    3[COMMON] unsigned int 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  Mask            2    0[BANK0 ] unsigned int 
  3446 ;;  i               1    2[BANK0 ] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  1    wreg      void 
  3449 ;; Registers used:
  3450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3451 ;; Tracked objects:
  3452 ;;		On entry : 300/100
  3453 ;;		On exit  : B00/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMMON   BANK0   BANK1
  3456 ;;      Params:         2       0       0
  3457 ;;      Locals:         0       3       0
  3458 ;;      Temps:          2       0       0
  3459 ;;      Totals:         4       3       0
  3460 ;;Total ram usage:        7 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    2
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_DisplayPro
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _DisplayIcon
  3472  05AE                     _DisplayIcon:	
  3473  05AE                     l6366:	
  3474                           ;incstack = 0
  3475                           ; Regs used in _DisplayIcon: [wreg-fsr0h+status,2+status,0+pclath]
  3476                           
  3477                           
  3478                           ;LED.c: 127: unsigned int Mask=0x01;
  3479  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3480  05AF  01CD               	clrf	DisplayIcon@Mask
  3481  05B0  0ACD               	incf	DisplayIcon@Mask,f
  3482  05B1  01CE               	clrf	DisplayIcon@Mask+1
  3483                           
  3484                           ;LED.c: 129: for(i=0;i<16;i++)
  3485  05B2  01CF               	clrf	DisplayIcon@i
  3486  05B3                     l6374:	
  3487                           
  3488                           ;LED.c: 130: {
  3489                           ;LED.c: 131: if(index&Mask)
  3490  05B3  084D               	movf	DisplayIcon@Mask,w
  3491  05B4  0575               	andwf	DisplayIcon@index,w
  3492  05B5  00F7               	movwf	??_DisplayIcon
  3493  05B6  084E               	movf	DisplayIcon@Mask+1,w
  3494  05B7  0576               	andwf	DisplayIcon@index+1,w
  3495  05B8  00F8               	movwf	??_DisplayIcon+1
  3496  05B9  0477               	iorwf	??_DisplayIcon,w
  3497                           
  3498                           ;LED.c: 132: {
  3499                           ;LED.c: 133: LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
  3500  05BA  3001               	movlw	1
  3501  05BB  00F7               	movwf	??_DisplayIcon
  3502  05BC  1903               	btfsc	3,2
  3503  05BD  2DC6               	goto	L12
  3504  05BE  25D7               	fcall	PL12	;call to abstracted procedure
  3505  05BF  25E4               	fcall	PL40	;call to abstracted procedure
  3506  05C0  274C               	fcall	stringdir
  3507  05C1  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3508  05C2  0084               	movwf	4
  3509  05C3  0878               	movf	??_DisplayIcon+1,w
  3510  05C4  0480               	iorwf	0,f
  3511                           
  3512                           ;LED.c: 134: }
  3513  05C5  2DCE               	goto	l6380
  3514  05C6                     L12:	
  3515                           ;LED.c: 135: else
  3516                           ;LED.c: 136: {
  3517                           ;LED.c: 137: LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
  3518                           
  3519  05C6  25D7               	fcall	PL12	;call to abstracted procedure
  3520  05C7  3AFF               	xorlw	255
  3521  05C8  25E4               	fcall	PL40	;call to abstracted procedure
  3522  05C9  274C               	fcall	stringdir
  3523  05CA  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3524  05CB  0084               	movwf	4
  3525  05CC  0878               	movf	??_DisplayIcon+1,w
  3526  05CD  0580               	andwf	0,f
  3527  05CE                     l6380:	
  3528  05CE  3010               	movlw	16
  3529                           
  3530                           ;LED.c: 138: }
  3531                           ;LED.c: 140: Mask<<=1;
  3532  05CF  1003               	clrc
  3533  05D0  0DCD               	rlf	DisplayIcon@Mask,f
  3534  05D1  0DCE               	rlf	DisplayIcon@Mask+1,f
  3535  05D2  0ACF               	incf	DisplayIcon@i,f
  3536  05D3  024F               	subwf	DisplayIcon@i,w
  3537  05D4  1803               	btfsc	3,0
  3538  05D5  0008               	return
  3539  05D6  2DB3               	goto	l6374
  3540  05D7                     __end_of_DisplayIcon:	
  3541  05D7                     PL12:	
  3542  05D7  084F               	movf	DisplayIcon@i,w
  3543  05D8  3EA0               	addlw	(low (_LEDSeg2| 0))& (0+255)
  3544  05D9  0084               	movwf	4
  3545  05DA  1383               	bcf	3,7	;select IRP bank1
  3546  05DB  0A00               	incf	0,w
  3547  05DC  2DDF               	goto	u3794
  3548  05DD                     u3795:	
  3549  05DD  1003               	clrc
  3550  05DE  0DF7               	rlf	??_DisplayIcon,f
  3551  05DF                     u3794:	
  3552  05DF  3EFF               	addlw	-1
  3553  05E0  1D03               	skipz
  3554  05E1  2DDD               	goto	u3795
  3555  05E2  0877               	movf	??_DisplayIcon,w
  3556  05E3  0008               	return
  3557  05E4                     __end_ofPL12:	
  3558  05E4                     PL40:	
  3559  05E4  00F8               	movwf	??_DisplayIcon+1
  3560  05E5  084F               	movf	DisplayIcon@i,w
  3561  05E6  3E01               	addlw	low ((_LEDSeg1-__stringbase)| (0+32768))
  3562  05E7  0084               	movwf	4
  3563  05E8  0008               	return
  3564  05E9                     __end_ofPL40:	
  3565                           
  3566                           	psect	text19
  3567  056C                     __ptext19:	
  3568 ;; *************** function _ADCPro *****************
  3569 ;; Defined at:
  3570 ;;		line 11 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;		None
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      void 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 300/0
  3581 ;;		On exit  : 300/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1
  3584 ;;      Params:         0       0       0
  3585 ;;      Locals:         0       0       0
  3586 ;;      Temps:          0       0       0
  3587 ;;      Totals:         0       0       0
  3588 ;;Total ram usage:        0 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    4
  3591 ;; This function calls:
  3592 ;;		_ADCRead
  3593 ;; This function is called by:
  3594 ;;		_Apply
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           
  3599                           ;psect for function _ADCPro
  3600  056C                     _ADCPro:	
  3601                           
  3602                           ;ADC.c: 13: switch (ADCState)
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in _ADCPro: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3606  056C  2D7C               	goto	l6536
  3607  056D                     l6528:	
  3608                           
  3609                           ;ADC.c: 16: ADCRead(0b00001111,ADCVal);
  3610  056D  3047               	movlw	(low (_ADCVal| 0))& (0+255)
  3611  056E  00E2               	movwf	ADCRead@Val
  3612  056F  300F               	movlw	15
  3613  0570  2024               	fcall	_ADCRead
  3614                           
  3615                           ;ADC.c: 17: break;
  3616  0571  2D84               	goto	l575
  3617  0572                     l6530:	
  3618                           
  3619                           ;ADC.c: 20: ADCRead(0b00000010,ADCVal+1);
  3620  0572  3049               	movlw	(low ((_ADCVal| 0+2)))& (0+255)
  3621  0573  00E2               	movwf	ADCRead@Val
  3622  0574  3002               	movlw	2
  3623  0575  2024               	fcall	_ADCRead
  3624                           
  3625                           ;ADC.c: 21: break;
  3626  0576  2D84               	goto	l575
  3627  0577                     l6532:	
  3628                           
  3629                           ;ADC.c: 24: ADCRead(0b00000001,ADCVal+2);
  3630  0577  304B               	movlw	(low ((_ADCVal| 0+4)))& (0+255)
  3631  0578  00E2               	movwf	ADCRead@Val
  3632  0579  3001               	movlw	1
  3633  057A  2024               	fcall	_ADCRead
  3634                           
  3635                           ;ADC.c: 25: break;
  3636  057B  2D84               	goto	l575
  3637  057C                     l6536:	
  3638                           
  3639                           ; Switch size 1, requested type "space"
  3640                           ; Number of cases is 3, Range of values is 0 to 2
  3641                           ; switch strategies available:
  3642                           ; Name         Instructions Cycles
  3643                           ; direct_byte            9     6 (fixed)
  3644                           ; simple_byte           10     6 (average)
  3645                           ; jumptable            260     6 (fixed)
  3646                           ;	Chosen strategy is direct_byte
  3647  057C  2135               	fcall	PL36	;call to abstracted procedure
  3648  057D  1803               	skipnc
  3649  057E  2D84               	goto	l575
  3650  057F  3000               	movlw	high S6976
  3651  0580  008A               	movwf	10
  3652  0581  3001               	movlw	low S6976
  3653  0582  0704               	addwf	4,w
  3654  0583  0082               	movwf	2
  3655  0584                     l575:	
  3656                           
  3657                           ;ADC.c: 27: if(SystemONFlag==0)
  3658  0584  1AF1               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  3659  0585  2D9B               	goto	l6552
  3660                           
  3661                           ;ADC.c: 28: {
  3662                           ;ADC.c: 29: if(ADCVal[2]<267)
  3663  0586  3001               	movlw	1
  3664  0587  024C               	subwf	_ADCVal+5,w
  3665  0588  300B               	movlw	11
  3666  0589  1903               	skipnz
  3667  058A  024B               	subwf	_ADCVal+4,w
  3668  058B  1803               	skipnc
  3669  058C  2D8F               	goto	l6542
  3670                           
  3671                           ;ADC.c: 30: {
  3672                           ;ADC.c: 31: BatPercent=0;
  3673  058D  01C6               	clrf	_BatPercent
  3674                           
  3675                           ;ADC.c: 32: }
  3676  058E  2D9B               	goto	l6552
  3677  058F                     l6542:	
  3678                           
  3679                           ;ADC.c: 33: else if(ADCVal[2]>350)
  3680  058F  3001               	movlw	1
  3681  0590  024C               	subwf	_ADCVal+5,w
  3682  0591  305F               	movlw	95
  3683  0592  1903               	skipnz
  3684  0593  024B               	subwf	_ADCVal+4,w
  3685  0594  1C03               	skipc
  3686  0595  2D98               	goto	l6546
  3687                           
  3688                           ;ADC.c: 34: {
  3689                           ;ADC.c: 35: BatPercent=99;
  3690  0596  3063               	movlw	99
  3691  0597  2D9A               	goto	L13
  3692  0598                     l6546:	
  3693                           ;ADC.c: 36: }
  3694                           
  3695                           
  3696                           ;ADC.c: 37: else
  3697                           ;ADC.c: 38: {
  3698                           ;ADC.c: 39: BatPercent=ADCVal[2]-250;
  3699  0598  084B               	movf	_ADCVal+4,w
  3700  0599  3E06               	addlw	6
  3701  059A                     L13:	
  3702  059A  00C6               	movwf	_BatPercent
  3703  059B                     l6552:	
  3704                           
  3705                           ;ADC.c: 49: }
  3706                           ;ADC.c: 50: if(ADCVal[1]>58)
  3707  059B  3000               	movlw	0
  3708  059C  024A               	subwf	_ADCVal+3,w
  3709  059D  303B               	movlw	59
  3710  059E  1903               	skipnz
  3711  059F  0249               	subwf	_ADCVal+2,w
  3712  05A0  1C03               	skipc
  3713  05A1  2DAB               	goto	l6562
  3714  05A2  30C8               	movlw	200
  3715                           
  3716                           ;ADC.c: 51: {
  3717                           ;ADC.c: 52: CurrentCnt++;
  3718  05A3  0AC1               	incf	_CurrentCnt,f
  3719                           
  3720                           ;ADC.c: 53: if(CurrentCnt>=200)
  3721  05A4  0241               	subwf	_CurrentCnt,w
  3722  05A5  1C03               	skipc
  3723  05A6  0008               	return
  3724                           
  3725                           ;ADC.c: 54: {
  3726                           ;ADC.c: 55: CurrentCnt=200;
  3727  05A7  30C8               	movlw	200
  3728  05A8  00C1               	movwf	_CurrentCnt
  3729                           
  3730                           ;ADC.c: 56: IovFlag=1;
  3731  05A9  1671               	bsf	_IovFlag/(0+8),_IovFlag& (0+7)
  3732  05AA  0008               	return
  3733  05AB                     l6562:	
  3734                           
  3735                           ;ADC.c: 59: else
  3736                           ;ADC.c: 60: {
  3737                           ;ADC.c: 61: CurrentCnt=0;
  3738  05AB  01C1               	clrf	_CurrentCnt
  3739                           
  3740                           ;ADC.c: 62: IovFlag=0;
  3741  05AC  1271               	bcf	_IovFlag/(0+8),_IovFlag& (0+7)
  3742  05AD  0008               	return
  3743  05AE                     __end_of_ADCPro:	
  3744                           
  3745                           	psect	swtext1
  3746  0001                     __pswtext1:	
  3747  0001                     S6976:	
  3748  0001  2D6D               	ljmp	l6528
  3749  0002  2D72               	ljmp	l6530
  3750  0003  2D77               	ljmp	l6532
  3751                           
  3752                           	psect	text20
  3753  0024                     __ptext20:	
  3754 ;; *************** function _ADCRead *****************
  3755 ;; Defined at:
  3756 ;;		line 176 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  ch              1    wreg     unsigned char 
  3759 ;;  Val             1   21[BANK0 ] PTR unsigned int 
  3760 ;;		 -> ADCVal(6), 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  ch              1    0[BANK1 ] unsigned char 
  3763 ;;  ad_temp         2    5[BANK1 ] unsigned int 
  3764 ;;  AD_L            2    3[BANK1 ] unsigned int 
  3765 ;;  AD_H            2    1[BANK1 ] unsigned int 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 300/0
  3772 ;;		On exit  : 300/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1
  3775 ;;      Params:         0       1       0
  3776 ;;      Locals:         0       0       7
  3777 ;;      Temps:          0       8       0
  3778 ;;      Totals:         0       9       7
  3779 ;;Total ram usage:       16 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    3
  3782 ;; This function calls:
  3783 ;;		_ADSample
  3784 ;;		___lldiv
  3785 ;;		___lmul
  3786 ;; This function is called by:
  3787 ;;		_ADCPro
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           
  3792                           ;psect for function _ADCRead
  3793  0024                     _ADCRead:	
  3794                           
  3795                           ;incstack = 0
  3796                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3797                           ;ADCRead@ch stored from wreg
  3798  0024  1683               	bsf	3,5	;RP0=1, select bank1
  3799  0025  00DB               	movwf	ADCRead@ch^(0+128)
  3800                           
  3801                           ;ADC.c: 178: unsigned int ad_temp,AD_H,AD_L;
  3802                           ;ADC.c: 180: if(ADSample(ch))
  3803  0026  2733               	fcall	_ADSample
  3804  0027  3A00               	xorlw	0
  3805  0028  1903               	skipnz
  3806  0029  0008               	return
  3807                           
  3808                           ;ADC.c: 181: {
  3809                           ;ADC.c: 182: AD_H=ADRESH;
  3810  002A  081E               	movf	30,w	;volatile
  3811  002B  1683               	bsf	3,5	;RP0=1, select bank1
  3812  002C  00DC               	movwf	ADCRead@AD_H^(0+128)
  3813  002D  01DD               	clrf	(ADCRead@AD_H+1)^(0+128)
  3814                           
  3815                           ;ADC.c: 183: AD_L=ADRESL;
  3816  002E  081E               	movf	30,w	;volatile
  3817  002F  00DE               	movwf	ADCRead@AD_L^(0+128)
  3818  0030  01DF               	clrf	(ADCRead@AD_L+1)^(0+128)
  3819                           
  3820                           ;ADC.c: 184: ad_temp=(AD_H<<4)|(AD_L>>4);
  3821  0031  085D               	movf	(ADCRead@AD_H+1)^(0+128),w
  3822  0032  1283               	bcf	3,5	;RP0=0, select bank0
  3823  0033  00E4               	movwf	??_ADCRead+1
  3824  0034  1683               	bsf	3,5	;RP0=1, select bank1
  3825  0035  085C               	movf	ADCRead@AD_H^(0+128),w
  3826  0036  1283               	bcf	3,5	;RP0=0, select bank0
  3827  0037  00E3               	movwf	??_ADCRead
  3828  0038  30F0               	movlw	240
  3829  0039  0EE3               	swapf	??_ADCRead,f
  3830  003A  0EE4               	swapf	??_ADCRead+1,f
  3831  003B  05E4               	andwf	??_ADCRead+1,f
  3832  003C  0863               	movf	??_ADCRead,w
  3833  003D  390F               	andlw	15
  3834  003E  04E4               	iorwf	??_ADCRead+1,f
  3835  003F  30F0               	movlw	240
  3836  0040  05E3               	andwf	??_ADCRead,f
  3837  0041  0863               	movf	??_ADCRead,w
  3838  0042  1683               	bsf	3,5	;RP0=1, select bank1
  3839  0043  00E0               	movwf	ADCRead@ad_temp^(0+128)
  3840  0044  1283               	bcf	3,5	;RP0=0, select bank0
  3841  0045  0864               	movf	??_ADCRead+1,w
  3842  0046  1683               	bsf	3,5	;RP0=1, select bank1
  3843  0047  00E1               	movwf	(ADCRead@ad_temp+1)^(0+128)
  3844  0048  085F               	movf	(ADCRead@AD_L+1)^(0+128),w
  3845  0049  1283               	bcf	3,5	;RP0=0, select bank0
  3846  004A  00E4               	movwf	??_ADCRead+1
  3847  004B  1683               	bsf	3,5	;RP0=1, select bank1
  3848  004C  085E               	movf	ADCRead@AD_L^(0+128),w
  3849  004D  1283               	bcf	3,5	;RP0=0, select bank0
  3850  004E  00E3               	movwf	??_ADCRead
  3851  004F  3004               	movlw	4
  3852  0050                     u3695:	
  3853  0050  1003               	clrc
  3854  0051  0CE4               	rrf	??_ADCRead+1,f
  3855  0052  0CE3               	rrf	??_ADCRead,f
  3856  0053  3EFF               	addlw	-1
  3857  0054  1D03               	skipz
  3858  0055  2850               	goto	u3695
  3859  0056  0863               	movf	??_ADCRead,w
  3860  0057  1683               	bsf	3,5	;RP0=1, select bank1
  3861  0058  04E0               	iorwf	ADCRead@ad_temp^(0+128),f
  3862  0059  1283               	bcf	3,5	;RP0=0, select bank0
  3863  005A  0864               	movf	??_ADCRead+1,w
  3864  005B  1683               	bsf	3,5	;RP0=1, select bank1
  3865  005C  04E1               	iorwf	(ADCRead@ad_temp+1)^(0+128),f
  3866                           
  3867                           ;ADC.c: 185: if(ad_temp>ADCMax)
  3868  005D  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3869  005E  1283               	bcf	3,5	;RP0=0, select bank0
  3870  005F  0230               	subwf	_ADCMax+1,w
  3871  0060  1D03               	skipz
  3872  0061  2866               	goto	u3705
  3873  0062  1683               	bsf	3,5	;RP0=1, select bank1
  3874  0063  0860               	movf	ADCRead@ad_temp^(0+128),w
  3875  0064  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0065  022F               	subwf	_ADCMax,w
  3877  0066                     u3705:	
  3878  0066  1803               	skipnc
  3879  0067  2870               	goto	l627
  3880                           
  3881                           ;ADC.c: 186: {
  3882                           ;ADC.c: 187: ADCMax=ad_temp;
  3883  0068  1683               	bsf	3,5	;RP0=1, select bank1
  3884  0069  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3885  006A  1283               	bcf	3,5	;RP0=0, select bank0
  3886  006B  00B0               	movwf	_ADCMax+1
  3887  006C  1683               	bsf	3,5	;RP0=1, select bank1
  3888  006D  0860               	movf	ADCRead@ad_temp^(0+128),w
  3889  006E  1283               	bcf	3,5	;RP0=0, select bank0
  3890  006F  00AF               	movwf	_ADCMax
  3891  0070                     l627:	
  3892                           
  3893                           ;ADC.c: 188: }
  3894                           ;ADC.c: 189: if(ad_temp<ADCMin)
  3895  0070  082E               	movf	_ADCMin+1,w
  3896  0071  1683               	bsf	3,5	;RP0=1, select bank1
  3897  0072  0261               	subwf	(ADCRead@ad_temp+1)^(0+128),w
  3898  0073  1D03               	skipz
  3899  0074  2879               	goto	u3715
  3900  0075  1283               	bcf	3,5	;RP0=0, select bank0
  3901  0076  082D               	movf	_ADCMin,w
  3902  0077  1683               	bsf	3,5	;RP0=1, select bank1
  3903  0078  0260               	subwf	ADCRead@ad_temp^(0+128),w
  3904  0079                     u3715:	
  3905  0079  1803               	skipnc
  3906  007A  2882               	goto	l628
  3907                           
  3908                           ;ADC.c: 190: {
  3909                           ;ADC.c: 191: ADCMin=ad_temp;
  3910  007B  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3911  007C  1283               	bcf	3,5	;RP0=0, select bank0
  3912  007D  00AE               	movwf	_ADCMin+1
  3913  007E  1683               	bsf	3,5	;RP0=1, select bank1
  3914  007F  0860               	movf	ADCRead@ad_temp^(0+128),w
  3915  0080  1283               	bcf	3,5	;RP0=0, select bank0
  3916  0081  00AD               	movwf	_ADCMin
  3917  0082                     l628:	
  3918                           
  3919                           ;ADC.c: 192: }
  3920                           ;ADC.c: 193: ADsum += ad_temp;
  3921  0082  1683               	bsf	3,5	;RP0=1, select bank1
  3922  0083  0860               	movf	ADCRead@ad_temp^(0+128),w
  3923  0084  1283               	bcf	3,5	;RP0=0, select bank0
  3924  0085  00E3               	movwf	??_ADCRead
  3925  0086  1683               	bsf	3,5	;RP0=1, select bank1
  3926  0087  0861               	movf	(ADCRead@ad_temp+1)^(0+128),w
  3927  0088  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0089  00E4               	movwf	??_ADCRead+1
  3929  008A  01E5               	clrf	??_ADCRead+2
  3930  008B  01E6               	clrf	??_ADCRead+3
  3931  008C  2124               	fcall	PL8	;call to abstracted procedure
  3932  008D  1803               	skipnc
  3933  008E  3E01               	addlw	1
  3934  008F  1D03               	btfss	3,2
  3935  0090  07A8               	addwf	_ADsum+3,f
  3936  0091  300A               	movlw	10
  3937                           
  3938                           ;ADC.c: 194: ADcnt++;
  3939  0092  0AC2               	incf	_ADcnt,f
  3940                           
  3941                           ;ADC.c: 195: if(ADcnt >= 10)
  3942  0093  0242               	subwf	_ADcnt,w
  3943  0094  1C03               	skipc
  3944  0095  0008               	return
  3945                           
  3946                           ;ADC.c: 196: {
  3947                           ;ADC.c: 197: ADcnt = 0;
  3948  0096  01C2               	clrf	_ADcnt
  3949                           
  3950                           ;ADC.c: 198: ADsum= ADsum-ADCMax-ADCMin;
  3951  0097  082D               	movf	_ADCMin,w
  3952  0098  00E3               	movwf	??_ADCRead
  3953  0099  082E               	movf	_ADCMin+1,w
  3954  009A  00E4               	movwf	??_ADCRead+1
  3955  009B  01E5               	clrf	??_ADCRead+2
  3956  009C  01E6               	clrf	??_ADCRead+3
  3957  009D  082F               	movf	_ADCMax,w
  3958  009E  00E7               	movwf	??_ADCRead+4
  3959  009F  0830               	movf	_ADCMax+1,w
  3960  00A0  00E8               	movwf	??_ADCRead+5
  3961  00A1  01E9               	clrf	??_ADCRead+6
  3962  00A2  01EA               	clrf	??_ADCRead+7
  3963  00A3  0867               	movf	??_ADCRead+4,w
  3964  00A4  07E3               	addwf	??_ADCRead,f
  3965  00A5  0868               	movf	??_ADCRead+5,w
  3966  00A6  1803               	skipnc
  3967  00A7  0F68               	incfsz	??_ADCRead+5,w
  3968  00A8  07E4               	addwf	??_ADCRead+1,f
  3969  00A9  0869               	movf	??_ADCRead+6,w
  3970  00AA  1803               	skipnc
  3971  00AB  0F69               	incfsz	??_ADCRead+6,w
  3972  00AC  07E5               	addwf	??_ADCRead+2,f
  3973  00AD  086A               	movf	??_ADCRead+7,w
  3974  00AE  1803               	skipnc
  3975  00AF  0A6A               	incf	??_ADCRead+7,w
  3976  00B0  07E6               	addwf	??_ADCRead+3,f
  3977  00B1  09E3               	comf	??_ADCRead,f
  3978  00B2  09E4               	comf	??_ADCRead+1,f
  3979  00B3  09E5               	comf	??_ADCRead+2,f
  3980  00B4  09E6               	comf	??_ADCRead+3,f
  3981  00B5  0AE3               	incf	??_ADCRead,f
  3982  00B6  1903               	skipnz
  3983  00B7  0AE4               	incf	??_ADCRead+1,f
  3984  00B8  1903               	skipnz
  3985  00B9  0AE5               	incf	??_ADCRead+2,f
  3986  00BA  1903               	skipnz
  3987  00BB  0AE6               	incf	??_ADCRead+3,f
  3988  00BC  2124               	fcall	PL8	;call to abstracted procedure
  3989  00BD  1803               	skipnc
  3990  00BE  3E01               	addlw	1
  3991  00BF  1D03               	btfss	3,2
  3992  00C0  07A8               	addwf	_ADsum+3,f
  3993                           
  3994                           ;ADC.c: 199: ADsum = ADsum >> 3;
  3995  00C1  3003               	movlw	3
  3996  00C2                     u3765:	
  3997  00C2  1003               	clrc
  3998  00C3  0CA8               	rrf	_ADsum+3,f
  3999  00C4  0CA7               	rrf	_ADsum+2,f
  4000  00C5  0CA6               	rrf	_ADsum+1,f
  4001  00C6  0CA5               	rrf	_ADsum,f
  4002  00C7  3EFF               	addlw	-1
  4003  00C8  1D03               	skipz
  4004  00C9  28C2               	goto	u3765
  4005                           
  4006                           ;ADC.c: 200: switch (ADCState)
  4007  00CA  28F7               	goto	l6346
  4008  00CB                     l6338:	
  4009                           
  4010                           ;ADC.c: 203: *Val=ADsum;
  4011  00CB  0862               	movf	ADCRead@Val,w
  4012  00CC  0084               	movwf	4
  4013  00CD  0825               	movf	_ADsum,w
  4014  00CE  1383               	bcf	3,7	;select IRP bank0
  4015  00CF  0080               	movwf	0
  4016  00D0  0A84               	incf	4,f
  4017  00D1  0826               	movf	_ADsum+1,w
  4018  00D2  28F5               	goto	L15
  4019  00D3                     l6340:	
  4020                           ;ADC.c: 204: break;
  4021                           
  4022                           
  4023                           ;ADC.c: 207: *Val=ADsum*1000/(*(Val-1));
  4024  00D3  0862               	movf	ADCRead@Val,w
  4025  00D4  3EFE               	addlw	-2
  4026  00D5  210E               	fcall	PL4	;call to abstracted procedure
  4027  00D6  3003               	movlw	3
  4028  00D7  01D4               	clrf	___lmul@multiplicand+3
  4029  00D8  01D3               	clrf	___lmul@multiplicand+2
  4030  00D9  00D2               	movwf	___lmul@multiplicand+1
  4031  00DA  30E8               	movlw	232
  4032  00DB  00D1               	movwf	___lmul@multiplicand
  4033  00DC  28E5               	goto	L16
  4034  00DD                     l6342:	
  4035                           ;ADC.c: 208: break;
  4036                           
  4037                           
  4038                           ;ADC.c: 211: *Val=ADsum*100/(*(Val-2));
  4039  00DD  0862               	movf	ADCRead@Val,w
  4040  00DE  3EFC               	addlw	-4
  4041  00DF  210E               	fcall	PL4	;call to abstracted procedure
  4042  00E0  3064               	movlw	100
  4043  00E1  00D1               	movwf	___lmul@multiplicand
  4044  00E2  01D2               	clrf	___lmul@multiplicand+1
  4045  00E3  01D3               	clrf	___lmul@multiplicand+2
  4046  00E4  01D4               	clrf	___lmul@multiplicand+3
  4047  00E5                     L16:	
  4048  00E5  261C               	fcall	___lmul
  4049  00E6  0850               	movf	?___lmul+3,w
  4050  00E7  00DC               	movwf	___lldiv@dividend+3
  4051  00E8  084F               	movf	?___lmul+2,w
  4052  00E9  00DB               	movwf	___lldiv@dividend+2
  4053  00EA  084E               	movf	?___lmul+1,w
  4054  00EB  00DA               	movwf	___lldiv@dividend+1
  4055  00EC  084D               	movf	?___lmul,w
  4056  00ED  00D9               	movwf	___lldiv@dividend
  4057  00EE  2524               	fcall	___lldiv
  4058  00EF  0862               	movf	ADCRead@Val,w
  4059  00F0  0084               	movwf	4
  4060  00F1  0855               	movf	?___lldiv,w
  4061  00F2  0080               	movwf	0
  4062  00F3  0A84               	incf	4,f
  4063  00F4  0856               	movf	?___lldiv+1,w
  4064  00F5                     L15:	
  4065  00F5  0080               	movwf	0
  4066                           
  4067                           ;ADC.c: 212: break;
  4068  00F6  28FF               	goto	l6348
  4069  00F7                     l6346:	
  4070                           
  4071                           ; Switch size 1, requested type "space"
  4072                           ; Number of cases is 3, Range of values is 0 to 2
  4073                           ; switch strategies available:
  4074                           ; Name         Instructions Cycles
  4075                           ; direct_byte            9     6 (fixed)
  4076                           ; simple_byte           10     6 (average)
  4077                           ; jumptable            260     6 (fixed)
  4078                           ;	Chosen strategy is direct_byte
  4079  00F7  2135               	fcall	PL36	;call to abstracted procedure
  4080  00F8  1803               	skipnc
  4081  00F9  28FF               	goto	l6348
  4082  00FA  3007               	movlw	high S6978
  4083  00FB  008A               	movwf	10
  4084  00FC  30CA               	movlw	low S6978
  4085  00FD  0704               	addwf	4,w
  4086  00FE  0082               	movwf	2
  4087  00FF                     l6348:	
  4088  00FF  30FF               	movlw	255
  4089                           
  4090                           ;ADC.c: 214: ADCMax=0;
  4091  0100  01AF               	clrf	_ADCMax
  4092  0101  01B0               	clrf	_ADCMax+1
  4093                           
  4094                           ;ADC.c: 215: ADCMin=0xFFFF;
  4095  0102  00AD               	movwf	_ADCMin
  4096  0103  00AE               	movwf	_ADCMin+1
  4097  0104  3003               	movlw	3
  4098                           
  4099                           ;ADC.c: 216: ADsum = 0;
  4100  0105  01A5               	clrf	_ADsum
  4101  0106  01A6               	clrf	_ADsum+1
  4102  0107  01A7               	clrf	_ADsum+2
  4103  0108  01A8               	clrf	_ADsum+3
  4104                           
  4105                           ;ADC.c: 217: ADCState++;
  4106  0109  0AC3               	incf	_ADCState,f
  4107                           
  4108                           ;ADC.c: 218: if(ADCState>=3)
  4109  010A  0243               	subwf	_ADCState,w
  4110  010B  1803               	btfsc	3,0
  4111                           
  4112                           ;ADC.c: 219: {
  4113                           ;ADC.c: 220: ADCState=0;
  4114  010C  01C3               	clrf	_ADCState
  4115  010D  0008               	return
  4116  010E                     __end_of_ADCRead:	
  4117  010E                     PL4:	
  4118  010E  0084               	movwf	4
  4119  010F  1383               	bcf	3,7	;select IRP bank0
  4120  0110  0800               	movf	0,w
  4121  0111  00E3               	movwf	??_ADCRead
  4122  0112  0A84               	incf	4,f
  4123  0113  0800               	movf	0,w
  4124  0114  00E4               	movwf	??_ADCRead+1
  4125  0115  0863               	movf	??_ADCRead,w
  4126  0116  00D5               	movwf	___lldiv@divisor
  4127  0117  0864               	movf	??_ADCRead+1,w
  4128  0118  00D6               	movwf	___lldiv@divisor+1
  4129  0119  01D7               	clrf	___lldiv@divisor+2
  4130  011A  01D8               	clrf	___lldiv@divisor+3
  4131  011B  0828               	movf	_ADsum+3,w
  4132  011C  00D0               	movwf	___lmul@multiplier+3
  4133  011D  0827               	movf	_ADsum+2,w
  4134  011E  00CF               	movwf	___lmul@multiplier+2
  4135  011F  0826               	movf	_ADsum+1,w
  4136  0120  00CE               	movwf	___lmul@multiplier+1
  4137  0121  0825               	movf	_ADsum,w
  4138  0122  00CD               	movwf	___lmul@multiplier
  4139  0123  0008               	return
  4140  0124                     __end_ofPL4:	
  4141  0124                     PL8:	
  4142  0124  0863               	movf	??_ADCRead,w
  4143  0125  07A5               	addwf	_ADsum,f
  4144  0126  0864               	movf	??_ADCRead+1,w
  4145  0127  1103               	clrz
  4146  0128  1803               	skipnc
  4147  0129  3E01               	addlw	1
  4148  012A  1D03               	btfss	3,2
  4149  012B  07A6               	addwf	_ADsum+1,f
  4150  012C  0865               	movf	??_ADCRead+2,w
  4151  012D  1103               	clrz
  4152  012E  1803               	skipnc
  4153  012F  3E01               	addlw	1
  4154  0130  1D03               	btfss	3,2
  4155  0131  07A7               	addwf	_ADsum+2,f
  4156  0132  0866               	movf	??_ADCRead+3,w
  4157  0133  1103               	clrz
  4158  0134  0008               	return
  4159  0135                     __end_ofPL8:	
  4160  0135                     PL36:	
  4161  0135  0843               	movf	_ADCState,w
  4162  0136  0084               	movwf	4
  4163  0137  3003               	movlw	3
  4164  0138  0204               	subwf	4,w
  4165  0139  0008               	return
  4166  013A                     __end_ofPL36:	
  4167                           
  4168                           	psect	swtext2
  4169  07CA                     __pswtext2:	
  4170  07CA                     S6978:	
  4171  07CA  28CB               	ljmp	l6338
  4172  07CB  28D3               	ljmp	l6340
  4173  07CC  28DD               	ljmp	l6342
  4174                           
  4175                           	psect	text21
  4176  061C                     __ptext21:	
  4177 ;; *************** function ___lmul *****************
  4178 ;; Defined at:
  4179 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4182 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  product         4    3[COMMON] unsigned long 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  4    0[BANK0 ] unsigned long 
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0
  4189 ;; Tracked objects:
  4190 ;;		On entry : B00/0
  4191 ;;		On exit  : B00/0
  4192 ;;		Unchanged: 800/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1
  4194 ;;      Params:         0       8       0
  4195 ;;      Locals:         4       0       0
  4196 ;;      Temps:          0       0       0
  4197 ;;      Totals:         4       8       0
  4198 ;;Total ram usage:       12 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    2
  4201 ;; This function calls:
  4202 ;;		Nothing
  4203 ;; This function is called by:
  4204 ;;		_ADCRead
  4205 ;; This function uses a non-reentrant model
  4206 ;;
  4207                           
  4208                           
  4209                           ;psect for function ___lmul
  4210  061C                     ___lmul:	
  4211                           
  4212                           ;incstack = 0
  4213                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4214  061C  01F5               	clrf	___lmul@product
  4215  061D  01F6               	clrf	___lmul@product+1
  4216  061E  01F7               	clrf	___lmul@product+2
  4217  061F  01F8               	clrf	___lmul@product+3
  4218  0620                     l4227:	
  4219  0620  1C4D               	btfss	___lmul@multiplier,0
  4220  0621  2E36               	goto	l6282
  4221  0622  0851               	movf	___lmul@multiplicand,w
  4222  0623  07F5               	addwf	___lmul@product,f
  4223  0624  0852               	movf	___lmul@multiplicand+1,w
  4224  0625  1103               	clrz
  4225  0626  1803               	skipnc
  4226  0627  3E01               	addlw	1
  4227  0628  1D03               	btfss	3,2
  4228  0629  07F6               	addwf	___lmul@product+1,f
  4229  062A  0853               	movf	___lmul@multiplicand+2,w
  4230  062B  1103               	clrz
  4231  062C  1803               	skipnc
  4232  062D  3E01               	addlw	1
  4233  062E  1D03               	btfss	3,2
  4234  062F  07F7               	addwf	___lmul@product+2,f
  4235  0630  0854               	movf	___lmul@multiplicand+3,w
  4236  0631  1103               	clrz
  4237  0632  1803               	skipnc
  4238  0633  3E01               	addlw	1
  4239  0634  1D03               	btfss	3,2
  4240  0635  07F8               	addwf	___lmul@product+3,f
  4241  0636                     l6282:	
  4242  0636  1003               	clrc
  4243  0637  0DD1               	rlf	___lmul@multiplicand,f
  4244  0638  0DD2               	rlf	___lmul@multiplicand+1,f
  4245  0639  0DD3               	rlf	___lmul@multiplicand+2,f
  4246  063A  0DD4               	rlf	___lmul@multiplicand+3,f
  4247  063B  1003               	clrc
  4248  063C  0CD0               	rrf	___lmul@multiplier+3,f
  4249  063D  0CCF               	rrf	___lmul@multiplier+2,f
  4250  063E  0CCE               	rrf	___lmul@multiplier+1,f
  4251  063F  0CCD               	rrf	___lmul@multiplier,f
  4252  0640  0850               	movf	___lmul@multiplier+3,w
  4253  0641  044F               	iorwf	___lmul@multiplier+2,w
  4254  0642  044E               	iorwf	___lmul@multiplier+1,w
  4255  0643  044D               	iorwf	___lmul@multiplier,w
  4256  0644  1D03               	skipz
  4257  0645  2E20               	goto	l4227
  4258  0646  0878               	movf	___lmul@product+3,w
  4259  0647  00D0               	movwf	?___lmul+3
  4260  0648  0877               	movf	___lmul@product+2,w
  4261  0649  00CF               	movwf	?___lmul+2
  4262  064A  0876               	movf	___lmul@product+1,w
  4263  064B  00CE               	movwf	?___lmul+1
  4264  064C  0875               	movf	___lmul@product,w
  4265  064D  00CD               	movwf	?___lmul
  4266  064E  0008               	return
  4267  064F                     __end_of___lmul:	
  4268                           
  4269                           	psect	text22
  4270  0524                     __ptext22:	
  4271 ;; *************** function ___lldiv *****************
  4272 ;; Defined at:
  4273 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  divisor         4    8[BANK0 ] unsigned long 
  4276 ;;  dividend        4   12[BANK0 ] unsigned long 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  quotient        4   16[BANK0 ] unsigned long 
  4279 ;;  counter         1   20[BANK0 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  4    8[BANK0 ] unsigned long 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2, status,0
  4284 ;; Tracked objects:
  4285 ;;		On entry : B00/0
  4286 ;;		On exit  : B00/0
  4287 ;;		Unchanged: 800/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1
  4289 ;;      Params:         0       8       0
  4290 ;;      Locals:         0       5       0
  4291 ;;      Temps:          0       0       0
  4292 ;;      Totals:         0      13       0
  4293 ;;Total ram usage:       13 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    2
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_ADCRead
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function ___lldiv
  4305  0524                     ___lldiv:	
  4306                           
  4307                           ;incstack = 0
  4308                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4309  0524  01DD               	clrf	___lldiv@quotient
  4310  0525  01DE               	clrf	___lldiv@quotient+1
  4311  0526  01DF               	clrf	___lldiv@quotient+2
  4312  0527  01E0               	clrf	___lldiv@quotient+3
  4313  0528  0858               	movf	___lldiv@divisor+3,w
  4314  0529  0457               	iorwf	___lldiv@divisor+2,w
  4315  052A  0456               	iorwf	___lldiv@divisor+1,w
  4316  052B  0455               	iorwf	___lldiv@divisor,w
  4317  052C  1903               	skipnz
  4318  052D  2D63               	goto	l6312
  4319  052E  01E1               	clrf	___lldiv@counter
  4320  052F                     L17:	
  4321  052F  0AE1               	incf	___lldiv@counter,f
  4322  0530  1BD8               	btfsc	___lldiv@divisor+3,7
  4323  0531  2D38               	goto	l6300
  4324  0532  1003               	clrc
  4325  0533  0DD5               	rlf	___lldiv@divisor,f
  4326  0534  0DD6               	rlf	___lldiv@divisor+1,f
  4327  0535  0DD7               	rlf	___lldiv@divisor+2,f
  4328  0536  0DD8               	rlf	___lldiv@divisor+3,f
  4329  0537  2D2F               	goto	L17
  4330  0538                     l6300:	
  4331  0538  1003               	clrc
  4332  0539  0DDD               	rlf	___lldiv@quotient,f
  4333  053A  0DDE               	rlf	___lldiv@quotient+1,f
  4334  053B  0DDF               	rlf	___lldiv@quotient+2,f
  4335  053C  0DE0               	rlf	___lldiv@quotient+3,f
  4336  053D  0858               	movf	___lldiv@divisor+3,w
  4337  053E  025C               	subwf	___lldiv@dividend+3,w
  4338  053F  1D03               	skipz
  4339  0540  2D4B               	goto	u3665
  4340  0541  0857               	movf	___lldiv@divisor+2,w
  4341  0542  025B               	subwf	___lldiv@dividend+2,w
  4342  0543  1D03               	skipz
  4343  0544  2D4B               	goto	u3665
  4344  0545  0856               	movf	___lldiv@divisor+1,w
  4345  0546  025A               	subwf	___lldiv@dividend+1,w
  4346  0547  1D03               	skipz
  4347  0548  2D4B               	goto	u3665
  4348  0549  0855               	movf	___lldiv@divisor,w
  4349  054A  0259               	subwf	___lldiv@dividend,w
  4350  054B                     u3665:	
  4351  054B  1C03               	skipc
  4352  054C  2D5D               	goto	L18
  4353  054D  0855               	movf	___lldiv@divisor,w
  4354  054E  02D9               	subwf	___lldiv@dividend,f
  4355  054F  0856               	movf	___lldiv@divisor+1,w
  4356  0550  1C03               	skipc
  4357  0551  0F56               	incfsz	___lldiv@divisor+1,w
  4358  0552  02DA               	subwf	___lldiv@dividend+1,f
  4359  0553  0857               	movf	___lldiv@divisor+2,w
  4360  0554  1C03               	skipc
  4361  0555  0F57               	incfsz	___lldiv@divisor+2,w
  4362  0556  02DB               	subwf	___lldiv@dividend+2,f
  4363  0557  0858               	movf	___lldiv@divisor+3,w
  4364  0558  1C03               	skipc
  4365  0559  0F58               	incfsz	___lldiv@divisor+3,w
  4366  055A  02DC               	subwf	___lldiv@dividend+3,f
  4367  055B  145D               	bsf	___lldiv@quotient,0
  4368  055C  1003               	clrc
  4369  055D                     L18:	
  4370  055D  0CD8               	rrf	___lldiv@divisor+3,f
  4371  055E  0CD7               	rrf	___lldiv@divisor+2,f
  4372  055F  0CD6               	rrf	___lldiv@divisor+1,f
  4373  0560  0CD5               	rrf	___lldiv@divisor,f
  4374  0561  0BE1               	decfsz	___lldiv@counter,f
  4375  0562  2D38               	goto	l6300
  4376  0563                     l6312:	
  4377  0563  0860               	movf	___lldiv@quotient+3,w
  4378  0564  00D8               	movwf	?___lldiv+3
  4379  0565  085F               	movf	___lldiv@quotient+2,w
  4380  0566  00D7               	movwf	?___lldiv+2
  4381  0567  085E               	movf	___lldiv@quotient+1,w
  4382  0568  00D6               	movwf	?___lldiv+1
  4383  0569  085D               	movf	___lldiv@quotient,w
  4384  056A  00D5               	movwf	?___lldiv
  4385  056B  0008               	return
  4386  056C                     __end_of___lldiv:	
  4387                           
  4388                           	psect	text23
  4389  0733                     __ptext23:	
  4390 ;; *************** function _ADSample *****************
  4391 ;; Defined at:
  4392 ;;		line 233 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  ch              1    wreg     unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  ch              1    4[COMMON] unsigned char 
  4397 ;;  i               1    5[COMMON] volatile unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      unsigned char 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 300/100
  4404 ;;		On exit  : 300/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMMON   BANK0   BANK1
  4407 ;;      Params:         0       0       0
  4408 ;;      Locals:         2       0       0
  4409 ;;      Temps:          1       0       0
  4410 ;;      Totals:         3       0       0
  4411 ;;Total ram usage:        3 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    2
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_ADCRead
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _ADSample
  4423  0733                     _ADSample:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4427                           ;ADSample@ch stored from wreg
  4428  0733  00F6               	movwf	ADSample@ch
  4429                           
  4430                           ;ADC.c: 235: ADCON1 = 0x00;
  4431  0734  019F               	clrf	31	;volatile
  4432                           
  4433                           ;ADC.c: 236: ADCON0 = 0X41 | ( ch << 2);
  4434  0735  00F5               	movwf	??_ADSample
  4435  0736  3001               	movlw	1
  4436  0737  1003               	clrc
  4437  0738                     L19:	
  4438  0738  0DF5               	rlf	??_ADSample,f
  4439  0739  3EFF               	addlw	-1
  4440  073A  1003               	clrc
  4441  073B  1D03               	skipz
  4442  073C  2F38               	goto	L19
  4443  073D  0D75               	rlf	??_ADSample,w
  4444  073E  3841               	iorlw	65
  4445  073F  1283               	bcf	3,5	;RP0=0, select bank0
  4446  0740  009F               	movwf	31	;volatile
  4447  0741  0000               	nop	;# 
  4448  0742  0000               	nop	;# 
  4449                           
  4450                           ;ADC.c: 239: GODONE = 1;
  4451  0743  1283               	bcf	3,5	;RP0=0, select bank0
  4452  0744  1303               	bcf	3,6	;RP1=0, select bank0
  4453  0745  149F               	bsf	31,1	;volatile
  4454                           
  4455                           ;ADC.c: 240: volatile unsigned char i = 0;
  4456  0746  01F7               	clrf	ADSample@i	;volatile
  4457  0747                     l639:	
  4458                           ;ADC.c: 241: while(GODONE)
  4459                           
  4460  0747  1C9F               	btfss	31,1	;volatile
  4461  0748  3401               	retlw	1
  4462                           
  4463                           ;ADC.c: 242: {
  4464                           ;ADC.c: 243: if(0 == (--i))
  4465  0749  0BF7               	decfsz	ADSample@i,f	;volatile
  4466  074A  2F47               	goto	l639
  4467                           
  4468                           ;ADC.c: 244: return 0;
  4469  074B  3400               	retlw	0
  4470  074C                     __end_of_ADSample:	
  4471                           ;ADC.c: 245: }
  4472                           ;ADC.c: 246: return 1;
  4473                           
  4474                           
  4475                           	psect	text24
  4476  06FF                     __ptext24:	
  4477 ;; *************** function _Isr_Timer *****************
  4478 ;; Defined at:
  4479 ;;		line 8 in file "C:\Users\Administrator\Desktop\project\K13-01\code\even.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  1    wreg      void 
  4486 ;; Registers used:
  4487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 300/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1
  4493 ;;      Params:         0       0       0
  4494 ;;      Locals:         0       0       0
  4495 ;;      Temps:          3       0       0
  4496 ;;      Totals:         3       0       0
  4497 ;;Total ram usage:        3 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    1
  4500 ;; This function calls:
  4501 ;;		_LEDScan
  4502 ;; This function is called by:
  4503 ;;		Interrupt level 1
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _Isr_Timer
  4509  06FF                     _Isr_Timer:	
  4510                           
  4511                           ;even.c: 10: TMR2IF = 0;
  4512  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  4513  0700  1303               	bcf	3,6	;RP1=0, select bank0
  4514  0701  108C               	bcf	12,1	;volatile
  4515  0702  300A               	movlw	10
  4516                           
  4517                           ;even.c: 11: cnt2ms++;
  4518  0703  0ABF               	incf	_cnt2ms,f
  4519                           
  4520                           ;even.c: 12: cnt10ms++;
  4521  0704  0ABE               	incf	_cnt10ms,f
  4522                           
  4523                           ;even.c: 13: if(cnt2ms>=10)
  4524  0705  023F               	subwf	_cnt2ms,w
  4525  0706  1C03               	skipc
  4526  0707  2F0B               	goto	i1l6192
  4527                           
  4528                           ;even.c: 14: {
  4529                           ;even.c: 15: LEDScan();
  4530  0708  22E2               	fcall	_LEDScan
  4531                           
  4532                           ;even.c: 16: cnt2ms=0;
  4533  0709  01BF               	clrf	_cnt2ms
  4534                           
  4535                           ;even.c: 17: time2ms=1;
  4536  070A  14F1               	bsf	_time2ms/(0+8),_time2ms& (0+7)
  4537  070B                     i1l6192:	
  4538                           
  4539                           ;even.c: 18: }
  4540                           ;even.c: 19: if(cnt10ms>=50)
  4541  070B  3032               	movlw	50
  4542  070C  023E               	subwf	_cnt10ms,w
  4543  070D  1C03               	skipc
  4544  070E  2F11               	goto	i1l1196
  4545                           
  4546                           ;even.c: 20: {
  4547                           ;even.c: 21: cnt10ms=0;
  4548  070F  01BE               	clrf	_cnt10ms
  4549                           
  4550                           ;even.c: 22: time10ms=1;
  4551  0710  1471               	bsf	_time10ms/(0+8),_time10ms& (0+7)
  4552  0711                     i1l1196:	
  4553  0711  0874               	movf	??_Isr_Timer+2,w
  4554  0712  008A               	movwf	10
  4555  0713  0873               	movf	??_Isr_Timer+1,w
  4556  0714  0084               	movwf	4
  4557  0715  0E72               	swapf	??_Isr_Timer^(0+-128),w
  4558  0716  0083               	movwf	3
  4559  0717  0EFE               	swapf	126,f
  4560  0718  0E7E               	swapf	126,w
  4561  0719  0009               	retfie
  4562  071A                     __end_of_Isr_Timer:	
  4563                           
  4564                           	psect	intentry
  4565  0004                     __pintentry:	
  4566                           ;incstack = 0
  4567                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4568                           
  4569  0004                     interrupt_function:	
  4570  007E                     saved_w	set	btemp
  4571  0004  00FE               	movwf	btemp
  4572  0005  0E03               	swapf	3,w
  4573  0006  00F2               	movwf	??_Isr_Timer
  4574  0007  0804               	movf	4,w
  4575  0008  00F3               	movwf	??_Isr_Timer+1
  4576  0009  080A               	movf	10,w
  4577  000A  00F4               	movwf	??_Isr_Timer+2
  4578  000B  2EFF               	ljmp	_Isr_Timer
  4579                           
  4580                           	psect	text25
  4581  02E2                     __ptext25:	
  4582 ;; *************** function _LEDScan *****************
  4583 ;; Defined at:
  4584 ;;		line 17 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;		None
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4593 ;; Tracked objects:
  4594 ;;		On entry : 300/0
  4595 ;;		On exit  : 300/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1
  4598 ;;      Params:         0       0       0
  4599 ;;      Locals:         0       0       0
  4600 ;;      Temps:          0       0       0
  4601 ;;      Totals:         0       0       0
  4602 ;;Total ram usage:        0 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_Isr_Timer
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           
  4612                           ;psect for function _LEDScan
  4613  02E2                     _LEDScan:	
  4614                           
  4615                           ;LED.c: 19: static unsigned char LEDScanIndex=0;
  4616                           ;LED.c: 21: TRISB5=1,WPUB5=0;
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _LEDScan: [wreg-fsr0h+status,2+status,0]
  4620  02E2  1683               	bsf	3,5	;RP0=1, select bank1
  4621  02E3  1686               	bsf	6,5	;volatile
  4622  02E4  1295               	bcf	21,5	;volatile
  4623                           
  4624                           ;LED.c: 22: TRISB4=1,WPUB4=0;
  4625  02E5  1606               	bsf	6,4	;volatile
  4626  02E6  1215               	bcf	21,4	;volatile
  4627                           
  4628                           ;LED.c: 23: TRISB3=1,WPUB3=0;
  4629  02E7  1586               	bsf	6,3	;volatile
  4630  02E8  1195               	bcf	21,3	;volatile
  4631                           
  4632                           ;LED.c: 24: TRISC3=1,WPUC3=0;
  4633  02E9  1587               	bsf	7,3	;volatile
  4634  02EA  1703               	bsf	3,6	;RP1=1, select bank3
  4635  02EB  118F               	bcf	15,3	;volatile
  4636                           
  4637                           ;LED.c: 25: TRISC2=1,WPUC2=0;
  4638  02EC  1303               	bcf	3,6	;RP1=0, select bank1
  4639  02ED  1507               	bsf	7,2	;volatile
  4640  02EE  1703               	bsf	3,6	;RP1=1, select bank3
  4641  02EF  110F               	bcf	15,2	;volatile
  4642  02F0  0000               	nop	;# 
  4643  02F1  0000               	nop	;# 
  4644                           
  4645                           ;LED.c: 28: switch(LEDScanIndex)
  4646  02F2  2B48               	goto	i1l6130
  4647  02F3                     i1l2982:	
  4648                           ;LED.c: 29: {
  4649                           ;LED.c: 30: case 0:
  4650                           
  4651                           
  4652                           ;LED.c: 31: if(LEDArrMap[0]&0x02)
  4653  02F3  1CA0               	btfss	_LEDArrMap,1
  4654  02F4  2AF6               	goto	i1l2983
  4655                           
  4656                           ;LED.c: 32: {
  4657                           ;LED.c: 33: TRISB4=0,WPUB4=0;RB4=0 ;
  4658  02F5  2377               	fcall	PL24	;call to abstracted procedure
  4659  02F6                     i1l2983:	
  4660                           
  4661                           ;LED.c: 34: }
  4662                           ;LED.c: 35: if(LEDArrMap[0]&0x04)
  4663  02F6  1D20               	btfss	_LEDArrMap,2
  4664  02F7  2AF9               	goto	i1l2984
  4665                           
  4666                           ;LED.c: 36: {
  4667                           ;LED.c: 37: TRISB3=0,WPUB3=0;RB3=0 ;
  4668  02F8  2371               	fcall	PL22	;call to abstracted procedure
  4669  02F9                     i1l2984:	
  4670                           
  4671                           ;LED.c: 38: }
  4672                           ;LED.c: 39: if(LEDArrMap[0]&0x08)
  4673  02F9  1DA0               	btfss	_LEDArrMap,3
  4674  02FA  2AFC               	goto	i1l2985
  4675                           
  4676                           ;LED.c: 40: {
  4677                           ;LED.c: 41: TRISC3=0,WPUC3=0;RC3=0 ;
  4678  02FB  2363               	fcall	PL16	;call to abstracted procedure
  4679  02FC                     i1l2985:	
  4680                           
  4681                           ;LED.c: 42: }
  4682                           ;LED.c: 43: if(LEDArrMap[0]&0x10)
  4683  02FC  1E20               	btfss	_LEDArrMap,4
  4684  02FD  2AFF               	goto	i1l2986
  4685                           
  4686                           ;LED.c: 44: {
  4687                           ;LED.c: 45: TRISC2=0,WPUC2=0;RC2=0 ;
  4688  02FE  235B               	fcall	PL14	;call to abstracted procedure
  4689  02FF                     i1l2986:	
  4690                           
  4691                           ;LED.c: 46: }
  4692                           ;LED.c: 47: TRISB5=0,WPUB5=0;RB5=1 ;
  4693  02FF  1683               	bsf	3,5	;RP0=1, select bank1
  4694  0300  1286               	bcf	6,5	;volatile
  4695  0301  1295               	bcf	21,5	;volatile
  4696  0302  1283               	bcf	3,5	;RP0=0, select bank0
  4697  0303  1686               	bsf	6,5	;volatile
  4698                           
  4699                           ;LED.c: 48: break;
  4700  0304  2B55               	goto	i1l6132
  4701  0305                     i1l2988:	
  4702                           ;LED.c: 50: case 1:
  4703                           
  4704                           
  4705                           ;LED.c: 51: if(LEDArrMap[1]&0x01)
  4706  0305  1C21               	btfss	_LEDArrMap+1,0
  4707  0306  2B08               	goto	i1l2989
  4708                           
  4709                           ;LED.c: 52: {
  4710                           ;LED.c: 53: TRISB5=0,WPUB5=0;RB5=0 ;
  4711  0307  236B               	fcall	PL20	;call to abstracted procedure
  4712  0308                     i1l2989:	
  4713                           
  4714                           ;LED.c: 54: }
  4715                           ;LED.c: 55: if(LEDArrMap[1]&0x04)
  4716  0308  1D21               	btfss	_LEDArrMap+1,2
  4717  0309  2B0B               	goto	i1l2990
  4718                           
  4719                           ;LED.c: 56: {
  4720                           ;LED.c: 57: TRISB3=0,WPUB3=0;RB3=0 ;
  4721  030A  2371               	fcall	PL22	;call to abstracted procedure
  4722  030B                     i1l2990:	
  4723                           
  4724                           ;LED.c: 58: }
  4725                           ;LED.c: 59: if(LEDArrMap[1]&0x08)
  4726  030B  1DA1               	btfss	_LEDArrMap+1,3
  4727  030C  2B0E               	goto	i1l2991
  4728                           
  4729                           ;LED.c: 60: {
  4730                           ;LED.c: 61: TRISC3=0,WPUC3=0;RC3=0 ;
  4731  030D  2363               	fcall	PL16	;call to abstracted procedure
  4732  030E                     i1l2991:	
  4733                           
  4734                           ;LED.c: 62: }
  4735                           ;LED.c: 63: if(LEDArrMap[1]&0x10)
  4736  030E  1E21               	btfss	_LEDArrMap+1,4
  4737  030F  2B11               	goto	i1l2992
  4738                           
  4739                           ;LED.c: 64: {
  4740                           ;LED.c: 65: TRISC2=0,WPUC2=0;RC2=0 ;
  4741  0310  235B               	fcall	PL14	;call to abstracted procedure
  4742  0311                     i1l2992:	
  4743                           
  4744                           ;LED.c: 66: }
  4745                           ;LED.c: 67: TRISB4=0,WPUB4=0; RB4=1 ;
  4746  0311  1683               	bsf	3,5	;RP0=1, select bank1
  4747  0312  1206               	bcf	6,4	;volatile
  4748  0313  1215               	bcf	21,4	;volatile
  4749  0314  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0315  1606               	bsf	6,4	;volatile
  4751                           
  4752                           ;LED.c: 68: break;
  4753  0316  2B55               	goto	i1l6132
  4754  0317                     i1l2993:	
  4755                           ;LED.c: 70: case 2:
  4756                           
  4757                           
  4758                           ;LED.c: 71: if(LEDArrMap[2]&0x01)
  4759  0317  1C22               	btfss	_LEDArrMap+2,0
  4760  0318  2B1A               	goto	i1l2994
  4761                           
  4762                           ;LED.c: 72: {
  4763                           ;LED.c: 73: TRISB5=0,WPUB5=0;RB5=0 ;
  4764  0319  236B               	fcall	PL20	;call to abstracted procedure
  4765  031A                     i1l2994:	
  4766                           
  4767                           ;LED.c: 74: }
  4768                           ;LED.c: 75: if(LEDArrMap[2]&0x02)
  4769  031A  1CA2               	btfss	_LEDArrMap+2,1
  4770  031B  2B1D               	goto	i1l2995
  4771                           
  4772                           ;LED.c: 76: {
  4773                           ;LED.c: 77: TRISB4=0,WPUB4=0;RB4=0 ;
  4774  031C  2377               	fcall	PL24	;call to abstracted procedure
  4775  031D                     i1l2995:	
  4776                           
  4777                           ;LED.c: 78: }
  4778                           ;LED.c: 79: if(LEDArrMap[2]&0x08)
  4779  031D  1DA2               	btfss	_LEDArrMap+2,3
  4780  031E  2B20               	goto	i1l2996
  4781                           
  4782                           ;LED.c: 80: {
  4783                           ;LED.c: 81: TRISC3=0,WPUC3=0;RC3=0 ;
  4784  031F  2363               	fcall	PL16	;call to abstracted procedure
  4785  0320                     i1l2996:	
  4786                           
  4787                           ;LED.c: 82: }
  4788                           ;LED.c: 83: if(LEDArrMap[2]&0x10)
  4789  0320  1E22               	btfss	_LEDArrMap+2,4
  4790  0321  2B23               	goto	i1l2997
  4791                           
  4792                           ;LED.c: 84: {
  4793                           ;LED.c: 85: TRISC2=0,WPUC2=0;RC2=0 ;
  4794  0322  235B               	fcall	PL14	;call to abstracted procedure
  4795  0323                     i1l2997:	
  4796                           
  4797                           ;LED.c: 86: }
  4798                           ;LED.c: 87: TRISB3=0,WPUB3=0;RB3=1 ;
  4799  0323  1683               	bsf	3,5	;RP0=1, select bank1
  4800  0324  1186               	bcf	6,3	;volatile
  4801  0325  1195               	bcf	21,3	;volatile
  4802  0326  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0327  1586               	bsf	6,3	;volatile
  4804                           
  4805                           ;LED.c: 88: break;
  4806  0328  2B55               	goto	i1l6132
  4807  0329                     i1l2998:	
  4808                           ;LED.c: 90: case 3:
  4809                           
  4810                           
  4811                           ;LED.c: 91: if(LEDArrMap[3]&0x01)
  4812  0329  1C23               	btfss	_LEDArrMap+3,0
  4813  032A  2B2C               	goto	i1l2999
  4814                           
  4815                           ;LED.c: 92: {
  4816                           ;LED.c: 93: TRISB5=0,WPUB5=0;RB5=0 ;
  4817  032B  236B               	fcall	PL20	;call to abstracted procedure
  4818  032C                     i1l2999:	
  4819                           
  4820                           ;LED.c: 94: }
  4821                           ;LED.c: 95: if(LEDArrMap[3]&0x02)
  4822  032C  1CA3               	btfss	_LEDArrMap+3,1
  4823  032D  2B2F               	goto	i1l3000
  4824                           
  4825                           ;LED.c: 96: {
  4826                           ;LED.c: 97: TRISB4=0,WPUB4=0;RB4=0 ;
  4827  032E  2377               	fcall	PL24	;call to abstracted procedure
  4828  032F                     i1l3000:	
  4829                           
  4830                           ;LED.c: 98: }
  4831                           ;LED.c: 99: if(LEDArrMap[3]&0x04)
  4832  032F  1D23               	btfss	_LEDArrMap+3,2
  4833  0330  2B32               	goto	i1l3001
  4834                           
  4835                           ;LED.c: 100: {
  4836                           ;LED.c: 101: TRISB3=0,WPUB3=0;RB3=0 ;
  4837  0331  2371               	fcall	PL22	;call to abstracted procedure
  4838  0332                     i1l3001:	
  4839                           
  4840                           ;LED.c: 102: }
  4841                           ;LED.c: 103: TRISC3=0,WPUC3=0;RC3=1 ;
  4842  0332  1683               	bsf	3,5	;RP0=1, select bank1
  4843  0333  1187               	bcf	7,3	;volatile
  4844  0334  1703               	bsf	3,6	;RP1=1, select bank3
  4845  0335  118F               	bcf	15,3	;volatile
  4846  0336  1283               	bcf	3,5	;RP0=0, select bank0
  4847  0337  1303               	bcf	3,6	;RP1=0, select bank0
  4848  0338  1587               	bsf	7,3	;volatile
  4849                           
  4850                           ;LED.c: 104: break;
  4851  0339  2B55               	goto	i1l6132
  4852  033A                     i1l3002:	
  4853                           ;LED.c: 106: case 4:
  4854                           
  4855                           
  4856                           ;LED.c: 107: if(LEDArrMap[4]&0x01)
  4857  033A  1C24               	btfss	_LEDArrMap+4,0
  4858  033B  2B3D               	goto	i1l3003
  4859                           
  4860                           ;LED.c: 108: {
  4861                           ;LED.c: 109: TRISB5=0,WPUB5=0;RB5=0 ;
  4862  033C  236B               	fcall	PL20	;call to abstracted procedure
  4863  033D                     i1l3003:	
  4864                           
  4865                           ;LED.c: 110: }
  4866                           ;LED.c: 111: if(LEDArrMap[4]&0x04)
  4867  033D  1D24               	btfss	_LEDArrMap+4,2
  4868  033E  2B40               	goto	i1l3004
  4869                           
  4870                           ;LED.c: 112: {
  4871                           ;LED.c: 113: TRISB3=0,WPUB3=0;RB3=0 ;
  4872  033F  2371               	fcall	PL22	;call to abstracted procedure
  4873  0340                     i1l3004:	
  4874                           
  4875                           ;LED.c: 114: }
  4876                           ;LED.c: 115: TRISC2=0,WPUC2=0;RC2=1 ;
  4877  0340  1683               	bsf	3,5	;RP0=1, select bank1
  4878  0341  1107               	bcf	7,2	;volatile
  4879  0342  1703               	bsf	3,6	;RP1=1, select bank3
  4880  0343  110F               	bcf	15,2	;volatile
  4881  0344  1283               	bcf	3,5	;RP0=0, select bank0
  4882  0345  1303               	bcf	3,6	;RP1=0, select bank0
  4883  0346  1507               	bsf	7,2	;volatile
  4884                           
  4885                           ;LED.c: 116: }
  4886  0347  2B55               	goto	i1l6132
  4887  0348                     i1l6130:	
  4888  0348  1283               	bcf	3,5	;RP0=0, select bank0
  4889  0349  1303               	bcf	3,6	;RP1=0, select bank0
  4890  034A  083A               	movf	LEDScan@LEDScanIndex,w
  4891                           
  4892                           ; Switch size 1, requested type "space"
  4893                           ; Number of cases is 5, Range of values is 0 to 4
  4894                           ; switch strategies available:
  4895                           ; Name         Instructions Cycles
  4896                           ; direct_byte           11     6 (fixed)
  4897                           ; simple_byte           16     9 (average)
  4898                           ; jumptable            260     6 (fixed)
  4899                           ;	Chosen strategy is direct_byte
  4900  034B  0084               	movwf	4
  4901  034C  3005               	movlw	5
  4902  034D  0204               	subwf	4,w
  4903  034E  1803               	skipnc
  4904  034F  2B55               	goto	i1l6132
  4905  0350  3007               	movlw	high i1S6980
  4906  0351  008A               	movwf	10
  4907  0352  30C1               	movlw	low i1S6980
  4908  0353  0704               	addwf	4,w
  4909  0354  0082               	movwf	2
  4910  0355                     i1l6132:	
  4911  0355  3005               	movlw	5
  4912                           
  4913                           ;LED.c: 117: LEDScanIndex++;
  4914  0356  0ABA               	incf	LEDScan@LEDScanIndex,f
  4915                           
  4916                           ;LED.c: 118: if(LEDScanIndex>=5)
  4917  0357  023A               	subwf	LEDScan@LEDScanIndex,w
  4918  0358  1803               	btfsc	3,0
  4919                           
  4920                           ;LED.c: 119: {
  4921                           ;LED.c: 120: LEDScanIndex=0;
  4922  0359  01BA               	clrf	LEDScan@LEDScanIndex
  4923  035A  0008               	return
  4924  035B                     __end_of_LEDScan:	
  4925  007E                     btemp	set	126	;btemp
  4926  007E                     wtemp0	set	126
  4927  035B                     PL14:	
  4928  035B  1683               	bsf	3,5	;RP0=1, select bank1
  4929  035C  1107               	bcf	7,2	;volatile
  4930  035D  1703               	bsf	3,6	;RP1=1, select bank3
  4931  035E  110F               	bcf	15,2	;volatile
  4932  035F  1283               	bcf	3,5	;RP0=0, select bank0
  4933  0360  1303               	bcf	3,6	;RP1=0, select bank0
  4934  0361  1107               	bcf	7,2	;volatile
  4935  0362  0008               	return
  4936  0363                     __end_ofPL14:	
  4937  0363                     PL16:	
  4938  0363  1683               	bsf	3,5	;RP0=1, select bank1
  4939  0364  1187               	bcf	7,3	;volatile
  4940  0365  1703               	bsf	3,6	;RP1=1, select bank3
  4941  0366  118F               	bcf	15,3	;volatile
  4942  0367  1283               	bcf	3,5	;RP0=0, select bank0
  4943  0368  1303               	bcf	3,6	;RP1=0, select bank0
  4944  0369  1187               	bcf	7,3	;volatile
  4945  036A  0008               	return
  4946  036B                     __end_ofPL16:	
  4947  036B                     PL20:	
  4948  036B  1683               	bsf	3,5	;RP0=1, select bank1
  4949  036C  1286               	bcf	6,5	;volatile
  4950  036D  1295               	bcf	21,5	;volatile
  4951  036E  1283               	bcf	3,5	;RP0=0, select bank0
  4952  036F  1286               	bcf	6,5	;volatile
  4953  0370  0008               	return
  4954  0371                     __end_ofPL20:	
  4955  0371                     PL22:	
  4956  0371  1683               	bsf	3,5	;RP0=1, select bank1
  4957  0372  1186               	bcf	6,3	;volatile
  4958  0373  1195               	bcf	21,3	;volatile
  4959  0374  1283               	bcf	3,5	;RP0=0, select bank0
  4960  0375  1186               	bcf	6,3	;volatile
  4961  0376  0008               	return
  4962  0377                     __end_ofPL22:	
  4963  0377                     PL24:	
  4964  0377  1683               	bsf	3,5	;RP0=1, select bank1
  4965  0378  1206               	bcf	6,4	;volatile
  4966  0379  1215               	bcf	21,4	;volatile
  4967  037A  1283               	bcf	3,5	;RP0=0, select bank0
  4968  037B  1206               	bcf	6,4	;volatile
  4969  037C  0008               	return
  4970  037D                     __end_ofPL24:	
  4971                           
  4972                           	psect	swtext3
  4973  07C1                     __pswtext3:	
  4974  07C1                     i1S6980:	
  4975  07C1  2AF3               	ljmp	i1l2982
  4976  07C2  2B05               	ljmp	i1l2988
  4977  07C3  2B17               	ljmp	i1l2993
  4978  07C4  2B29               	ljmp	i1l2998
  4979  07C5  2B3A               	ljmp	i1l3002


Data Sizes:
    Strings     0
    Constant    16
    Data        51
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     30      75
    BANK1            80      7      66

Pointer List with Targets:

    ADCRead@Val	PTR unsigned int  size(1) Largest target is 6
		 -> ADCVal(BANK0[6]), 


Critical Paths under _main in COMMON

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _WorkLedPro->___lbmod
    _USBLedPro->___lbmod
    _ADCRead->___lmul
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _DisplayPro->_DisplayIcon
    _DisplayPro->_USBLedPro
    _ADCPro->_ADCRead
    _ADCRead->___lldiv
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADCPro->_ADCRead

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3999
                              _Apply
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0       0
                           _GPIOInit
                          _TimerInit
 ---------------------------------------------------------------------------------
 (2) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Apply                                                0     0      0    3999
                             _ADCPro
                         _DisplayPro
                            _KeyScan
                              _Motor
                           _Sec1sPro
 ---------------------------------------------------------------------------------
 (2) _Sec1sPro                                             5     5      0     953
                                              3 BANK0      5     5      0
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Motor                                                0     0      0      52
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _KeyScan                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayPro                                           0     0      0    1422
                        _DisplayIcon
                             _ErrPro
                            _LockPro
                          _USBLedPro
                         _WorkLedPro
 ---------------------------------------------------------------------------------
 (3) _WorkLedPro                                           2     2      0     659
                                              0 BANK0      2     2      0
                             ___bmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     224
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USBLedPro                                            3     3      0     435
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     216
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     219
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LockPro                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ErrPro                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DisplayIcon                                          7     5      2     328
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADCPro                                               0     0      0    1572
                            _ADCRead
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                             16    15      1    1572
                                             21 BANK0      9     8      1
                                              0 BANK1      7     7      0
                           _ADSample
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     501
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADSample                                             3     3      0      65
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _LEDScan
 ---------------------------------------------------------------------------------
 (6) _LEDScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apply
     _ADCPro
       _ADCRead
         _ADSample
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _DisplayPro
       _DisplayIcon
       _ErrPro
       _LockPro
       _USBLedPro
         ___lbdiv
         ___lbmod
       _WorkLedPro
         ___bmul
         ___lbdiv
         ___lbmod
     _KeyScan
     _Motor
       ___wmul
     _Sec1sPro
       ___bmul
       ___lwdiv
   _SystemInit
     _GPIOInit
     _TimerInit

 _Isr_Timer (ROOT)
   _LEDScan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      7      42       7       82.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      98       8        0.0%
ABS                  0      0      98       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Aug 13 15:50:44 2020

                      pc 0002           ___bmul@product 0076                       PL2 03E5  
                     PL4 010E                       PL6 0464                       PL8 0124  
                     fsr 0004      ___wmul@multiplicand 0077               _BatPercent 0046  
                    PL10 03FA                      PL20 036B                      PL12 05D7  
                    PL30 0470                      PL22 0371                      PL14 035B  
                    PL40 05E4                      PL32 020B                      PL24 0377  
                    PL16 0363                      PL34 0774                      PL26 02DC  
                    PL18 02D1                      PL36 0135                      PL28 04D1  
                    PL38 06C3                      l609 028C                      l627 0070  
                    l628 0082                      l639 0747                      l575 0584  
                    _RA5 002D                      _RB3 0033                      _RA6 002E  
                    _RB4 0034                      _RC2 003A                      _RA7 002F  
                    _RB5 0035                      _RC3 003B                      _PR2 0092  
                    fsr0 0004          __end_of_ADCRead 010E                      indf 0000  
                   S6976 0001                     S6978 07CA          __end_of_LEDSeg1 0762  
        __end_of_LEDScan 035B                     l3042 03A7                     l4202 0498  
                   l2371 0140                     l3076 051D                     l2380 019A  
                   l2372 0141                     l2381 019C                     l2373 016E  
                   l2391 01F6                     l2383 01DA                     l2375 016B  
                   l2393 01F3                     l2385 01D6                     l2377 01F8  
                   l4209 04CA                     l2378 019E                     l4227 0620  
                   l2395 01F1                     l6020 01EA                     l2397 0201  
                   l2398 0202                     l6014 01D0                     l2399 0208  
                   l6300 0538                     l5500 06EA                     l4199 047E  
                   l6312 0563                     l5514 06FD                     l5530 06E0  
                   l5522 06CC                     l6340 00D3                     l6404 0392  
                   l6342 00DD                     l4478 06F0                     l6510 065D  
                   l6432 03BA                     l6408 0394                     l6282 0636  
                   l6338 00CB                     l6346 00F7                     l6530 0572  
                   l5482 0797                     l6522 0674                     l6610 0270  
                   l6348 00FF                     l6532 0577                     l6380 05CE  
                   l6444 03CC                     l6436 03BD                     l6620 0286  
                   l6542 058F                     l6374 05B3                     l6366 05AE  
                   l6606 026C                     l6552 059B                     l6528 056D  
                   l6536 057C                     l5760 050C                     l5736 04DE  
                   l6640 02B6                     l6616 027B                     l6608 026E  
                   l6562 05AB                     l6546 0598                     l5746 04E8  
                   l5754 0506                     l6482 0460                     l6650 02CB  
                   l6570 0211                     l5756 0507                     l6468 041A  
                   l6820 0724                     l6628 02A0                     l6652 02CE  
                   l5790 076D                     l6582 0229                     l6816 071C  
                   l6904 06BC                     l5794 0771                     l5778 0521  
                   l6586 0245                     l6578 021E                     l6914 07C7  
                   l6870 04CD                     l6854 04A9                     l6598 025B  
                   l6880 06A7                     l6866 04C3                     l6890 06B2  
                   l6896 06B7                     _ANS1 0C41                     _ANS2 0C42  
                   u3070 01E0                     u3080 01E6                     u3072 01E1  
                   u2345 04F6                     u3082 01E7                     u4035 042E  
                   u4045 0453                     u4215 0254                     _PIE1 008C  
                   u4315 02AF                     u2900 0188                     u2902 0189  
                   u4095 0666                     u3705 0066                     u2770 014E  
                   u3715 0079                     u4195 02DA                     u2780 0154  
                   u2772 014F                     u4605 0490                     u2782 0155  
                   u3665 054B                     u2970 01AB                     u2890 0182  
                   u2980 01B1                     u2972 01AC                     u2892 0183  
                   u3765 00C2                     u2982 01B2                     u3695 0050  
                   u4655 04BA                     u3794 05DF                     u3795 05DD  
                   u3895 03ED                     _RBPU 040F                     _WPUA 018E  
                   _WPUB 0095                     _WPUC 018F                     _main 07C6  
                   btemp 007E                     start 000C        ___bmul@multiplier 0077  
        _VarPowerUpCount 003D         __end_of_ADSample 074C          __end_of_KeyScan 020B  
        __end_of_LockPro 0524         __end_of_GPIOInit 06A1      __end_of_DisplayIcon 05D7  
                  ?_main 0072          __end_of___lbdiv 06FF          __end_of___lbmod 06E4  
        __end_of___lldiv 056C                    _T2CON 0012          __end_of___lwdiv 0679  
                  _ADcnt 0042                    _ADsum 0025                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _WPUA1 0C71  
                  _WPUA2 0C72                    _WPUB3 04AB                    _WPUA6 0C76  
                  _WPUC2 0C7A                    _WPUB4 04AC                    _WPUA7 0C77  
                  _WPUC3 0C7B                    _WPUB5 04AD                    _Apply 06A1  
    ___lmul@multiplicand 0051                    _Motor 0476               _DisplayPro 07A3  
    ErrPro@LedSwitchFlag 0380           __pbitbssCOMMON 0380                    pclath 000A  
                  status 0003                    wtemp0 007E       __size_of_USBLedPro 005B  
        ___lbdiv@divisor 0075          ___lbdiv@counter 0077          __initialization 000D  
       __end_of_Sec1sPro 02D1             __end_of_main 07CA               _CurrentCnt 0041  
              ??_ADCRead 0063                   ??_main 007A              _HideNumbArr 00BE  
              ??_LEDScan 0072             USBLedPro@cnt 0038                   ?_Apply 0072  
    LEDScan@LEDScanIndex 003A                   ?_Motor 0072             _SystemONFlag 038D  
              ADCRead@ch 00DB                   _ADCON0 001F                   _ADCON1 009F  
                 _ADCMax 002F                   _ADCMin 002D                   _ADRESH 001E  
                 _ADRESL 009E                   _ADCVal 0047                   i1S6980 07C1  
                 _ADCPro 056C                   _GODONE 00F9                   i1l3000 032F  
                 i1l3001 0332                   i1l3002 033A                   i1l3003 033D  
                 i1l3004 0340                   i1l1196 0711                   i1l6130 0348  
                 i1l6132 0355                   i1l2990 030B                   i1l2982 02F3  
                 i1l2991 030E                   i1l2983 02F6                   i1l2992 0311  
                 i1l2984 02F9                   i1l6192 070B                   i1l2993 0317  
                 i1l2985 02FC                   i1l2994 031A                   i1l2986 02FF  
                 i1l2995 031D                   i1l2996 0320                   i1l2988 0305  
                 i1l2997 0323                   i1l2989 0308                   i1l2998 0329  
                 i1l2999 032C                   _INTCON 000B                   _OSCCON 008F  
                 _TMR2IF 0061                   _WDTCON 0105                   _TRISA1 0429  
                 _TRISA2 042A                   _TRISB3 0433                   _TRISA6 042E  
                 _TRISB4 0434                   _TRISC2 043A                   _TRISA7 042F  
                 _TRISB5 0435                   _TRISC3 043B               _TimeAddCnt 00D3  
             _TimeDecCnt 00D5                ??_KeyScan 0075                ??_LockPro 0075  
                 _KeyCnt 0029                   _ErrPro 0762       __size_of_Isr_Timer 001B  
            _DisplayIcon 05AE                   ___bmul 0795                   ___lmul 061C  
                 ___wmul 071A                ??___lbdiv 0076                ??___lbmod 0076  
                 _cnt2ms 003F                ??___lldiv 0079                ??___lwdiv 0079  
        ErrPro@SwitchCnt 0031        __end_of_USBLedPro 0464       __size_of_TimerInit 000E  
              ADSample@i 0077                   saved_w 007E              ?_DisplayPro 0072  
       ___lbdiv@dividend 0076                ?_ADSample 0072          ___lbmod@divisor 0075  
__end_of__initialization 0022          ___lbmod@counter 0078                ?_GPIOInit 0072  
             _WorkLedPro 037D      ___bmul@multiplicand 0075            __end_of_Apply 06C3  
         __pcstackCOMMON 0072            __end_of_Motor 04D1             __pidataBANK1 05E9  
             __end_ofPL2 03FA               __end_ofPL4 0124               __end_ofPL6 0470  
             __end_ofPL8 0135         ___lbdiv@quotient 0078         LockPro@SwitchCnt 0034  
             _SystemInit 07B0                  ??_Apply 007A        __end_of_Isr_Timer 071A  
                ??_Motor 0079                  ?_ADCPro 0072               ??_ADSample 0075  
              ?_Sec1sPro 0072               __pbssBANK0 0020               __pbssBANK1 00D3  
   LockPro@LedSwitchFlag 0381               ??_GPIOInit 0075        __end_of_TimerInit 0795  
                ?_ErrPro 0072               __pmaintext 07C6                  ?___bmul 0075  
                ?___lmul 004D               ADCRead@Val 0062      __size_of_DisplayPro 000D  
                ?___wmul 0075               __pintentry 0004           ___lmul@product 0075  
                _ADCRead 0024                  _LEDSeg1 0752                  _LEDSeg2 00A0  
                _LEDScan 02E2    Sec1sPro@ActualPercent 0040                  _USBFlag 038B  
                _USBLink 0384          __size_of_ADCPro 0042               ??_Sec1sPro 0050  
             __stringtab 074C                  _KeyScan 013A                  _IovFlag 038C  
                _LockPro 04D7                  _LockSta 002B              ?_WorkLedPro 0072  
        __size_of_ErrPro 0012                  _NumbArr 00C9          __size_of___bmul 000E  
                ___lbdiv 06E4          __size_of___lmul 0033                  ___lbmod 06C8  
                _WorkCnt 00D7                  _WorkMin 007A                  ___lldiv 0524  
        __size_of___wmul 0019                  ___lwdiv 064F                  _cnt10ms 003E  
     Sec1sPro@PercentErr 0052                  __ptext1 07B0                  __ptext2 0787  
                __ptext3 0679                  __ptext4 06A1                  __ptext5 0211  
                __ptext6 064F                  __ptext7 0476                  __ptext8 071A  
                __ptext9 013A           ADCRead@ad_temp 00E0              ?_SystemInit 0072  
                _time2ms 0389                _LEDArrMap 0020                  clrloop0 07BA  
   end_of_initialization 0022            WorkLedPro@dir 0382            WorkLedPro@cnt 0035  
             ADSample@ch 0076          ___lldiv@divisor 0055          ___lldiv@counter 0061  
           ?_DisplayIcon 0075          DisplayIcon@Mask 004D         ___lbmod@dividend 0077  
    __size_of_WorkLedPro 0068             ??_DisplayPro 007A                _USBLedPro 0409  
         __end_of_ADCPro 05AE  WorkLedPro@LedSwitchFlag 0383              ___lbmod@rem 0079  
      __size_of_ADSample 0019            LockPro@Ledcnt 0032        __size_of_GPIOInit 0028  
    __size_of_SystemInit 0009           __end_of_ErrPro 0774       __end_of_DisplayPro 07B0  
         __end_of___bmul 07A3           __end_of___lmul 064F           __end_of___wmul 0733  
              _OnOffFlag 0387              __end_ofPL10 0409              __end_ofPL20 0371  
            __end_ofPL12 05E4              __end_ofPL30 0476              __end_ofPL22 0377  
            __end_ofPL14 0363              __end_ofPL40 05E9              __end_ofPL32 0211  
            __end_ofPL24 037D              __end_ofPL16 036B              __end_ofPL34 0778  
            __end_ofPL26 02E2              __end_ofPL18 02DC              __end_ofPL36 013A  
            __end_ofPL28 04D7              __end_ofPL38 06C8      start_initialization 000D  
             ?_USBLedPro 0072                 ??_ADCPro 0079                _Isr_Timer 06FF  
      __size_of_Sec1sPro 00C0                 ??_ErrPro 0075                 ??___bmul 0076  
              _TimerInit 0787                 ??___lmul 0075                 ??___wmul 0079  
             init_fetch0 0778              __pdataBANK1 00A0                 ?_ADCRead 0062  
               ?_LEDScan 0072              __pbssCOMMON 007A                ___latbits 0000  
          __pcstackBANK0 004D            __pcstackBANK1 00DB               ?_Isr_Timer 0072  
         USBLedPro@index 0039                 ?_KeyScan 0072                 ?_LockPro 0072  
           ??_WorkLedPro 004D         ___lwdiv@dividend 0077              ADCRead@AD_H 00DC  
             ?_TimerInit 0072              ADCRead@AD_L 00DE                 ?___lbdiv 0075  
               ?___lbmod 0075                 ?___lldiv 0055     __size_of_DisplayIcon 0029  
               ?___lwdiv 0075                __pstrings 074C                __pswtext1 0001  
              __pswtext2 07CA                __pswtext3 07C1             ??_SystemInit 0075  
               _ADCState 0043           __size_of_Apply 0022              ??_USBLedPro 004D  
         __size_of_Motor 005B       __end_of_WorkLedPro 03E5         ___lwdiv@quotient 004E  
               _ADSample 0733     LockPro@LockSwitchCnt 0033        interrupt_function 0004  
         ___wmul@product 004D                 _GPIOInit 0679                clear_ram0 07B9  
         _OffHideNumbArr 00B0       __end_of_SystemInit 07B9         __size_of_ADCRead 00EA  
            __stringbase 0751        ___wmul@multiplier 0075   WorkLedPro@LedSwitchCnt 0037  
       __size_of_LEDScan 0079                 _LedIndex 00D9        ___lmul@multiplier 004D  
            ??_Isr_Timer 0072                 _Sec1sCnt 003B                 _KeyInBuf 0386  
               _Sec1sPro 0211                 _KeyPress 0385                 _LockNumb 003C  
        WorkLedPro@index 0036         __size_of_KeyScan 00D1         __size_of_LockPro 004D  
            ??_TimerInit 0075         __size_of___lbdiv 001B         __size_of___lbmod 001C  
       __size_of___lldiv 0048         __size_of___lwdiv 002A                 _WorkFlag 038A  
     __end_of__stringtab 0752          ___lwdiv@divisor 0075          ___lwdiv@counter 004D  
               __ptext10 07A3                 __ptext11 037D                 __ptext20 0024  
               __ptext12 0795                 __ptext21 061C                 __ptext13 0409  
               __ptext22 0524                 __ptext14 06C8                 __ptext23 0733  
               __ptext15 06E4                 __ptext24 06FF                 __ptext16 04D7  
               __ptext25 02E2                 __ptext17 0762                 __ptext18 05AE  
               __ptext19 056C            __size_of_main 0004                 _time10ms 0388  
    Sec1sPro@TempPercent 0053                 init_ram0 077C                 intlevel1 0000  
       ___lldiv@dividend 0059                stringcode 074C             DisplayIcon@i 004F  
       ___lldiv@quotient 005D                 stringdir 074C                 stringtab 074C  
       DisplayIcon@index 0075               _BatAddTime 0045            ??_DisplayIcon 0077  
             _BatDecTime 0044  
