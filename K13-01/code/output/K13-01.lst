

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Sat Aug 15 13:41:40 2020

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	SC8P1712C
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	swtext1,local,class=CONST,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	swtext2,local,class=CONST,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	swtext3,local,class=CONST,delta=2
    49                           	psect	pa_nodes0,global,class=CODE,delta=2
    50                           	dabs	1,0x7E,2
    51  0000                     
    52                           ; Version 1.45
    53                           ; Generated 16/11/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC16F887 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataBANK0
    88  0000                     __pidataBANK0:	
    89                           
    90                           	psect	idataBANK1
    91  05B7                     __pidataBANK1:	
    92                           
    93                           ;initializer for _LEDSeg2
    94  05B7  3400               	retlw	0
    95  05B8  3401               	retlw	1
    96  05B9  3400               	retlw	0
    97  05BA  3401               	retlw	1
    98  05BB  3401               	retlw	1
    99  05BC  3400               	retlw	0
   100  05BD  3400               	retlw	0
   101  05BE  3402               	retlw	2
   102  05BF  3403               	retlw	3
   103  05C0  3402               	retlw	2
   104  05C1  3403               	retlw	3
   105  05C2  3403               	retlw	3
   106  05C3  3402               	retlw	2
   107  05C4  3402               	retlw	2
   108  05C5  3404               	retlw	4
   109  05C6  3404               	retlw	4
   110                           
   111                           ;initializer for _OffHideNumbArr
   112  05C7  3400               	retlw	0
   113  05C8  3400               	retlw	0
   114  05C9  3412               	retlw	18
   115  05CA  3400               	retlw	0
   116  05CB  345B               	retlw	91
   117  05CC  3400               	retlw	0
   118  05CD  347F               	retlw	127
   119  05CE  3400               	retlw	0
   120  05CF  347F               	retlw	127
   121  05D0  3409               	retlw	9
   122  05D1  34FF               	retlw	255
   123  05D2  342D               	retlw	45
   124  05D3  34FF               	retlw	255
   125  05D4  343F               	retlw	63
   126                           
   127                           ;initializer for _HideNumbArr
   128  05D5  3400               	retlw	0
   129  05D6  3440               	retlw	64
   130  05D7  3470               	retlw	112
   131  05D8  3478               	retlw	120
   132  05D9  347E               	retlw	126
   133  05DA  347F               	retlw	127
   134  05DB  343F               	retlw	63
   135  05DC  340F               	retlw	15
   136  05DD  3407               	retlw	7
   137  05DE  3401               	retlw	1
   138  05DF  3400               	retlw	0
   139                           
   140                           ;initializer for _NumbArr
   141  05E0  3477               	retlw	119
   142  05E1  3424               	retlw	36
   143  05E2  345D               	retlw	93
   144  05E3  346D               	retlw	109
   145  05E4  342E               	retlw	46
   146  05E5  346B               	retlw	107
   147  05E6  347B               	retlw	123
   148  05E7  3425               	retlw	37
   149  05E8  347F               	retlw	127
   150  05E9  342F               	retlw	47
   151                           
   152                           	psect	strings
   153  071A                     __pstrings:	
   154  071A                     stringtab:	
   155  071A                     __stringtab:	
   156  071A                     stringcode:	
   157                           ;	String table - string pointers are 1 byte each
   158                           
   159  071A                     stringdir:	
   160  071A  3007               	movlw	high stringdir
   161  071B  008A               	movwf	10
   162  071C  0804               	movf	4,w
   163  071D  0A84               	incf	4,f
   164  071E  0782               	addwf	2,f
   165  071F                     __stringbase:	
   166  071F  3400               	retlw	0
   167  0720                     __end_of__stringtab:	
   168  0720                     _LEDSeg1:	
   169  0720  3401               	retlw	1
   170  0721  3402               	retlw	2
   171  0722  3402               	retlw	2
   172  0723  3403               	retlw	3
   173  0724  3400               	retlw	0
   174  0725  3403               	retlw	3
   175  0726  3404               	retlw	4
   176  0727  3400               	retlw	0
   177  0728  3401               	retlw	1
   178  0729  3401               	retlw	1
   179  072A  3402               	retlw	2
   180  072B  3400               	retlw	0
   181  072C  3403               	retlw	3
   182  072D  3404               	retlw	4
   183  072E  3400               	retlw	0
   184  072F  3401               	retlw	1
   185  0730                     __end_of_LEDSeg1:	
   186  001F                     _ADCON0	set	31
   187  001E                     _ADRESH	set	30
   188  0012                     _T2CON	set	18
   189  000C                     _PIR1	set	12
   190  000B                     _INTCON	set	11
   191  0007                     _PORTC	set	7
   192  0006                     _PORTB	set	6
   193  0005                     _PORTA	set	5
   194  00F9                     _GODONE	set	249
   195  0061                     _TMR2IF	set	97
   196  005B                     _RBIE	set	91
   197  0058                     _RBIF	set	88
   198  003B                     _RC3	set	59
   199  003A                     _RC2	set	58
   200  0037                     _RB7	set	55
   201  0036                     _RB6	set	54
   202  0035                     _RB5	set	53
   203  0034                     _RB4	set	52
   204  0033                     _RB3	set	51
   205  002D                     _RA5	set	45
   206  002B                     _RA3	set	43
   207  002A                     _RA2	set	42
   208  0029                     _RA1	set	41
   209  0028                     _RA0	set	40
   210  009F                     _ADCON1	set	159
   211  009E                     _ADRESL	set	158
   212  0096                     _IOCB	set	150
   213  0095                     _WPUB	set	149
   214  0092                     _PR2	set	146
   215  008F                     _OSCCON	set	143
   216  008D                     _PIE2	set	141
   217  008C                     _PIE1	set	140
   218  0087                     _TRISC	set	135
   219  0086                     _TRISB	set	134
   220  0085                     _TRISA	set	133
   221  04AF                     _WPUB7	set	1199
   222  04AE                     _WPUB6	set	1198
   223  04AD                     _WPUB5	set	1197
   224  04AC                     _WPUB4	set	1196
   225  04AB                     _WPUB3	set	1195
   226  043B                     _TRISC3	set	1083
   227  043A                     _TRISC2	set	1082
   228  0437                     _TRISB7	set	1079
   229  0436                     _TRISB6	set	1078
   230  0435                     _TRISB5	set	1077
   231  0434                     _TRISB4	set	1076
   232  0433                     _TRISB3	set	1075
   233  042A                     _TRISA2	set	1066
   234  0429                     _TRISA1	set	1065
   235  040F                     _RBPU	set	1039
   236  0105                     _WDTCON	set	261
   237  018F                     _WPUC	set	399
   238  018E                     _WPUA	set	398
   239  0C42                     _ANS2	set	3138
   240  0C41                     _ANS1	set	3137
   241  0C7B                     _WPUC3	set	3195
   242  0C7A                     _WPUC2	set	3194
   243  0C72                     _WPUA2	set	3186
   244  0C71                     _WPUA1	set	3185
   245                           
   246                           	psect	cinit
   247  000D                     start_initialization:	
   248                           ; #config settings
   249                           
   250  000D                     __initialization:	
   251  000D  30D3               	movlw	low (__pdataBANK1+51)
   252                           
   253                           ; Initialize objects allocated to BANK1
   254  000E  1383               	bcf	3,7	;select IRP bank0
   255  000F  00FD               	movwf	125
   256  0010  3005               	movlw	high __pidataBANK1
   257  0011  00FE               	movwf	126
   258  0012  30B7               	movlw	low __pidataBANK1
   259  0013  00FF               	movwf	127
   260  0014  30A0               	movlw	low __pdataBANK1
   261  0015  0084               	movwf	4
   262  0016  2746               	fcall	init_ram0
   263                           
   264                           ;initializer for _BatDecTime
   265  0017  30D2               	movlw	210
   266  0018  00EA               	movwf	__pdataBANK0& (0+127)
   267                           
   268                           ;initializer for _BatAddTime
   269  0019  30F0               	movlw	240
   270  001A  00EB               	movwf	(__pdataBANK0+1)& (0+127)
   271                           
   272                           ; Clear objects allocated to BANK0
   273  001B  3020               	movlw	low __pbssBANK0
   274  001C  0084               	movwf	4
   275  001D  3050               	movlw	low (__pbssBANK0+48)
   276  001E  2781               	fcall	clear_ram0
   277                           
   278                           ; Clear objects allocated to COMMON
   279  001F  01FA               	clrf	__pbssCOMMON& (0+127)
   280                           
   281                           ; Clear objects allocated to BITCOMMON
   282  0020  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   283  0021  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   284  0022                     end_of_initialization:	
   285                           ;End of C runtime variable initialization code
   286                           
   287  0022                     __end_of__initialization:	
   288  0022  0183               	clrf	3
   289  0023  2F8E               	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bitbssCOMMON
   292  0380                     __pbitbssCOMMON:	
   293  0380                     ErrPro@LedSwitchFlag:	
   294  0380                     	ds	1
   295  0381                     LockPro@LedSwitchFlag:	
   296  0381                     	ds	1
   297  0382                     WorkLedPro@dir:	
   298  0382                     	ds	1
   299  0383                     WorkLedPro@LedSwitchFlag:	
   300  0383                     	ds	1
   301  0384                     _USBLink:	
   302  0384                     	ds	1
   303  0385                     _KeyInBuf:	
   304  0385                     	ds	1
   305  0386                     _OnOffFlag:	
   306  0386                     	ds	1
   307  0387                     _KeyPress:	
   308  0387                     	ds	1
   309  0388                     _time10ms:	
   310  0388                     	ds	1
   311  0389                     _time2ms:	
   312  0389                     	ds	1
   313  038A                     _WorkFlag:	
   314  038A                     	ds	1
   315  038B                     _USBFlag:	
   316  038B                     	ds	1
   317  038C                     _IovFlag:	
   318  038C                     	ds	1
   319  038D                     _LowBatFlag:	
   320  038D                     	ds	1
   321  038E                     _SystemONFlag:	
   322  038E                     	ds	1
   323                           
   324                           	psect	bssCOMMON
   325  007A                     __pbssCOMMON:	
   326  007A                     _WorkMin:	
   327  007A                     	ds	1
   328                           
   329                           	psect	bssBANK0
   330  0020                     __pbssBANK0:	
   331  0020                     _LEDArrMap:	
   332  0020                     	ds	5
   333  0025                     _ADsum:	
   334  0025                     	ds	4
   335  0029                     _TimeAddCnt:	
   336  0029                     	ds	2
   337  002B                     _TimeDecCnt:	
   338  002B                     	ds	2
   339  002D                     _WorkCnt:	
   340  002D                     	ds	2
   341  002F                     _LedIndex:	
   342  002F                     	ds	2
   343  0031                     _KeyCnt:	
   344  0031                     	ds	2
   345  0033                     _LockSta:	
   346  0033                     	ds	2
   347  0035                     ErrPro@SwitchCnt:	
   348  0035                     	ds	1
   349  0036                     LockPro@Ledcnt:	
   350  0036                     	ds	1
   351  0037                     LockPro@LockSwitchCnt:	
   352  0037                     	ds	1
   353  0038                     LockPro@SwitchCnt:	
   354  0038                     	ds	1
   355  0039                     WorkLedPro@cnt:	
   356  0039                     	ds	1
   357  003A                     WorkLedPro@index:	
   358  003A                     	ds	1
   359  003B                     WorkLedPro@LedSwitchCnt:	
   360  003B                     	ds	1
   361  003C                     USBLedPro@cnt:	
   362  003C                     	ds	1
   363  003D                     USBLedPro@index:	
   364  003D                     	ds	1
   365  003E                     LEDScan@LEDScanIndex:	
   366  003E                     	ds	1
   367  003F                     SystemSleep@SleepCnt:	
   368  003F                     	ds	1
   369  0040                     _Sec1sCnt:	
   370  0040                     	ds	1
   371  0041                     _LockNumb:	
   372  0041                     	ds	1
   373  0042                     _VarPowerUpCount:	
   374  0042                     	ds	1
   375  0043                     _cnt10ms:	
   376  0043                     	ds	1
   377  0044                     _cnt2ms:	
   378  0044                     	ds	1
   379  0045                     Sec1sPro@ActualPercent:	
   380  0045                     	ds	1
   381  0046                     _CurrentCnt:	
   382  0046                     	ds	1
   383  0047                     _ADcnt:	
   384  0047                     	ds	1
   385  0048                     _ADCState:	
   386  0048                     	ds	1
   387  0049                     _BatPercent:	
   388  0049                     	ds	1
   389  004A                     _ADCVal:	
   390  004A                     	ds	6
   391                           
   392                           	psect	dataBANK0
   393  006A                     __pdataBANK0:	
   394  006A                     _BatDecTime:	
   395  006A                     	ds	1
   396  006B                     _BatAddTime:	
   397  006B                     	ds	1
   398                           
   399                           	psect	dataBANK1
   400  00A0                     __pdataBANK1:	
   401  00A0                     _LEDSeg2:	
   402  00A0                     	ds	16
   403  00B0                     _OffHideNumbArr:	
   404  00B0                     	ds	14
   405  00BE                     _HideNumbArr:	
   406  00BE                     	ds	11
   407  00C9                     _NumbArr:	
   408  00C9                     	ds	10
   409                           
   410                           	psect	inittext
   411  0742                     init_fetch0:	
   412                           ;	Called with low address in FSR and high address in W
   413                           
   414  0742  087E               	movf	126,w
   415  0743  008A               	movwf	10
   416  0744  087F               	movf	127,w
   417  0745  0082               	movwf	2
   418  0746                     init_ram0:	
   419                           ;Called with:
   420                           ;	high address of idata address in btemp 
   421                           ;	low address of idata address in btemp+1 
   422                           ;	low address of data in FSR
   423                           ;	high address + 1 of data in btemp-1
   424                           
   425  0746  2742               	fcall	init_fetch0
   426  0747  0080               	movwf	0
   427  0748  0A84               	incf	4,f
   428  0749  0804               	movf	4,w
   429  074A  067D               	xorwf	125,w
   430  074B  1903               	btfsc	3,2
   431  074C  3400               	retlw	0
   432  074D  0AFF               	incf	127,f
   433  074E  1903               	btfsc	3,2
   434  074F  0AFE               	incf	126,f
   435  0750  2F46               	goto	init_ram0
   436                           
   437                           	psect	clrtext
   438  0781                     clear_ram0:	
   439                           ;	Called with FSR containing the base address, and
   440                           ;	W with the last address+1
   441                           
   442  0781  0064               	clrwdt	;clear the watchdog before getting into this loop
   443  0782                     clrloop0:	
   444  0782  0180               	clrf	0	;clear RAM location pointed to by FSR
   445  0783  0A84               	incf	4,f	;increment pointer
   446  0784  0604               	xorwf	4,w	;XOR with final address
   447  0785  1903               	btfsc	3,2	;have we reached the end yet?
   448  0786  3400               	retlw	0	;all done for this memory range, return
   449  0787  0604               	xorwf	4,w	;XOR again to restore value
   450  0788  2F82               	goto	clrloop0	;do the next byte
   451                           
   452                           	psect	cstackBANK1
   453  00D3                     __pcstackBANK1:	
   454  00D3                     ADCRead@ch:	
   455                           
   456                           ; 1 bytes @ 0x0
   457  00D3                     	ds	1
   458  00D4                     ADCRead@AD_H:	
   459                           
   460                           ; 2 bytes @ 0x1
   461  00D4                     	ds	2
   462  00D6                     ADCRead@AD_L:	
   463                           
   464                           ; 2 bytes @ 0x3
   465  00D6                     	ds	2
   466  00D8                     ADCRead@ad_temp:	
   467                           
   468                           ; 2 bytes @ 0x5
   469  00D8                     	ds	2
   470                           
   471                           	psect	cstackCOMMON
   472  0072                     __pcstackCOMMON:	
   473  0072                     ?_ADSample:	
   474  0072                     ?_LEDScan:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0072                     ??_LEDScan:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0072                     ?_KeyScan:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0072                     ?_Motor:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0072                     ?_DisplayPro:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0072                     ?_SystemSleep:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0072                     ?_SystemInit:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0072                     ?_GPIOInit:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0072                     ?_TimerInit:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0072                     ?_WorkLedPro:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0072                     ?_USBLedPro:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0072                     ?_LockPro:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0072                     ?_ErrPro:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0072                     ?_ADCPro:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0072                     ?_Sec1sPro:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0072                     ?_Isr_Timer:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0072                     ??_Isr_Timer:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0072                     ?_Apply:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0072                     ?_main:	
   529                           ; 1 bytes @ 0x0
   530                           
   531                           
   532                           ; 1 bytes @ 0x0
   533  0072                     	ds	3
   534  0075                     ??_ADSample:	
   535  0075                     ??_KeyScan:	
   536                           ; 1 bytes @ 0x3
   537                           
   538  0075                     ??_SystemSleep:	
   539                           ; 1 bytes @ 0x3
   540                           
   541  0075                     ??_SystemInit:	
   542                           ; 1 bytes @ 0x3
   543                           
   544  0075                     ??_GPIOInit:	
   545                           ; 1 bytes @ 0x3
   546                           
   547  0075                     ??_TimerInit:	
   548                           ; 1 bytes @ 0x3
   549                           
   550  0075                     ??_LockPro:	
   551                           ; 1 bytes @ 0x3
   552                           
   553  0075                     ??_ErrPro:	
   554                           ; 1 bytes @ 0x3
   555                           
   556  0075                     ?_DisplayIcon:	
   557                           ; 1 bytes @ 0x3
   558                           
   559  0075                     ??___lmul:	
   560                           ; 1 bytes @ 0x3
   561                           
   562  0075                     ?___bmul:	
   563                           ; 1 bytes @ 0x3
   564                           
   565  0075                     ?___lbdiv:	
   566                           ; 1 bytes @ 0x3
   567                           
   568  0075                     ?___lbmod:	
   569                           ; 1 bytes @ 0x3
   570                           
   571  0075                     ?___wmul:	
   572                           ; 1 bytes @ 0x3
   573                           
   574  0075                     ?___lwdiv:	
   575                           ; 2 bytes @ 0x3
   576                           
   577  0075                     ___bmul@multiplicand:	
   578                           ; 2 bytes @ 0x3
   579                           
   580  0075                     ___lbdiv@divisor:	
   581                           ; 1 bytes @ 0x3
   582                           
   583  0075                     ___lbmod@divisor:	
   584                           ; 1 bytes @ 0x3
   585                           
   586  0075                     DisplayIcon@index:	
   587                           ; 1 bytes @ 0x3
   588                           
   589  0075                     ___wmul@multiplier:	
   590                           ; 2 bytes @ 0x3
   591                           
   592  0075                     ___lwdiv@divisor:	
   593                           ; 2 bytes @ 0x3
   594                           
   595  0075                     ___lmul@product:	
   596                           ; 2 bytes @ 0x3
   597                           
   598                           
   599                           ; 4 bytes @ 0x3
   600  0075                     	ds	1
   601  0076                     ??___bmul:	
   602  0076                     ??___lbdiv:	
   603                           ; 1 bytes @ 0x4
   604                           
   605  0076                     ??___lbmod:	
   606                           ; 1 bytes @ 0x4
   607                           
   608  0076                     ADSample@ch:	
   609                           ; 1 bytes @ 0x4
   610                           
   611  0076                     ___bmul@product:	
   612                           ; 1 bytes @ 0x4
   613                           
   614  0076                     ___lbdiv@dividend:	
   615                           ; 1 bytes @ 0x4
   616                           
   617                           
   618                           ; 1 bytes @ 0x4
   619  0076                     	ds	1
   620  0077                     ??_DisplayIcon:	
   621  0077                     ADSample@i:	
   622                           ; 1 bytes @ 0x5
   623                           
   624  0077                     ___bmul@multiplier:	
   625                           ; 1 bytes @ 0x5
   626                           
   627  0077                     ___lbdiv@counter:	
   628                           ; 1 bytes @ 0x5
   629                           
   630  0077                     ___lbmod@dividend:	
   631                           ; 1 bytes @ 0x5
   632                           
   633  0077                     ___wmul@multiplicand:	
   634                           ; 1 bytes @ 0x5
   635                           
   636  0077                     ___lwdiv@dividend:	
   637                           ; 2 bytes @ 0x5
   638                           
   639                           
   640                           ; 2 bytes @ 0x5
   641  0077                     	ds	1
   642  0078                     ___lbdiv@quotient:	
   643  0078                     ___lbmod@counter:	
   644                           ; 1 bytes @ 0x6
   645                           
   646                           
   647                           ; 1 bytes @ 0x6
   648  0078                     	ds	1
   649  0079                     ??_Motor:	
   650  0079                     ??_ADCPro:	
   651                           ; 1 bytes @ 0x7
   652                           
   653  0079                     ??___wmul:	
   654                           ; 1 bytes @ 0x7
   655                           
   656  0079                     ??___lldiv:	
   657                           ; 1 bytes @ 0x7
   658                           
   659  0079                     ??___lwdiv:	
   660                           ; 1 bytes @ 0x7
   661                           
   662  0079                     ___lbmod@rem:	
   663                           ; 1 bytes @ 0x7
   664                           
   665                           
   666                           ; 1 bytes @ 0x7
   667  0079                     	ds	1
   668  007A                     ??_DisplayPro:	
   669  007A                     ??_Apply:	
   670                           ; 1 bytes @ 0x8
   671                           
   672  007A                     ??_main:	
   673                           ; 1 bytes @ 0x8
   674                           
   675                           
   676                           	psect	cstackBANK0
   677  0050                     __pcstackBANK0:	
   678                           ; 1 bytes @ 0x8
   679                           
   680  0050                     ??_WorkLedPro:	
   681  0050                     ??_USBLedPro:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0050                     ?___lmul:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0050                     ___lwdiv@counter:	
   688                           ; 4 bytes @ 0x0
   689                           
   690  0050                     DisplayIcon@Mask:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0050                     ___wmul@product:	
   694                           ; 2 bytes @ 0x0
   695                           
   696  0050                     ___lmul@multiplier:	
   697                           ; 2 bytes @ 0x0
   698                           
   699                           
   700                           ; 4 bytes @ 0x0
   701  0050                     	ds	1
   702  0051                     ___lwdiv@quotient:	
   703                           
   704                           ; 2 bytes @ 0x1
   705  0051                     	ds	1
   706  0052                     DisplayIcon@i:	
   707                           
   708                           ; 1 bytes @ 0x2
   709  0052                     	ds	1
   710  0053                     ??_Sec1sPro:	
   711                           
   712                           ; 1 bytes @ 0x3
   713  0053                     	ds	1
   714  0054                     ___lmul@multiplicand:	
   715                           
   716                           ; 4 bytes @ 0x4
   717  0054                     	ds	1
   718  0055                     Sec1sPro@PercentErr:	
   719                           
   720                           ; 1 bytes @ 0x5
   721  0055                     	ds	1
   722  0056                     Sec1sPro@TempPercent:	
   723                           
   724                           ; 2 bytes @ 0x6
   725  0056                     	ds	2
   726  0058                     ?___lldiv:	
   727  0058                     ___lldiv@divisor:	
   728                           ; 4 bytes @ 0x8
   729                           
   730                           
   731                           ; 4 bytes @ 0x8
   732  0058                     	ds	4
   733  005C                     ___lldiv@dividend:	
   734                           
   735                           ; 4 bytes @ 0xC
   736  005C                     	ds	4
   737  0060                     ___lldiv@quotient:	
   738                           
   739                           ; 4 bytes @ 0x10
   740  0060                     	ds	4
   741  0064                     ___lldiv@counter:	
   742                           
   743                           ; 1 bytes @ 0x14
   744  0064                     	ds	1
   745  0065                     ?_ADCRead:	
   746  0065                     ADCRead@Val:	
   747                           ; 1 bytes @ 0x15
   748                           
   749                           
   750                           ; 1 bytes @ 0x15
   751  0065                     	ds	1
   752  0066                     ??_ADCRead:	
   753                           
   754                           ; 1 bytes @ 0x16
   755  0066                     	ds	4
   756                           
   757                           	psect	maintext
   758  078E                     __pmaintext:	
   759 ;;
   760 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   761 ;;
   762 ;; *************** function _main *****************
   763 ;; Defined at:
   764 ;;		line 3 in file "C:\Users\Administrator\Desktop\project\K13-01\code\main.c"
   765 ;; Parameters:    Size  Location     Type
   766 ;;		None
   767 ;; Auto vars:     Size  Location     Type
   768 ;;		None
   769 ;; Return value:  Size  Location     Type
   770 ;;                  1    wreg      void 
   771 ;; Registers used:
   772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : B00/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMMON   BANK0   BANK1
   778 ;;      Params:         0       0       0
   779 ;;      Locals:         0       0       0
   780 ;;      Temps:          0       0       0
   781 ;;      Totals:         0       0       0
   782 ;;Total ram usage:        0 bytes
   783 ;; Hardware stack levels required when called:    6
   784 ;; This function calls:
   785 ;;		_Apply
   786 ;;		_SystemInit
   787 ;; This function is called by:
   788 ;;		Startup code after reset
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function _main
   794  078E                     _main:	
   795                           
   796                           ;main.c: 5: SystemInit();
   797                           
   798                           ;incstack = 0
   799                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   800  078E  2778               	fcall	_SystemInit
   801  078F                     l7082:	
   802                           
   803                           ;main.c: 7: {
   804                           ;main.c: 8: Apply();
   805  078F  2647               	fcall	_Apply
   806  0790  0064               	clrwdt	;# 
   807  0791  2F8F               	goto	l7082
   808  0792                     __end_of_main:	
   809                           
   810                           	psect	text1
   811  0647                     __ptext1:	
   812 ;; *************** function _Apply *****************
   813 ;; Defined at:
   814 ;;		line 24 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/200
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMMON   BANK0   BANK1
   828 ;;      Params:         0       0       0
   829 ;;      Locals:         0       0       0
   830 ;;      Temps:          0       0       0
   831 ;;      Totals:         0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used:    1
   834 ;; Hardware stack levels required when called:    5
   835 ;; This function calls:
   836 ;;		_ADCPro
   837 ;;		_DisplayPro
   838 ;;		_KeyScan
   839 ;;		_Motor
   840 ;;		_Sec1sPro
   841 ;;		_SystemSleep
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           
   848                           ;psect for function _Apply
   849  0647                     _Apply:	
   850                           
   851                           ;K13-01.c: 26: if(time2ms)
   852                           
   853                           ;incstack = 0
   854                           ; Regs used in _Apply: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   855  0647  1CF1               	btfss	_time2ms/(0+8),_time2ms& (0+7)
   856  0648  2E4D               	goto	l7046
   857                           
   858                           ;K13-01.c: 27: {
   859                           ;K13-01.c: 28: time2ms=0;
   860  0649  10F1               	bcf	_time2ms/(0+8),_time2ms& (0+7)
   861                           
   862                           ;K13-01.c: 29: if(SystemONFlag)
   863  064A  1F71               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   864  064B  2E4D               	goto	l7046
   865                           
   866                           ;K13-01.c: 30: {
   867                           ;K13-01.c: 31: KeyScan();
   868  064C  2024               	fcall	_KeyScan
   869  064D                     l7046:	
   870                           
   871                           ;K13-01.c: 32: }
   872                           ;K13-01.c: 33: }
   873                           ;K13-01.c: 34: if(time10ms)
   874  064D  1C71               	btfss	_time10ms/(0+8),_time10ms& (0+7)
   875  064E  0008               	return
   876                           
   877                           ;K13-01.c: 35: {
   878                           ;K13-01.c: 36: time10ms=0;
   879  064F  1071               	bcf	_time10ms/(0+8),_time10ms& (0+7)
   880                           
   881                           ;K13-01.c: 37: if(SystemONFlag==0&&VarPowerUpCount<100)
   882  0650  1B71               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   883  0651  2E58               	goto	l7056
   884  0652  266B               	fcall	PL36	;call to abstracted procedure
   885  0653  1803               	skipnc
   886  0654  2E58               	goto	l7056
   887                           
   888                           ;K13-01.c: 38: {
   889                           ;K13-01.c: 39: VarPowerUpCount++;
   890  0655  0AC2               	incf	_VarPowerUpCount,f
   891                           
   892                           ;K13-01.c: 40: ADCPro();
   893  0656  2463               	fcall	_ADCPro
   894                           
   895                           ;K13-01.c: 41: }
   896  0657  2E5D               	goto	l7062
   897  0658                     l7056:	
   898                           
   899                           ;K13-01.c: 42: else if(VarPowerUpCount>=100)
   900  0658  266B               	fcall	PL36	;call to abstracted procedure
   901  0659  1C03               	skipc
   902  065A  2E5D               	goto	l7062
   903                           
   904                           ;K13-01.c: 43: {
   905                           ;K13-01.c: 44: SystemONFlag=1;
   906  065B  1771               	bsf	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   907                           
   908                           ;K13-01.c: 45: VarPowerUpCount=0;
   909  065C  01C2               	clrf	_VarPowerUpCount
   910  065D                     l7062:	
   911                           
   912                           ;K13-01.c: 46: }
   913                           ;K13-01.c: 48: if(SystemONFlag)
   914  065D  1F71               	btfss	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
   915  065E  2E63               	goto	l7072
   916                           
   917                           ;K13-01.c: 49: {
   918                           ;K13-01.c: 50: ADCPro();
   919  065F  2463               	fcall	_ADCPro
   920                           
   921                           ;K13-01.c: 51: Motor();
   922  0660  240D               	fcall	_Motor
   923                           
   924                           ;K13-01.c: 52: DisplayPro();
   925  0661  276D               	fcall	_DisplayPro
   926                           
   927                           ;K13-01.c: 54: SystemSleep();
   928  0662  2541               	fcall	_SystemSleep
   929  0663                     l7072:	
   930  0663  3064               	movlw	100
   931                           
   932                           ;K13-01.c: 56: }
   933                           ;K13-01.c: 57: Sec1sCnt++;
   934  0664  1303               	bcf	3,6	;RP1=0, select bank0
   935  0665  0AC0               	incf	_Sec1sCnt,f
   936                           
   937                           ;K13-01.c: 58: if(Sec1sCnt>=100)
   938  0666  0240               	subwf	_Sec1sCnt,w
   939  0667  1C03               	skipc
   940  0668  0008               	return
   941                           
   942                           ;K13-01.c: 59: {
   943                           ;K13-01.c: 60: Sec1sCnt=0;
   944  0669  01C0               	clrf	_Sec1sCnt
   945                           
   946                           ;K13-01.c: 61: Sec1sPro();
   947  066A  28FF               	ljmp	l6726
   948  066B                     __end_of_Apply:	
   949  066B                     PL36:	
   950  066B  3064               	movlw	100
   951  066C  1283               	bcf	3,5	;RP0=0, select bank0
   952  066D  1303               	bcf	3,6	;RP1=0, select bank0
   953  066E  0242               	subwf	_VarPowerUpCount,w
   954  066F  0008               	return
   955  0670                     __end_ofPL36:	
   956                           
   957                           	psect	text2
   958  0541                     __ptext2:	
   959 ;; *************** function _SystemSleep *****************
   960 ;; Defined at:
   961 ;;		line 66 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
   962 ;; Parameters:    Size  Location     Type
   963 ;;		None
   964 ;; Auto vars:     Size  Location     Type
   965 ;;		None
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, status,2, status,0, pclath, cstack
   970 ;; Tracked objects:
   971 ;;		On entry : B00/0
   972 ;;		On exit  : 100/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMMON   BANK0   BANK1
   975 ;;      Params:         0       0       0
   976 ;;      Locals:         0       0       0
   977 ;;      Temps:          0       0       0
   978 ;;      Totals:         0       0       0
   979 ;;Total ram usage:        0 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    4
   982 ;; This function calls:
   983 ;;		_SystemInit
   984 ;; This function is called by:
   985 ;;		_Apply
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           
   990                           ;psect for function _SystemSleep
   991  0541                     _SystemSleep:	
   992                           
   993                           ;K13-01.c: 68: static unsigned char SleepCnt=0;
   994                           ;K13-01.c: 69: if(WorkFlag||OnOffFlag||LowBatFlag||USBFlag||IovFlag||KeyPress||LockSta.L
      +                          ockStart)
   995                           
   996                           ;incstack = 0
   997                           ; Regs used in _SystemSleep: [wreg+status,2+status,0+pclath+cstack]
   998  0541  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
   999  0542  1B70               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  1000  0543  2D4C               	goto	l6212
  1001  0544  1EF1               	btfss	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  1002  0545  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  1003  0546  2D4C               	goto	l6212
  1004  0547  1E71               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  1005  0548  1BF0               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  1006  0549  2D4C               	goto	l6212
  1007  054A  1C33               	btfss	_LockSta,0
  1008  054B  2D4E               	goto	l6214
  1009  054C                     l6212:	
  1010                           
  1011                           ;K13-01.c: 70: {
  1012                           ;K13-01.c: 71: SleepCnt=0;
  1013  054C  01BF               	clrf	SystemSleep@SleepCnt
  1014                           
  1015                           ;K13-01.c: 72: }
  1016  054D  0008               	return
  1017  054E                     l6214:	
  1018  054E  30C8               	movlw	200
  1019                           
  1020                           ;K13-01.c: 73: else
  1021                           ;K13-01.c: 74: {
  1022                           ;K13-01.c: 75: SleepCnt++;
  1023  054F  0ABF               	incf	SystemSleep@SleepCnt,f
  1024                           
  1025                           ;K13-01.c: 76: if(SleepCnt>=200)
  1026  0550  023F               	subwf	SystemSleep@SleepCnt,w
  1027  0551  1C03               	skipc
  1028  0552  0008               	return
  1029                           
  1030                           ;K13-01.c: 77: {
  1031                           ;K13-01.c: 78: SleepCnt=0;
  1032  0553  01BF               	clrf	SystemSleep@SleepCnt
  1033  0554  0064               	clrwdt	;# 
  1034                           
  1035                           ;K13-01.c: 80: INTCON=0;
  1036  0555  018B               	clrf	11	;volatile
  1037                           
  1038                           ;K13-01.c: 81: PIE1 = 0;
  1039  0556  1683               	bsf	3,5	;RP0=1, select bank1
  1040  0557  1303               	bcf	3,6	;RP1=0, select bank1
  1041  0558  018C               	clrf	12	;volatile
  1042                           
  1043                           ;K13-01.c: 82: PIE2 = 0;
  1044  0559  018D               	clrf	13	;volatile
  1045                           
  1046                           ;K13-01.c: 83: PIR1 = 0;
  1047  055A  1283               	bcf	3,5	;RP0=0, select bank0
  1048  055B  018C               	clrf	12	;volatile
  1049                           
  1050                           ;K13-01.c: 84: ADCON0 = 0;
  1051  055C  019F               	clrf	31	;volatile
  1052                           
  1053                           ;K13-01.c: 86: TRISA =0X00;
  1054  055D  1683               	bsf	3,5	;RP0=1, select bank1
  1055                           
  1056                           ;K13-01.c: 87: TRISB =0X00;
  1057                           
  1058                           ;K13-01.c: 88: TRISC =0x00;
  1059                           
  1060                           ;K13-01.c: 89: WPUA = 0xFF;
  1061                           
  1062                           ;K13-01.c: 90: WPUB = 0xFF;
  1063                           
  1064                           ;K13-01.c: 91: WPUC = 0xFF;
  1065  055E  268B               	fcall	PL16	;call to abstracted procedure
  1066                           
  1067                           ;K13-01.c: 92: PORTA = 0;
  1068  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0561  0185               	clrf	5	;volatile
  1071                           
  1072                           ;K13-01.c: 93: PORTB = 0;
  1073  0562  0186               	clrf	6	;volatile
  1074                           
  1075                           ;K13-01.c: 94: PORTC = 0;
  1076  0563  0187               	clrf	7	;volatile
  1077                           
  1078                           ;K13-01.c: 95: RA1=1;
  1079  0564  1485               	bsf	5,1	;volatile
  1080                           
  1081                           ;K13-01.c: 96: RA2=1;
  1082  0565  1505               	bsf	5,2	;volatile
  1083                           
  1084                           ;K13-01.c: 97: RA0=1;
  1085  0566  1405               	bsf	5,0	;volatile
  1086                           
  1087                           ;K13-01.c: 98: RA5 =0;
  1088  0567  1285               	bcf	5,5	;volatile
  1089                           
  1090                           ;K13-01.c: 99: TRISB6=1,WPUB6=1;
  1091  0568  1683               	bsf	3,5	;RP0=1, select bank1
  1092  0569  1706               	bsf	6,6	;volatile
  1093  056A  1715               	bsf	21,6	;volatile
  1094                           
  1095                           ;K13-01.c: 100: TRISB7=1,WPUB7=1;
  1096  056B  1786               	bsf	6,7	;volatile
  1097  056C  1795               	bsf	21,7	;volatile
  1098                           
  1099                           ;K13-01.c: 102: WDTCON=0x00;
  1100  056D  1283               	bcf	3,5	;RP0=0, select bank2
  1101  056E  1703               	bsf	3,6	;RP1=1, select bank2
  1102  056F  0185               	clrf	5	;volatile
  1103                           
  1104                           ;K13-01.c: 103: RBIE=1;
  1105  0570  158B               	bsf	11,3	;volatile
  1106                           
  1107                           ;K13-01.c: 104: IOCB=0xC0;
  1108  0571  30C0               	movlw	192
  1109  0572  1683               	bsf	3,5	;RP0=1, select bank1
  1110  0573  1303               	bcf	3,6	;RP1=0, select bank1
  1111  0574  0096               	movwf	22	;volatile
  1112                           
  1113                           ;K13-01.c: 105: OSCCON=0X01;
  1114  0575  3001               	movlw	1
  1115  0576  008F               	movwf	15	;volatile
  1116                           
  1117                           ;K13-01.c: 106: RBIF = 0;
  1118  0577  100B               	bcf	11,0	;volatile
  1119                           
  1120                           ;K13-01.c: 107: PORTB;
  1121  0578  1283               	bcf	3,5	;RP0=0, select bank0
  1122  0579  0806               	movf	6,w	;volatile
  1123  057A  0063               	sleep	;# 
  1124  057B  0000               	nop	;# 
  1125                           
  1126                           ;K13-01.c: 110: SystemInit();
  1127  057C  2F78               	ljmp	l5700
  1128  057D                     __end_of_SystemSleep:	
  1129                           
  1130                           	psect	text3
  1131  0778                     __ptext3:	
  1132 ;; *************** function _SystemInit *****************
  1133 ;; Defined at:
  1134 ;;		line 115 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0, pclath, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 300/200
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1
  1148 ;;      Params:         0       0       0
  1149 ;;      Locals:         0       0       0
  1150 ;;      Temps:          0       0       0
  1151 ;;      Totals:         0       0       0
  1152 ;;Total ram usage:        0 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    3
  1155 ;; This function calls:
  1156 ;;		_GPIOInit
  1157 ;;		_TimerInit
  1158 ;; This function is called by:
  1159 ;;		_SystemSleep
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           
  1165                           ;psect for function _SystemInit
  1166  0778                     _SystemInit:	
  1167  0778                     l5700:	
  1168                           ;incstack = 0
  1169                           ; Regs used in _SystemInit: [wreg+status,2+status,0+pclath+cstack]
  1170                           
  1171  0778  0000               	nop	;# 
  1172  0779  0064               	clrwdt	;# 
  1173                           
  1174                           ;K13-01.c: 119: GPIOInit();
  1175  077A  2670               	fcall	_GPIOInit
  1176                           
  1177                           ;K13-01.c: 120: TimerInit();
  1178  077B  2751               	fcall	_TimerInit
  1179                           
  1180                           ;K13-01.c: 121: WDTCON=0x01;
  1181  077C  3001               	movlw	1
  1182  077D  1283               	bcf	3,5	;RP0=0, select bank2
  1183  077E  1703               	bsf	3,6	;RP1=1, select bank2
  1184  077F  0085               	movwf	5	;volatile
  1185  0780  0008               	return
  1186  0781                     __end_of_SystemInit:	
  1187                           
  1188                           	psect	text4
  1189  0751                     __ptext4:	
  1190 ;; *************** function _TimerInit *****************
  1191 ;; Defined at:
  1192 ;;		line 155 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg
  1201 ;; Tracked objects:
  1202 ;;		On entry : 300/300
  1203 ;;		On exit  : 300/100
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON   BANK0   BANK1
  1206 ;;      Params:         0       0       0
  1207 ;;      Locals:         0       0       0
  1208 ;;      Temps:          0       0       0
  1209 ;;      Totals:         0       0       0
  1210 ;;Total ram usage:        0 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    2
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_SystemInit
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           
  1221                           ;psect for function _TimerInit
  1222  0751                     _TimerInit:	
  1223                           
  1224                           ;K13-01.c: 166: OSCCON=0X61;
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _TimerInit: [wreg]
  1228  0751  3061               	movlw	97
  1229  0752  1303               	bcf	3,6	;RP1=0, select bank1
  1230  0753  008F               	movwf	15	;volatile
  1231                           
  1232                           ;K13-01.c: 167: INTCON=0B11000000;
  1233  0754  30C0               	movlw	192
  1234  0755  008B               	movwf	11	;volatile
  1235                           
  1236                           ;K13-01.c: 168: PIE1=0B00000010;
  1237  0756  3002               	movlw	2
  1238  0757  008C               	movwf	12	;volatile
  1239                           
  1240                           ;K13-01.c: 169: T2CON=0B00000100;
  1241  0758  3004               	movlw	4
  1242  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1243  075A  0092               	movwf	18	;volatile
  1244                           
  1245                           ;K13-01.c: 170: PR2 = 200;
  1246  075B  30C8               	movlw	200
  1247  075C  1683               	bsf	3,5	;RP0=1, select bank1
  1248  075D  0092               	movwf	18	;volatile
  1249  075E  0008               	return
  1250  075F                     __end_of_TimerInit:	
  1251                           
  1252                           	psect	text5
  1253  0670                     __ptext5:	
  1254 ;; *************** function _GPIOInit *****************
  1255 ;; Defined at:
  1256 ;;		line 124 in file "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;		None
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 300/300
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMMON   BANK0   BANK1
  1270 ;;      Params:         0       0       0
  1271 ;;      Locals:         0       0       0
  1272 ;;      Temps:          0       0       0
  1273 ;;      Totals:         0       0       0
  1274 ;;Total ram usage:        0 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; Hardware stack levels required when called:    2
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_SystemInit
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           
  1285                           ;psect for function _GPIOInit
  1286  0670                     _GPIOInit:	
  1287                           
  1288                           ;K13-01.c: 126: RBPU=0;
  1289                           
  1290                           ;incstack = 0
  1291                           ; Regs used in _GPIOInit: [wreg+status,2]
  1292  0670  1683               	bsf	3,5	;RP0=1, select bank1
  1293  0671  1303               	bcf	3,6	;RP1=0, select bank1
  1294  0672  1381               	bcf	1,7	;volatile
  1295                           
  1296                           ;K13-01.c: 128: TRISA =0X00;
  1297                           
  1298                           ;K13-01.c: 129: TRISB =0X00;
  1299                           
  1300                           ;K13-01.c: 130: TRISC =0X00;
  1301                           
  1302                           ;K13-01.c: 134: WPUA =0XFF;
  1303                           
  1304                           ;K13-01.c: 135: WPUB =0XFF;
  1305                           
  1306                           ;K13-01.c: 136: WPUC =0XFF;
  1307  0673  268B               	fcall	PL16	;call to abstracted procedure
  1308                           
  1309                           ;K13-01.c: 140: PORTA = 0X80;
  1310  0674  3080               	movlw	128
  1311  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1312  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1313  0677  0085               	movwf	5	;volatile
  1314                           
  1315                           ;K13-01.c: 141: PORTB = 0X80;
  1316  0678  0086               	movwf	6	;volatile
  1317                           
  1318                           ;K13-01.c: 142: PORTC = 0;
  1319  0679  0187               	clrf	7	;volatile
  1320                           
  1321                           ;K13-01.c: 145: RA5 =1;
  1322  067A  1685               	bsf	5,5	;volatile
  1323                           
  1324                           ;K13-01.c: 146: RBPU=0;
  1325  067B  1683               	bsf	3,5	;RP0=1, select bank1
  1326  067C  1381               	bcf	1,7	;volatile
  1327                           
  1328                           ;K13-01.c: 147: TRISB6=1,WPUB6=1;
  1329  067D  1706               	bsf	6,6	;volatile
  1330  067E  1715               	bsf	21,6	;volatile
  1331                           
  1332                           ;K13-01.c: 148: TRISB7=1,WPUB7=1;
  1333  067F  1786               	bsf	6,7	;volatile
  1334  0680  1795               	bsf	21,7	;volatile
  1335                           
  1336                           ;K13-01.c: 150: TRISA1=1,WPUA1=0; ANS1=1;
  1337  0681  1485               	bsf	5,1	;volatile
  1338  0682  1703               	bsf	3,6	;RP1=1, select bank3
  1339  0683  108E               	bcf	14,1	;volatile
  1340  0684  1488               	bsf	8,1	;volatile
  1341                           
  1342                           ;K13-01.c: 151: TRISA2=1,WPUA2=0; ANS2=1;
  1343  0685  1303               	bcf	3,6	;RP1=0, select bank1
  1344  0686  1505               	bsf	5,2	;volatile
  1345  0687  1703               	bsf	3,6	;RP1=1, select bank3
  1346  0688  110E               	bcf	14,2	;volatile
  1347  0689  1508               	bsf	8,2	;volatile
  1348  068A  0008               	return
  1349  068B                     __end_of_GPIOInit:	
  1350  068B                     PL16:	
  1351  068B  0185               	clrf	5	;volatile
  1352  068C  0186               	clrf	6	;volatile
  1353  068D  0187               	clrf	7	;volatile
  1354  068E  30FF               	movlw	255
  1355  068F  1703               	bsf	3,6	;RP1=1, select bank3
  1356  0690  008E               	movwf	14	;volatile
  1357  0691  1303               	bcf	3,6	;RP1=0, select bank1
  1358  0692  0095               	movwf	21	;volatile
  1359  0693  1703               	bsf	3,6	;RP1=1, select bank3
  1360  0694  008F               	movwf	15	;volatile
  1361  0695  0008               	return
  1362  0696                     __end_ofPL16:	
  1363                           
  1364                           	psect	text6
  1365  00FF                     __ptext6:	
  1366 ;; *************** function _Sec1sPro *****************
  1367 ;; Defined at:
  1368 ;;		line 65 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  TempPercent     2    6[BANK0 ] unsigned int 
  1373 ;;  PercentErr      1    5[BANK0 ] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0, pclath, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : 300/0
  1380 ;;		On exit  : 300/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0   BANK1
  1383 ;;      Params:         0       0       0
  1384 ;;      Locals:         0       3       0
  1385 ;;      Temps:          0       2       0
  1386 ;;      Totals:         0       5       0
  1387 ;;Total ram usage:        5 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    3
  1390 ;; This function calls:
  1391 ;;		___bmul
  1392 ;;		___lwdiv
  1393 ;; This function is called by:
  1394 ;;		_Apply
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _Sec1sPro
  1400  00FF                     _Sec1sPro:	
  1401  00FF                     l6726:	
  1402                           ;incstack = 0
  1403                           ; Regs used in _Sec1sPro: [wreg+status,2+status,0+pclath+cstack]
  1404                           
  1405                           
  1406                           ;ADC.c: 69: unsigned int TempPercent=0;
  1407  00FF  01D6               	clrf	Sec1sPro@TempPercent
  1408  0100  01D7               	clrf	Sec1sPro@TempPercent+1
  1409                           
  1410                           ;ADC.c: 72: if(USBFlag)
  1411  0101  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  1412  0102  295E               	goto	l6766
  1413                           
  1414                           ;ADC.c: 73: {
  1415                           ;ADC.c: 74: if(ADCVal[2]<138)
  1416  0103  3000               	movlw	0
  1417  0104  024F               	subwf	_ADCVal+5,w
  1418  0105  308A               	movlw	138
  1419  0106  1903               	skipnz
  1420  0107  024E               	subwf	_ADCVal+4,w
  1421  0108  1803               	skipnc
  1422  0109  290C               	goto	l6734
  1423                           
  1424                           ;ADC.c: 75: {
  1425                           ;ADC.c: 76: TempPercent=0;
  1426  010A  01D6               	clrf	Sec1sPro@TempPercent
  1427  010B  2915               	goto	L1
  1428  010C                     l6734:	
  1429                           ;ADC.c: 77: }
  1430                           
  1431                           
  1432                           ;ADC.c: 78: else if(ADCVal[2]>175)
  1433  010C  3000               	movlw	0
  1434  010D  024F               	subwf	_ADCVal+5,w
  1435  010E  30B0               	movlw	176
  1436  010F  1903               	skipnz
  1437  0110  024E               	subwf	_ADCVal+4,w
  1438  0111  1C03               	skipc
  1439  0112  2917               	goto	l6738
  1440                           
  1441                           ;ADC.c: 79: {
  1442                           ;ADC.c: 80: TempPercent=99;
  1443  0113  3063               	movlw	99
  1444  0114  00D6               	movwf	Sec1sPro@TempPercent
  1445  0115                     L1:	
  1446  0115  01D7               	clrf	Sec1sPro@TempPercent+1
  1447                           
  1448                           ;ADC.c: 81: }
  1449  0116  2933               	goto	l6742
  1450  0117                     l6738:	
  1451                           
  1452                           ;ADC.c: 82: else
  1453                           ;ADC.c: 83: {
  1454                           ;ADC.c: 84: TempPercent=ADCVal[2]-138;
  1455  0117  084F               	movf	_ADCVal+5,w
  1456  0118  00D7               	movwf	Sec1sPro@TempPercent+1
  1457  0119  084E               	movf	_ADCVal+4,w
  1458  011A  00D6               	movwf	Sec1sPro@TempPercent
  1459  011B  3076               	movlw	118
  1460  011C  21CA               	fcall	PL28	;call to abstracted procedure
  1461                           
  1462                           ;ADC.c: 85: TempPercent=TempPercent*4/3;
  1463  011D  3003               	movlw	3
  1464  011E  00F5               	movwf	___lwdiv@divisor
  1465  011F  01F6               	clrf	___lwdiv@divisor+1
  1466  0120  0857               	movf	Sec1sPro@TempPercent+1,w
  1467  0121  00D4               	movwf	??_Sec1sPro+1
  1468  0122  0856               	movf	Sec1sPro@TempPercent,w
  1469  0123  00D3               	movwf	??_Sec1sPro
  1470  0124  1003               	clrc
  1471  0125  0DD3               	rlf	??_Sec1sPro,f
  1472  0126  0DD4               	rlf	??_Sec1sPro+1,f
  1473  0127  1003               	clrc
  1474  0128  0DD3               	rlf	??_Sec1sPro,f
  1475  0129  0DD4               	rlf	??_Sec1sPro+1,f
  1476  012A  0853               	movf	??_Sec1sPro,w
  1477  012B  00F7               	movwf	___lwdiv@dividend
  1478  012C  0854               	movf	??_Sec1sPro+1,w
  1479  012D  00F8               	movwf	___lwdiv@dividend+1
  1480  012E  261D               	fcall	___lwdiv
  1481  012F  0876               	movf	?___lwdiv+1,w
  1482  0130  00D7               	movwf	Sec1sPro@TempPercent+1
  1483  0131  0875               	movf	?___lwdiv,w
  1484  0132  00D6               	movwf	Sec1sPro@TempPercent
  1485  0133                     l6742:	
  1486                           
  1487                           ;ADC.c: 86: }
  1488                           ;ADC.c: 87: if(ActualPercent>TempPercent)
  1489                           
  1490                           ;ADC.c: 88: {
  1491                           ;ADC.c: 89: if(ActualPercent)
  1492  0133  21BF               	fcall	PL18	;call to abstracted procedure
  1493  0134  1803               	skipnc
  1494  0135  293A               	goto	L4
  1495  0136  1903               	btfsc	3,2
  1496  0137  2949               	goto	l6754
  1497                           
  1498                           ;ADC.c: 90: {
  1499                           ;ADC.c: 91: ActualPercent--;
  1500  0138  03C5               	decf	Sec1sPro@ActualPercent,f
  1501  0139  2949               	goto	l6754
  1502  013A                     L4:	
  1503                           ;ADC.c: 94: else if(ActualPercent<TempPercent)
  1504                           
  1505  013A  00D3               	movwf	??_Sec1sPro
  1506  013B  01D4               	clrf	??_Sec1sPro+1
  1507  013C  0857               	movf	Sec1sPro@TempPercent+1,w
  1508  013D  0254               	subwf	??_Sec1sPro+1,w
  1509  013E  1D03               	skipz
  1510  013F  2942               	goto	u4295
  1511  0140  0856               	movf	Sec1sPro@TempPercent,w
  1512  0141  0253               	subwf	??_Sec1sPro,w
  1513  0142                     u4295:	
  1514  0142  1803               	skipnc
  1515  0143  2949               	goto	l6754
  1516                           
  1517                           ;ADC.c: 95: {
  1518                           ;ADC.c: 96: if(ActualPercent<99)
  1519  0144  3063               	movlw	99
  1520  0145  0245               	subwf	Sec1sPro@ActualPercent,w
  1521  0146  1803               	skipnc
  1522  0147  2949               	goto	l6754
  1523                           
  1524                           ;ADC.c: 97: {
  1525                           ;ADC.c: 98: ActualPercent++;
  1526  0148  0AC5               	incf	Sec1sPro@ActualPercent,f
  1527  0149                     l6754:	
  1528                           
  1529                           ;ADC.c: 99: }
  1530                           ;ADC.c: 100: }
  1531                           ;ADC.c: 101: if(ActualPercent>BatPercent)
  1532  0149  0845               	movf	Sec1sPro@ActualPercent,w
  1533  014A  0249               	subwf	_BatPercent,w
  1534  014B  1803               	skipnc
  1535  014C  295C               	goto	l6764
  1536                           
  1537                           ;ADC.c: 102: {
  1538                           ;ADC.c: 103: PercentErr=ActualPercent-BatPercent;
  1539  014D  0849               	movf	_BatPercent,w
  1540  014E  0245               	subwf	Sec1sPro@ActualPercent,w
  1541  014F  00D5               	movwf	Sec1sPro@PercentErr
  1542                           
  1543                           ;ADC.c: 104: if(PercentErr<5)
  1544  0150  3005               	movlw	5
  1545  0151  0255               	subwf	Sec1sPro@PercentErr,w
  1546  0152  1803               	skipnc
  1547  0153  295A               	goto	l6762
  1548                           
  1549                           ;ADC.c: 105: {
  1550                           ;ADC.c: 106: BatAddTime=90-15*PercentErr;
  1551  0154  30F1               	movlw	241
  1552  0155  00F5               	movwf	___bmul@multiplicand
  1553  0156  0855               	movf	Sec1sPro@PercentErr,w
  1554  0157  275F               	fcall	___bmul
  1555  0158  3E5A               	addlw	90
  1556  0159  295D               	goto	L2
  1557  015A                     l6762:	
  1558                           ;ADC.c: 107: }
  1559                           
  1560                           
  1561                           ;ADC.c: 108: else
  1562                           ;ADC.c: 109: {
  1563                           ;ADC.c: 110: BatAddTime=15;
  1564  015A  300F               	movlw	15
  1565  015B  295D               	goto	L2
  1566  015C                     l6764:	
  1567                           
  1568                           ;ADC.c: 113: else
  1569                           ;ADC.c: 114: {
  1570                           ;ADC.c: 115: BatAddTime=240;
  1571  015C  30F0               	movlw	240
  1572  015D                     L2:	
  1573  015D  00EB               	movwf	_BatAddTime
  1574  015E                     l6766:	
  1575                           
  1576                           ;ADC.c: 116: }
  1577                           ;ADC.c: 117: }
  1578                           ;ADC.c: 120: if(WorkFlag)
  1579  015E  1D71               	btfss	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1580  015F  29BC               	goto	l6808
  1581                           
  1582                           ;ADC.c: 121: {
  1583                           ;ADC.c: 122: if(ADCVal[2]<134)
  1584  0160  3000               	movlw	0
  1585  0161  024F               	subwf	_ADCVal+5,w
  1586  0162  3086               	movlw	134
  1587  0163  1903               	skipnz
  1588  0164  024E               	subwf	_ADCVal+4,w
  1589  0165  1803               	skipnc
  1590  0166  2969               	goto	l6772
  1591                           
  1592                           ;ADC.c: 123: {
  1593                           ;ADC.c: 124: TempPercent=0;
  1594  0167  01D6               	clrf	Sec1sPro@TempPercent
  1595  0168  2972               	goto	L3
  1596  0169                     l6772:	
  1597                           ;ADC.c: 125: }
  1598                           
  1599                           
  1600                           ;ADC.c: 126: else if(ADCVal[2]>167)
  1601  0169  3000               	movlw	0
  1602  016A  024F               	subwf	_ADCVal+5,w
  1603  016B  30A8               	movlw	168
  1604  016C  1903               	skipnz
  1605  016D  024E               	subwf	_ADCVal+4,w
  1606  016E  1C03               	skipc
  1607  016F  2974               	goto	l6776
  1608                           
  1609                           ;ADC.c: 127: {
  1610                           ;ADC.c: 128: TempPercent=99;
  1611  0170  3063               	movlw	99
  1612  0171  00D6               	movwf	Sec1sPro@TempPercent
  1613  0172                     L3:	
  1614  0172  01D7               	clrf	Sec1sPro@TempPercent+1
  1615                           
  1616                           ;ADC.c: 129: }
  1617  0173  297A               	goto	l605
  1618  0174                     l6776:	
  1619                           
  1620                           ;ADC.c: 130: else
  1621                           ;ADC.c: 131: {
  1622                           ;ADC.c: 132: TempPercent=ADCVal[2]-134;
  1623  0174  084F               	movf	_ADCVal+5,w
  1624  0175  00D7               	movwf	Sec1sPro@TempPercent+1
  1625  0176  084E               	movf	_ADCVal+4,w
  1626  0177  00D6               	movwf	Sec1sPro@TempPercent
  1627  0178  307A               	movlw	122
  1628  0179  21CA               	fcall	PL28	;call to abstracted procedure
  1629  017A                     l605:	
  1630                           
  1631                           ;ADC.c: 133: }
  1632                           ;ADC.c: 134: if(TempPercent>=33)
  1633  017A  3000               	movlw	0
  1634  017B  0257               	subwf	Sec1sPro@TempPercent+1,w
  1635  017C  3021               	movlw	33
  1636  017D  1903               	skipnz
  1637  017E  0256               	subwf	Sec1sPro@TempPercent,w
  1638  017F  1C03               	skipc
  1639  0180  298E               	goto	l6784
  1640                           
  1641                           ;ADC.c: 135: {
  1642                           ;ADC.c: 136: TempPercent=33+(ADCVal[2]-150)*2;
  1643  0181  084F               	movf	_ADCVal+5,w
  1644  0182  00D7               	movwf	Sec1sPro@TempPercent+1
  1645  0183  084E               	movf	_ADCVal+4,w
  1646  0184  00D6               	movwf	Sec1sPro@TempPercent
  1647  0185  30F5               	movlw	245
  1648  0186  1003               	clrc
  1649  0187  0DD6               	rlf	Sec1sPro@TempPercent,f
  1650  0188  0DD7               	rlf	Sec1sPro@TempPercent+1,f
  1651  0189  07D6               	addwf	Sec1sPro@TempPercent,f
  1652  018A  1803               	skipnc
  1653  018B  0AD7               	incf	Sec1sPro@TempPercent+1,f
  1654  018C  30FE               	movlw	254
  1655  018D  07D7               	addwf	Sec1sPro@TempPercent+1,f
  1656  018E                     l6784:	
  1657                           
  1658                           ;ADC.c: 137: }
  1659                           ;ADC.c: 138: if(ActualPercent>TempPercent)
  1660                           
  1661                           ;ADC.c: 139: {
  1662                           ;ADC.c: 140: if(ActualPercent)
  1663  018E  21BF               	fcall	PL18	;call to abstracted procedure
  1664  018F  1803               	skipnc
  1665  0190  2995               	goto	L5
  1666  0191  1903               	btfsc	3,2
  1667  0192  29A4               	goto	l6796
  1668                           
  1669                           ;ADC.c: 141: {
  1670                           ;ADC.c: 142: ActualPercent--;
  1671  0193  03C5               	decf	Sec1sPro@ActualPercent,f
  1672  0194  29A4               	goto	l6796
  1673  0195                     L5:	
  1674                           ;ADC.c: 145: else if(ActualPercent<TempPercent)
  1675                           
  1676  0195  00D3               	movwf	??_Sec1sPro
  1677  0196  01D4               	clrf	??_Sec1sPro+1
  1678  0197  0857               	movf	Sec1sPro@TempPercent+1,w
  1679  0198  0254               	subwf	??_Sec1sPro+1,w
  1680  0199  1D03               	skipz
  1681  019A  299D               	goto	u4395
  1682  019B  0856               	movf	Sec1sPro@TempPercent,w
  1683  019C  0253               	subwf	??_Sec1sPro,w
  1684  019D                     u4395:	
  1685  019D  1803               	skipnc
  1686  019E  29A4               	goto	l6796
  1687                           
  1688                           ;ADC.c: 146: {
  1689                           ;ADC.c: 147: if(ActualPercent<99)
  1690  019F  3063               	movlw	99
  1691  01A0  0245               	subwf	Sec1sPro@ActualPercent,w
  1692  01A1  1803               	skipnc
  1693  01A2  29A4               	goto	l6796
  1694                           
  1695                           ;ADC.c: 148: {
  1696                           ;ADC.c: 149: ActualPercent++;
  1697  01A3  0AC5               	incf	Sec1sPro@ActualPercent,f
  1698  01A4                     l6796:	
  1699                           
  1700                           ;ADC.c: 150: }
  1701                           ;ADC.c: 151: }
  1702                           ;ADC.c: 152: if(ActualPercent<BatPercent)
  1703  01A4  0849               	movf	_BatPercent,w
  1704  01A5  0245               	subwf	Sec1sPro@ActualPercent,w
  1705  01A6  1803               	skipnc
  1706  01A7  29BC               	goto	l6808
  1707                           
  1708                           ;ADC.c: 153: {
  1709                           ;ADC.c: 154: PercentErr=BatPercent-ActualPercent;
  1710  01A8  0845               	movf	Sec1sPro@ActualPercent,w
  1711  01A9  0249               	subwf	_BatPercent,w
  1712  01AA  00D5               	movwf	Sec1sPro@PercentErr
  1713                           
  1714                           ;ADC.c: 155: if(PercentErr<5&&ActualPercent)
  1715  01AB  3005               	movlw	5
  1716  01AC  0255               	subwf	Sec1sPro@PercentErr,w
  1717  01AD  1803               	skipnc
  1718  01AE  29B9               	goto	l6806
  1719  01AF  0845               	movf	Sec1sPro@ActualPercent,w
  1720  01B0  1903               	btfsc	3,2
  1721  01B1  29B9               	goto	l6806
  1722                           
  1723                           ;ADC.c: 156: {
  1724                           ;ADC.c: 157: BatDecTime=75-15*PercentErr;
  1725  01B2  30F1               	movlw	241
  1726  01B3  00F5               	movwf	___bmul@multiplicand
  1727  01B4  0855               	movf	Sec1sPro@PercentErr,w
  1728  01B5  275F               	fcall	___bmul
  1729  01B6  3E4B               	addlw	75
  1730  01B7  00EA               	movwf	_BatDecTime
  1731                           
  1732                           ;ADC.c: 158: }
  1733  01B8  0008               	return
  1734  01B9                     l6806:	
  1735                           
  1736                           ;ADC.c: 159: else
  1737                           ;ADC.c: 160: {
  1738                           ;ADC.c: 161: BatDecTime=8;
  1739  01B9  3008               	movlw	8
  1740  01BA  00EA               	movwf	_BatDecTime
  1741  01BB  0008               	return
  1742  01BC                     l6808:	
  1743                           
  1744                           ;ADC.c: 164: else
  1745                           ;ADC.c: 165: {
  1746                           ;ADC.c: 166: BatDecTime=210;
  1747  01BC  30D2               	movlw	210
  1748  01BD  00EA               	movwf	_BatDecTime
  1749  01BE  0008               	return
  1750  01BF                     __end_of_Sec1sPro:	
  1751  01BF                     PL18:	
  1752  01BF  0845               	movf	Sec1sPro@ActualPercent,w
  1753  01C0  00D3               	movwf	??_Sec1sPro
  1754  01C1  01D4               	clrf	??_Sec1sPro+1
  1755  01C2  0854               	movf	??_Sec1sPro+1,w
  1756  01C3  0257               	subwf	Sec1sPro@TempPercent+1,w
  1757  01C4  1D03               	skipz
  1758  01C5  29C8               	goto	u4275
  1759  01C6  0853               	movf	??_Sec1sPro,w
  1760  01C7  0256               	subwf	Sec1sPro@TempPercent,w
  1761  01C8                     u4275:	
  1762  01C8  0845               	movf	Sec1sPro@ActualPercent,w
  1763  01C9  0008               	return
  1764  01CA                     __end_ofPL18:	
  1765  01CA                     PL28:	
  1766  01CA  07D6               	addwf	Sec1sPro@TempPercent,f
  1767  01CB  1803               	skipnc
  1768  01CC  0AD7               	incf	Sec1sPro@TempPercent+1,f
  1769  01CD  30FF               	movlw	255
  1770  01CE  07D7               	addwf	Sec1sPro@TempPercent+1,f
  1771  01CF  0008               	return
  1772  01D0                     __end_ofPL28:	
  1773                           
  1774                           	psect	text7
  1775  061D                     __ptext7:	
  1776 ;; *************** function ___lwdiv *****************
  1777 ;; Defined at:
  1778 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lwdiv.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;  divisor         2    3[COMMON] unsigned int 
  1781 ;;  dividend        2    5[COMMON] unsigned int 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  quotient        2    1[BANK0 ] unsigned int 
  1784 ;;  counter         1    0[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2    3[COMMON] unsigned int 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 300/0
  1791 ;;		On exit  : 300/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMMON   BANK0   BANK1
  1794 ;;      Params:         4       0       0
  1795 ;;      Locals:         0       3       0
  1796 ;;      Temps:          0       0       0
  1797 ;;      Totals:         4       3       0
  1798 ;;Total ram usage:        7 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    2
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_Sec1sPro
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function ___lwdiv
  1810  061D                     ___lwdiv:	
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1814  061D  01D1               	clrf	___lwdiv@quotient
  1815  061E  01D2               	clrf	___lwdiv@quotient+1
  1816  061F  0875               	movf	___lwdiv@divisor,w
  1817  0620  0476               	iorwf	___lwdiv@divisor+1,w
  1818  0621  1903               	btfsc	3,2
  1819  0622  2E42               	goto	l6678
  1820  0623  01D0               	clrf	___lwdiv@counter
  1821  0624                     L6:	
  1822  0624  0AD0               	incf	___lwdiv@counter,f
  1823  0625  1BF6               	btfsc	___lwdiv@divisor+1,7
  1824  0626  2E2B               	goto	l6666
  1825  0627  1003               	clrc
  1826  0628  0DF5               	rlf	___lwdiv@divisor,f
  1827  0629  0DF6               	rlf	___lwdiv@divisor+1,f
  1828  062A  2E24               	goto	L6
  1829  062B                     l6666:	
  1830  062B  1003               	clrc
  1831  062C  0DD1               	rlf	___lwdiv@quotient,f
  1832  062D  0DD2               	rlf	___lwdiv@quotient+1,f
  1833  062E  0876               	movf	___lwdiv@divisor+1,w
  1834  062F  0278               	subwf	___lwdiv@dividend+1,w
  1835  0630  1D03               	skipz
  1836  0631  2E34               	goto	u4165
  1837  0632  0875               	movf	___lwdiv@divisor,w
  1838  0633  0277               	subwf	___lwdiv@dividend,w
  1839  0634                     u4165:	
  1840  0634  1C03               	skipc
  1841  0635  2E3E               	goto	L7
  1842  0636  0875               	movf	___lwdiv@divisor,w
  1843  0637  02F7               	subwf	___lwdiv@dividend,f
  1844  0638  0876               	movf	___lwdiv@divisor+1,w
  1845  0639  1C03               	skipc
  1846  063A  03F8               	decf	___lwdiv@dividend+1,f
  1847  063B  02F8               	subwf	___lwdiv@dividend+1,f
  1848  063C  1451               	bsf	___lwdiv@quotient,0
  1849  063D  1003               	clrc
  1850  063E                     L7:	
  1851  063E  0CF6               	rrf	___lwdiv@divisor+1,f
  1852  063F  0CF5               	rrf	___lwdiv@divisor,f
  1853  0640  0BD0               	decfsz	___lwdiv@counter,f
  1854  0641  2E2B               	goto	l6666
  1855  0642                     l6678:	
  1856  0642  0852               	movf	___lwdiv@quotient+1,w
  1857  0643  00F6               	movwf	?___lwdiv+1
  1858  0644  0851               	movf	___lwdiv@quotient,w
  1859  0645  00F5               	movwf	?___lwdiv
  1860  0646  0008               	return
  1861  0647                     __end_of___lwdiv:	
  1862                           
  1863                           	psect	text8
  1864  040D                     __ptext8:	
  1865 ;; *************** function _Motor *****************
  1866 ;; Defined at:
  1867 ;;		line 7 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0, pclath, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 300/0
  1878 ;;		On exit  : 300/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1
  1881 ;;      Params:         0       0       0
  1882 ;;      Locals:         0       0       0
  1883 ;;      Temps:          0       0       0
  1884 ;;      Totals:         0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    3
  1888 ;; This function calls:
  1889 ;;		___wmul
  1890 ;; This function is called by:
  1891 ;;		_Apply
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           
  1896                           ;psect for function _Motor
  1897  040D                     _Motor:	
  1898                           
  1899                           ;Motor.c: 9: if(!WorkFlag)
  1900                           
  1901                           ;incstack = 0
  1902                           ; Regs used in _Motor: [wreg+status,2+status,0+pclath+cstack]
  1903  040D  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1904  040E  2C15               	goto	l4201
  1905                           
  1906                           ;Motor.c: 10: {
  1907                           ;Motor.c: 11: RA3=0;
  1908  040F  1185               	bcf	5,3	;volatile
  1909                           
  1910                           ;Motor.c: 12: WorkCnt=0;
  1911  0410  01AD               	clrf	_WorkCnt
  1912  0411  01AE               	clrf	_WorkCnt+1
  1913                           
  1914                           ;Motor.c: 13: TimeDecCnt=0;
  1915  0412  01AB               	clrf	_TimeDecCnt
  1916  0413  01AC               	clrf	_TimeDecCnt+1
  1917                           
  1918                           ;Motor.c: 14: }
  1919  0414  2C3C               	goto	l7020
  1920  0415                     l4201:	
  1921                           
  1922                           ;Motor.c: 15: else if(WorkFlag&&!LockSta.LockFlag)
  1923  0415  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  1924  0416  1B33               	btfsc	_LockSta,6
  1925  0417  2C3C               	goto	l7020
  1926                           
  1927                           ;Motor.c: 16: {
  1928                           ;Motor.c: 17: RA3=1;
  1929  0418  1585               	bsf	5,3	;volatile
  1930                           
  1931                           ;Motor.c: 18: TimeDecCnt++;
  1932  0419  0AAB               	incf	_TimeDecCnt,f
  1933  041A  1903               	skipnz
  1934  041B  0AAC               	incf	_TimeDecCnt+1,f
  1935                           
  1936                           ;Motor.c: 19: if(TimeDecCnt>=BatDecTime*100)
  1937  041C  086A               	movf	_BatDecTime,w
  1938  041D  245D               	fcall	PL30	;call to abstracted procedure
  1939  041E  26E8               	fcall	___wmul
  1940  041F  0876               	movf	?___wmul+1,w
  1941  0420  022C               	subwf	_TimeDecCnt+1,w
  1942  0421  1D03               	skipz
  1943  0422  2C25               	goto	u4685
  1944  0423  0875               	movf	?___wmul,w
  1945  0424  022B               	subwf	_TimeDecCnt,w
  1946  0425                     u4685:	
  1947  0425  1C03               	skipc
  1948  0426  2C2C               	goto	l4204
  1949                           
  1950                           ;Motor.c: 20: {
  1951                           ;Motor.c: 21: TimeDecCnt=0;
  1952  0427  01AB               	clrf	_TimeDecCnt
  1953  0428  01AC               	clrf	_TimeDecCnt+1
  1954                           
  1955                           ;Motor.c: 22: if(BatPercent)
  1956  0429  0849               	movf	_BatPercent,w
  1957  042A  1D03               	btfss	3,2
  1958                           
  1959                           ;Motor.c: 23: {
  1960                           ;Motor.c: 24: BatPercent--;
  1961  042B  03C9               	decf	_BatPercent,f
  1962  042C                     l4204:	
  1963                           
  1964                           ;Motor.c: 25: }
  1965                           ;Motor.c: 26: }
  1966                           ;Motor.c: 27: WorkCnt++;
  1967  042C  0AAD               	incf	_WorkCnt,f
  1968  042D  1903               	skipnz
  1969  042E  0AAE               	incf	_WorkCnt+1,f
  1970                           
  1971                           ;Motor.c: 28: if(WorkCnt>=6000)
  1972  042F  3017               	movlw	23
  1973  0430  022E               	subwf	_WorkCnt+1,w
  1974  0431  3070               	movlw	112
  1975  0432  1903               	skipnz
  1976  0433  022D               	subwf	_WorkCnt,w
  1977  0434  1C03               	skipc
  1978  0435  2C3C               	goto	l7020
  1979  0436  3063               	movlw	99
  1980                           
  1981                           ;Motor.c: 29: {
  1982                           ;Motor.c: 30: WorkCnt=0;
  1983  0437  01AD               	clrf	_WorkCnt
  1984  0438  01AE               	clrf	_WorkCnt+1
  1985                           
  1986                           ;Motor.c: 31: if(WorkMin<99)
  1987  0439  027A               	subwf	_WorkMin,w
  1988  043A  1C03               	btfss	3,0
  1989                           
  1990                           ;Motor.c: 32: {
  1991                           ;Motor.c: 33: WorkMin++;
  1992  043B  0AFA               	incf	_WorkMin,f
  1993  043C                     l7020:	
  1994                           
  1995                           ;Motor.c: 34: }
  1996                           ;Motor.c: 35: }
  1997                           ;Motor.c: 36: }
  1998                           ;Motor.c: 37: if(USBFlag)
  1999  043C  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2000  043D  2C5A               	goto	l7036
  2001                           
  2002                           ;Motor.c: 38: {
  2003                           ;Motor.c: 39: TimeAddCnt++;
  2004  043E  0AA9               	incf	_TimeAddCnt,f
  2005  043F  1903               	skipnz
  2006  0440  0AAA               	incf	_TimeAddCnt+1,f
  2007                           
  2008                           ;Motor.c: 40: if(TimeAddCnt>BatAddTime*100)
  2009  0441  086B               	movf	_BatAddTime,w
  2010  0442  245D               	fcall	PL30	;call to abstracted procedure
  2011  0443  26E8               	fcall	___wmul
  2012  0444  082A               	movf	_TimeAddCnt+1,w
  2013  0445  0276               	subwf	?___wmul+1,w
  2014  0446  1D03               	skipz
  2015  0447  2C4A               	goto	u4735
  2016  0448  0829               	movf	_TimeAddCnt,w
  2017  0449  0275               	subwf	?___wmul,w
  2018  044A                     u4735:	
  2019  044A  1803               	skipnc
  2020  044B  2C52               	goto	l7032
  2021  044C  3063               	movlw	99
  2022                           
  2023                           ;Motor.c: 41: {
  2024                           ;Motor.c: 42: TimeAddCnt=0;
  2025  044D  01A9               	clrf	_TimeAddCnt
  2026  044E  01AA               	clrf	_TimeAddCnt+1
  2027                           
  2028                           ;Motor.c: 43: if(BatPercent<99)
  2029  044F  0249               	subwf	_BatPercent,w
  2030  0450  1C03               	btfss	3,0
  2031                           
  2032                           ;Motor.c: 44: {
  2033                           ;Motor.c: 45: BatPercent++;
  2034  0451  0AC9               	incf	_BatPercent,f
  2035  0452                     l7032:	
  2036                           
  2037                           ;Motor.c: 46: }
  2038                           ;Motor.c: 47: }
  2039                           ;Motor.c: 48: if(BatPercent<=125)
  2040  0452  307E               	movlw	126
  2041  0453  0249               	subwf	_BatPercent,w
  2042  0454  1803               	skipnc
  2043  0455  2C58               	goto	l4211
  2044                           
  2045                           ;Motor.c: 49: {
  2046                           ;Motor.c: 50: RA5 =0;
  2047  0456  1285               	bcf	5,5	;volatile
  2048                           
  2049                           ;Motor.c: 51: }
  2050  0457  0008               	return
  2051  0458                     l4211:	
  2052                           
  2053                           ;Motor.c: 52: else
  2054                           ;Motor.c: 53: {
  2055                           ;Motor.c: 54: RA5 =1;
  2056  0458  1685               	bsf	5,5	;volatile
  2057  0459  0008               	return
  2058  045A                     l7036:	
  2059                           
  2060                           ;Motor.c: 57: else
  2061                           ;Motor.c: 58: {
  2062                           ;Motor.c: 59: TimeAddCnt=0;
  2063  045A  01A9               	clrf	_TimeAddCnt
  2064  045B  01AA               	clrf	_TimeAddCnt+1
  2065  045C  2C58               	goto	l4211
  2066  045D                     __end_of_Motor:	
  2067  045D                     PL30:	
  2068  045D  00F5               	movwf	___wmul@multiplier
  2069  045E  3064               	movlw	100
  2070  045F  01F6               	clrf	___wmul@multiplier+1
  2071  0460  00F7               	movwf	___wmul@multiplicand
  2072  0461  01F8               	clrf	___wmul@multiplicand+1
  2073  0462  0008               	return
  2074  0463                     __end_ofPL30:	
  2075                           
  2076                           	psect	text9
  2077  06E8                     __ptext9:	
  2078 ;; *************** function ___wmul *****************
  2079 ;; Defined at:
  2080 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul16.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  multiplier      2    3[COMMON] unsigned int 
  2083 ;;  multiplicand    2    5[COMMON] unsigned int 
  2084 ;; Auto vars:     Size  Location     Type
  2085 ;;  product         2    0[BANK0 ] unsigned int 
  2086 ;; Return value:  Size  Location     Type
  2087 ;;                  2    3[COMMON] unsigned int 
  2088 ;; Registers used:
  2089 ;;		wreg, status,2, status,0
  2090 ;; Tracked objects:
  2091 ;;		On entry : 300/0
  2092 ;;		On exit  : 300/0
  2093 ;;		Unchanged: 0/0
  2094 ;; Data sizes:     COMMON   BANK0   BANK1
  2095 ;;      Params:         4       0       0
  2096 ;;      Locals:         0       2       0
  2097 ;;      Temps:          0       0       0
  2098 ;;      Totals:         4       2       0
  2099 ;;Total ram usage:        6 bytes
  2100 ;; Hardware stack levels used:    1
  2101 ;; Hardware stack levels required when called:    2
  2102 ;; This function calls:
  2103 ;;		Nothing
  2104 ;; This function is called by:
  2105 ;;		_Motor
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           
  2110                           ;psect for function ___wmul
  2111  06E8                     ___wmul:	
  2112                           
  2113                           ;incstack = 0
  2114                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2115  06E8  01D0               	clrf	___wmul@product
  2116  06E9  01D1               	clrf	___wmul@product+1
  2117  06EA                     l6978:	
  2118  06EA  1C75               	btfss	___wmul@multiplier,0
  2119  06EB  2EF2               	goto	l6982
  2120  06EC  0877               	movf	___wmul@multiplicand,w
  2121  06ED  07D0               	addwf	___wmul@product,f
  2122  06EE  1803               	skipnc
  2123  06EF  0AD1               	incf	___wmul@product+1,f
  2124  06F0  0878               	movf	___wmul@multiplicand+1,w
  2125  06F1  07D1               	addwf	___wmul@product+1,f
  2126  06F2                     l6982:	
  2127  06F2  1003               	clrc
  2128  06F3  0DF7               	rlf	___wmul@multiplicand,f
  2129  06F4  0DF8               	rlf	___wmul@multiplicand+1,f
  2130  06F5  1003               	clrc
  2131  06F6  0CF6               	rrf	___wmul@multiplier+1,f
  2132  06F7  0CF5               	rrf	___wmul@multiplier,f
  2133  06F8  0875               	movf	___wmul@multiplier,w
  2134  06F9  0476               	iorwf	___wmul@multiplier+1,w
  2135  06FA  1D03               	btfss	3,2
  2136  06FB  2EEA               	goto	l6978
  2137  06FC  0851               	movf	___wmul@product+1,w
  2138  06FD  00F6               	movwf	?___wmul+1
  2139  06FE  0850               	movf	___wmul@product,w
  2140  06FF  00F5               	movwf	?___wmul
  2141  0700  0008               	return
  2142  0701                     __end_of___wmul:	
  2143                           
  2144                           	psect	text10
  2145  0024                     __ptext10:	
  2146 ;; *************** function _KeyScan *****************
  2147 ;; Defined at:
  2148 ;;		line 9 in file "C:\Users\Administrator\Desktop\project\K13-01\code\Key.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/200
  2159 ;;		On exit  : 300/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1
  2162 ;;      Params:         0       0       0
  2163 ;;      Locals:         0       0       0
  2164 ;;      Temps:          1       0       0
  2165 ;;      Totals:         1       0       0
  2166 ;;Total ram usage:        1 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    2
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_Apply
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function _KeyScan
  2178  0024                     _KeyScan:	
  2179                           
  2180                           ;Key.c: 11: if(!RB6)
  2181                           
  2182                           ;incstack = 0
  2183                           ; Regs used in _KeyScan: [wreg+status,2+status,0]
  2184  0024  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0025  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0026  1B06               	btfsc	6,6	;volatile
  2187  0027  282A               	goto	l2371
  2188                           
  2189                           ;Key.c: 12: {
  2190                           ;Key.c: 13: KeyPress=1;
  2191  0028  17F0               	bsf	_KeyPress/(0+8),_KeyPress& (0+7)
  2192                           
  2193                           ;Key.c: 14: }
  2194  0029  282B               	goto	l2372
  2195  002A                     l2371:	
  2196                           
  2197                           ;Key.c: 15: else
  2198                           ;Key.c: 16: {
  2199                           ;Key.c: 17: KeyPress=0;
  2200  002A  13F0               	bcf	_KeyPress/(0+8),_KeyPress& (0+7)
  2201  002B                     l2372:	
  2202                           
  2203                           ;Key.c: 18: }
  2204                           ;Key.c: 20: if(KeyPress&&KeyCnt<10&&KeyInBuf==KeyPress&&!IovFlag&&(!LowBatFlag||USBFlag)
      +                          )
  2205  002B  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2206  002C  285C               	goto	l2373
  2207  002D  3000               	movlw	0
  2208  002E  0232               	subwf	_KeyCnt+1,w
  2209  002F  300A               	movlw	10
  2210  0030  1903               	skipnz
  2211  0031  0231               	subwf	_KeyCnt,w
  2212  0032  1803               	skipnc
  2213  0033  285C               	goto	l2373
  2214  0034  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2215  0035  2838               	goto	u2790
  2216  0036  3001               	movlw	1
  2217  0037  2839               	goto	u2792
  2218  0038                     u2790:	
  2219  0038  3000               	movlw	0
  2220  0039                     u2792:	
  2221  0039  00F5               	movwf	??_KeyScan
  2222  003A  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2223  003B  283E               	goto	u2800
  2224  003C  3001               	movlw	1
  2225  003D  283F               	goto	u2802
  2226  003E                     u2800:	
  2227  003E  3000               	movlw	0
  2228  003F                     u2802:	
  2229  003F  0675               	xorwf	??_KeyScan,w
  2230  0040  1903               	btfsc	3,2
  2231  0041  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2232  0042  285C               	goto	l2373
  2233  0043  1EF1               	btfss	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  2234  0044  2847               	goto	l6062
  2235  0045  1DF1               	btfss	_USBFlag/(0+8),_USBFlag& (0+7)
  2236  0046  285C               	goto	l2373
  2237  0047                     l6062:	
  2238                           
  2239                           ;Key.c: 21: {
  2240                           ;Key.c: 22: KeyCnt++;
  2241                           
  2242                           ;Key.c: 23: if(KeyCnt>=10)
  2243  0047  20F9               	fcall	PL26	;call to abstracted procedure
  2244  0048  300A               	movlw	10
  2245  0049  1903               	skipnz
  2246  004A  0231               	subwf	_KeyCnt,w
  2247  004B  1C03               	skipc
  2248  004C  28E6               	goto	l2379
  2249                           
  2250                           ;Key.c: 24: {
  2251                           ;Key.c: 25: WorkFlag=~WorkFlag;
  2252  004D  3004               	movlw	(0+1) shl (_WorkFlag& (0+7))
  2253  004E  06F1               	xorwf	_WorkFlag/(0+8),f
  2254                           
  2255                           ;Key.c: 26: if(!WorkFlag&&WorkMin!=0&&!USBFlag&&!LockSta.LockFlag)
  2256  004F  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2257  0050  2859               	goto	l2377
  2258  0051  087A               	movf	_WorkMin,w
  2259  0052  1D03               	btfss	3,2
  2260  0053  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2261  0054  2859               	goto	l2377
  2262  0055  1B33               	btfsc	_LockSta,6
  2263  0056  2859               	goto	l2377
  2264                           
  2265                           ;Key.c: 27: {
  2266                           ;Key.c: 28: OnOffFlag=1;
  2267  0057  1770               	bsf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2268                           
  2269                           ;Key.c: 29: }
  2270  0058  28E6               	goto	l2379
  2271  0059                     l2377:	
  2272                           
  2273                           ;Key.c: 30: else
  2274                           ;Key.c: 31: {
  2275                           ;Key.c: 32: OnOffFlag=0;
  2276  0059  1370               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2277                           
  2278                           ;Key.c: 33: WorkMin=0;
  2279  005A  01FA               	clrf	_WorkMin
  2280  005B  28E6               	goto	l2379
  2281  005C                     l2373:	
  2282                           
  2283                           ;Key.c: 37: else if(KeyPress&&KeyCnt>=10&&KeyCnt<250&&KeyInBuf==KeyPress&&!USBFlag)
  2284  005C  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2285  005D  288C               	goto	l2380
  2286  005E  3000               	movlw	0
  2287  005F  0232               	subwf	_KeyCnt+1,w
  2288  0060  300A               	movlw	10
  2289  0061  1903               	skipnz
  2290  0062  0231               	subwf	_KeyCnt,w
  2291  0063  1C03               	skipc
  2292  0064  288C               	goto	l2380
  2293  0065  3000               	movlw	0
  2294  0066  0232               	subwf	_KeyCnt+1,w
  2295  0067  30FA               	movlw	250
  2296  0068  1903               	skipnz
  2297  0069  0231               	subwf	_KeyCnt,w
  2298  006A  1803               	skipnc
  2299  006B  288C               	goto	l2380
  2300  006C  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2301  006D  2870               	goto	u2930
  2302  006E  3001               	movlw	1
  2303  006F  2871               	goto	u2932
  2304  0070                     u2930:	
  2305  0070  3000               	movlw	0
  2306  0071                     u2932:	
  2307  0071  00F5               	movwf	??_KeyScan
  2308  0072  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2309  0073  2876               	goto	u2940
  2310  0074  3001               	movlw	1
  2311  0075  2877               	goto	u2942
  2312  0076                     u2940:	
  2313  0076  3000               	movlw	0
  2314  0077                     u2942:	
  2315  0077  0675               	xorwf	??_KeyScan,w
  2316  0078  1903               	btfsc	3,2
  2317  0079  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  2318  007A  288C               	goto	l2380
  2319                           
  2320                           ;Key.c: 38: {
  2321                           ;Key.c: 39: KeyCnt++;
  2322                           
  2323                           ;Key.c: 40: if(KeyCnt>=250)
  2324  007B  20F9               	fcall	PL26	;call to abstracted procedure
  2325  007C  30FA               	movlw	250
  2326  007D  1903               	skipnz
  2327  007E  0231               	subwf	_KeyCnt,w
  2328  007F  1C03               	skipc
  2329  0080  28E6               	goto	l2379
  2330                           
  2331                           ;Key.c: 41: {
  2332                           ;Key.c: 42: LockNumb=2;
  2333  0081  3002               	movlw	2
  2334  0082  00C1               	movwf	_LockNumb
  2335                           
  2336                           ;Key.c: 43: if(!LockSta.LockFlag)
  2337  0083  1B33               	btfsc	_LockSta,6
  2338  0084  2888               	goto	l2382
  2339                           
  2340                           ;Key.c: 44: {
  2341                           ;Key.c: 45: LockSta.LockStart=1;
  2342  0085  1433               	bsf	_LockSta,0
  2343                           
  2344                           ;Key.c: 46: LockSta.UnlockEnd=0;
  2345  0086  12B3               	bcf	_LockSta,5
  2346                           
  2347                           ;Key.c: 47: }
  2348  0087  288A               	goto	l2383
  2349  0088                     l2382:	
  2350                           
  2351                           ;Key.c: 48: else
  2352                           ;Key.c: 49: {
  2353                           ;Key.c: 50: LockSta.UnlockStart=1;
  2354  0088  15B3               	bsf	_LockSta,3
  2355                           
  2356                           ;Key.c: 51: LockSta.LockEnd=0;
  2357  0089  1133               	bcf	_LockSta,2
  2358  008A                     l2383:	
  2359                           
  2360                           ;Key.c: 52: }
  2361                           ;Key.c: 53: OnOffFlag=0;
  2362  008A  1370               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2363  008B  28E6               	goto	l2379
  2364  008C                     l2380:	
  2365                           
  2366                           ;Key.c: 56: else if(KeyPress&&KeyCnt>=250&&KeyInBuf==KeyPress&&!LockSta.LockEnd&&!LockSt
      +                          a.UnlockEnd)
  2367  008C  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2368  008D  28C8               	goto	l2385
  2369  008E  3000               	movlw	0
  2370  008F  0232               	subwf	_KeyCnt+1,w
  2371  0090  30FA               	movlw	250
  2372  0091  1903               	skipnz
  2373  0092  0231               	subwf	_KeyCnt,w
  2374  0093  1C03               	skipc
  2375  0094  28C8               	goto	l2385
  2376  0095  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2377  0096  2899               	goto	u3010
  2378  0097  3001               	movlw	1
  2379  0098  289A               	goto	u3012
  2380  0099                     u3010:	
  2381  0099  3000               	movlw	0
  2382  009A                     u3012:	
  2383  009A  00F5               	movwf	??_KeyScan
  2384  009B  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2385  009C  289F               	goto	u3020
  2386  009D  3001               	movlw	1
  2387  009E  28A0               	goto	u3022
  2388  009F                     u3020:	
  2389  009F  3000               	movlw	0
  2390  00A0                     u3022:	
  2391  00A0  0675               	xorwf	??_KeyScan,w
  2392  00A1  1903               	btfsc	3,2
  2393  00A2  1933               	btfsc	_LockSta,2
  2394  00A3  28C8               	goto	l2385
  2395  00A4  1AB3               	btfsc	_LockSta,5
  2396  00A5  28C8               	goto	l2385
  2397                           
  2398                           ;Key.c: 57: {
  2399                           ;Key.c: 58: KeyCnt++;
  2400  00A6  0AB1               	incf	_KeyCnt,f
  2401  00A7  1903               	skipnz
  2402  00A8  0AB2               	incf	_KeyCnt+1,f
  2403                           
  2404                           ;Key.c: 59: if(KeyCnt>=1750)
  2405  00A9  3006               	movlw	6
  2406  00AA  0232               	subwf	_KeyCnt+1,w
  2407  00AB  30D6               	movlw	214
  2408  00AC  1903               	skipnz
  2409  00AD  0231               	subwf	_KeyCnt,w
  2410  00AE  1C03               	skipc
  2411  00AF  28E6               	goto	l2379
  2412                           
  2413                           ;Key.c: 60: {
  2414                           ;Key.c: 61: KeyCnt=1750;
  2415  00B0  30D6               	movlw	214
  2416  00B1  00B1               	movwf	_KeyCnt
  2417  00B2  3006               	movlw	6
  2418  00B3  00B2               	movwf	_KeyCnt+1
  2419                           
  2420                           ;Key.c: 62: LockSta.LockFlag=!LockSta.LockFlag;
  2421  00B4  1003               	clrc
  2422  00B5  1F33               	btfss	_LockSta,6
  2423  00B6  1403               	setc
  2424  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  2425  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  2426  00B9  1C03               	btfss	3,0
  2427  00BA  28BD               	goto	L8
  2428  00BB  1733               	bsf	_LockSta,6
  2429  00BC  28BE               	goto	l6114
  2430  00BD                     L8:	
  2431  00BD  1333               	bcf	_LockSta,6
  2432  00BE                     l6114:	
  2433                           
  2434                           ;Key.c: 63: if(LockSta.LockFlag)
  2435  00BE  1F33               	btfss	_LockSta,6
  2436  00BF  28C4               	goto	l2387
  2437                           
  2438                           ;Key.c: 64: {
  2439                           ;Key.c: 65: LockSta.LockStart=0;
  2440  00C0  1033               	bcf	_LockSta,0
  2441                           
  2442                           ;Key.c: 66: LockSta.LockEnd=1;
  2443  00C1  1533               	bsf	_LockSta,2
  2444                           
  2445                           ;Key.c: 67: WorkFlag=0;
  2446  00C2  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2447                           
  2448                           ;Key.c: 68: }
  2449  00C3  28E6               	goto	l2379
  2450  00C4                     l2387:	
  2451                           
  2452                           ;Key.c: 69: else
  2453                           ;Key.c: 70: {
  2454                           ;Key.c: 71: LockSta.UnlockStart=0;
  2455  00C4  11B3               	bcf	_LockSta,3
  2456                           
  2457                           ;Key.c: 72: LockSta.UnlockEnd=1;
  2458  00C5  16B3               	bsf	_LockSta,5
  2459                           
  2460                           ;Key.c: 73: WorkFlag=1;
  2461  00C6  1571               	bsf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2462  00C7  28E6               	goto	l2379
  2463  00C8                     l2385:	
  2464                           
  2465                           ;Key.c: 77: else if(!KeyPress||KeyInBuf!=KeyPress)
  2466  00C8  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2467  00C9  28D8               	goto	l6120
  2468  00CA  1FF0               	btfss	_KeyPress/(0+8),_KeyPress& (0+7)
  2469  00CB  28CE               	goto	u3110
  2470  00CC  3001               	movlw	1
  2471  00CD  28CF               	goto	u3112
  2472  00CE                     u3110:	
  2473  00CE  3000               	movlw	0
  2474  00CF                     u3112:	
  2475  00CF  00F5               	movwf	??_KeyScan
  2476  00D0  1EF0               	btfss	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2477  00D1  28D4               	goto	u3120
  2478  00D2  3001               	movlw	1
  2479  00D3  28D5               	goto	u3122
  2480  00D4                     u3120:	
  2481  00D4  3000               	movlw	0
  2482  00D5                     u3122:	
  2483  00D5  0675               	xorwf	??_KeyScan,w
  2484  00D6  1903               	skipnz
  2485  00D7  28E6               	goto	l2379
  2486  00D8                     l6120:	
  2487                           
  2488                           ;Key.c: 78: {
  2489                           ;Key.c: 79: KeyCnt=0;
  2490  00D8  01B1               	clrf	_KeyCnt
  2491  00D9  01B2               	clrf	_KeyCnt+1
  2492                           
  2493                           ;Key.c: 80: LockSta.UnlockEnd=0;
  2494  00DA  12B3               	bcf	_LockSta,5
  2495                           
  2496                           ;Key.c: 81: if((LockSta.LockFlag&&WorkFlag)||LockSta.UnlockStart)
  2497  00DB  1F33               	btfss	_LockSta,6
  2498  00DC  28DF               	goto	l2397
  2499  00DD  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2500  00DE  28E1               	goto	l2395
  2501  00DF                     l2397:	
  2502  00DF  1DB3               	btfss	_LockSta,3
  2503  00E0  28E4               	goto	l2393
  2504  00E1                     l2395:	
  2505                           
  2506                           ;Key.c: 82: {
  2507                           ;Key.c: 83: LockSta.UnlockStart=0;
  2508  00E1  11B3               	bcf	_LockSta,3
  2509                           
  2510                           ;Key.c: 84: LockSta.UnlockFail=1;
  2511  00E2  1633               	bsf	_LockSta,4
  2512                           
  2513                           ;Key.c: 85: WorkFlag=0;
  2514  00E3  1171               	bcf	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2515  00E4                     l2393:	
  2516                           
  2517                           ;Key.c: 86: }
  2518                           ;Key.c: 87: if(LockSta.LockStart)
  2519  00E4  1833               	btfsc	_LockSta,0
  2520                           
  2521                           ;Key.c: 88: {
  2522                           ;Key.c: 89: LockSta.LockStart=0;
  2523  00E5  1033               	bcf	_LockSta,0
  2524  00E6                     l2379:	
  2525                           
  2526                           ;Key.c: 90: }
  2527                           ;Key.c: 91: }
  2528                           ;Key.c: 92: KeyInBuf=KeyPress;
  2529  00E6  12F0               	bcf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2530  00E7  1BF0               	btfsc	_KeyPress/(0+8),_KeyPress& (0+7)
  2531  00E8  16F0               	bsf	_KeyInBuf/(0+8),_KeyInBuf& (0+7)
  2532                           
  2533                           ;Key.c: 94: if(!RB7)
  2534  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2535  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  2536  00EB  1B86               	btfsc	6,7	;volatile
  2537  00EC  28EF               	goto	l2399
  2538                           
  2539                           ;Key.c: 95: {
  2540                           ;Key.c: 96: USBLink=1;
  2541  00ED  1670               	bsf	_USBLink/(0+8),_USBLink& (0+7)
  2542                           
  2543                           ;Key.c: 97: }
  2544  00EE  28F0               	goto	l2400
  2545  00EF                     l2399:	
  2546                           
  2547                           ;Key.c: 98: else
  2548                           ;Key.c: 99: {
  2549                           ;Key.c: 100: USBLink=0;
  2550  00EF  1270               	bcf	_USBLink/(0+8),_USBLink& (0+7)
  2551  00F0                     l2400:	
  2552                           
  2553                           ;Key.c: 101: }
  2554                           ;Key.c: 103: if(USBLink&&!IovFlag)
  2555  00F0  1A70               	btfsc	_USBLink/(0+8),_USBLink& (0+7)
  2556  00F1  1A71               	btfsc	_IovFlag/(0+8),_IovFlag& (0+7)
  2557  00F2  28F6               	goto	l2401
  2558                           
  2559                           ;Key.c: 104: {
  2560                           ;Key.c: 105: USBFlag=1;
  2561  00F3  15F1               	bsf	_USBFlag/(0+8),_USBFlag& (0+7)
  2562                           
  2563                           ;Key.c: 106: LockSta.LockFlag=0;
  2564  00F4  1333               	bcf	_LockSta,6
  2565                           
  2566                           ;Key.c: 107: }
  2567  00F5  0008               	return
  2568  00F6                     l2401:	
  2569                           
  2570                           ;Key.c: 108: else if(!USBLink)
  2571  00F6  1E70               	btfss	_USBLink/(0+8),_USBLink& (0+7)
  2572                           
  2573                           ;Key.c: 109: {
  2574                           ;Key.c: 110: USBFlag=0;
  2575  00F7  11F1               	bcf	_USBFlag/(0+8),_USBFlag& (0+7)
  2576  00F8  0008               	return
  2577  00F9                     __end_of_KeyScan:	
  2578  00F9                     PL26:	
  2579  00F9  0AB1               	incf	_KeyCnt,f
  2580  00FA  1903               	skipnz
  2581  00FB  0AB2               	incf	_KeyCnt+1,f
  2582  00FC  3000               	movlw	0
  2583  00FD  0232               	subwf	_KeyCnt+1,w
  2584  00FE  0008               	return
  2585  00FF                     __end_ofPL26:	
  2586                           
  2587                           	psect	text11
  2588  076D                     __ptext11:	
  2589 ;; *************** function _DisplayPro *****************
  2590 ;; Defined at:
  2591 ;;		line 144 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 300/0
  2602 ;;		On exit  : B00/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1
  2605 ;;      Params:         0       0       0
  2606 ;;      Locals:         0       0       0
  2607 ;;      Temps:          0       0       0
  2608 ;;      Totals:         0       0       0
  2609 ;;Total ram usage:        0 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    4
  2612 ;; This function calls:
  2613 ;;		_DisplayIcon
  2614 ;;		_ErrPro
  2615 ;;		_LockPro
  2616 ;;		_USBLedPro
  2617 ;;		_WorkLedPro
  2618 ;; This function is called by:
  2619 ;;		_Apply
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           
  2624                           ;psect for function _DisplayPro
  2625  076D                     _DisplayPro:	
  2626                           
  2627                           ;LED.c: 146: LedIndex=0;
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in _DisplayPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2631  076D  01AF               	clrf	_LedIndex
  2632  076E  01B0               	clrf	_LedIndex+1
  2633                           
  2634                           ;LED.c: 147: WorkLedPro();
  2635  076F  2338               	fcall	_WorkLedPro
  2636                           
  2637                           ;LED.c: 148: USBLedPro();
  2638  0770  23AE               	fcall	_USBLedPro
  2639                           
  2640                           ;LED.c: 149: LockPro();
  2641  0771  24AF               	fcall	_LockPro
  2642                           
  2643                           ;LED.c: 150: ErrPro();
  2644  0772  2730               	fcall	_ErrPro
  2645                           
  2646                           ;LED.c: 151: DisplayIcon(LedIndex);
  2647  0773  0830               	movf	_LedIndex+1,w
  2648  0774  00F6               	movwf	DisplayIcon@index+1
  2649  0775  082F               	movf	_LedIndex,w
  2650  0776  00F5               	movwf	DisplayIcon@index
  2651  0777  2D7D               	ljmp	l6522
  2652  0778                     __end_of_DisplayPro:	
  2653                           
  2654                           	psect	text12
  2655  0338                     __ptext12:	
  2656 ;; *************** function _WorkLedPro *****************
  2657 ;; Defined at:
  2658 ;;		line 192 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;		None
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2667 ;; Tracked objects:
  2668 ;;		On entry : 300/0
  2669 ;;		On exit  : 300/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1
  2672 ;;      Params:         0       0       0
  2673 ;;      Locals:         0       0       0
  2674 ;;      Temps:          0       2       0
  2675 ;;      Totals:         0       2       0
  2676 ;;Total ram usage:        2 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    3
  2679 ;; This function calls:
  2680 ;;		___bmul
  2681 ;;		___lbdiv
  2682 ;;		___lbmod
  2683 ;; This function is called by:
  2684 ;;		_DisplayPro
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _WorkLedPro
  2690  0338                     _WorkLedPro:	
  2691                           
  2692                           ;LED.c: 194: static char LedSwitchCnt=0;
  2693                           ;LED.c: 195: static bit LedSwitchFlag=0;
  2694                           ;LED.c: 196: static char index=0;
  2695                           ;LED.c: 197: static unsigned char cnt=0;
  2696                           ;LED.c: 198: static bit dir=0;
  2697                           ;LED.c: 199: if(WorkFlag&&!LockSta.LockStart&&!OnOffFlag&&!LockSta.LockFlag)
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _WorkLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2701  0338  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  2702  0339  1833               	btfsc	_LockSta,0
  2703  033A  2B57               	goto	l3044
  2704  033B  1F70               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2705  033C  1B33               	btfsc	_LockSta,6
  2706  033D  2B57               	goto	l3044
  2707                           
  2708                           ;LED.c: 200: {
  2709                           ;LED.c: 201: if(BatPercent<=10)
  2710  033E  300B               	movlw	11
  2711  033F  0249               	subwf	_BatPercent,w
  2712  0340  1803               	skipnc
  2713  0341  2B4B               	goto	l6560
  2714  0342  3028               	movlw	40
  2715                           
  2716                           ;LED.c: 202: {
  2717                           ;LED.c: 203: LedSwitchCnt++;
  2718  0343  0ABB               	incf	WorkLedPro@LedSwitchCnt,f
  2719                           
  2720                           ;LED.c: 204: if(LedSwitchCnt>=40)
  2721  0344  023B               	subwf	WorkLedPro@LedSwitchCnt,w
  2722  0345  1C03               	skipc
  2723  0346  2B4D               	goto	l6564
  2724  0347  3008               	movlw	(0+1) shl (WorkLedPro@LedSwitchFlag& (0+7))
  2725                           
  2726                           ;LED.c: 205: {
  2727                           ;LED.c: 206: LedSwitchCnt=0;
  2728  0348  01BB               	clrf	WorkLedPro@LedSwitchCnt
  2729                           
  2730                           ;LED.c: 207: LedSwitchFlag=!LedSwitchFlag;
  2731  0349  06F0               	xorwf	WorkLedPro@LedSwitchFlag/(0+8),f
  2732  034A  2B4D               	goto	l6564
  2733  034B                     l6560:	
  2734                           
  2735                           ;LED.c: 210: else
  2736                           ;LED.c: 211: {
  2737                           ;LED.c: 212: LedSwitchCnt=0;
  2738  034B  01BB               	clrf	WorkLedPro@LedSwitchCnt
  2739                           
  2740                           ;LED.c: 213: LedSwitchFlag=1;
  2741  034C  15F0               	bsf	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2742  034D                     l6564:	
  2743                           
  2744                           ;LED.c: 214: }
  2745                           ;LED.c: 215: if(LedSwitchFlag)
  2746  034D  1DF0               	btfss	WorkLedPro@LedSwitchFlag/(0+8),WorkLedPro@LedSwitchFlag& (0+7)
  2747  034E  0008               	return
  2748                           
  2749                           ;LED.c: 216: {
  2750                           ;LED.c: 217: LedIndex=NumbArr[BatPercent/10];
  2751  034F  300A               	movlw	10
  2752  0350  00F5               	movwf	___lbdiv@divisor
  2753  0351  0849               	movf	_BatPercent,w
  2754  0352  26B2               	fcall	___lbdiv
  2755                           
  2756                           ;LED.c: 218: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2757  0353  2403               	fcall	PL6	;call to abstracted procedure
  2758  0354  2696               	fcall	___lbmod
  2759  0355  2391               	fcall	PL2	;call to abstracted procedure
  2760  0356  0008               	return
  2761  0357                     l3044:	
  2762                           
  2763                           ;LED.c: 221: else if(OnOffFlag)
  2764  0357  1F70               	btfss	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2765  0358  0008               	return
  2766  0359  3028               	movlw	40
  2767                           
  2768                           ;LED.c: 222: {
  2769                           ;LED.c: 223: cnt++;
  2770  035A  0AB9               	incf	WorkLedPro@cnt,f
  2771                           
  2772                           ;LED.c: 224: if(cnt>=40)
  2773  035B  0239               	subwf	WorkLedPro@cnt,w
  2774  035C  1C03               	skipc
  2775  035D  2B6C               	goto	l6592
  2776  035E  3007               	movlw	7
  2777                           
  2778                           ;LED.c: 225: {
  2779                           ;LED.c: 226: cnt=0;
  2780  035F  01B9               	clrf	WorkLedPro@cnt
  2781                           
  2782                           ;LED.c: 227: index++;
  2783  0360  0ABA               	incf	WorkLedPro@index,f
  2784                           
  2785                           ;LED.c: 228: if(index>=7)
  2786  0361  023A               	subwf	WorkLedPro@index,w
  2787  0362  1C03               	skipc
  2788  0363  2B6C               	goto	l6592
  2789                           
  2790                           ;LED.c: 229: {
  2791                           ;LED.c: 230: if(dir)
  2792  0364  1D70               	btfss	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2793  0365  2B69               	goto	l6588
  2794                           
  2795                           ;LED.c: 231: {
  2796                           ;LED.c: 232: OnOffFlag=0;
  2797  0366  1370               	bcf	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  2798                           
  2799                           ;LED.c: 233: WorkMin=0;
  2800  0367  01FA               	clrf	_WorkMin
  2801  0368  0008               	return
  2802  0369                     l6588:	
  2803                           
  2804                           ;LED.c: 235: }
  2805                           ;LED.c: 236: dir=!dir;
  2806  0369  3004               	movlw	(0+1) shl (WorkLedPro@dir& (0+7))
  2807  036A  06F0               	xorwf	WorkLedPro@dir/(0+8),f
  2808                           
  2809                           ;LED.c: 237: index=0;
  2810  036B  01BA               	clrf	WorkLedPro@index
  2811  036C                     l6592:	
  2812                           
  2813                           ;LED.c: 238: }
  2814                           ;LED.c: 239: }
  2815                           ;LED.c: 240: if(!dir)
  2816  036C  1970               	btfsc	WorkLedPro@dir/(0+8),WorkLedPro@dir& (0+7)
  2817  036D  2B7A               	goto	l6600
  2818                           
  2819                           ;LED.c: 241: {
  2820                           ;LED.c: 242: LedIndex=NumbArr[BatPercent/10];
  2821  036E  300A               	movlw	10
  2822  036F  00F5               	movwf	___lbdiv@divisor
  2823  0370  0849               	movf	_BatPercent,w
  2824  0371  26B2               	fcall	___lbdiv
  2825                           
  2826                           ;LED.c: 243: LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
  2827  0372  2403               	fcall	PL6	;call to abstracted procedure
  2828  0373  2696               	fcall	___lbmod
  2829  0374  2391               	fcall	PL2	;call to abstracted procedure
  2830                           
  2831                           ;LED.c: 244: LedIndex&=~OffHideNumbArr[index];
  2832  0375  1003               	clrc
  2833  0376  0D3A               	rlf	WorkLedPro@index,w
  2834  0377  3EB0               	addlw	(low (_OffHideNumbArr| 0))& (0+255)
  2835  0378  0084               	movwf	4
  2836                           
  2837                           ;LED.c: 245: }
  2838  0379  2BA2               	ljmp	PL10	;call to abstracted procedure
  2839  037A                     l6600:	
  2840                           
  2841                           ;LED.c: 246: else
  2842                           ;LED.c: 247: {
  2843                           ;LED.c: 248: LedIndex=NumbArr[WorkMin/10];
  2844  037A  300A               	movlw	10
  2845  037B  00F5               	movwf	___lbdiv@divisor
  2846  037C  087A               	movf	_WorkMin,w
  2847  037D  26B2               	fcall	___lbdiv
  2848  037E  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2849  037F  0084               	movwf	4
  2850  0380  1383               	bcf	3,7	;select IRP bank1
  2851  0381  0800               	movf	0,w
  2852  0382  00AF               	movwf	_LedIndex
  2853  0383  300A               	movlw	10
  2854  0384  01B0               	clrf	_LedIndex+1
  2855                           
  2856                           ;LED.c: 249: LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
  2857  0385  00F5               	movwf	___lbmod@divisor
  2858  0386  087A               	movf	_WorkMin,w
  2859  0387  2696               	fcall	___lbmod
  2860  0388  2391               	fcall	PL2	;call to abstracted procedure
  2861                           
  2862                           ;LED.c: 250: LedIndex&=~OffHideNumbArr[6-index];
  2863  0389  30FE               	movlw	254
  2864  038A  00F5               	movwf	___bmul@multiplicand
  2865  038B  083A               	movf	WorkLedPro@index,w
  2866  038C  275F               	fcall	___bmul
  2867  038D  3EBC               	addlw	(low ((_OffHideNumbArr| 0+12)))& (0+255)
  2868  038E  0084               	movwf	4
  2869  038F  1383               	bcf	3,7	;select IRP bank1
  2870  0390  2BA2               	ljmp	PL10	;call to abstracted procedure
  2871  0391                     __end_of_WorkLedPro:	
  2872  0391                     PL2:	
  2873  0391  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  2874  0392  0084               	movwf	4
  2875  0393  0800               	movf	0,w
  2876  0394  00D0               	movwf	??_WorkLedPro
  2877  0395  3007               	movlw	7
  2878  0396  01D1               	clrf	??_WorkLedPro+1
  2879  0397  00FF               	movwf	127
  2880  0398                     u3965:	
  2881  0398  1003               	clrc
  2882  0399  0DD0               	rlf	??_WorkLedPro,f
  2883  039A  0DD1               	rlf	??_WorkLedPro+1,f
  2884  039B  0BFF               	decfsz	127,f
  2885  039C  2B98               	goto	u3965
  2886  039D  0850               	movf	??_WorkLedPro,w
  2887  039E  04AF               	iorwf	_LedIndex,f
  2888  039F  0851               	movf	??_WorkLedPro+1,w
  2889  03A0  04B0               	iorwf	_LedIndex+1,f
  2890  03A1  0008               	return
  2891  03A2                     __end_ofPL2:	
  2892  03A2                     PL10:	
  2893  03A2  0800               	movf	0,w
  2894  03A3  00D0               	movwf	??_WorkLedPro
  2895  03A4  0A84               	incf	4,f
  2896  03A5  0800               	movf	0,w
  2897  03A6  00D1               	movwf	??_WorkLedPro+1
  2898  03A7  09D0               	comf	??_WorkLedPro,f
  2899  03A8  09D1               	comf	??_WorkLedPro+1,f
  2900  03A9  0850               	movf	??_WorkLedPro,w
  2901  03AA  05AF               	andwf	_LedIndex,f
  2902  03AB  0851               	movf	??_WorkLedPro+1,w
  2903  03AC  05B0               	andwf	_LedIndex+1,f
  2904  03AD  0008               	return
  2905  03AE                     __end_ofPL10:	
  2906                           
  2907                           	psect	text13
  2908  075F                     __ptext13:	
  2909 ;; *************** function ___bmul *****************
  2910 ;; Defined at:
  2911 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul8.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  multiplier      1    wreg     unsigned char 
  2914 ;;  multiplicand    1    3[COMMON] unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  multiplier      1    5[COMMON] unsigned char 
  2917 ;;  product         1    4[COMMON] unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      unsigned char 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, status,0
  2922 ;; Tracked objects:
  2923 ;;		On entry : 300/0
  2924 ;;		On exit  : 300/0
  2925 ;;		Unchanged: 300/0
  2926 ;; Data sizes:     COMMON   BANK0   BANK1
  2927 ;;      Params:         1       0       0
  2928 ;;      Locals:         2       0       0
  2929 ;;      Temps:          0       0       0
  2930 ;;      Totals:         3       0       0
  2931 ;;Total ram usage:        3 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    2
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_Sec1sPro
  2938 ;;		_WorkLedPro
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function ___bmul
  2944  075F                     ___bmul:	
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2948                           ;___bmul@multiplier stored from wreg
  2949  075F  00F7               	movwf	___bmul@multiplier
  2950  0760  01F6               	clrf	___bmul@product
  2951  0761                     l5586:	
  2952  0761  0875               	movf	___bmul@multiplicand,w
  2953  0762  1877               	btfsc	___bmul@multiplier,0
  2954  0763  07F6               	addwf	___bmul@product,f
  2955  0764  1003               	clrc
  2956  0765  0DF5               	rlf	___bmul@multiplicand,f
  2957  0766  1003               	clrc
  2958  0767  0CF7               	rrf	___bmul@multiplier,f
  2959  0768  0877               	movf	___bmul@multiplier,w
  2960  0769  1D03               	btfss	3,2
  2961  076A  2F61               	goto	l5586
  2962  076B  0876               	movf	___bmul@product,w
  2963  076C  0008               	return
  2964  076D                     __end_of___bmul:	
  2965                           
  2966                           	psect	text14
  2967  03AE                     __ptext14:	
  2968 ;; *************** function _USBLedPro *****************
  2969 ;; Defined at:
  2970 ;;		line 154 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 300/0
  2981 ;;		On exit  : 300/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMMON   BANK0   BANK1
  2984 ;;      Params:         0       0       0
  2985 ;;      Locals:         0       0       0
  2986 ;;      Temps:          0       3       0
  2987 ;;      Totals:         0       3       0
  2988 ;;Total ram usage:        3 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		___lbdiv
  2993 ;;		___lbmod
  2994 ;; This function is called by:
  2995 ;;		_DisplayPro
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _USBLedPro
  3001  03AE                     _USBLedPro:	
  3002                           
  3003                           ;LED.c: 156: static unsigned char index=0;
  3004                           ;LED.c: 157: static unsigned char cnt=0;
  3005                           ;LED.c: 159: if(USBFlag&&!WorkFlag&&!OnOffFlag)
  3006                           
  3007                           ;incstack = 0
  3008                           ; Regs used in _USBLedPro: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3009  03AE  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3010  03AF  1971               	btfsc	_WorkFlag/(0+8),_WorkFlag& (0+7)
  3011  03B0  2C00               	goto	l6638
  3012  03B1  1B70               	btfsc	_OnOffFlag/(0+8),_OnOffFlag& (0+7)
  3013  03B2  2C00               	goto	l6638
  3014  03B3  3028               	movlw	40
  3015                           
  3016                           ;LED.c: 160: {
  3017                           ;LED.c: 161: cnt++;
  3018  03B4  0ABC               	incf	USBLedPro@cnt,f
  3019                           
  3020                           ;LED.c: 162: if(cnt>=40)
  3021  03B5  023C               	subwf	USBLedPro@cnt,w
  3022  03B6  1C03               	skipc
  3023  03B7  2BBE               	goto	l6624
  3024  03B8  300B               	movlw	11
  3025                           
  3026                           ;LED.c: 163: {
  3027                           ;LED.c: 164: cnt=0;
  3028  03B9  01BC               	clrf	USBLedPro@cnt
  3029                           
  3030                           ;LED.c: 165: index++;
  3031  03BA  0ABD               	incf	USBLedPro@index,f
  3032                           
  3033                           ;LED.c: 166: if(index>=11)
  3034  03BB  023D               	subwf	USBLedPro@index,w
  3035  03BC  1803               	btfsc	3,0
  3036                           
  3037                           ;LED.c: 167: {
  3038                           ;LED.c: 168: index=0;
  3039  03BD  01BD               	clrf	USBLedPro@index
  3040  03BE                     l6624:	
  3041                           
  3042                           ;LED.c: 169: }
  3043                           ;LED.c: 170: }
  3044                           ;LED.c: 171: if(BatPercent<99)
  3045  03BE  3063               	movlw	99
  3046  03BF  0249               	subwf	_BatPercent,w
  3047                           
  3048                           ;LED.c: 172: {
  3049                           ;LED.c: 173: LedIndex=NumbArr[BatPercent/10];
  3050  03C0  300A               	movlw	10
  3051  03C1  1803               	skipnc
  3052  03C2  2BE9               	goto	L9
  3053  03C3  00F5               	movwf	___lbdiv@divisor
  3054  03C4  0849               	movf	_BatPercent,w
  3055  03C5  26B2               	fcall	___lbdiv
  3056                           
  3057                           ;LED.c: 174: LedIndex|=((unsigned int)NumbArr[BatPercent%10]&~HideNumbArr[index])<<7;
  3058  03C6  2403               	fcall	PL6	;call to abstracted procedure
  3059  03C7  2696               	fcall	___lbmod
  3060  03C8  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  3061  03C9  0084               	movwf	4
  3062  03CA  0800               	movf	0,w
  3063  03CB  00D0               	movwf	??_USBLedPro
  3064  03CC  083D               	movf	USBLedPro@index,w
  3065  03CD  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  3066  03CE  0084               	movwf	4
  3067  03CF  0900               	comf	0,w
  3068  03D0  0550               	andwf	??_USBLedPro,w
  3069  03D1  00D1               	movwf	??_USBLedPro+1
  3070  03D2  3007               	movlw	7
  3071  03D3  01D2               	clrf	??_USBLedPro+2
  3072  03D4  00FF               	movwf	127
  3073  03D5                     u4105:	
  3074  03D5  1003               	clrc
  3075  03D6  0DD1               	rlf	??_USBLedPro+1,f
  3076  03D7  0DD2               	rlf	??_USBLedPro+2,f
  3077  03D8  0BFF               	decfsz	127,f
  3078  03D9  2BD5               	goto	u4105
  3079  03DA  0851               	movf	??_USBLedPro+1,w
  3080  03DB  04AF               	iorwf	_LedIndex,f
  3081  03DC  0852               	movf	??_USBLedPro+2,w
  3082  03DD  04B0               	iorwf	_LedIndex+1,f
  3083                           
  3084                           ;LED.c: 175: LedIndex&=~HideNumbArr[index];
  3085  03DE  083D               	movf	USBLedPro@index,w
  3086  03DF  3EBE               	addlw	(low (_HideNumbArr| 0))& (0+255)
  3087  03E0  0084               	movwf	4
  3088  03E1  0900               	comf	0,w
  3089  03E2  00D0               	movwf	??_USBLedPro
  3090  03E3  01D1               	clrf	??_USBLedPro+1
  3091  03E4  09D1               	comf	??_USBLedPro+1,f
  3092  03E5  05AF               	andwf	_LedIndex,f
  3093  03E6  0851               	movf	??_USBLedPro+1,w
  3094  03E7  05B0               	andwf	_LedIndex+1,f
  3095                           
  3096                           ;LED.c: 176: }
  3097  03E8  0008               	return
  3098  03E9                     L9:	
  3099                           
  3100                           ;LED.c: 177: else
  3101                           ;LED.c: 178: {
  3102                           ;LED.c: 179: index=0;
  3103  03E9  01BD               	clrf	USBLedPro@index
  3104                           
  3105                           ;LED.c: 180: LedIndex=NumbArr[BatPercent/10];
  3106  03EA  00F5               	movwf	___lbdiv@divisor
  3107  03EB  0849               	movf	_BatPercent,w
  3108  03EC  26B2               	fcall	___lbdiv
  3109                           
  3110                           ;LED.c: 181: LedIndex|=NumbArr[BatPercent%10]<<7;
  3111  03ED  2403               	fcall	PL6	;call to abstracted procedure
  3112  03EE  2696               	fcall	___lbmod
  3113  03EF  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  3114  03F0  0084               	movwf	4
  3115  03F1  0800               	movf	0,w
  3116  03F2  00D0               	movwf	??_USBLedPro
  3117  03F3  3007               	movlw	7
  3118  03F4  01D1               	clrf	??_USBLedPro+1
  3119  03F5  00FF               	movwf	127
  3120  03F6                     u4115:	
  3121  03F6  1003               	clrc
  3122  03F7  0DD0               	rlf	??_USBLedPro,f
  3123  03F8  0DD1               	rlf	??_USBLedPro+1,f
  3124  03F9  0BFF               	decfsz	127,f
  3125  03FA  2BF6               	goto	u4115
  3126  03FB  0850               	movf	??_USBLedPro,w
  3127  03FC  04AF               	iorwf	_LedIndex,f
  3128  03FD  0851               	movf	??_USBLedPro+1,w
  3129  03FE  04B0               	iorwf	_LedIndex+1,f
  3130  03FF  0008               	return
  3131  0400                     l6638:	
  3132                           
  3133                           ;LED.c: 185: else
  3134                           ;LED.c: 186: {
  3135                           ;LED.c: 187: index=0;
  3136  0400  01BD               	clrf	USBLedPro@index
  3137                           
  3138                           ;LED.c: 188: cnt=0;
  3139  0401  01BC               	clrf	USBLedPro@cnt
  3140  0402  0008               	return
  3141  0403                     __end_of_USBLedPro:	
  3142  0403                     PL6:	
  3143  0403  3EC9               	addlw	(low (_NumbArr| 0))& (0+255)
  3144  0404  0084               	movwf	4
  3145  0405  1383               	bcf	3,7	;select IRP bank1
  3146  0406  0800               	movf	0,w
  3147  0407  00AF               	movwf	_LedIndex
  3148  0408  300A               	movlw	10
  3149  0409  01B0               	clrf	_LedIndex+1
  3150  040A  00F5               	movwf	___lbmod@divisor
  3151  040B  0849               	movf	_BatPercent,w
  3152  040C  0008               	return
  3153  040D                     __end_ofPL6:	
  3154                           
  3155                           	psect	text15
  3156  0696                     __ptext15:	
  3157 ;; *************** function ___lbmod *****************
  3158 ;; Defined at:
  3159 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbmod.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  dividend        1    wreg     unsigned char 
  3162 ;;  divisor         1    3[COMMON] unsigned char 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  dividend        1    5[COMMON] unsigned char 
  3165 ;;  rem             1    7[COMMON] unsigned char 
  3166 ;;  counter         1    6[COMMON] unsigned char 
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      unsigned char 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2, status,0
  3171 ;; Tracked objects:
  3172 ;;		On entry : B00/0
  3173 ;;		On exit  : B00/0
  3174 ;;		Unchanged: B00/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1
  3176 ;;      Params:         1       0       0
  3177 ;;      Locals:         3       0       0
  3178 ;;      Temps:          1       0       0
  3179 ;;      Totals:         5       0       0
  3180 ;;Total ram usage:        5 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    2
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_WorkLedPro
  3187 ;;		_USBLedPro
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function ___lbmod
  3193  0696                     ___lbmod:	
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3197                           ;___lbmod@dividend stored from wreg
  3198  0696  00F7               	movwf	___lbmod@dividend
  3199  0697  3008               	movlw	8
  3200  0698  00F8               	movwf	___lbmod@counter
  3201  0699  01F9               	clrf	___lbmod@rem
  3202  069A                     l5626:	
  3203  069A  0877               	movf	___lbmod@dividend,w
  3204  069B  00F6               	movwf	??___lbmod
  3205  069C  3007               	movlw	7
  3206  069D  1003               	clrc
  3207  069E                     L10:	
  3208  069E  0CF6               	rrf	??___lbmod,f
  3209  069F  3EFF               	addlw	-1
  3210  06A0  1003               	clrc
  3211  06A1  1D03               	skipz
  3212  06A2  2E9E               	goto	L10
  3213  06A3  0D79               	rlf	___lbmod@rem,w
  3214  06A4  0476               	iorwf	??___lbmod,w
  3215  06A5  00F9               	movwf	___lbmod@rem
  3216  06A6  1003               	clrc
  3217  06A7  0DF7               	rlf	___lbmod@dividend,f
  3218  06A8  0875               	movf	___lbmod@divisor,w
  3219  06A9  0279               	subwf	___lbmod@rem,w
  3220  06AA  1C03               	skipc
  3221  06AB  2EAE               	goto	l5634
  3222  06AC  0875               	movf	___lbmod@divisor,w
  3223  06AD  02F9               	subwf	___lbmod@rem,f
  3224  06AE                     l5634:	
  3225  06AE  0BF8               	decfsz	___lbmod@counter,f
  3226  06AF  2E9A               	goto	l5626
  3227  06B0  0879               	movf	___lbmod@rem,w
  3228  06B1  0008               	return
  3229  06B2                     __end_of___lbmod:	
  3230                           
  3231                           	psect	text16
  3232  06B2                     __ptext16:	
  3233 ;; *************** function ___lbdiv *****************
  3234 ;; Defined at:
  3235 ;;		line 4 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lbdiv.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  dividend        1    wreg     unsigned char 
  3238 ;;  divisor         1    3[COMMON] unsigned char 
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  dividend        1    4[COMMON] unsigned char 
  3241 ;;  quotient        1    6[COMMON] unsigned char 
  3242 ;;  counter         1    5[COMMON] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      unsigned char 
  3245 ;; Registers used:
  3246 ;;		wreg, status,2, status,0
  3247 ;; Tracked objects:
  3248 ;;		On entry : 300/0
  3249 ;;		On exit  : 300/0
  3250 ;;		Unchanged: 300/0
  3251 ;; Data sizes:     COMMON   BANK0   BANK1
  3252 ;;      Params:         1       0       0
  3253 ;;      Locals:         3       0       0
  3254 ;;      Temps:          0       0       0
  3255 ;;      Totals:         4       0       0
  3256 ;;Total ram usage:        4 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    2
  3259 ;; This function calls:
  3260 ;;		Nothing
  3261 ;; This function is called by:
  3262 ;;		_WorkLedPro
  3263 ;;		_USBLedPro
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function ___lbdiv
  3269  06B2                     ___lbdiv:	
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3273                           ;___lbdiv@dividend stored from wreg
  3274  06B2  00F6               	movwf	___lbdiv@dividend
  3275  06B3  01F8               	clrf	___lbdiv@quotient
  3276  06B4  0875               	movf	___lbdiv@divisor,w
  3277  06B5  1903               	btfsc	3,2
  3278  06B6  2ECB               	goto	l5618
  3279  06B7  01F7               	clrf	___lbdiv@counter
  3280  06B8                     l5604:	
  3281  06B8  0AF7               	incf	___lbdiv@counter,f
  3282  06B9  1BF5               	btfsc	___lbdiv@divisor,7
  3283  06BA  2EBE               	goto	l4480
  3284  06BB  1003               	clrc
  3285  06BC  0DF5               	rlf	___lbdiv@divisor,f
  3286  06BD  2EB8               	goto	l5604
  3287  06BE                     l4480:	
  3288  06BE  1003               	clrc
  3289  06BF  0DF8               	rlf	___lbdiv@quotient,f
  3290  06C0  0875               	movf	___lbdiv@divisor,w
  3291  06C1  0276               	subwf	___lbdiv@dividend,w
  3292  06C2  1C03               	skipc
  3293  06C3  2EC8               	goto	L11
  3294  06C4  0875               	movf	___lbdiv@divisor,w
  3295  06C5  02F6               	subwf	___lbdiv@dividend,f
  3296  06C6  1478               	bsf	___lbdiv@quotient,0
  3297  06C7  1003               	clrc
  3298  06C8                     L11:	
  3299  06C8  0CF5               	rrf	___lbdiv@divisor,f
  3300  06C9  0BF7               	decfsz	___lbdiv@counter,f
  3301  06CA  2EBE               	goto	l4480
  3302  06CB                     l5618:	
  3303  06CB  0878               	movf	___lbdiv@quotient,w
  3304  06CC  0008               	return
  3305  06CD                     __end_of___lbdiv:	
  3306                           
  3307                           	psect	text17
  3308  04AF                     __ptext17:	
  3309 ;; *************** function _LockPro *****************
  3310 ;; Defined at:
  3311 ;;		line 255 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3320 ;; Tracked objects:
  3321 ;;		On entry : 300/0
  3322 ;;		On exit  : 300/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1
  3325 ;;      Params:         0       0       0
  3326 ;;      Locals:         0       0       0
  3327 ;;      Temps:          2       0       0
  3328 ;;      Totals:         2       0       0
  3329 ;;Total ram usage:        2 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    2
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_DisplayPro
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           
  3340                           ;psect for function _LockPro
  3341  04AF                     _LockPro:	
  3342                           
  3343                           ;LED.c: 257: static unsigned char SwitchCnt=0,LockSwitchCnt=0;
  3344                           ;LED.c: 258: static unsigned char Ledcnt=0;
  3345                           ;LED.c: 259: static bit LedSwitchFlag=0;
  3346                           ;LED.c: 260: if(!USBFlag)
  3347                           
  3348                           ;incstack = 0
  3349                           ; Regs used in _LockPro: [wreg-fsr0h+status,2+status,0+btemp+1]
  3350  04AF  19F1               	btfsc	_USBFlag/(0+8),_USBFlag& (0+7)
  3351  04B0  0008               	return
  3352                           
  3353                           ;LED.c: 261: {
  3354                           ;LED.c: 262: if(LockSta.LockStart||LockSta.UnlockStart)
  3355  04B1  1833               	btfsc	_LockSta,0
  3356  04B2  2CB5               	goto	l5832
  3357  04B3  1DB3               	btfss	_LockSta,3
  3358  04B4  2CDA               	goto	l5850
  3359  04B5                     l5832:	
  3360  04B5  3064               	movlw	100
  3361                           
  3362                           ;LED.c: 263: {
  3363                           ;LED.c: 264: SwitchCnt++;
  3364  04B6  0AB8               	incf	LockPro@SwitchCnt,f
  3365                           
  3366                           ;LED.c: 265: if(SwitchCnt>=100)
  3367  04B7  0238               	subwf	LockPro@SwitchCnt,w
  3368  04B8  1C03               	skipc
  3369  04B9  2CBF               	goto	l5842
  3370                           
  3371                           ;LED.c: 266: {
  3372                           ;LED.c: 267: SwitchCnt=0;
  3373  04BA  01B8               	clrf	LockPro@SwitchCnt
  3374                           
  3375                           ;LED.c: 268: if(LockNumb>0)
  3376  04BB  0841               	movf	_LockNumb,w
  3377  04BC  1903               	btfsc	3,2
  3378  04BD  2CBF               	goto	l5842
  3379                           
  3380                           ;LED.c: 269: {
  3381                           ;LED.c: 270: LockNumb--;
  3382  04BE  03C1               	decf	_LockNumb,f
  3383  04BF                     l5842:	
  3384                           
  3385                           ;LED.c: 271: }
  3386                           ;LED.c: 272: }
  3387                           ;LED.c: 273: LedIndex=NumbArr[0];
  3388  04BF  1683               	bsf	3,5	;RP0=1, select bank1
  3389  04C0  0849               	movf	_NumbArr^(0+128),w
  3390  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3391  04C2  00AF               	movwf	_LedIndex
  3392  04C3  01B0               	clrf	_LedIndex+1
  3393                           
  3394                           ;LED.c: 274: LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
  3395  04C4  0841               	movf	_LockNumb,w
  3396  04C5  3ECA               	addlw	(low ((_NumbArr| 0+1)))& (0+255)
  3397  04C6  0084               	movwf	4
  3398  04C7  1383               	bcf	3,7	;select IRP bank1
  3399  04C8  0800               	movf	0,w
  3400  04C9  00F5               	movwf	??_LockPro
  3401  04CA  3007               	movlw	7
  3402  04CB  01F6               	clrf	??_LockPro+1
  3403  04CC  00FF               	movwf	127
  3404  04CD                     u2355:	
  3405  04CD  1003               	clrc
  3406  04CE  0DF5               	rlf	??_LockPro,f
  3407  04CF  0DF6               	rlf	??_LockPro+1,f
  3408  04D0  0BFF               	decfsz	127,f
  3409  04D1  2CCD               	goto	u2355
  3410  04D2  0875               	movf	??_LockPro,w
  3411  04D3  04AF               	iorwf	_LedIndex,f
  3412  04D4  0876               	movf	??_LockPro+1,w
  3413  04D5  04B0               	iorwf	_LedIndex+1,f
  3414                           
  3415                           ;LED.c: 275: if(LockSta.UnlockStart)
  3416  04D6  1DB3               	btfss	_LockSta,3
  3417  04D7  2CDB               	goto	l5852
  3418                           
  3419                           ;LED.c: 276: {
  3420                           ;LED.c: 277: LedIndex|=0x8000;
  3421  04D8  17B0               	bsf	_LedIndex+1,7
  3422  04D9  2CDB               	goto	l5852
  3423  04DA                     l5850:	
  3424                           
  3425                           ;LED.c: 280: else
  3426                           ;LED.c: 281: {
  3427                           ;LED.c: 282: SwitchCnt=0;
  3428  04DA  01B8               	clrf	LockPro@SwitchCnt
  3429  04DB                     l5852:	
  3430                           
  3431                           ;LED.c: 283: }
  3432                           ;LED.c: 284: if(LockSta.LockEnd||LockSta.UnlockFail)
  3433  04DB  1933               	btfsc	_LockSta,2
  3434  04DC  2CDF               	goto	l5856
  3435  04DD  1E33               	btfss	_LockSta,4
  3436  04DE  2CF6               	goto	l5874
  3437  04DF                     l5856:	
  3438  04DF  3023               	movlw	35
  3439                           
  3440                           ;LED.c: 285: {
  3441                           ;LED.c: 286: LockSwitchCnt++;
  3442  04E0  0AB7               	incf	LockPro@LockSwitchCnt,f
  3443                           
  3444                           ;LED.c: 287: if(LockSwitchCnt>=35)
  3445  04E1  0237               	subwf	LockPro@LockSwitchCnt,w
  3446  04E2  1C03               	skipc
  3447  04E3  2CF0               	goto	l3078
  3448  04E4  3002               	movlw	(0+1) shl (LockPro@LedSwitchFlag& (0+7))
  3449                           
  3450                           ;LED.c: 288: {
  3451                           ;LED.c: 289: LockSwitchCnt=0;
  3452  04E5  01B7               	clrf	LockPro@LockSwitchCnt
  3453                           
  3454                           ;LED.c: 290: LedSwitchFlag=!LedSwitchFlag;
  3455  04E6  06F0               	xorwf	LockPro@LedSwitchFlag/(0+8),f
  3456                           
  3457                           ;LED.c: 291: if(!LedSwitchFlag)
  3458  04E7  18F0               	btfsc	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3459  04E8  2CF0               	goto	l3078
  3460  04E9  3004               	movlw	4
  3461                           
  3462                           ;LED.c: 292: {
  3463                           ;LED.c: 293: Ledcnt++;
  3464  04EA  0AB6               	incf	LockPro@Ledcnt,f
  3465                           
  3466                           ;LED.c: 294: if(Ledcnt>=4)
  3467  04EB  0236               	subwf	LockPro@Ledcnt,w
  3468  04EC  1C03               	skipc
  3469  04ED  2CF0               	goto	l3078
  3470                           
  3471                           ;LED.c: 295: {
  3472                           ;LED.c: 296: LockSta.LockEnd=0;
  3473  04EE  1133               	bcf	_LockSta,2
  3474                           
  3475                           ;LED.c: 297: LockSta.UnlockFail=0;
  3476  04EF  1233               	bcf	_LockSta,4
  3477  04F0                     l3078:	
  3478                           
  3479                           ;LED.c: 298: }
  3480                           ;LED.c: 299: }
  3481                           ;LED.c: 300: }
  3482                           ;LED.c: 301: if(LedSwitchFlag)
  3483  04F0  1CF0               	btfss	LockPro@LedSwitchFlag/(0+8),LockPro@LedSwitchFlag& (0+7)
  3484  04F1  0008               	return
  3485                           
  3486                           ;LED.c: 302: {
  3487                           ;LED.c: 303: LedIndex=0x8000;
  3488  04F2  3080               	movlw	128
  3489  04F3  01AF               	clrf	_LedIndex
  3490  04F4  00B0               	movwf	_LedIndex+1
  3491  04F5  0008               	return
  3492  04F6                     l5874:	
  3493                           
  3494                           ;LED.c: 306: else
  3495                           ;LED.c: 307: {
  3496                           ;LED.c: 308: Ledcnt=0;
  3497  04F6  01B6               	clrf	LockPro@Ledcnt
  3498                           
  3499                           ;LED.c: 309: LockSwitchCnt=0;
  3500  04F7  01B7               	clrf	LockPro@LockSwitchCnt
  3501  04F8  0008               	return
  3502  04F9                     __end_of_LockPro:	
  3503                           
  3504                           	psect	text18
  3505  0730                     __ptext18:	
  3506 ;; *************** function _ErrPro *****************
  3507 ;; Defined at:
  3508 ;;		line 314 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2, status,0
  3517 ;; Tracked objects:
  3518 ;;		On entry : 300/0
  3519 ;;		On exit  : 300/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1
  3522 ;;      Params:         0       0       0
  3523 ;;      Locals:         0       0       0
  3524 ;;      Temps:          0       0       0
  3525 ;;      Totals:         0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    2
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_DisplayPro
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _ErrPro
  3538  0730                     _ErrPro:	
  3539                           
  3540                           ;LED.c: 316: static unsigned char SwitchCnt=0;
  3541                           ;LED.c: 317: static bit LedSwitchFlag=0;
  3542                           ;LED.c: 318: if(IovFlag)
  3543                           
  3544                           ;incstack = 0
  3545                           ; Regs used in _ErrPro: [wreg+status,2+status,0]
  3546  0730  1E71               	btfss	_IovFlag/(0+8),_IovFlag& (0+7)
  3547  0731  2F40               	goto	l5890
  3548  0732  3023               	movlw	35
  3549                           
  3550                           ;LED.c: 319: {
  3551                           ;LED.c: 320: SwitchCnt++;
  3552  0733  0AB5               	incf	ErrPro@SwitchCnt,f
  3553                           
  3554                           ;LED.c: 321: if(SwitchCnt>=35)
  3555  0734  0235               	subwf	ErrPro@SwitchCnt,w
  3556  0735  1C03               	skipc
  3557  0736  2F3A               	goto	l5886
  3558  0737  3001               	movlw	(0+1) shl (ErrPro@LedSwitchFlag& (0+7))
  3559                           
  3560                           ;LED.c: 322: {
  3561                           ;LED.c: 323: SwitchCnt=0;
  3562  0738  01B5               	clrf	ErrPro@SwitchCnt
  3563                           
  3564                           ;LED.c: 324: LedSwitchFlag=!LedSwitchFlag;
  3565  0739  06F0               	xorwf	ErrPro@LedSwitchFlag/(0+8),f
  3566  073A                     l5886:	
  3567                           
  3568                           ;LED.c: 326: }
  3569                           ;LED.c: 327: if(LedSwitchFlag)
  3570  073A  1C70               	btfss	ErrPro@LedSwitchFlag/(0+8),ErrPro@LedSwitchFlag& (0+7)
  3571  073B  0008               	return
  3572                           
  3573                           ;LED.c: 328: {
  3574                           ;LED.c: 329: LedIndex=0x4000;
  3575  073C  3040               	movlw	64
  3576  073D  01AF               	clrf	_LedIndex
  3577  073E  00B0               	movwf	_LedIndex+1
  3578  073F  0008               	return
  3579  0740                     l5890:	
  3580                           
  3581                           ;LED.c: 332: else
  3582                           ;LED.c: 333: {
  3583                           ;LED.c: 334: SwitchCnt=0;
  3584  0740  01B5               	clrf	ErrPro@SwitchCnt
  3585  0741  0008               	return
  3586  0742                     __end_of_ErrPro:	
  3587                           
  3588                           	psect	text19
  3589  057D                     __ptext19:	
  3590 ;; *************** function _DisplayIcon *****************
  3591 ;; Defined at:
  3592 ;;		line 124 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  index           2    3[COMMON] unsigned int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  Mask            2    0[BANK0 ] unsigned int 
  3597 ;;  i               1    2[BANK0 ] unsigned char 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3602 ;; Tracked objects:
  3603 ;;		On entry : 300/0
  3604 ;;		On exit  : B00/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1
  3607 ;;      Params:         2       0       0
  3608 ;;      Locals:         0       3       0
  3609 ;;      Temps:          2       0       0
  3610 ;;      Totals:         4       3       0
  3611 ;;Total ram usage:        7 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    2
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_DisplayPro
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _DisplayIcon
  3623  057D                     _DisplayIcon:	
  3624  057D                     l6522:	
  3625                           ;incstack = 0
  3626                           ; Regs used in _DisplayIcon: [wreg-fsr0h+status,2+status,0+pclath]
  3627                           
  3628                           
  3629                           ;LED.c: 127: unsigned int Mask=0x01;
  3630  057D  01D0               	clrf	DisplayIcon@Mask
  3631  057E  0AD0               	incf	DisplayIcon@Mask,f
  3632  057F  01D1               	clrf	DisplayIcon@Mask+1
  3633                           
  3634                           ;LED.c: 129: for(i=0;i<16;i++)
  3635  0580  01D2               	clrf	DisplayIcon@i
  3636  0581                     l6530:	
  3637                           
  3638                           ;LED.c: 130: {
  3639                           ;LED.c: 131: if(index&Mask)
  3640  0581  0850               	movf	DisplayIcon@Mask,w
  3641  0582  0575               	andwf	DisplayIcon@index,w
  3642  0583  00F7               	movwf	??_DisplayIcon
  3643  0584  0851               	movf	DisplayIcon@Mask+1,w
  3644  0585  0576               	andwf	DisplayIcon@index+1,w
  3645  0586  00F8               	movwf	??_DisplayIcon+1
  3646  0587  0477               	iorwf	??_DisplayIcon,w
  3647                           
  3648                           ;LED.c: 132: {
  3649                           ;LED.c: 133: LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
  3650  0588  3001               	movlw	1
  3651  0589  00F7               	movwf	??_DisplayIcon
  3652  058A  1903               	btfsc	3,2
  3653  058B  2D94               	goto	L12
  3654  058C  25A5               	fcall	PL8	;call to abstracted procedure
  3655  058D  25B2               	fcall	PL32	;call to abstracted procedure
  3656  058E  271A               	fcall	stringdir
  3657  058F  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3658  0590  0084               	movwf	4
  3659  0591  0878               	movf	??_DisplayIcon+1,w
  3660  0592  0480               	iorwf	0,f
  3661                           
  3662                           ;LED.c: 134: }
  3663  0593  2D9C               	goto	l6536
  3664  0594                     L12:	
  3665                           ;LED.c: 135: else
  3666                           ;LED.c: 136: {
  3667                           ;LED.c: 137: LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
  3668                           
  3669  0594  25A5               	fcall	PL8	;call to abstracted procedure
  3670  0595  3AFF               	xorlw	255
  3671  0596  25B2               	fcall	PL32	;call to abstracted procedure
  3672  0597  271A               	fcall	stringdir
  3673  0598  3E20               	addlw	(low (_LEDArrMap| 0))& (0+255)
  3674  0599  0084               	movwf	4
  3675  059A  0878               	movf	??_DisplayIcon+1,w
  3676  059B  0580               	andwf	0,f
  3677  059C                     l6536:	
  3678  059C  3010               	movlw	16
  3679                           
  3680                           ;LED.c: 138: }
  3681                           ;LED.c: 140: Mask<<=1;
  3682  059D  1003               	clrc
  3683  059E  0DD0               	rlf	DisplayIcon@Mask,f
  3684  059F  0DD1               	rlf	DisplayIcon@Mask+1,f
  3685  05A0  0AD2               	incf	DisplayIcon@i,f
  3686  05A1  0252               	subwf	DisplayIcon@i,w
  3687  05A2  1803               	btfsc	3,0
  3688  05A3  0008               	return
  3689  05A4  2D81               	goto	l6530
  3690  05A5                     __end_of_DisplayIcon:	
  3691  05A5                     PL8:	
  3692  05A5  0852               	movf	DisplayIcon@i,w
  3693  05A6  3EA0               	addlw	(low (_LEDSeg2| 0))& (0+255)
  3694  05A7  0084               	movwf	4
  3695  05A8  1383               	bcf	3,7	;select IRP bank1
  3696  05A9  0A00               	incf	0,w
  3697  05AA  2DAD               	goto	u3864
  3698  05AB                     u3865:	
  3699  05AB  1003               	clrc
  3700  05AC  0DF7               	rlf	??_DisplayIcon,f
  3701  05AD                     u3864:	
  3702  05AD  3EFF               	addlw	-1
  3703  05AE  1D03               	skipz
  3704  05AF  2DAB               	goto	u3865
  3705  05B0  0877               	movf	??_DisplayIcon,w
  3706  05B1  0008               	return
  3707  05B2                     __end_ofPL8:	
  3708  05B2                     PL32:	
  3709  05B2  00F8               	movwf	??_DisplayIcon+1
  3710  05B3  0852               	movf	DisplayIcon@i,w
  3711  05B4  3E01               	addlw	low ((_LEDSeg1-__stringbase)| (0+32768))
  3712  05B5  0084               	movwf	4
  3713  05B6  0008               	return
  3714  05B7                     __end_ofPL32:	
  3715                           
  3716                           	psect	text20
  3717  0463                     __ptext20:	
  3718 ;; *************** function _ADCPro *****************
  3719 ;; Defined at:
  3720 ;;		line 10 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 300/0
  3731 ;;		On exit  : 300/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1
  3734 ;;      Params:         0       0       0
  3735 ;;      Locals:         0       0       0
  3736 ;;      Temps:          0       0       0
  3737 ;;      Totals:         0       0       0
  3738 ;;Total ram usage:        0 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    4
  3741 ;; This function calls:
  3742 ;;		_ADCRead
  3743 ;; This function is called by:
  3744 ;;		_Apply
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           
  3749                           ;psect for function _ADCPro
  3750  0463                     _ADCPro:	
  3751                           
  3752                           ;ADC.c: 12: switch (ADCState)
  3753                           
  3754                           ;incstack = 0
  3755                           ; Regs used in _ADCPro: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3756  0463  2C73               	goto	l6692
  3757  0464                     l6684:	
  3758                           
  3759                           ;ADC.c: 15: ADCRead(0b00001111,ADCVal);
  3760  0464  304A               	movlw	(low (_ADCVal| 0))& (0+255)
  3761  0465  00E5               	movwf	ADCRead@Val
  3762  0466  300F               	movlw	15
  3763  0467  21D0               	fcall	_ADCRead
  3764                           
  3765                           ;ADC.c: 16: break;
  3766  0468  2C7B               	goto	l571
  3767  0469                     l6686:	
  3768                           
  3769                           ;ADC.c: 19: ADCRead(0b00000010,ADCVal+1);
  3770  0469  304C               	movlw	(low ((_ADCVal| 0+2)))& (0+255)
  3771  046A  00E5               	movwf	ADCRead@Val
  3772  046B  3002               	movlw	2
  3773  046C  21D0               	fcall	_ADCRead
  3774                           
  3775                           ;ADC.c: 20: break;
  3776  046D  2C7B               	goto	l571
  3777  046E                     l6688:	
  3778                           
  3779                           ;ADC.c: 23: ADCRead(0b00000001,ADCVal+2);
  3780  046E  304E               	movlw	(low ((_ADCVal| 0+4)))& (0+255)
  3781  046F  00E5               	movwf	ADCRead@Val
  3782  0470  3001               	movlw	1
  3783  0471  21D0               	fcall	_ADCRead
  3784                           
  3785                           ;ADC.c: 24: break;
  3786  0472  2C7B               	goto	l571
  3787  0473                     l6692:	
  3788                           
  3789                           ; Switch size 1, requested type "space"
  3790                           ; Number of cases is 3, Range of values is 0 to 2
  3791                           ; switch strategies available:
  3792                           ; Name         Instructions Cycles
  3793                           ; direct_byte            9     6 (fixed)
  3794                           ; simple_byte           10     6 (average)
  3795                           ; jumptable            260     6 (fixed)
  3796                           ;	Chosen strategy is direct_byte
  3797  0473  2298               	fcall	PL34	;call to abstracted procedure
  3798  0474  1803               	skipnc
  3799  0475  2C7B               	goto	l571
  3800  0476  3000               	movlw	high S7144
  3801  0477  008A               	movwf	10
  3802  0478  3001               	movlw	low S7144
  3803  0479  0704               	addwf	4,w
  3804  047A  0082               	movwf	2
  3805  047B                     l571:	
  3806                           
  3807                           ;ADC.c: 26: if(SystemONFlag==0)
  3808  047B  1B71               	btfsc	_SystemONFlag/(0+8),_SystemONFlag& (0+7)
  3809  047C  2C92               	goto	l6704
  3810                           
  3811                           ;ADC.c: 27: {
  3812                           ;ADC.c: 28: if(ADCVal[2]<134)
  3813  047D  3000               	movlw	0
  3814  047E  024F               	subwf	_ADCVal+5,w
  3815  047F  3086               	movlw	134
  3816  0480  1903               	skipnz
  3817  0481  024E               	subwf	_ADCVal+4,w
  3818  0482  1803               	skipnc
  3819  0483  2C86               	goto	l6698
  3820                           
  3821                           ;ADC.c: 29: {
  3822                           ;ADC.c: 30: BatPercent=0;
  3823  0484  01C9               	clrf	_BatPercent
  3824                           
  3825                           ;ADC.c: 31: }
  3826  0485  2C92               	goto	l6704
  3827  0486                     l6698:	
  3828                           
  3829                           ;ADC.c: 32: else if(ADCVal[2]>175)
  3830  0486  3000               	movlw	0
  3831  0487  024F               	subwf	_ADCVal+5,w
  3832  0488  30B0               	movlw	176
  3833  0489  1903               	skipnz
  3834  048A  024E               	subwf	_ADCVal+4,w
  3835  048B  1C03               	skipc
  3836  048C  2C8F               	goto	l6702
  3837                           
  3838                           ;ADC.c: 33: {
  3839                           ;ADC.c: 34: BatPercent=99;
  3840  048D  3063               	movlw	99
  3841  048E  2C91               	goto	L13
  3842  048F                     l6702:	
  3843                           ;ADC.c: 35: }
  3844                           
  3845                           
  3846                           ;ADC.c: 36: else
  3847                           ;ADC.c: 37: {
  3848                           ;ADC.c: 38: BatPercent=ADCVal[2]-125;
  3849  048F  084E               	movf	_ADCVal+4,w
  3850  0490  3E83               	addlw	131
  3851  0491                     L13:	
  3852  0491  00C9               	movwf	_BatPercent
  3853  0492                     l6704:	
  3854                           
  3855                           ;ADC.c: 39: }
  3856                           ;ADC.c: 40: }
  3857                           ;ADC.c: 41: if(ADCVal[2]<125)
  3858  0492  3000               	movlw	0
  3859  0493  024F               	subwf	_ADCVal+5,w
  3860  0494  307D               	movlw	125
  3861  0495  1903               	skipnz
  3862  0496  024E               	subwf	_ADCVal+4,w
  3863  0497  1803               	skipnc
  3864  0498  2C9B               	goto	l579
  3865                           
  3866                           ;ADC.c: 42: {
  3867                           ;ADC.c: 43: LowBatFlag=1;
  3868  0499  16F1               	bsf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  3869                           
  3870                           ;ADC.c: 44: }
  3871  049A  2C9C               	goto	l6708
  3872  049B                     l579:	
  3873                           
  3874                           ;ADC.c: 45: else
  3875                           ;ADC.c: 46: {
  3876                           ;ADC.c: 47: LowBatFlag=0;
  3877  049B  12F1               	bcf	_LowBatFlag/(0+8),_LowBatFlag& (0+7)
  3878  049C                     l6708:	
  3879                           
  3880                           ;ADC.c: 48: }
  3881                           ;ADC.c: 49: if(ADCVal[1]>29)
  3882  049C  3000               	movlw	0
  3883  049D  024D               	subwf	_ADCVal+3,w
  3884  049E  301E               	movlw	30
  3885  049F  1903               	skipnz
  3886  04A0  024C               	subwf	_ADCVal+2,w
  3887  04A1  1C03               	skipc
  3888  04A2  2CAC               	goto	l6718
  3889  04A3  30C8               	movlw	200
  3890                           
  3891                           ;ADC.c: 50: {
  3892                           ;ADC.c: 51: CurrentCnt++;
  3893  04A4  0AC6               	incf	_CurrentCnt,f
  3894                           
  3895                           ;ADC.c: 52: if(CurrentCnt>=200)
  3896  04A5  0246               	subwf	_CurrentCnt,w
  3897  04A6  1C03               	skipc
  3898  04A7  0008               	return
  3899                           
  3900                           ;ADC.c: 53: {
  3901                           ;ADC.c: 54: CurrentCnt=200;
  3902  04A8  30C8               	movlw	200
  3903  04A9  00C6               	movwf	_CurrentCnt
  3904                           
  3905                           ;ADC.c: 55: IovFlag=1;
  3906  04AA  1671               	bsf	_IovFlag/(0+8),_IovFlag& (0+7)
  3907  04AB  0008               	return
  3908  04AC                     l6718:	
  3909                           
  3910                           ;ADC.c: 58: else
  3911                           ;ADC.c: 59: {
  3912                           ;ADC.c: 60: CurrentCnt=0;
  3913  04AC  01C6               	clrf	_CurrentCnt
  3914                           
  3915                           ;ADC.c: 61: IovFlag=0;
  3916  04AD  1271               	bcf	_IovFlag/(0+8),_IovFlag& (0+7)
  3917  04AE  0008               	return
  3918  04AF                     __end_of_ADCPro:	
  3919                           
  3920                           	psect	swtext1
  3921  0001                     __pswtext1:	
  3922  0001                     S7144:	
  3923  0001  2C64               	ljmp	l6684
  3924  0002  2C69               	ljmp	l6686
  3925  0003  2C6E               	ljmp	l6688
  3926                           
  3927                           	psect	text21
  3928  01D0                     __ptext21:	
  3929 ;; *************** function _ADCRead *****************
  3930 ;; Defined at:
  3931 ;;		line 175 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  ch              1    wreg     unsigned char 
  3934 ;;  Val             1   21[BANK0 ] PTR unsigned int 
  3935 ;;		 -> ADCVal(6), 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  ch              1    0[BANK1 ] unsigned char 
  3938 ;;  ad_temp         2    5[BANK1 ] unsigned int 
  3939 ;;  AD_L            2    3[BANK1 ] unsigned int 
  3940 ;;  AD_H            2    1[BANK1 ] unsigned int 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 300/0
  3947 ;;		On exit  : 300/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1
  3950 ;;      Params:         0       1       0
  3951 ;;      Locals:         0       0       7
  3952 ;;      Temps:          0       4       0
  3953 ;;      Totals:         0       5       7
  3954 ;;Total ram usage:       12 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    3
  3957 ;; This function calls:
  3958 ;;		_ADSample
  3959 ;;		___lldiv
  3960 ;;		___lmul
  3961 ;; This function is called by:
  3962 ;;		_ADCPro
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function _ADCRead
  3968  01D0                     _ADCRead:	
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in _ADCRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3972                           ;ADCRead@ch stored from wreg
  3973  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  3974  01D1  00D3               	movwf	ADCRead@ch^(0+128)
  3975                           
  3976                           ;ADC.c: 177: unsigned int ad_temp,AD_H,AD_L;
  3977                           ;ADC.c: 179: if(ADSample(ch))
  3978  01D2  2701               	fcall	_ADSample
  3979  01D3  3A00               	xorlw	0
  3980  01D4  1903               	skipnz
  3981  01D5  0008               	return
  3982                           
  3983                           ;ADC.c: 180: {
  3984                           ;ADC.c: 181: AD_H=ADRESH;
  3985  01D6  081E               	movf	30,w	;volatile
  3986  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  3987  01D8  00D4               	movwf	ADCRead@AD_H^(0+128)
  3988  01D9  01D5               	clrf	(ADCRead@AD_H+1)^(0+128)
  3989                           
  3990                           ;ADC.c: 182: AD_L=ADRESL;
  3991  01DA  081E               	movf	30,w	;volatile
  3992  01DB  00D6               	movwf	ADCRead@AD_L^(0+128)
  3993  01DC  01D7               	clrf	(ADCRead@AD_L+1)^(0+128)
  3994                           
  3995                           ;ADC.c: 183: ad_temp=(AD_H<<4)|(AD_L>>4);
  3996  01DD  0855               	movf	(ADCRead@AD_H+1)^(0+128),w
  3997  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  3998  01DF  00E7               	movwf	??_ADCRead+1
  3999  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  4000  01E1  0854               	movf	ADCRead@AD_H^(0+128),w
  4001  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  4002  01E3  00E6               	movwf	??_ADCRead
  4003  01E4  30F0               	movlw	240
  4004  01E5  0EE6               	swapf	??_ADCRead,f
  4005  01E6  0EE7               	swapf	??_ADCRead+1,f
  4006  01E7  05E7               	andwf	??_ADCRead+1,f
  4007  01E8  0866               	movf	??_ADCRead,w
  4008  01E9  390F               	andlw	15
  4009  01EA  04E7               	iorwf	??_ADCRead+1,f
  4010  01EB  30F0               	movlw	240
  4011  01EC  05E6               	andwf	??_ADCRead,f
  4012  01ED  0866               	movf	??_ADCRead,w
  4013  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  4014  01EF  00D8               	movwf	ADCRead@ad_temp^(0+128)
  4015  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  4016  01F1  0867               	movf	??_ADCRead+1,w
  4017  01F2  1683               	bsf	3,5	;RP0=1, select bank1
  4018  01F3  00D9               	movwf	(ADCRead@ad_temp+1)^(0+128)
  4019  01F4  0857               	movf	(ADCRead@AD_L+1)^(0+128),w
  4020  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  4021  01F6  00E7               	movwf	??_ADCRead+1
  4022  01F7  1683               	bsf	3,5	;RP0=1, select bank1
  4023  01F8  0856               	movf	ADCRead@AD_L^(0+128),w
  4024  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  4025  01FA  00E6               	movwf	??_ADCRead
  4026  01FB  3004               	movlw	4
  4027  01FC                     u3815:	
  4028  01FC  1003               	clrc
  4029  01FD  0CE7               	rrf	??_ADCRead+1,f
  4030  01FE  0CE6               	rrf	??_ADCRead,f
  4031  01FF  3EFF               	addlw	-1
  4032  0200  1D03               	skipz
  4033  0201  29FC               	goto	u3815
  4034  0202  0866               	movf	??_ADCRead,w
  4035  0203  1683               	bsf	3,5	;RP0=1, select bank1
  4036  0204  04D8               	iorwf	ADCRead@ad_temp^(0+128),f
  4037  0205  1283               	bcf	3,5	;RP0=0, select bank0
  4038  0206  0867               	movf	??_ADCRead+1,w
  4039  0207  1683               	bsf	3,5	;RP0=1, select bank1
  4040  0208  04D9               	iorwf	(ADCRead@ad_temp+1)^(0+128),f
  4041                           
  4042                           ;ADC.c: 184: ADsum += ad_temp;
  4043  0209  0858               	movf	ADCRead@ad_temp^(0+128),w
  4044  020A  1283               	bcf	3,5	;RP0=0, select bank0
  4045  020B  00E6               	movwf	??_ADCRead
  4046  020C  1683               	bsf	3,5	;RP0=1, select bank1
  4047  020D  0859               	movf	(ADCRead@ad_temp+1)^(0+128),w
  4048  020E  1283               	bcf	3,5	;RP0=0, select bank0
  4049  020F  00E7               	movwf	??_ADCRead+1
  4050  0210  01E8               	clrf	??_ADCRead+2
  4051  0211  01E9               	clrf	??_ADCRead+3
  4052  0212  0866               	movf	??_ADCRead,w
  4053  0213  07A5               	addwf	_ADsum,f
  4054  0214  0867               	movf	??_ADCRead+1,w
  4055  0215  1103               	clrz
  4056  0216  1803               	skipnc
  4057  0217  3E01               	addlw	1
  4058  0218  1D03               	btfss	3,2
  4059  0219  07A6               	addwf	_ADsum+1,f
  4060  021A  0868               	movf	??_ADCRead+2,w
  4061  021B  1103               	clrz
  4062  021C  1803               	skipnc
  4063  021D  3E01               	addlw	1
  4064  021E  1D03               	btfss	3,2
  4065  021F  07A7               	addwf	_ADsum+2,f
  4066  0220  0869               	movf	??_ADCRead+3,w
  4067  0221  1103               	clrz
  4068  0222  1803               	skipnc
  4069  0223  3E01               	addlw	1
  4070  0224  1D03               	btfss	3,2
  4071  0225  07A8               	addwf	_ADsum+3,f
  4072  0226  300A               	movlw	10
  4073                           
  4074                           ;ADC.c: 185: ADcnt++;
  4075  0227  0AC7               	incf	_ADcnt,f
  4076                           
  4077                           ;ADC.c: 186: if(ADcnt >= 10)
  4078  0228  0247               	subwf	_ADcnt,w
  4079  0229  1C03               	skipc
  4080  022A  0008               	return
  4081  022B  300A               	movlw	10
  4082                           
  4083                           ;ADC.c: 187: {
  4084                           ;ADC.c: 188: ADcnt = 0;
  4085  022C  01C7               	clrf	_ADcnt
  4086                           
  4087                           ;ADC.c: 189: ADsum /=10;
  4088  022D  00D8               	movwf	___lldiv@divisor
  4089  022E  01D9               	clrf	___lldiv@divisor+1
  4090  022F  01DA               	clrf	___lldiv@divisor+2
  4091  0230  01DB               	clrf	___lldiv@divisor+3
  4092  0231  0828               	movf	_ADsum+3,w
  4093  0232  00DF               	movwf	___lldiv@dividend+3
  4094  0233  0827               	movf	_ADsum+2,w
  4095  0234  00DE               	movwf	___lldiv@dividend+2
  4096  0235  0826               	movf	_ADsum+1,w
  4097  0236  00DD               	movwf	___lldiv@dividend+1
  4098  0237  0825               	movf	_ADsum,w
  4099  0238  00DC               	movwf	___lldiv@dividend
  4100  0239  24F9               	fcall	___lldiv
  4101  023A  085B               	movf	?___lldiv+3,w
  4102  023B  00A8               	movwf	_ADsum+3
  4103  023C  085A               	movf	?___lldiv+2,w
  4104  023D  00A7               	movwf	_ADsum+2
  4105  023E  0859               	movf	?___lldiv+1,w
  4106  023F  00A6               	movwf	_ADsum+1
  4107  0240  0858               	movf	?___lldiv,w
  4108  0241  00A5               	movwf	_ADsum
  4109                           
  4110                           ;ADC.c: 190: switch (ADCState)
  4111  0242  2A70               	goto	l6508
  4112  0243                     l6500:	
  4113                           
  4114                           ;ADC.c: 193: *Val=ADsum;
  4115  0243  0865               	movf	ADCRead@Val,w
  4116  0244  0084               	movwf	4
  4117  0245  0825               	movf	_ADsum,w
  4118  0246  1383               	bcf	3,7	;select IRP bank0
  4119  0247  0080               	movwf	0
  4120  0248  0A84               	incf	4,f
  4121  0249  0826               	movf	_ADsum+1,w
  4122  024A  2A6E               	goto	L15
  4123  024B                     l6502:	
  4124                           ;ADC.c: 194: break;
  4125                           
  4126                           
  4127                           ;ADC.c: 197: *Val=ADsum*1000/(*(Val-1));
  4128  024B  0865               	movf	ADCRead@Val,w
  4129  024C  3EFE               	addlw	-2
  4130  024D  2282               	fcall	PL4	;call to abstracted procedure
  4131  024E  3003               	movlw	3
  4132  024F  01D7               	clrf	___lmul@multiplicand+3
  4133  0250  01D6               	clrf	___lmul@multiplicand+2
  4134  0251  00D5               	movwf	___lmul@multiplicand+1
  4135  0252  30E8               	movlw	232
  4136  0253  00D4               	movwf	___lmul@multiplicand
  4137  0254  2A5D               	goto	L16
  4138  0255                     l6504:	
  4139                           ;ADC.c: 198: break;
  4140                           
  4141                           
  4142                           ;ADC.c: 201: *Val=ADsum*100/(*(Val-2));
  4143  0255  0865               	movf	ADCRead@Val,w
  4144  0256  3EFC               	addlw	-4
  4145  0257  2282               	fcall	PL4	;call to abstracted procedure
  4146  0258  3064               	movlw	100
  4147  0259  00D4               	movwf	___lmul@multiplicand
  4148  025A  01D5               	clrf	___lmul@multiplicand+1
  4149  025B  01D6               	clrf	___lmul@multiplicand+2
  4150  025C  01D7               	clrf	___lmul@multiplicand+3
  4151  025D                     L16:	
  4152  025D  25EA               	fcall	___lmul
  4153  025E  0853               	movf	?___lmul+3,w
  4154  025F  00DF               	movwf	___lldiv@dividend+3
  4155  0260  0852               	movf	?___lmul+2,w
  4156  0261  00DE               	movwf	___lldiv@dividend+2
  4157  0262  0851               	movf	?___lmul+1,w
  4158  0263  00DD               	movwf	___lldiv@dividend+1
  4159  0264  0850               	movf	?___lmul,w
  4160  0265  00DC               	movwf	___lldiv@dividend
  4161  0266  24F9               	fcall	___lldiv
  4162  0267  0865               	movf	ADCRead@Val,w
  4163  0268  0084               	movwf	4
  4164  0269  0858               	movf	?___lldiv,w
  4165  026A  1383               	bcf	3,7	;select IRP bank0
  4166  026B  0080               	movwf	0
  4167  026C  0A84               	incf	4,f
  4168  026D  0859               	movf	?___lldiv+1,w
  4169  026E                     L15:	
  4170  026E  0080               	movwf	0
  4171                           
  4172                           ;ADC.c: 202: break;
  4173  026F  2A78               	goto	l626
  4174  0270                     l6508:	
  4175                           
  4176                           ; Switch size 1, requested type "space"
  4177                           ; Number of cases is 3, Range of values is 0 to 2
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; direct_byte            9     6 (fixed)
  4181                           ; simple_byte           10     6 (average)
  4182                           ; jumptable            260     6 (fixed)
  4183                           ;	Chosen strategy is direct_byte
  4184  0270  2298               	fcall	PL34	;call to abstracted procedure
  4185  0271  1803               	skipnc
  4186  0272  2A78               	goto	l626
  4187  0273  3007               	movlw	high S7146
  4188  0274  008A               	movwf	10
  4189  0275  3092               	movlw	low S7146
  4190  0276  0704               	addwf	4,w
  4191  0277  0082               	movwf	2
  4192  0278                     l626:	
  4193  0278  3003               	movlw	3
  4194                           
  4195                           ;ADC.c: 204: ADsum = 0;
  4196  0279  01A5               	clrf	_ADsum
  4197  027A  01A6               	clrf	_ADsum+1
  4198  027B  01A7               	clrf	_ADsum+2
  4199  027C  01A8               	clrf	_ADsum+3
  4200                           
  4201                           ;ADC.c: 205: ADCState++;
  4202  027D  0AC8               	incf	_ADCState,f
  4203                           
  4204                           ;ADC.c: 206: if(ADCState>=3)
  4205  027E  0248               	subwf	_ADCState,w
  4206  027F  1803               	btfsc	3,0
  4207                           
  4208                           ;ADC.c: 207: {
  4209                           ;ADC.c: 208: ADCState=0;
  4210  0280  01C8               	clrf	_ADCState
  4211  0281  0008               	return
  4212  0282                     __end_of_ADCRead:	
  4213  0282                     PL4:	
  4214  0282  0084               	movwf	4
  4215  0283  1383               	bcf	3,7	;select IRP bank0
  4216  0284  0800               	movf	0,w
  4217  0285  00E6               	movwf	??_ADCRead
  4218  0286  0A84               	incf	4,f
  4219  0287  0800               	movf	0,w
  4220  0288  00E7               	movwf	??_ADCRead+1
  4221  0289  0866               	movf	??_ADCRead,w
  4222  028A  00D8               	movwf	___lldiv@divisor
  4223  028B  0867               	movf	??_ADCRead+1,w
  4224  028C  00D9               	movwf	___lldiv@divisor+1
  4225  028D  01DA               	clrf	___lldiv@divisor+2
  4226  028E  01DB               	clrf	___lldiv@divisor+3
  4227  028F  0828               	movf	_ADsum+3,w
  4228  0290  00D3               	movwf	___lmul@multiplier+3
  4229  0291  0827               	movf	_ADsum+2,w
  4230  0292  00D2               	movwf	___lmul@multiplier+2
  4231  0293  0826               	movf	_ADsum+1,w
  4232  0294  00D1               	movwf	___lmul@multiplier+1
  4233  0295  0825               	movf	_ADsum,w
  4234  0296  00D0               	movwf	___lmul@multiplier
  4235  0297  0008               	return
  4236  0298                     __end_ofPL4:	
  4237  0298                     PL34:	
  4238  0298  0848               	movf	_ADCState,w
  4239  0299  0084               	movwf	4
  4240  029A  3003               	movlw	3
  4241  029B  0204               	subwf	4,w
  4242  029C  0008               	return
  4243  029D                     __end_ofPL34:	
  4244                           
  4245                           	psect	swtext2
  4246  0792                     __pswtext2:	
  4247  0792                     S7146:	
  4248  0792  2A43               	ljmp	l6500
  4249  0793  2A4B               	ljmp	l6502
  4250  0794  2A55               	ljmp	l6504
  4251                           
  4252                           	psect	text22
  4253  05EA                     __ptext22:	
  4254 ;; *************** function ___lmul *****************
  4255 ;; Defined at:
  4256 ;;		line 15 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\Umul32.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4259 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;  product         4    3[COMMON] unsigned long 
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  4    0[BANK0 ] unsigned long 
  4264 ;; Registers used:
  4265 ;;		wreg, status,2, status,0
  4266 ;; Tracked objects:
  4267 ;;		On entry : B00/0
  4268 ;;		On exit  : B00/0
  4269 ;;		Unchanged: 800/0
  4270 ;; Data sizes:     COMMON   BANK0   BANK1
  4271 ;;      Params:         0       8       0
  4272 ;;      Locals:         4       0       0
  4273 ;;      Temps:          0       0       0
  4274 ;;      Totals:         4       8       0
  4275 ;;Total ram usage:       12 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    2
  4278 ;; This function calls:
  4279 ;;		Nothing
  4280 ;; This function is called by:
  4281 ;;		_ADCRead
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function ___lmul
  4287  05EA                     ___lmul:	
  4288                           
  4289                           ;incstack = 0
  4290                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4291  05EA  01F5               	clrf	___lmul@product
  4292  05EB  01F6               	clrf	___lmul@product+1
  4293  05EC  01F7               	clrf	___lmul@product+2
  4294  05ED  01F8               	clrf	___lmul@product+3
  4295  05EE                     l4229:	
  4296  05EE  1C50               	btfss	___lmul@multiplier,0
  4297  05EF  2E04               	goto	l6452
  4298  05F0  0854               	movf	___lmul@multiplicand,w
  4299  05F1  07F5               	addwf	___lmul@product,f
  4300  05F2  0855               	movf	___lmul@multiplicand+1,w
  4301  05F3  1103               	clrz
  4302  05F4  1803               	skipnc
  4303  05F5  3E01               	addlw	1
  4304  05F6  1D03               	btfss	3,2
  4305  05F7  07F6               	addwf	___lmul@product+1,f
  4306  05F8  0856               	movf	___lmul@multiplicand+2,w
  4307  05F9  1103               	clrz
  4308  05FA  1803               	skipnc
  4309  05FB  3E01               	addlw	1
  4310  05FC  1D03               	btfss	3,2
  4311  05FD  07F7               	addwf	___lmul@product+2,f
  4312  05FE  0857               	movf	___lmul@multiplicand+3,w
  4313  05FF  1103               	clrz
  4314  0600  1803               	skipnc
  4315  0601  3E01               	addlw	1
  4316  0602  1D03               	btfss	3,2
  4317  0603  07F8               	addwf	___lmul@product+3,f
  4318  0604                     l6452:	
  4319  0604  1003               	clrc
  4320  0605  0DD4               	rlf	___lmul@multiplicand,f
  4321  0606  0DD5               	rlf	___lmul@multiplicand+1,f
  4322  0607  0DD6               	rlf	___lmul@multiplicand+2,f
  4323  0608  0DD7               	rlf	___lmul@multiplicand+3,f
  4324  0609  1003               	clrc
  4325  060A  0CD3               	rrf	___lmul@multiplier+3,f
  4326  060B  0CD2               	rrf	___lmul@multiplier+2,f
  4327  060C  0CD1               	rrf	___lmul@multiplier+1,f
  4328  060D  0CD0               	rrf	___lmul@multiplier,f
  4329  060E  0853               	movf	___lmul@multiplier+3,w
  4330  060F  0452               	iorwf	___lmul@multiplier+2,w
  4331  0610  0451               	iorwf	___lmul@multiplier+1,w
  4332  0611  0450               	iorwf	___lmul@multiplier,w
  4333  0612  1D03               	skipz
  4334  0613  2DEE               	goto	l4229
  4335  0614  0878               	movf	___lmul@product+3,w
  4336  0615  00D3               	movwf	?___lmul+3
  4337  0616  0877               	movf	___lmul@product+2,w
  4338  0617  00D2               	movwf	?___lmul+2
  4339  0618  0876               	movf	___lmul@product+1,w
  4340  0619  00D1               	movwf	?___lmul+1
  4341  061A  0875               	movf	___lmul@product,w
  4342  061B  00D0               	movwf	?___lmul
  4343  061C  0008               	return
  4344  061D                     __end_of___lmul:	
  4345                           
  4346                           	psect	text23
  4347  04F9                     __ptext23:	
  4348 ;; *************** function ___lldiv *****************
  4349 ;; Defined at:
  4350 ;;		line 6 in file "E:\SCMCU_IDE_V2.00.08_Beta9\data\sources\common\lldiv.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  divisor         4    8[BANK0 ] unsigned long 
  4353 ;;  dividend        4   12[BANK0 ] unsigned long 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  quotient        4   16[BANK0 ] unsigned long 
  4356 ;;  counter         1   20[BANK0 ] unsigned char 
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  4    8[BANK0 ] unsigned long 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0
  4361 ;; Tracked objects:
  4362 ;;		On entry : 300/0
  4363 ;;		On exit  : 300/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMMON   BANK0   BANK1
  4366 ;;      Params:         0       8       0
  4367 ;;      Locals:         0       5       0
  4368 ;;      Temps:          0       0       0
  4369 ;;      Totals:         0      13       0
  4370 ;;Total ram usage:       13 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; Hardware stack levels required when called:    2
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_ADCRead
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           
  4381                           ;psect for function ___lldiv
  4382  04F9                     ___lldiv:	
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4386  04F9  01E0               	clrf	___lldiv@quotient
  4387  04FA  01E1               	clrf	___lldiv@quotient+1
  4388  04FB  01E2               	clrf	___lldiv@quotient+2
  4389  04FC  01E3               	clrf	___lldiv@quotient+3
  4390  04FD  085B               	movf	___lldiv@divisor+3,w
  4391  04FE  045A               	iorwf	___lldiv@divisor+2,w
  4392  04FF  0459               	iorwf	___lldiv@divisor+1,w
  4393  0500  0458               	iorwf	___lldiv@divisor,w
  4394  0501  1903               	skipnz
  4395  0502  2D38               	goto	l6482
  4396  0503  01E4               	clrf	___lldiv@counter
  4397  0504                     L17:	
  4398  0504  0AE4               	incf	___lldiv@counter,f
  4399  0505  1BDB               	btfsc	___lldiv@divisor+3,7
  4400  0506  2D0D               	goto	l6470
  4401  0507  1003               	clrc
  4402  0508  0DD8               	rlf	___lldiv@divisor,f
  4403  0509  0DD9               	rlf	___lldiv@divisor+1,f
  4404  050A  0DDA               	rlf	___lldiv@divisor+2,f
  4405  050B  0DDB               	rlf	___lldiv@divisor+3,f
  4406  050C  2D04               	goto	L17
  4407  050D                     l6470:	
  4408  050D  1003               	clrc
  4409  050E  0DE0               	rlf	___lldiv@quotient,f
  4410  050F  0DE1               	rlf	___lldiv@quotient+1,f
  4411  0510  0DE2               	rlf	___lldiv@quotient+2,f
  4412  0511  0DE3               	rlf	___lldiv@quotient+3,f
  4413  0512  085B               	movf	___lldiv@divisor+3,w
  4414  0513  025F               	subwf	___lldiv@dividend+3,w
  4415  0514  1D03               	skipz
  4416  0515  2D20               	goto	u3785
  4417  0516  085A               	movf	___lldiv@divisor+2,w
  4418  0517  025E               	subwf	___lldiv@dividend+2,w
  4419  0518  1D03               	skipz
  4420  0519  2D20               	goto	u3785
  4421  051A  0859               	movf	___lldiv@divisor+1,w
  4422  051B  025D               	subwf	___lldiv@dividend+1,w
  4423  051C  1D03               	skipz
  4424  051D  2D20               	goto	u3785
  4425  051E  0858               	movf	___lldiv@divisor,w
  4426  051F  025C               	subwf	___lldiv@dividend,w
  4427  0520                     u3785:	
  4428  0520  1C03               	skipc
  4429  0521  2D32               	goto	L18
  4430  0522  0858               	movf	___lldiv@divisor,w
  4431  0523  02DC               	subwf	___lldiv@dividend,f
  4432  0524  0859               	movf	___lldiv@divisor+1,w
  4433  0525  1C03               	skipc
  4434  0526  0F59               	incfsz	___lldiv@divisor+1,w
  4435  0527  02DD               	subwf	___lldiv@dividend+1,f
  4436  0528  085A               	movf	___lldiv@divisor+2,w
  4437  0529  1C03               	skipc
  4438  052A  0F5A               	incfsz	___lldiv@divisor+2,w
  4439  052B  02DE               	subwf	___lldiv@dividend+2,f
  4440  052C  085B               	movf	___lldiv@divisor+3,w
  4441  052D  1C03               	skipc
  4442  052E  0F5B               	incfsz	___lldiv@divisor+3,w
  4443  052F  02DF               	subwf	___lldiv@dividend+3,f
  4444  0530  1460               	bsf	___lldiv@quotient,0
  4445  0531  1003               	clrc
  4446  0532                     L18:	
  4447  0532  0CDB               	rrf	___lldiv@divisor+3,f
  4448  0533  0CDA               	rrf	___lldiv@divisor+2,f
  4449  0534  0CD9               	rrf	___lldiv@divisor+1,f
  4450  0535  0CD8               	rrf	___lldiv@divisor,f
  4451  0536  0BE4               	decfsz	___lldiv@counter,f
  4452  0537  2D0D               	goto	l6470
  4453  0538                     l6482:	
  4454  0538  0863               	movf	___lldiv@quotient+3,w
  4455  0539  00DB               	movwf	?___lldiv+3
  4456  053A  0862               	movf	___lldiv@quotient+2,w
  4457  053B  00DA               	movwf	?___lldiv+2
  4458  053C  0861               	movf	___lldiv@quotient+1,w
  4459  053D  00D9               	movwf	?___lldiv+1
  4460  053E  0860               	movf	___lldiv@quotient,w
  4461  053F  00D8               	movwf	?___lldiv
  4462  0540  0008               	return
  4463  0541                     __end_of___lldiv:	
  4464                           
  4465                           	psect	text24
  4466  0701                     __ptext24:	
  4467 ;; *************** function _ADSample *****************
  4468 ;; Defined at:
  4469 ;;		line 221 in file "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  ch              1    wreg     unsigned char 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  ch              1    4[COMMON] unsigned char 
  4474 ;;  i               1    5[COMMON] volatile unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      unsigned char 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 300/100
  4481 ;;		On exit  : 300/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1
  4484 ;;      Params:         0       0       0
  4485 ;;      Locals:         2       0       0
  4486 ;;      Temps:          1       0       0
  4487 ;;      Totals:         3       0       0
  4488 ;;Total ram usage:        3 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    2
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_ADCRead
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function _ADSample
  4500  0701                     _ADSample:	
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in _ADSample: [wreg+status,2+status,0]
  4504                           ;ADSample@ch stored from wreg
  4505  0701  00F6               	movwf	ADSample@ch
  4506                           
  4507                           ;ADC.c: 223: ADCON1 = 0x00;
  4508  0702  019F               	clrf	31	;volatile
  4509                           
  4510                           ;ADC.c: 224: ADCON0 = 0X41 | ( ch << 2);
  4511  0703  00F5               	movwf	??_ADSample
  4512  0704  3001               	movlw	1
  4513  0705  1003               	clrc
  4514  0706                     L19:	
  4515  0706  0DF5               	rlf	??_ADSample,f
  4516  0707  3EFF               	addlw	-1
  4517  0708  1003               	clrc
  4518  0709  1D03               	skipz
  4519  070A  2F06               	goto	L19
  4520  070B  0D75               	rlf	??_ADSample,w
  4521  070C  3841               	iorlw	65
  4522  070D  1283               	bcf	3,5	;RP0=0, select bank0
  4523  070E  009F               	movwf	31	;volatile
  4524  070F  0000               	nop	;# 
  4525  0710  0000               	nop	;# 
  4526                           
  4527                           ;ADC.c: 227: GODONE = 1;
  4528  0711  1283               	bcf	3,5	;RP0=0, select bank0
  4529  0712  1303               	bcf	3,6	;RP1=0, select bank0
  4530  0713  149F               	bsf	31,1	;volatile
  4531                           
  4532                           ;ADC.c: 228: volatile unsigned char i = 0;
  4533  0714  01F7               	clrf	ADSample@i	;volatile
  4534  0715                     l633:	
  4535                           ;ADC.c: 229: while(GODONE)
  4536                           
  4537  0715  1C9F               	btfss	31,1	;volatile
  4538  0716  3401               	retlw	1
  4539                           
  4540                           ;ADC.c: 230: {
  4541                           ;ADC.c: 231: if(0 == (--i))
  4542  0717  0BF7               	decfsz	ADSample@i,f	;volatile
  4543  0718  2F15               	goto	l633
  4544                           
  4545                           ;ADC.c: 232: return 0;
  4546  0719  3400               	retlw	0
  4547  071A                     __end_of_ADSample:	
  4548                           ;ADC.c: 233: }
  4549                           ;ADC.c: 234: return 1;
  4550                           
  4551                           
  4552                           	psect	text25
  4553  06CD                     __ptext25:	
  4554 ;; *************** function _Isr_Timer *****************
  4555 ;; Defined at:
  4556 ;;		line 8 in file "C:\Users\Administrator\Desktop\project\K13-01\code\even.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 300/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1
  4570 ;;      Params:         0       0       0
  4571 ;;      Locals:         0       0       0
  4572 ;;      Temps:          3       0       0
  4573 ;;      Totals:         3       0       0
  4574 ;;Total ram usage:        3 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    1
  4577 ;; This function calls:
  4578 ;;		_LEDScan
  4579 ;; This function is called by:
  4580 ;;		Interrupt level 1
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           
  4585                           ;psect for function _Isr_Timer
  4586  06CD                     _Isr_Timer:	
  4587                           
  4588                           ;even.c: 10: TMR2IF = 0;
  4589  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  4590  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  4591  06CF  108C               	bcf	12,1	;volatile
  4592  06D0  300A               	movlw	10
  4593                           
  4594                           ;even.c: 11: cnt2ms++;
  4595  06D1  0AC4               	incf	_cnt2ms,f
  4596                           
  4597                           ;even.c: 12: cnt10ms++;
  4598  06D2  0AC3               	incf	_cnt10ms,f
  4599                           
  4600                           ;even.c: 13: if(cnt2ms>=10)
  4601  06D3  0244               	subwf	_cnt2ms,w
  4602  06D4  1C03               	skipc
  4603  06D5  2ED9               	goto	i1l6362
  4604                           
  4605                           ;even.c: 14: {
  4606                           ;even.c: 15: LEDScan();
  4607  06D6  229D               	fcall	_LEDScan
  4608                           
  4609                           ;even.c: 16: cnt2ms=0;
  4610  06D7  01C4               	clrf	_cnt2ms
  4611                           
  4612                           ;even.c: 17: time2ms=1;
  4613  06D8  14F1               	bsf	_time2ms/(0+8),_time2ms& (0+7)
  4614  06D9                     i1l6362:	
  4615                           
  4616                           ;even.c: 18: }
  4617                           ;even.c: 19: if(cnt10ms>=50)
  4618  06D9  3032               	movlw	50
  4619  06DA  0243               	subwf	_cnt10ms,w
  4620  06DB  1C03               	skipc
  4621  06DC  2EDF               	goto	i1l1190
  4622                           
  4623                           ;even.c: 20: {
  4624                           ;even.c: 21: cnt10ms=0;
  4625  06DD  01C3               	clrf	_cnt10ms
  4626                           
  4627                           ;even.c: 22: time10ms=1;
  4628  06DE  1471               	bsf	_time10ms/(0+8),_time10ms& (0+7)
  4629  06DF                     i1l1190:	
  4630  06DF  0874               	movf	??_Isr_Timer+2,w
  4631  06E0  008A               	movwf	10
  4632  06E1  0873               	movf	??_Isr_Timer+1,w
  4633  06E2  0084               	movwf	4
  4634  06E3  0E72               	swapf	??_Isr_Timer^(0+-128),w
  4635  06E4  0083               	movwf	3
  4636  06E5  0EFE               	swapf	126,f
  4637  06E6  0E7E               	swapf	126,w
  4638  06E7  0009               	retfie
  4639  06E8                     __end_of_Isr_Timer:	
  4640                           
  4641                           	psect	intentry
  4642  0004                     __pintentry:	
  4643                           ;incstack = 0
  4644                           ; Regs used in _Isr_Timer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4645                           
  4646  0004                     interrupt_function:	
  4647  007E                     saved_w	set	btemp
  4648  0004  00FE               	movwf	btemp
  4649  0005  0E03               	swapf	3,w
  4650  0006  00F2               	movwf	??_Isr_Timer
  4651  0007  0804               	movf	4,w
  4652  0008  00F3               	movwf	??_Isr_Timer+1
  4653  0009  080A               	movf	10,w
  4654  000A  00F4               	movwf	??_Isr_Timer+2
  4655  000B  2ECD               	ljmp	_Isr_Timer
  4656                           
  4657                           	psect	text26
  4658  029D                     __ptext26:	
  4659 ;; *************** function _LEDScan *****************
  4660 ;; Defined at:
  4661 ;;		line 17 in file "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  1    wreg      void 
  4668 ;; Registers used:
  4669 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4670 ;; Tracked objects:
  4671 ;;		On entry : 300/0
  4672 ;;		On exit  : 300/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1
  4675 ;;      Params:         0       0       0
  4676 ;;      Locals:         0       0       0
  4677 ;;      Temps:          0       0       0
  4678 ;;      Totals:         0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_Isr_Timer
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _LEDScan
  4690  029D                     _LEDScan:	
  4691                           
  4692                           ;LED.c: 19: static unsigned char LEDScanIndex=0;
  4693                           ;LED.c: 21: TRISB5=1,WPUB5=0;
  4694                           
  4695                           ;incstack = 0
  4696                           ; Regs used in _LEDScan: [wreg-fsr0h+status,2+status,0]
  4697  029D  1683               	bsf	3,5	;RP0=1, select bank1
  4698  029E  1686               	bsf	6,5	;volatile
  4699  029F  1295               	bcf	21,5	;volatile
  4700                           
  4701                           ;LED.c: 22: TRISB4=1,WPUB4=0;
  4702  02A0  1606               	bsf	6,4	;volatile
  4703  02A1  1215               	bcf	21,4	;volatile
  4704                           
  4705                           ;LED.c: 23: TRISB3=1,WPUB3=0;
  4706  02A2  1586               	bsf	6,3	;volatile
  4707  02A3  1195               	bcf	21,3	;volatile
  4708                           
  4709                           ;LED.c: 24: TRISC3=1,WPUC3=0;
  4710  02A4  1587               	bsf	7,3	;volatile
  4711  02A5  1703               	bsf	3,6	;RP1=1, select bank3
  4712  02A6  118F               	bcf	15,3	;volatile
  4713                           
  4714                           ;LED.c: 25: TRISC2=1,WPUC2=0;
  4715  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  4716  02A8  1507               	bsf	7,2	;volatile
  4717  02A9  1703               	bsf	3,6	;RP1=1, select bank3
  4718  02AA  110F               	bcf	15,2	;volatile
  4719  02AB  0000               	nop	;# 
  4720  02AC  0000               	nop	;# 
  4721                           
  4722                           ;LED.c: 28: switch(LEDScanIndex)
  4723  02AD  2B03               	goto	i1l6298
  4724  02AE                     i1l2984:	
  4725                           ;LED.c: 29: {
  4726                           ;LED.c: 30: case 0:
  4727                           
  4728                           
  4729                           ;LED.c: 31: if(LEDArrMap[0]&0x02)
  4730  02AE  1CA0               	btfss	_LEDArrMap,1
  4731  02AF  2AB1               	goto	i1l2985
  4732                           
  4733                           ;LED.c: 32: {
  4734                           ;LED.c: 33: TRISB4=0,WPUB4=0;RB4=0 ;
  4735  02B0  2332               	fcall	PL24	;call to abstracted procedure
  4736  02B1                     i1l2985:	
  4737                           
  4738                           ;LED.c: 34: }
  4739                           ;LED.c: 35: if(LEDArrMap[0]&0x04)
  4740  02B1  1D20               	btfss	_LEDArrMap,2
  4741  02B2  2AB4               	goto	i1l2986
  4742                           
  4743                           ;LED.c: 36: {
  4744                           ;LED.c: 37: TRISB3=0,WPUB3=0;RB3=0 ;
  4745  02B3  232C               	fcall	PL22	;call to abstracted procedure
  4746  02B4                     i1l2986:	
  4747                           
  4748                           ;LED.c: 38: }
  4749                           ;LED.c: 39: if(LEDArrMap[0]&0x08)
  4750  02B4  1DA0               	btfss	_LEDArrMap,3
  4751  02B5  2AB7               	goto	i1l2987
  4752                           
  4753                           ;LED.c: 40: {
  4754                           ;LED.c: 41: TRISC3=0,WPUC3=0;RC3=0 ;
  4755  02B6  2316               	fcall	PL12	;call to abstracted procedure
  4756  02B7                     i1l2987:	
  4757                           
  4758                           ;LED.c: 42: }
  4759                           ;LED.c: 43: if(LEDArrMap[0]&0x10)
  4760  02B7  1E20               	btfss	_LEDArrMap,4
  4761  02B8  2ABA               	goto	i1l2988
  4762                           
  4763                           ;LED.c: 44: {
  4764                           ;LED.c: 45: TRISC2=0,WPUC2=0;RC2=0 ;
  4765  02B9  231E               	fcall	PL14	;call to abstracted procedure
  4766  02BA                     i1l2988:	
  4767                           
  4768                           ;LED.c: 46: }
  4769                           ;LED.c: 47: TRISB5=0,WPUB5=0;RB5=1 ;
  4770  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  4771  02BB  1286               	bcf	6,5	;volatile
  4772  02BC  1295               	bcf	21,5	;volatile
  4773  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  4774  02BE  1686               	bsf	6,5	;volatile
  4775                           
  4776                           ;LED.c: 48: break;
  4777  02BF  2B10               	goto	i1l6300
  4778  02C0                     i1l2990:	
  4779                           ;LED.c: 50: case 1:
  4780                           
  4781                           
  4782                           ;LED.c: 51: if(LEDArrMap[1]&0x01)
  4783  02C0  1C21               	btfss	_LEDArrMap+1,0
  4784  02C1  2AC3               	goto	i1l2991
  4785                           
  4786                           ;LED.c: 52: {
  4787                           ;LED.c: 53: TRISB5=0,WPUB5=0;RB5=0 ;
  4788  02C2  2326               	fcall	PL20	;call to abstracted procedure
  4789  02C3                     i1l2991:	
  4790                           
  4791                           ;LED.c: 54: }
  4792                           ;LED.c: 55: if(LEDArrMap[1]&0x04)
  4793  02C3  1D21               	btfss	_LEDArrMap+1,2
  4794  02C4  2AC6               	goto	i1l2992
  4795                           
  4796                           ;LED.c: 56: {
  4797                           ;LED.c: 57: TRISB3=0,WPUB3=0;RB3=0 ;
  4798  02C5  232C               	fcall	PL22	;call to abstracted procedure
  4799  02C6                     i1l2992:	
  4800                           
  4801                           ;LED.c: 58: }
  4802                           ;LED.c: 59: if(LEDArrMap[1]&0x08)
  4803  02C6  1DA1               	btfss	_LEDArrMap+1,3
  4804  02C7  2AC9               	goto	i1l2993
  4805                           
  4806                           ;LED.c: 60: {
  4807                           ;LED.c: 61: TRISC3=0,WPUC3=0;RC3=0 ;
  4808  02C8  2316               	fcall	PL12	;call to abstracted procedure
  4809  02C9                     i1l2993:	
  4810                           
  4811                           ;LED.c: 62: }
  4812                           ;LED.c: 63: if(LEDArrMap[1]&0x10)
  4813  02C9  1E21               	btfss	_LEDArrMap+1,4
  4814  02CA  2ACC               	goto	i1l2994
  4815                           
  4816                           ;LED.c: 64: {
  4817                           ;LED.c: 65: TRISC2=0,WPUC2=0;RC2=0 ;
  4818  02CB  231E               	fcall	PL14	;call to abstracted procedure
  4819  02CC                     i1l2994:	
  4820                           
  4821                           ;LED.c: 66: }
  4822                           ;LED.c: 67: TRISB4=0,WPUB4=0; RB4=1 ;
  4823  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  4824  02CD  1206               	bcf	6,4	;volatile
  4825  02CE  1215               	bcf	21,4	;volatile
  4826  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  4827  02D0  1606               	bsf	6,4	;volatile
  4828                           
  4829                           ;LED.c: 68: break;
  4830  02D1  2B10               	goto	i1l6300
  4831  02D2                     i1l2995:	
  4832                           ;LED.c: 70: case 2:
  4833                           
  4834                           
  4835                           ;LED.c: 71: if(LEDArrMap[2]&0x01)
  4836  02D2  1C22               	btfss	_LEDArrMap+2,0
  4837  02D3  2AD5               	goto	i1l2996
  4838                           
  4839                           ;LED.c: 72: {
  4840                           ;LED.c: 73: TRISB5=0,WPUB5=0;RB5=0 ;
  4841  02D4  2326               	fcall	PL20	;call to abstracted procedure
  4842  02D5                     i1l2996:	
  4843                           
  4844                           ;LED.c: 74: }
  4845                           ;LED.c: 75: if(LEDArrMap[2]&0x02)
  4846  02D5  1CA2               	btfss	_LEDArrMap+2,1
  4847  02D6  2AD8               	goto	i1l2997
  4848                           
  4849                           ;LED.c: 76: {
  4850                           ;LED.c: 77: TRISB4=0,WPUB4=0;RB4=0 ;
  4851  02D7  2332               	fcall	PL24	;call to abstracted procedure
  4852  02D8                     i1l2997:	
  4853                           
  4854                           ;LED.c: 78: }
  4855                           ;LED.c: 79: if(LEDArrMap[2]&0x08)
  4856  02D8  1DA2               	btfss	_LEDArrMap+2,3
  4857  02D9  2ADB               	goto	i1l2998
  4858                           
  4859                           ;LED.c: 80: {
  4860                           ;LED.c: 81: TRISC3=0,WPUC3=0;RC3=0 ;
  4861  02DA  2316               	fcall	PL12	;call to abstracted procedure
  4862  02DB                     i1l2998:	
  4863                           
  4864                           ;LED.c: 82: }
  4865                           ;LED.c: 83: if(LEDArrMap[2]&0x10)
  4866  02DB  1E22               	btfss	_LEDArrMap+2,4
  4867  02DC  2ADE               	goto	i1l2999
  4868                           
  4869                           ;LED.c: 84: {
  4870                           ;LED.c: 85: TRISC2=0,WPUC2=0;RC2=0 ;
  4871  02DD  231E               	fcall	PL14	;call to abstracted procedure
  4872  02DE                     i1l2999:	
  4873                           
  4874                           ;LED.c: 86: }
  4875                           ;LED.c: 87: TRISB3=0,WPUB3=0;RB3=1 ;
  4876  02DE  1683               	bsf	3,5	;RP0=1, select bank1
  4877  02DF  1186               	bcf	6,3	;volatile
  4878  02E0  1195               	bcf	21,3	;volatile
  4879  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  4880  02E2  1586               	bsf	6,3	;volatile
  4881                           
  4882                           ;LED.c: 88: break;
  4883  02E3  2B10               	goto	i1l6300
  4884  02E4                     i1l3000:	
  4885                           ;LED.c: 90: case 3:
  4886                           
  4887                           
  4888                           ;LED.c: 91: if(LEDArrMap[3]&0x01)
  4889  02E4  1C23               	btfss	_LEDArrMap+3,0
  4890  02E5  2AE7               	goto	i1l3001
  4891                           
  4892                           ;LED.c: 92: {
  4893                           ;LED.c: 93: TRISB5=0,WPUB5=0;RB5=0 ;
  4894  02E6  2326               	fcall	PL20	;call to abstracted procedure
  4895  02E7                     i1l3001:	
  4896                           
  4897                           ;LED.c: 94: }
  4898                           ;LED.c: 95: if(LEDArrMap[3]&0x02)
  4899  02E7  1CA3               	btfss	_LEDArrMap+3,1
  4900  02E8  2AEA               	goto	i1l3002
  4901                           
  4902                           ;LED.c: 96: {
  4903                           ;LED.c: 97: TRISB4=0,WPUB4=0;RB4=0 ;
  4904  02E9  2332               	fcall	PL24	;call to abstracted procedure
  4905  02EA                     i1l3002:	
  4906                           
  4907                           ;LED.c: 98: }
  4908                           ;LED.c: 99: if(LEDArrMap[3]&0x04)
  4909  02EA  1D23               	btfss	_LEDArrMap+3,2
  4910  02EB  2AED               	goto	i1l3003
  4911                           
  4912                           ;LED.c: 100: {
  4913                           ;LED.c: 101: TRISB3=0,WPUB3=0;RB3=0 ;
  4914  02EC  232C               	fcall	PL22	;call to abstracted procedure
  4915  02ED                     i1l3003:	
  4916                           
  4917                           ;LED.c: 102: }
  4918                           ;LED.c: 103: TRISC3=0,WPUC3=0;RC3=1 ;
  4919  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  4920  02EE  1187               	bcf	7,3	;volatile
  4921  02EF  1703               	bsf	3,6	;RP1=1, select bank3
  4922  02F0  118F               	bcf	15,3	;volatile
  4923  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  4924  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  4925  02F3  1587               	bsf	7,3	;volatile
  4926                           
  4927                           ;LED.c: 104: break;
  4928  02F4  2B10               	goto	i1l6300
  4929  02F5                     i1l3004:	
  4930                           ;LED.c: 106: case 4:
  4931                           
  4932                           
  4933                           ;LED.c: 107: if(LEDArrMap[4]&0x01)
  4934  02F5  1C24               	btfss	_LEDArrMap+4,0
  4935  02F6  2AF8               	goto	i1l3005
  4936                           
  4937                           ;LED.c: 108: {
  4938                           ;LED.c: 109: TRISB5=0,WPUB5=0;RB5=0 ;
  4939  02F7  2326               	fcall	PL20	;call to abstracted procedure
  4940  02F8                     i1l3005:	
  4941                           
  4942                           ;LED.c: 110: }
  4943                           ;LED.c: 111: if(LEDArrMap[4]&0x04)
  4944  02F8  1D24               	btfss	_LEDArrMap+4,2
  4945  02F9  2AFB               	goto	i1l3006
  4946                           
  4947                           ;LED.c: 112: {
  4948                           ;LED.c: 113: TRISB3=0,WPUB3=0;RB3=0 ;
  4949  02FA  232C               	fcall	PL22	;call to abstracted procedure
  4950  02FB                     i1l3006:	
  4951                           
  4952                           ;LED.c: 114: }
  4953                           ;LED.c: 115: TRISC2=0,WPUC2=0;RC2=1 ;
  4954  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  4955  02FC  1107               	bcf	7,2	;volatile
  4956  02FD  1703               	bsf	3,6	;RP1=1, select bank3
  4957  02FE  110F               	bcf	15,2	;volatile
  4958  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  4959  0300  1303               	bcf	3,6	;RP1=0, select bank0
  4960  0301  1507               	bsf	7,2	;volatile
  4961                           
  4962                           ;LED.c: 116: }
  4963  0302  2B10               	goto	i1l6300
  4964  0303                     i1l6298:	
  4965  0303  1283               	bcf	3,5	;RP0=0, select bank0
  4966  0304  1303               	bcf	3,6	;RP1=0, select bank0
  4967  0305  083E               	movf	LEDScan@LEDScanIndex,w
  4968                           
  4969                           ; Switch size 1, requested type "space"
  4970                           ; Number of cases is 5, Range of values is 0 to 4
  4971                           ; switch strategies available:
  4972                           ; Name         Instructions Cycles
  4973                           ; direct_byte           11     6 (fixed)
  4974                           ; simple_byte           16     9 (average)
  4975                           ; jumptable            260     6 (fixed)
  4976                           ;	Chosen strategy is direct_byte
  4977  0306  0084               	movwf	4
  4978  0307  3005               	movlw	5
  4979  0308  0204               	subwf	4,w
  4980  0309  1803               	skipnc
  4981  030A  2B10               	goto	i1l6300
  4982  030B  3007               	movlw	high i1S7148
  4983  030C  008A               	movwf	10
  4984  030D  3089               	movlw	low i1S7148
  4985  030E  0704               	addwf	4,w
  4986  030F  0082               	movwf	2
  4987  0310                     i1l6300:	
  4988  0310  3005               	movlw	5
  4989                           
  4990                           ;LED.c: 117: LEDScanIndex++;
  4991  0311  0ABE               	incf	LEDScan@LEDScanIndex,f
  4992                           
  4993                           ;LED.c: 118: if(LEDScanIndex>=5)
  4994  0312  023E               	subwf	LEDScan@LEDScanIndex,w
  4995  0313  1803               	btfsc	3,0
  4996                           
  4997                           ;LED.c: 119: {
  4998                           ;LED.c: 120: LEDScanIndex=0;
  4999  0314  01BE               	clrf	LEDScan@LEDScanIndex
  5000  0315  0008               	return
  5001  0316                     __end_of_LEDScan:	
  5002  007E                     btemp	set	126	;btemp
  5003  007E                     wtemp0	set	126
  5004  0316                     PL12:	
  5005  0316  1683               	bsf	3,5	;RP0=1, select bank1
  5006  0317  1187               	bcf	7,3	;volatile
  5007  0318  1703               	bsf	3,6	;RP1=1, select bank3
  5008  0319  118F               	bcf	15,3	;volatile
  5009  031A  1283               	bcf	3,5	;RP0=0, select bank0
  5010  031B  1303               	bcf	3,6	;RP1=0, select bank0
  5011  031C  1187               	bcf	7,3	;volatile
  5012  031D  0008               	return
  5013  031E                     __end_ofPL12:	
  5014  031E                     PL14:	
  5015  031E  1683               	bsf	3,5	;RP0=1, select bank1
  5016  031F  1107               	bcf	7,2	;volatile
  5017  0320  1703               	bsf	3,6	;RP1=1, select bank3
  5018  0321  110F               	bcf	15,2	;volatile
  5019  0322  1283               	bcf	3,5	;RP0=0, select bank0
  5020  0323  1303               	bcf	3,6	;RP1=0, select bank0
  5021  0324  1107               	bcf	7,2	;volatile
  5022  0325  0008               	return
  5023  0326                     __end_ofPL14:	
  5024  0326                     PL20:	
  5025  0326  1683               	bsf	3,5	;RP0=1, select bank1
  5026  0327  1286               	bcf	6,5	;volatile
  5027  0328  1295               	bcf	21,5	;volatile
  5028  0329  1283               	bcf	3,5	;RP0=0, select bank0
  5029  032A  1286               	bcf	6,5	;volatile
  5030  032B  0008               	return
  5031  032C                     __end_ofPL20:	
  5032  032C                     PL22:	
  5033  032C  1683               	bsf	3,5	;RP0=1, select bank1
  5034  032D  1186               	bcf	6,3	;volatile
  5035  032E  1195               	bcf	21,3	;volatile
  5036  032F  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0330  1186               	bcf	6,3	;volatile
  5038  0331  0008               	return
  5039  0332                     __end_ofPL22:	
  5040  0332                     PL24:	
  5041  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5042  0333  1206               	bcf	6,4	;volatile
  5043  0334  1215               	bcf	21,4	;volatile
  5044  0335  1283               	bcf	3,5	;RP0=0, select bank0
  5045  0336  1206               	bcf	6,4	;volatile
  5046  0337  0008               	return
  5047  0338                     __end_ofPL24:	
  5048                           
  5049                           	psect	swtext3
  5050  0789                     __pswtext3:	
  5051  0789                     i1S7148:	
  5052  0789  2AAE               	ljmp	i1l2984
  5053  078A  2AC0               	ljmp	i1l2990
  5054  078B  2AD2               	ljmp	i1l2995
  5055  078C  2AE4               	ljmp	i1l3000
  5056  078D  2AF5               	ljmp	i1l3004


Data Sizes:
    Strings     0
    Constant    16
    Data        53
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     26      76
    BANK1            80      7      58

Pointer List with Targets:

    ADCRead@Val	PTR unsigned int  size(1) Largest target is 6
		 -> ADCVal(BANK0[6]), 


Critical Paths under _main in COMMON

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _WorkLedPro->___lbmod
    _USBLedPro->___lbmod
    _ADCRead->___lmul
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in COMMON

    None.

Critical Paths under _main in BANK0

    _Sec1sPro->___lwdiv
    _Motor->___wmul
    _DisplayPro->_DisplayIcon
    _DisplayPro->_USBLedPro
    _ADCPro->_ADCRead
    _ADCRead->___lldiv
    ___lldiv->___lmul

Critical Paths under _Isr_Timer in BANK0

    None.

Critical Paths under _main in BANK1

    _ADCPro->_ADCRead

Critical Paths under _Isr_Timer in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4005
                              _Apply
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _Apply                                                0     0      0    4005
                             _ADCPro
                         _DisplayPro
                            _KeyScan
                              _Motor
                           _Sec1sPro
                        _SystemSleep
 ---------------------------------------------------------------------------------
 (2) _SystemSleep                                          0     0      0       0
                         _SystemInit
 ---------------------------------------------------------------------------------
 (1) _SystemInit                                           0     0      0       0
                           _GPIOInit
                          _TimerInit
 ---------------------------------------------------------------------------------
 (2) _TimerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GPIOInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sec1sPro                                             5     5      0     953
                                              3 BANK0      5     5      0
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     371
                                              3 COMMON     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Motor                                                0     0      0      52
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      52
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _KeyScan                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DisplayPro                                           0     0      0    1422
                        _DisplayIcon
                             _ErrPro
                            _LockPro
                          _USBLedPro
                         _WorkLedPro
 ---------------------------------------------------------------------------------
 (3) _WorkLedPro                                           2     2      0     659
                                              0 BANK0      2     2      0
                             ___bmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     224
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _USBLedPro                                            3     3      0     435
                                              0 BANK0      3     3      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     216
                                              3 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     219
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LockPro                                              2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ErrPro                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DisplayIcon                                          7     5      2     328
                                              3 COMMON     4     2      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _ADCPro                                               0     0      0    1578
                            _ADCRead
 ---------------------------------------------------------------------------------
 (3) _ADCRead                                             12    11      1    1578
                                             21 BANK0      5     4      1
                                              0 BANK1      7     7      0
                           _ADSample
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     396
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     631
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _ADSample                                             3     3      0      65
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Isr_Timer                                            3     3      0       0
                                              0 COMMON     3     3      0
                            _LEDScan
 ---------------------------------------------------------------------------------
 (6) _LEDScan                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apply
     _ADCPro
       _ADCRead
         _ADSample
         ___lldiv
           ___lmul (ARG)
         ___lmul
     _DisplayPro
       _DisplayIcon
       _ErrPro
       _LockPro
       _USBLedPro
         ___lbdiv
         ___lbmod
       _WorkLedPro
         ___bmul
         ___lbdiv
         ___lbmod
     _KeyScan
     _Motor
       ___wmul
     _Sec1sPro
       ___bmul
       ___lwdiv
     _SystemSleep
       _SystemInit
         _GPIOInit
         _TimerInit
   _SystemInit
     _GPIOInit
     _TimerInit

 _Isr_Timer (ROOT)
   _LEDScan

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      7      3A       7       72.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       2       0       14.3%
CODE                 0      0       0       0        0.0%
DATA                 0      0      91       8        0.0%
ABS                  0      0      91       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Aug 15 13:41:40 2020

                      pc 0002           ___bmul@product 0076                       PL2 0391  
                     PL4 0282                       PL6 0403                       PL8 05A5  
                     fsr 0004      ___wmul@multiplicand 0077               _BatPercent 0049  
                    PL10 03A2                      PL20 0326                      PL12 0316  
                    PL30 045D                      PL22 032C                      PL14 031E  
                    PL32 05B2                      PL24 0332                      PL16 068B  
                    PL34 0298                      PL26 00F9                      PL18 01BF  
                    PL36 066B                      PL28 01CA                      l605 017A  
                    l633 0715                      l626 0278                      l571 047B  
                    l579 049B                      _RA0 0028                      _RA1 0029  
                    _RA2 002A                      _RA3 002B                      _RA5 002D  
                    _RB3 0033                      _RB4 0034                      _RC2 003A  
                    _RB5 0035                      _RC3 003B                      _RB6 0036  
                    _RB7 0037                      _PR2 0092                      fsr0 0004  
        __end_of_ADCRead 0282                      indf 0000                     S7144 0001  
                   S7146 0792          __end_of_LEDSeg1 0730          __end_of_LEDScan 0316  
                   l2400 00F0                     l2401 00F6                     l3044 0357  
                   l4201 0415                     l2371 002A                     l4211 0458  
                   l2380 008C                     l2372 002B                     l4204 042C  
                   l2373 005C                     l3078 04F0                     l2382 0088  
                   l2383 008A                     l2393 00E4                     l2385 00C8  
                   l2377 0059                     l2395 00E1                     l2387 00C4  
                   l2379 00E6                     l4229 05EE                     l2397 00DF  
                   l2399 00EF                     l6120 00D8                     l6114 00BE  
                   l7020 043C                     l6212 054C                     l6062 0047  
                   l6214 054E                     l4480 06BE                     l7032 0452  
                   l6500 0243                     l5604 06B8                     l7036 045A  
                   l5700 0778                     l6502 024B                     l7062 065D  
                   l7046 064D                     l6504 0255                     l6600 037A  
                   l7072 0663                     l7056 0658                     l6530 0581  
                   l6522 057D                     l5618 06CB                     l5634 06AE  
                   l5626 069A                     l7082 078F                     l6452 0604  
                   l6508 0270                     l6470 050D                     l6702 048F  
                   l6704 0492                     l6536 059C                     l5832 04B5  
                   l6624 03BE                     l6560 034B                     l6482 0538  
                   l5842 04BF                     l5850 04DA                     l5586 0761  
                   l6708 049C                     l5852 04DB                     l6564 034D  
                   l6718 04AC                     l6638 0400                     l6806 01B9  
                   l6742 0133                     l6734 010C                     l6726 00FF  
                   l5856 04DF                     l6592 036C                     l6808 01BC  
                   l5890 0740                     l5874 04F6                     l6666 062B  
                   l6762 015A                     l6754 0149                     l6738 0117  
                   l6684 0464                     l6692 0473                     l6588 0369  
                   l6772 0169                     l6764 015C                     l6686 0469  
                   l5886 073A                     l6678 0642                     l6766 015E  
                   l6688 046E                     l6784 018E                     l6776 0174  
                   l6698 0486                     l6796 01A4                     l6982 06F2  
                   l6978 06EA                     _ANS1 0C41                     _ANS2 0C42  
                   u3010 0099                     u3020 009F                     u3012 009A  
                   _IOCB 0096                     u3110 00CE                     u3022 00A0  
                   u3120 00D4                     u3112 00CF                     u3122 00D5  
                   u4105 03D5                     u2355 04CD                     u4115 03F6  
                   _PIE1 008C                     u2800 003E                     _PIE2 008D  
                   u2802 003F                     u4165 0634                     u2930 0070  
                   u4275 01C8                     u2940 0076                     u2932 0071  
                   u2942 0077                     u2790 0038                     u3815 01FC  
                   u4295 0142                     _RBIE 005B                     u2792 0039  
                   _RBIF 0058                     u4395 019D                     u4735 044A  
                   u3864 05AD                     u3785 0520                     u3865 05AB  
                   _PIR1 000C                     u3965 0398                     u4685 0425  
                   _RBPU 040F                     _WPUA 018E                     _WPUB 0095  
                   _WPUC 018F                     _main 078E                     btemp 007E  
                   start 000C        ___bmul@multiplier 0077          _VarPowerUpCount 0042  
   __size_of_SystemSleep 003C         __end_of_ADSample 071A          __end_of_KeyScan 00F9  
        __end_of_LockPro 04F9      SystemSleep@SleepCnt 003F         __end_of_GPIOInit 068B  
    __end_of_DisplayIcon 05A5                    ?_main 0072          __end_of___lbdiv 06CD  
        __end_of___lbmod 06B2          __end_of___lldiv 0541                    _T2CON 0012  
        __end_of___lwdiv 0647                    _ADcnt 0047                    _ADsum 0025  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _WPUA1 0C71                    _WPUA2 0C72                    _WPUB3 04AB  
                  _WPUC2 0C7A                    _WPUB4 04AC                    _WPUC3 0C7B  
                  _WPUB5 04AD                    _WPUB6 04AE                    _WPUB7 04AF  
                  _Apply 0647      ___lmul@multiplicand 0054                    _Motor 040D  
             _DisplayPro 076D      ErrPro@LedSwitchFlag 0380           __pbitbssCOMMON 0380  
                  pclath 000A                    status 0003                    wtemp0 007E  
     __size_of_USBLedPro 0055          ___lbdiv@divisor 0075          ___lbdiv@counter 0077  
        __initialization 000D         __end_of_Sec1sPro 01BF             __end_of_main 0792  
             _CurrentCnt 0046                ??_ADCRead 0066               _LowBatFlag 038D  
                 ??_main 007A              _HideNumbArr 00BE                ??_LEDScan 0072  
           USBLedPro@cnt 003C                   ?_Apply 0072      LEDScan@LEDScanIndex 003E  
                 ?_Motor 0072             _SystemONFlag 038E                ADCRead@ch 00D3  
                 _ADCON0 001F                   _ADCON1 009F                   i1S7148 0789  
                 _ADRESH 001E                   _ADRESL 009E                   _ADCVal 004A  
                 _ADCPro 0463                   _GODONE 00F9                   i1l3000 02E4  
                 i1l3001 02E7                   i1l3002 02EA                   i1l3003 02ED  
                 i1l3004 02F5                   i1l3005 02F8                   i1l3006 02FB  
                 i1l1190 06DF                   i1l6300 0310                   i1l2990 02C0  
                 i1l2991 02C3                   i1l2992 02C6                   i1l2984 02AE  
                 i1l2993 02C9                   i1l2985 02B1                   i1l2994 02CC  
                 i1l2986 02B4                   i1l6362 06D9                   i1l2995 02D2  
                 i1l2987 02B7                   i1l2996 02D5                   i1l2988 02BA  
                 i1l2997 02D8                   i1l2998 02DB                   i1l2999 02DE  
                 i1l6298 0303                   _INTCON 000B                   _OSCCON 008F  
                 _TMR2IF 0061                   _WDTCON 0105                   _TRISA1 0429  
                 _TRISA2 042A                   _TRISB3 0433                   _TRISB4 0434  
                 _TRISC2 043A                   _TRISB5 0435                   _TRISC3 043B  
                 _TRISB6 0436                   _TRISB7 0437               _TimeAddCnt 0029  
             _TimeDecCnt 002B                ??_KeyScan 0075                ??_LockPro 0075  
                 _KeyCnt 0031                   _ErrPro 0730       __size_of_Isr_Timer 001B  
            _DisplayIcon 057D                   ___bmul 075F                   ___lmul 05EA  
                 ___wmul 06E8                ??___lbdiv 0076                ??___lbmod 0076  
                 _cnt2ms 0044                ??___lldiv 0079                ??___lwdiv 0079  
        ErrPro@SwitchCnt 0035        __end_of_USBLedPro 0403       __size_of_TimerInit 000E  
              ADSample@i 0077                   saved_w 007E              ?_DisplayPro 0072  
       ___lbdiv@dividend 0076                ?_ADSample 0072          ___lbmod@divisor 0075  
__end_of__initialization 0022          ___lbmod@counter 0078                ?_GPIOInit 0072  
             _WorkLedPro 0338      ___bmul@multiplicand 0075            __end_of_Apply 066B  
         __pcstackCOMMON 0072            __end_of_Motor 045D             __pidataBANK0 0000  
           __pidataBANK1 05B7               __end_ofPL2 03A2               __end_ofPL4 0298  
             __end_ofPL6 040D               __end_ofPL8 05B2         ___lbdiv@quotient 0078  
       LockPro@SwitchCnt 0038               _SystemInit 0778                  ??_Apply 007A  
      __end_of_Isr_Timer 06E8                  ??_Motor 0079                  ?_ADCPro 0072  
             ??_ADSample 0075                ?_Sec1sPro 0072               __pbssBANK0 0020  
   LockPro@LedSwitchFlag 0381               ??_GPIOInit 0075        __end_of_TimerInit 075F  
                ?_ErrPro 0072               __pmaintext 078E                  ?___bmul 0075  
                ?___lmul 0050               ADCRead@Val 0065      __size_of_DisplayPro 000B  
                ?___wmul 0075               __pintentry 0004           ___lmul@product 0075  
                _ADCRead 01D0                  _LEDSeg1 0720                  _LEDSeg2 00A0  
                _LEDScan 029D    Sec1sPro@ActualPercent 0045                  _USBFlag 038B  
                _USBLink 0384          __size_of_ADCPro 004C               ??_Sec1sPro 0053  
             __stringtab 071A            ??_SystemSleep 0075                  _KeyScan 0024  
                _IovFlag 038C                  _LockPro 04AF                  _LockSta 0033  
            ?_WorkLedPro 0072          __size_of_ErrPro 0012                  _NumbArr 00C9  
        __size_of___bmul 000E                  ___lbdiv 06B2          __size_of___lmul 0033  
                ___lbmod 0696                  _WorkCnt 002D                  _WorkMin 007A  
                ___lldiv 04F9          __size_of___wmul 0019                  ___lwdiv 061D  
                _cnt10ms 0043       Sec1sPro@PercentErr 0055                  __ptext1 0647  
                __ptext2 0541                  __ptext3 0778                  __ptext4 0751  
                __ptext5 0670                  __ptext6 00FF                  __ptext7 061D  
                __ptext8 040D                  __ptext9 06E8           ADCRead@ad_temp 00D8  
            ?_SystemInit 0072                  _time2ms 0389                _LEDArrMap 0020  
                clrloop0 0782     end_of_initialization 0022            WorkLedPro@dir 0382  
          WorkLedPro@cnt 0039               ADSample@ch 0076          ___lldiv@divisor 0058  
        ___lldiv@counter 0064             ?_DisplayIcon 0075      __end_of_SystemSleep 057D  
        DisplayIcon@Mask 0050         ___lbmod@dividend 0077      __size_of_WorkLedPro 0059  
           ??_DisplayPro 007A                _USBLedPro 03AE           __end_of_ADCPro 04AF  
WorkLedPro@LedSwitchFlag 0383              ___lbmod@rem 0079        __size_of_ADSample 0019  
          LockPro@Ledcnt 0036        __size_of_GPIOInit 001B      __size_of_SystemInit 0009  
         __end_of_ErrPro 0742       __end_of_DisplayPro 0778           __end_of___bmul 076D  
         __end_of___lmul 061D           __end_of___wmul 0701                _OnOffFlag 0386  
            __end_ofPL10 03AE              __end_ofPL20 032C              __end_ofPL12 031E  
            __end_ofPL30 0463              __end_ofPL22 0332              __end_ofPL14 0326  
            __end_ofPL32 05B7              __end_ofPL24 0338              __end_ofPL16 0696  
            __end_ofPL34 029D              __end_ofPL26 00FF              __end_ofPL18 01CA  
            __end_ofPL36 0670              __end_ofPL28 01D0      start_initialization 000D  
             ?_USBLedPro 0072                 ??_ADCPro 0079                _Isr_Timer 06CD  
      __size_of_Sec1sPro 00C0              _SystemSleep 0541                 ??_ErrPro 0075  
               ??___bmul 0076                _TimerInit 0751                 ??___lmul 0075  
               ??___wmul 0079               init_fetch0 0742              __pdataBANK0 006A  
            __pdataBANK1 00A0                 ?_ADCRead 0065                 ?_LEDScan 0072  
            __pbssCOMMON 007A                ___latbits 0000            __pcstackBANK0 0050  
          __pcstackBANK1 00D3               ?_Isr_Timer 0072           USBLedPro@index 003D  
               ?_KeyScan 0072                 ?_LockPro 0072             ??_WorkLedPro 0050  
       ___lwdiv@dividend 0077              ADCRead@AD_H 00D4               ?_TimerInit 0072  
            ADCRead@AD_L 00D6                 ?___lbdiv 0075                 ?___lbmod 0075  
               ?___lldiv 0058     __size_of_DisplayIcon 0028                 ?___lwdiv 0075  
              __pstrings 071A                __pswtext1 0001                __pswtext2 0792  
              __pswtext3 0789             ??_SystemInit 0075                 _ADCState 0048  
         __size_of_Apply 0024              ??_USBLedPro 0050           __size_of_Motor 0050  
     __end_of_WorkLedPro 0391         ___lwdiv@quotient 0051                 _ADSample 0701  
   LockPro@LockSwitchCnt 0037        interrupt_function 0004           ___wmul@product 0050  
               _GPIOInit 0670                clear_ram0 0781           _OffHideNumbArr 00B0  
     __end_of_SystemInit 0781         __size_of_ADCRead 00B2              __stringbase 071F  
      ___wmul@multiplier 0075   WorkLedPro@LedSwitchCnt 003B         __size_of_LEDScan 0079  
               _LedIndex 002F        ___lmul@multiplier 0050              ??_Isr_Timer 0072  
               _Sec1sCnt 0040                 _KeyInBuf 0385                 _Sec1sPro 00FF  
               _KeyPress 0387                 _LockNumb 0041          WorkLedPro@index 003A  
       __size_of_KeyScan 00D5         __size_of_LockPro 004A              ??_TimerInit 0075  
       __size_of___lbdiv 001B         __size_of___lbmod 001C         __size_of___lldiv 0048  
       __size_of___lwdiv 002A                 _WorkFlag 038A       __end_of__stringtab 0720  
        ___lwdiv@divisor 0075          ___lwdiv@counter 0050                 __ptext10 0024  
               __ptext11 076D                 __ptext20 0463                 __ptext12 0338  
               __ptext21 01D0                 __ptext13 075F                 __ptext22 05EA  
               __ptext14 03AE                 __ptext23 04F9                 __ptext15 0696  
               __ptext24 0701                 __ptext16 06B2                 __ptext25 06CD  
               __ptext17 04AF                 __ptext26 029D                 __ptext18 0730  
               __ptext19 057D            __size_of_main 0004             ?_SystemSleep 0072  
               _time10ms 0388      Sec1sPro@TempPercent 0056                 init_ram0 0746  
               intlevel1 0000         ___lldiv@dividend 005C                stringcode 071A  
           DisplayIcon@i 0052         ___lldiv@quotient 0060                 stringdir 071A  
               stringtab 071A         DisplayIcon@index 0075               _BatAddTime 006B  
          ??_DisplayIcon 0077               _BatDecTime 006A  
