
# 1 "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"

# 26 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\htc.h"
extern const char __xc8_OPTIM_SPEED;

extern double __fpnormalize(double);


# 13 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 11 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\SC8P1713C.h"
volatile unsigned char INDF @ 0x000;
volatile unsigned char TMR0 @ 0x001;
volatile unsigned char PCL @ 0x002;
volatile unsigned char STATUS @ 0x003;
volatile unsigned char FLAGS @ 0x003;
volatile unsigned char FSR @ 0x004;
volatile unsigned char PORTA @ 0x005;
volatile unsigned char PORTB @ 0x006;
volatile unsigned char PORTC @ 0x007;


volatile unsigned char PORTE @ 0x009;
volatile unsigned char PCLATH @ 0x00A;
volatile unsigned char INTCON @ 0x00B;
volatile unsigned char PIR1 @ 0x00C;
volatile unsigned char PIR2 @ 0x00D;
volatile unsigned char TMR1L @ 0x00E;
volatile unsigned char TMR1H @ 0x00F;
volatile unsigned char T1CON @ 0x010;
volatile unsigned char TMR2 @ 0x011;
volatile unsigned char T2CON @ 0x012;


volatile unsigned char CCPR1L @ 0x015;
volatile unsigned char CCPR1H @ 0x016;
volatile unsigned char CCP1CON @ 0x017;

volatile unsigned char COMPCON @ 0x018;
volatile unsigned char COMPCON1 @ 0x019;


volatile unsigned char CCPR2L @ 0x01B;
volatile unsigned char CCPR2H @ 0x01C;
volatile unsigned char CCP2CON @ 0x01D;
volatile unsigned char ADRESH @ 0x01E;
volatile unsigned char ADCON0 @ 0x01F;


volatile unsigned char OPTION_REG @ 0x081;
volatile unsigned char TRISA @ 0x085;
volatile unsigned char TRISB @ 0x086;
volatile unsigned char TRISC @ 0x087;
volatile unsigned char TRISE @ 0x089;
volatile unsigned char PIE1 @ 0x08C;
volatile unsigned char PIE2 @ 0x08D;

volatile unsigned char OSCCON @ 0x08F;
volatile unsigned char OSCTUNE @ 0x090;

volatile unsigned char PR2 @ 0x092;


volatile unsigned char WPUB @ 0x095;
volatile unsigned char IOCB @ 0x096;

# 71
volatile unsigned char ADRESL @ 0x09E;
volatile unsigned char ADCON1 @ 0x09F;



volatile unsigned char WDTCON @ 0x105;

# 88
volatile unsigned char TABLE_SPH @ 0x110;
volatile unsigned char TABLE_SPL @ 0x111;
volatile unsigned char TABLE_DATAH @ 0x112;
volatile unsigned char KEYCON0 @ 0x113;
volatile unsigned char KEYCON1 @ 0x114;
volatile unsigned char KEYDATAL @ 0x115;
volatile unsigned char KEYDATAH @ 0x116;




volatile unsigned char WPUE @ 0x11A;
volatile unsigned char OPA0CON @ 0x11C;
volatile unsigned char OPA0ADJ @ 0x11D;



volatile unsigned char ANSEL @ 0x188;
volatile unsigned char ANSELH @ 0x189;



volatile unsigned char WPUA @ 0x18E;
volatile unsigned char WPUC @ 0x18F;

# 117
volatile unsigned char LCDCON0 @ 0x190;
volatile unsigned char LCDCON1 @ 0x191;

# 124
volatile unsigned char COMEN @ 0x197;



volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit PD @ ((unsigned)&STATUS*8)+3;
volatile bit TO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;


volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;


volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;


volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;


volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;
volatile bit RE3 @ ((unsigned)&PORTE*8)+3;


volatile bit RBIF @ ((unsigned)&INTCON*8)+0;

volatile bit RABIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;

volatile bit RABIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;


volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;


volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;


volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;



volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;


volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2IN0 @ ((unsigned)&CCP2CON*8)+6;
volatile bit CCP2IN1 @ ((unsigned)&CCP2CON*8)+7;


volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GODONE @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;


volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;
volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit RBPU @ ((unsigned)&OPTION_REG*8)+7;

volatile bit RABPU @ ((unsigned)&OPTION_REG*8)+7;


volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;


volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;



volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;


volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;


volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;



volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;


volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;


volatile bit WPUA0 @ ((unsigned)&WPUA*8)+0;
volatile bit WPUA1 @ ((unsigned)&WPUA*8)+1;
volatile bit WPUA2 @ ((unsigned)&WPUA*8)+2;
volatile bit WPUA3 @ ((unsigned)&WPUA*8)+3;
volatile bit WPUA4 @ ((unsigned)&WPUA*8)+4;
volatile bit WPUA5 @ ((unsigned)&WPUA*8)+5;
volatile bit WPUA6 @ ((unsigned)&WPUA*8)+6;
volatile bit WPUA7 @ ((unsigned)&WPUA*8)+7;


volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;


volatile bit WPUC0 @ ((unsigned)&WPUC*8)+0;
volatile bit WPUC1 @ ((unsigned)&WPUC*8)+1;
volatile bit WPUC2 @ ((unsigned)&WPUC*8)+2;
volatile bit WPUC3 @ ((unsigned)&WPUC*8)+3;
volatile bit WPUC4 @ ((unsigned)&WPUC*8)+4;
volatile bit WPUC5 @ ((unsigned)&WPUC*8)+5;
volatile bit WPUC6 @ ((unsigned)&WPUC*8)+6;


volatile bit WPUE0 @ ((unsigned)&WPUE*8)+0;
volatile bit WPUE1 @ ((unsigned)&WPUE*8)+1;
volatile bit WPUE2 @ ((unsigned)&WPUE*8)+2;
volatile bit WPUE3 @ ((unsigned)&WPUE*8)+3;


volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

# 389
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;


volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;




volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;
volatile bit ANS5 @ ((unsigned)&ANSEL*8)+5;
volatile bit ANS6 @ ((unsigned)&ANSEL*8)+6;
volatile bit ANS7 @ ((unsigned)&ANSEL*8)+7;


volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;


# 27 "E:\SCMCU_IDE_V2.00.08_Beta9\data\include\sc.h"
#pragma intrinsic(__nop)
extern void __nop(void);

# 76
extern unsigned int flash_read(unsigned short addr);


# 149
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);

# 184
extern unsigned char __resetbits;
extern __bit __powerdown;
extern __bit __timeout;

# 6 "C:\Users\Administrator\Desktop\project\K13-01\code\even.h"
extern bit time2ms;
extern bit time10ms;

void interrupt Isr_Timer();

# 6 "C:\Users\Administrator\Desktop\project\K13-01\code\ADC.h"
unsigned char ADSample(unsigned char);
void ADCPro();
void ADCRead(unsigned char,unsigned int *);
void Sec1sPro();

# 6 "C:\Users\Administrator\Desktop\project\K13-01\code\Key.h"
extern bit KeyLongFlag;
extern bit KeyPress;

void KeyScan();

# 6 "C:\Users\Administrator\Desktop\project\K13-01\code\Motor.h"
void Motor();

# 12 "C:\Users\Administrator\Desktop\project\K13-01\code\K13-01.h"
typedef struct
{
unsigned char LockStart:1;
unsigned char LockFail:1;
unsigned char LockEnd:1;
unsigned char UnlockStart:1;
unsigned char UnlockFail:1;
unsigned char UnlockEnd:1;
unsigned char LockFlag:1;
unsigned char reservation:2;
}TYPE_UNION_LockSta;

extern unsigned char LockNumb;

extern unsigned char BatPercent;
extern unsigned char WorkMin;

extern bit SystemONFlag;
extern bit OnOffFlag;
extern bit WorkFlag;
extern bit IovFlag;
extern bit LowBatFlag;
extern bit USBFlag;
extern bit LEDWorkFlag;
extern TYPE_UNION_LockSta LockSta;
extern unsigned char BatAddTime;
extern unsigned char BatDecTime;

void SystemSleep();
void Apply();
void SystemInit();
void GPIOInit();
void TimerInit();

# 13 "C:\Users\Administrator\Desktop\project\K13-01\code\LED.h"
void DisplayPro();
void WorkLedPro();
void USBLedPro();
void LEDScan();
void DisplayIcon(unsigned int);
void LockPro();
void ErrPro();

# 3 "C:\Users\Administrator\Desktop\project\K13-01\code\LED.c"
unsigned char NumbArr[10]={0x77,0x24,0x5D,0X6D,0X2E,0X6B,0X7B,0X25,0X7F,0X2F};
unsigned char HideNumbArr[11]={0,0x40,0x70,0x78,0x7E,0x7F,0x3F,0X0F,0x07,0X01,0};
unsigned int OffHideNumbArr[7]={0,0x12,0x5B,0X7F,0x97F,0x2DFF,0x3FFF};

# 12
const unsigned char LEDSeg1[16]={1,2,2,3,0,3,4,0,1,1,2,0,3,4,0,1};
unsigned char LEDSeg2[16]={0,1,0,1,1,0,0,2,3,2,3,3,2,2,4,4};
unsigned int LedIndex=0;
unsigned char LEDArrMap[5]={0xff,0xff,0xEf,0xff,0xff};

void LEDScan()
{
static unsigned char LEDScanIndex=0;

TRISB5=1,WPUB5=0;
TRISB4=1,WPUB4=0;
TRISB3=1,WPUB3=0;
TRISC3=1,WPUC3=0;
TRISC2=1,WPUC2=0;
asm("nop"); asm("nop");

switch(LEDScanIndex)
{
case 0:
if(LEDArrMap[0]&0x02)
{
TRISB4=0,WPUB4=0;RB4=0 ;
}
if(LEDArrMap[0]&0x04)
{
TRISB3=0,WPUB3=0;RB3=0 ;
}
if(LEDArrMap[0]&0x08)
{
TRISC3=0,WPUC3=0;RC3=0 ;
}
if(LEDArrMap[0]&0x10)
{
TRISC2=0,WPUC2=0;RC2=0 ;
}
TRISB5=0,WPUB5=0;RB5=1 ;
break;

case 1:
if(LEDArrMap[1]&0x01)
{
TRISB5=0,WPUB5=0;RB5=0 ;
}
if(LEDArrMap[1]&0x04)
{
TRISB3=0,WPUB3=0;RB3=0 ;
}
if(LEDArrMap[1]&0x08)
{
TRISC3=0,WPUC3=0;RC3=0 ;
}
if(LEDArrMap[1]&0x10)
{
TRISC2=0,WPUC2=0;RC2=0 ;
}
TRISB4=0,WPUB4=0; RB4=1 ;
break;

case 2:
if(LEDArrMap[2]&0x01)
{
TRISB5=0,WPUB5=0;RB5=0 ;
}
if(LEDArrMap[2]&0x02)
{
TRISB4=0,WPUB4=0;RB4=0 ;
}
if(LEDArrMap[2]&0x08)
{
TRISC3=0,WPUC3=0;RC3=0 ;
}
if(LEDArrMap[2]&0x10)
{
TRISC2=0,WPUC2=0;RC2=0 ;
}
TRISB3=0,WPUB3=0;RB3=1 ;
break;

case 3:
if(LEDArrMap[3]&0x01)
{
TRISB5=0,WPUB5=0;RB5=0 ;
}
if(LEDArrMap[3]&0x02)
{
TRISB4=0,WPUB4=0;RB4=0 ;
}
if(LEDArrMap[3]&0x04)
{
TRISB3=0,WPUB3=0;RB3=0 ;
}
TRISC3=0,WPUC3=0;RC3=1 ;
break;

case 4:
if(LEDArrMap[4]&0x01)
{
TRISB5=0,WPUB5=0;RB5=0 ;
}
if(LEDArrMap[4]&0x04)
{
TRISB3=0,WPUB3=0;RB3=0 ;
}
TRISC2=0,WPUC2=0;RC2=1 ;
}
LEDScanIndex++;
if(LEDScanIndex>=5)
{
LEDScanIndex=0;
}
}

void DisplayIcon(unsigned int index)
{
unsigned char i=0;
unsigned int Mask=0x01;

for(i=0;i<16;i++)
{
if(index&Mask)
{
LEDArrMap[LEDSeg1[i]]|=(1<<LEDSeg2[i]);
}
else
{
LEDArrMap[LEDSeg1[i]]&=~(1<<LEDSeg2[i]);
}

Mask<<=1;
}
}

void DisplayPro()
{
LedIndex=0;
WorkLedPro();
USBLedPro();
LockPro();
ErrPro();
DisplayIcon(LedIndex);
}

void USBLedPro()
{
static unsigned char index=0;
static unsigned char cnt=0;

if(USBFlag&&!WorkFlag&&!OnOffFlag)
{
cnt++;
if(cnt>=40)
{
cnt=0;
index++;
if(index>=11)
{
index=0;
}
}
if(BatPercent<99)
{
LedIndex=NumbArr[BatPercent/10];
LedIndex|=((unsigned int)NumbArr[BatPercent%10]&~HideNumbArr[index])<<7;
LedIndex&=~HideNumbArr[index];
}
else
{
index=0;
LedIndex=NumbArr[BatPercent/10];
LedIndex|=NumbArr[BatPercent%10]<<7;
}

}
else
{
index=0;
cnt=0;
}
}

void WorkLedPro()
{
static char LedSwitchCnt=0;
static bit LedSwitchFlag=0;
static char index=0;
static unsigned char cnt=0;
static bit dir=0;
if(LEDWorkFlag&&!OnOffFlag&&!LockSta.LockFlag&&!LockSta.LockStart&&(!USBFlag||WorkFlag))
{
if(BatPercent<=10&&WorkFlag)
{
LedSwitchCnt++;
if(LedSwitchCnt>=80)
{
LedSwitchCnt=0;
LedSwitchFlag=!LedSwitchFlag;
}
}
else
{
LedSwitchCnt=0;
LedSwitchFlag=1;
}
if(LedSwitchFlag)
{
LedIndex=NumbArr[BatPercent/10];
LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
}
}
else if(OnOffFlag)
{
cnt++;
if(cnt>=40)
{
cnt=0;
index++;
if(index>=7)
{
if(dir)
{
OnOffFlag=0;
WorkMin=0;
return;
}
dir=!dir;
index=0;
}
}
if(!dir)
{
LedIndex=NumbArr[BatPercent/10];
LedIndex|=(unsigned int)NumbArr[BatPercent%10]<<7;
LedIndex&=~OffHideNumbArr[index];
}
else
{
LedIndex=NumbArr[WorkMin/10];
LedIndex|=(unsigned int)NumbArr[WorkMin%10]<<7;
LedIndex&=~OffHideNumbArr[6-index];
}
}
}

void LockPro()
{
static unsigned char SwitchCnt=0,LockSwitchCnt=0;
static unsigned char Ledcnt=0;
static bit LedSwitchFlag=0;
if(!USBFlag)
{
if(LockSta.LockStart||LockSta.UnlockStart)
{
SwitchCnt++;
if(SwitchCnt>=100)
{
SwitchCnt=0;
if(LockNumb>0)
{
LockNumb--;
}
}
LedIndex=NumbArr[0];
LedIndex|=(unsigned int)NumbArr[LockNumb+1]<<7;
}
else
{
SwitchCnt=0;
}
if(LockSta.LockEnd||LockSta.UnlockFail||LockSta.UnlockStart)
{
LockSwitchCnt++;
if(LockSwitchCnt>=35)
{
LockSwitchCnt=0;
LedSwitchFlag=!LedSwitchFlag;
if(!LedSwitchFlag&&LockSta.UnlockFail)
{
Ledcnt++;
if(Ledcnt>=3)
{
LockSta.UnlockFail=0;
}
}
}
if(LedSwitchFlag)
{
LedIndex|=0x8000;
}
}
else
{
Ledcnt=0;
LockSwitchCnt=0;
}
}
}

void ErrPro()
{
static unsigned char SwitchCnt=0;
static bit LedSwitchFlag=0;
if(IovFlag)
{
SwitchCnt++;
if(SwitchCnt>=35)
{
SwitchCnt=0;
LedSwitchFlag=!LedSwitchFlag;

}
if(LedSwitchFlag)
{
LedIndex=0x4000;
}
}
else
{
SwitchCnt=0;
}
}
